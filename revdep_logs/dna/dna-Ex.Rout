
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dna"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "dna-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('dna')
dna 1.1-1 loaded
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PCnet")
> ### * PCnet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: PCnet
> ### Title: Principal Components network
> ### Aliases: PCnet
> 
> ### ** Examples
> 
> # small example using PCnet with 3 principal components,
> # data rescaled, and scores symmetrized but not rescaled
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> s=PCnet(X1)
> print(round(s,4))
        Gene 1  Gene 2  Gene 3  Gene 4  Gene 5  Gene 6
Gene 1  1.0000  0.2183  0.0675  0.0706 -0.8274 -0.4448
Gene 2  0.2183  1.0000 -0.3140 -0.6345  0.2418 -0.5375
Gene 3  0.0675 -0.3140  1.0000 -1.0032 -0.4588  0.4224
Gene 4  0.0706 -0.6345 -1.0032  1.0000 -0.3830  0.1748
Gene 5 -0.8274  0.2418 -0.4588 -0.3830  1.0000  0.0200
Gene 6 -0.4448 -0.5375  0.4224  0.1748  0.0200  1.0000
> 
> # small example using PCnet with 2 principal components,
> # data rescaled, and scores symmetrized and rescaled
> s2=PCnet(X1,ncom=2,rescale.data=TRUE,symmetrize.scores=TRUE,rescale.scores=TRUE)
> print(round(s2,4))
        Gene 1  Gene 2  Gene 3  Gene 4  Gene 5  Gene 6
Gene 1  1.0000  0.4270  0.4875 -0.6257 -0.5171 -0.4339
Gene 2  0.4270  1.0000 -0.5587 -0.4244  0.2439 -1.0000
Gene 3  0.4875 -0.5587  1.0000 -0.1300 -0.9700  0.4109
Gene 4 -0.6257 -0.4244 -0.1300  1.0000  0.4455  0.5027
Gene 5 -0.5171  0.2439 -0.9700  0.4455  1.0000 -0.2015
Gene 6 -0.4339 -1.0000  0.4109  0.5027 -0.2015  1.0000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("PCnet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("PLSnet")
> ### * PLSnet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: PLSnet
> ### Title: Partial Least Squares network
> ### Aliases: PLSnet
> 
> ### ** Examples
> 
> # small example using PLSnet with 3 latent PLS components,
> # data rescaled, and scores symmetrized but not rescaled
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> s=PLSnet(X1)
> print(round(s,4))
        Gene 1  Gene 2  Gene 3  Gene 4  Gene 5  Gene 6
Gene 1  1.0000  0.2233  0.0760  0.0684 -0.6426 -0.4136
Gene 2  0.2233  1.0000 -0.2730 -0.4897  0.1553 -0.5104
Gene 3  0.0760 -0.2730  1.0000 -0.7279 -0.3966  0.3394
Gene 4  0.0684 -0.4897 -0.7279  1.0000 -0.2712  0.1311
Gene 5 -0.6426  0.1553 -0.3966 -0.2712  1.0000  0.0702
Gene 6 -0.4136 -0.5104  0.3394  0.1311  0.0702  1.0000
> 
> # small example using PLSnet with 2 latent PLS components,
> # data rescaled, and scores symmetrized and rescaled
> s2=PLSnet(X1,ncom=2,rescale.data=TRUE,symmetrize.scores=TRUE,rescale.scores=TRUE)
> print(round(s2,4))
        Gene 1  Gene 2  Gene 3  Gene 4  Gene 5  Gene 6
Gene 1  1.0000  0.2571  0.1775  0.0016 -0.7549 -0.4211
Gene 2  0.2571  1.0000 -0.4443 -0.5476  0.2803 -0.7164
Gene 3  0.1775 -0.4443  1.0000 -1.0000 -0.6288  0.5013
Gene 4  0.0016 -0.5476 -1.0000  1.0000 -0.2044  0.1672
Gene 5 -0.7549  0.2803 -0.6288 -0.2044  1.0000 -0.1049
Gene 6 -0.4211 -0.7164  0.5013  0.1672 -0.1049  1.0000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("PLSnet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RRnet")
> ### * RRnet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RRnet
> ### Title: Ridge Regression network
> ### Aliases: RRnet
> 
> ### ** Examples
> 
> # small example using RRnet with penalty parameter 1,
> # data rescaled, and scores symmetrized but not rescaled
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> s=RRnet(X1)
> print(round(s,4))
        Gene 1  Gene 2  Gene 3  Gene 4  Gene 5  Gene 6
Gene 1  1.0000  0.1906  0.1068 -0.0995 -0.5417 -0.3270
Gene 2  0.1906  1.0000 -0.2524 -0.3590  0.1680 -0.4527
Gene 3  0.1068 -0.2524  1.0000 -0.4673 -0.3932  0.3004
Gene 4 -0.0995 -0.3590 -0.4673  1.0000 -0.0760  0.1702
Gene 5 -0.5417  0.1680 -0.3932 -0.0760  1.0000 -0.0105
Gene 6 -0.3270 -0.4527  0.3004  0.1702 -0.0105  1.0000
> 
> # small example using RRnet with penalty parameter 3,
> # data rescaled, and scores symmetrized and rescaled
> s2=RRnet(X1,lambda=3,rescale.data=TRUE,symmetrize.scores=TRUE,rescale.scores=TRUE)
> print(round(s2,4))
        Gene 1  Gene 2  Gene 3  Gene 4  Gene 5  Gene 6
Gene 1  1.0000  0.4418  0.3009 -0.3899 -0.9939 -0.6644
Gene 2  0.4418  1.0000 -0.5307 -0.6716  0.3124 -1.0000
Gene 3  0.3009 -0.5307  1.0000 -0.7075 -0.8641  0.5751
Gene 4 -0.3899 -0.6716 -0.7075  1.0000  0.0608  0.4285
Gene 5 -0.9939  0.3124 -0.8641  0.0608  1.0000 -0.0533
Gene 6 -0.6644 -1.0000  0.5751  0.4285 -0.0533  1.0000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RRnet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cornet")
> ### * cornet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cornet
> ### Title: Correlation network
> ### Aliases: cornet
> 
> ### ** Examples
> 
> # small example using cornet without rescaled scores
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> s=cornet(X1)
> print(round(s,4))
        Gene 1  Gene 2  Gene 3  Gene 4  Gene 5  Gene 6
Gene 1  1.0000  0.5089  0.3534 -0.6147 -0.7502 -0.6307
Gene 2  0.5089  1.0000 -0.4374 -0.6083  0.1827 -0.9764
Gene 3  0.3534 -0.4374  1.0000 -0.3977 -0.7864  0.4131
Gene 4 -0.6147 -0.6083 -0.3977  1.0000  0.2964  0.5426
Gene 5 -0.7502  0.1827 -0.7864  0.2964  1.0000 -0.0388
Gene 6 -0.6307 -0.9764  0.4131  0.5426 -0.0388  1.0000
> 
> # small example using cornet with rescaled scores
> s2=cornet(X1,rescale.scores=TRUE)
> print(round(s2,4))
        Gene 1  Gene 2  Gene 3  Gene 4  Gene 5  Gene 6
Gene 1  1.0000  0.5212  0.3619 -0.6295 -0.7683 -0.6460
Gene 2  0.5212  1.0000 -0.4480 -0.6230  0.1871 -1.0000
Gene 3  0.3619 -0.4480  1.0000 -0.4073 -0.8054  0.4231
Gene 4 -0.6295 -0.6230 -0.4073  1.0000  0.3036  0.5557
Gene 5 -0.7683  0.1871 -0.8054  0.3036  1.0000 -0.0398
Gene 6 -0.6460 -1.0000  0.4231  0.5557 -0.0398  1.0000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cornet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gennet")
> ### * gennet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gennet
> ### Title: General Regression network
> ### Aliases: gennet
> 
> ### ** Examples
> 
> # small example using gennet with a user-defined ridge regression
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> 
> ## Not run: ourRR=function(X,y,lambda=1){
> ## solve(t(X)%*%X+diag(ncol(X)))%*%t(X)%*%y}
> ## Not run: gennet(X1,f=ourRR,recenter.data=
> ## TRUE,rescale.data=TRUE,symmetrize.scores=
> ## TRUE,rescale.scores=FALSE)
> 
> # compare results with RRnet
> RRnet(X1)
            Gene 1     Gene 2     Gene 3      Gene 4      Gene 5      Gene 6
Gene 1  1.00000000  0.1906433  0.1067968 -0.09945025 -0.54173388 -0.32701844
Gene 2  0.19064327  1.0000000 -0.2524107 -0.35897686  0.16801483 -0.45271537
Gene 3  0.10679677 -0.2524107  1.0000000 -0.46725320 -0.39324949  0.30038972
Gene 4 -0.09945025 -0.3589769 -0.4672532  1.00000000 -0.07595894  0.17017369
Gene 5 -0.54173388  0.1680148 -0.3932495 -0.07595894  1.00000000 -0.01052966
Gene 6 -0.32701844 -0.4527154  0.3003897  0.17017369 -0.01052966  1.00000000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gennet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.common.networks-methods")
> ### * get.common.networks-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.common.networks-methods
> ### Title: Method for Function 'get.common.networks'
> ### Aliases: get.common.networks get.common.networks-modules
> ###   get.common.networks,pairOfNetworks
> ### Keywords: methods modules
> 
> ### ** Examples
> 
> # small example illustrating how a pair of networks is
> # preprocessed to obtain and align a set of common genes
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> networks=new("pairOfNetworks",network1=X1,network2=X2)
> get.common.networks(networks)
$network1
       G2  G3  G4  G5  G6
[1,]  6.7 4.5 2.3 8.4 3.1
[2,]  0.7 4.0 9.1 6.6 7.1
[3,] -1.2 7.5 3.8 1.0 9.3
[4,]  7.6 5.4 2.3 1.1 0.2

$network2
      G2  G3  G4  G5  G6
[1,] 4.5 1.2 4.5 5.6 6.8
[2,] 1.2 5.5 5.6 3.4 0.1
[3,] 6.8 3.7 4.3 1.2 7.0
[4,] 6.6 0.9 3.1 7.2 6.9
[5,] 0.6 6.7 9.8 5.5 1.3

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.common.networks-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.modules-methods")
> ### * get.modules-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.modules-methods
> ### Title: Methods for Function 'get.modules'
> ### Aliases: get.modules get.modules-methods get.modules,modules
> ### Keywords: methods modules
> 
> ### ** Examples
> 
> # artificial example to show how to obtain modules from a matrix of
> # connectivity scores
> set.seed(26)
> s=matrix(runif(100,-1,1),10,10);diag(s)=1;s=round((s+t(s))/2,1)
> the.modules=network.modules(s,m=3,epsilon=.7)
> the.modules
Module 1: 
Gene 1,Gene 3,Gene 7

Module 2: 
Gene 4,Gene 8,Gene 9,Gene 10

> 
> # method for extracting the modules
> get.modules(the.modules)
 Gene 1  Gene 2  Gene 3  Gene 4  Gene 5  Gene 6  Gene 7  Gene 8  Gene 9 Gene 10 
      1       0       1       2       0       0       1       2       2       2 
Levels: 0 1 2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.modules-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.network1-methods")
> ### * get.network1-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.network1-methods
> ### Title: Method for Function 'get.network1'
> ### Aliases: get.network1 get.network1-methods get.network1,pairOfNetworks
> ### Keywords: methods modules
> 
> ### ** Examples
> 
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> networks=new("pairOfNetworks",network1=X1,network2=X2)
> get.network1(networks)
      G1   G2  G3  G4  G5  G6
[1,] 2.5  6.7 4.5 2.3 8.4 3.1
[2,] 1.2  0.7 4.0 9.1 6.6 7.1
[3,] 4.3 -1.2 7.5 3.8 1.0 9.3
[4,] 9.5  7.6 5.4 2.3 1.1 0.2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.network1-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.network2-methods")
> ### * get.network2-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.network2-methods
> ### Title: Method for Function 'get.network2'
> ### Aliases: get.network2 get.network2-methods get.network2,pairOfNetworks
> ### Keywords: methods modules
> 
> ### ** Examples
> 
> # small example illustrating how a pair of networks is
> # preprocessed to align a set of common genes and extract network 2
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> networks=new("pairOfNetworks",network1=X1,network2=X2)
> get.network2(networks)
      G8  G7  G6  G5  G4  G3  G2
[1,] 4.5 2.4 6.8 5.6 4.5 1.2 4.5
[2,] 7.6 9.0 0.1 3.4 5.6 5.5 1.2
[3,] 8.3 4.5 7.0 1.2 4.3 3.7 6.8
[4,] 3.4 1.1 6.9 7.2 3.1 0.9 6.6
[5,] 3.4 2.2 1.3 5.5 9.8 6.7 0.6
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.network2-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.results-methods")
> ### * get.results-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.results-methods
> ### Title: Method for Function 'get.results'
> ### Aliases: get.results get.results-methods get.results,resultsIndTest
> ###   get.results,resultsClassTest get.results,resultsModTest
> ### Keywords: methods tests
> 
> ### ** Examples
> 
> # small example illustrating test procedures
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> 
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> 
> # perform a test for differential connectivity of individual genes 
> # with PLS connectivity scores and squared distances
> ## Not run: tig=test.individual.genes(X1,X2)
> ## Not run: results.tig=get.results(tig)
> ## Not run: results.tig
> 
> # perform a test for differential connectivity of all genes 
> # with PLS connectivity scores and squared distances
> ## Not run: tcg=test.class.genes(X1,X2)
> ## Not run: results.tcg=get.results(tcg)
> ## Not run: results.tcg
> 
> # perform a test for modular structure using a minimum module size of 2
> # and threshold of .5 with PLS connectivity scores
> ## Not run: test.modular.structure(X1,X2,min.module.size=2)
> ## Not run: results.tms=get.results(tms)
> ## Not run: results.tms
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.results-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("modules-class")
> ### * modules-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: modules-class
> ### Title: Class '"modules"'
> ### Aliases: modules-class show,modules-method summary,modules-method
> ###   get.modules,modules-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # artificial example to show how to obtain modules from a matrix of
> # connectivity scores
> set.seed(26)
> s=matrix(runif(100,-1,1),10,10);diag(s)=1;s=round((s+t(s))/2,1)
> the.modules=network.modules(s,m=3,epsilon=.7)
> the.modules
Module 1: 
Gene 1,Gene 3,Gene 7

Module 2: 
Gene 4,Gene 8,Gene 9,Gene 10

> 
> # summary method useful for large networks
> summary(the.modules)
Class: modules
3 genes in Module 1 
4 genes in Module 2 
> 
> # method for extracting the modules
> get.modules(the.modules)
 Gene 1  Gene 2  Gene 3  Gene 4  Gene 5  Gene 6  Gene 7  Gene 8  Gene 9 Gene 10 
      1       0       1       2       0       0       1       2       2       2 
Levels: 0 1 2
> 
> # plot a graph of the modules
> ## Not run: network.modules(s,m=3,epsilon=.7,plot=TRUE)
> ## Not run: tkplot.close('1')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("modules-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("network.modules")
> ### * network.modules
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: network.modules
> ### Title: Determine modules for network
> ### Aliases: network.modules
> 
> ### ** Examples
> 
> # artificial example to show how to obtain modules from a matrix of
> # connectivity scores
> set.seed(26)
> s=matrix(runif(100,-1,1),10,10);diag(s)=1;s=round((s+t(s))/2,1)
> the.modules=network.modules(s,m=3,epsilon=.7)
> the.modules
Module 1: 
Gene 1,Gene 3,Gene 7

Module 2: 
Gene 4,Gene 8,Gene 9,Gene 10

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("network.modules", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pairOfNetworks-class")
> ### * pairOfNetworks-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pairOfNetworks-class
> ### Title: Class '"pairOfNetworks"'
> ### Aliases: pairOfNetworks-class get.common.networks,pairOfNetworks-method
> ###   get.network1,pairOfNetworks-method get.network2,pairOfNetworks-method
> ###   show,pairOfNetworks-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # small example illustrating how a pair of networks is
> # preprocessed to obtain and align a set of common genes
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> networks=new("pairOfNetworks",network1=X1,network2=X2)
> get.common.networks(networks)
$network1
       G2  G3  G4  G5  G6
[1,]  6.7 4.5 2.3 8.4 3.1
[2,]  0.7 4.0 9.1 6.6 7.1
[3,] -1.2 7.5 3.8 1.0 9.3
[4,]  7.6 5.4 2.3 1.1 0.2

$network2
      G2  G3  G4  G5  G6
[1,] 4.5 1.2 4.5 5.6 6.8
[2,] 1.2 5.5 5.6 3.4 0.1
[3,] 6.8 3.7 4.3 1.2 7.0
[4,] 6.6 0.9 3.1 7.2 6.9
[5,] 0.6 6.7 9.8 5.5 1.3

> 
> # extract network 1
> get.network1(networks)
      G1   G2  G3  G4  G5  G6
[1,] 2.5  6.7 4.5 2.3 8.4 3.1
[2,] 1.2  0.7 4.0 9.1 6.6 7.1
[3,] 4.3 -1.2 7.5 3.8 1.0 9.3
[4,] 9.5  7.6 5.4 2.3 1.1 0.2
> # extract network 2
> get.network2(networks)
      G8  G7  G6  G5  G4  G3  G2
[1,] 4.5 2.4 6.8 5.6 4.5 1.2 4.5
[2,] 7.6 9.0 0.1 3.4 5.6 5.5 1.2
[3,] 8.3 4.5 7.0 1.2 4.3 3.7 6.8
[4,] 3.4 1.1 6.9 7.2 3.1 0.9 6.6
[5,] 3.4 2.2 1.3 5.5 9.8 6.7 0.6
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pairOfNetworks-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("resultsClassTest-class")
> ### * resultsClassTest-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: resultsClassTest-class
> ### Title: Class '"resultsClassTest"'
> ### Aliases: resultsClassTest-class show,resultsClassTest-method
> ###   get.results,resultsClassTest-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> # small example illustrating test procedures
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> 
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> 
> # perform a test for differential connectivity of all genes 
> # with PLS connectivity scores and squared distances
> ## Not run: tcg=test.class.genes(X1,X2)
> ## Not run: results.tcg=get.results(tcg)
> ## Not run: results.tcg
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("resultsClassTest-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("resultsIndTest-class")
> ### * resultsIndTest-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: resultsIndTest-class
> ### Title: Class '"resultsIndTest"'
> ### Aliases: resultsIndTest-class get.results,resultsIndTest-method
> ###   summary,resultsIndTest-method show,resultsIndTest-method
> ### Keywords: classes tests
> 
> ### ** Examples
> 
> # small example illustrating test procedures
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> 
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> 
> # perform a test for differential connectivity of individual genes 
> # with PLS connectivity scores and squared distances
> ## Not run: tig=test.individual.genes(X1,X2)
> ## Not run: summary(tig)
> 
> # extract results for a test for differential connectivity of individual genes
> ## Not run: results.tig=get.results(tig)
> ## Not run: results.tig
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("resultsIndTest-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("resultsModTest-class")
> ### * resultsModTest-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: resultsModTest-class
> ### Title: Class '"resultsModTest"'
> ### Aliases: resultsModTest-class get.results,resultsModTest-method
> ###   summary,resultsModTest-method show,resultsModTest-method
> ### Keywords: classes tests
> 
> ### ** Examples
> 
> # small example illustrating test procedures
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> 
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> 
> # perform a test for modular structure using a minimum module size of 2
> # and threshold of .5 with PLS connectivity scores
> ## Not run: test.modular.structure(X1,X2,min.module.size=2)
> ## Not run: summary(tms)
> 
> # extract results for a test of modular structure
> ## Not run: results.tms=get.results(tms)
> ## Not run: results.tms
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("resultsModTest-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary-methods")
> ### * summary-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary-methods
> ### Title: Methods for Function 'summary'
> ### Aliases: summary summary-methods summary,modules summary,resultsIndTest
> ###   summary,resultsModTest
> ### Keywords: methods tests
> 
> ### ** Examples
> 
> # artificial example to show how to obtain a summary of the modules from a 
> # matrix of connectivity scores
> set.seed(26)
> s=matrix(runif(100,-1,1),10,10);diag(s)=1;s=round((s+t(s))/2,1)
> the.modules=network.modules(s,m=3,epsilon=.7)
> summary(the.modules)
Class: modules
3 genes in Module 1 
4 genes in Module 2 
> 
> # small example illustrating test procedures
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> 
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> 
> # perform a test for differential connectivity of individual genes 
> # with PLS connectivity scores and squared distances
> ## Not run: tig=test.individual.genes(X1,X2)
> ## Not run: summary(tig)
> 
> # perform a test for modular structure using a minimum module size of 2
> # and threshold of .5 with PLS connectivity scores
> ## Not run: test.modular.structure(X1,X2,min.module.size=2)
> ## Not run: summary(tms)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("test.class.genes")
> ### * test.class.genes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: test.class.genes
> ### Title: Test for differential connectivity of a class of genes
> ### Aliases: test.class.genes
> 
> ### ** Examples
> 
> # small example illustrating test procedures
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> 
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> 
> # perform a test for differential connectivity of all genes 
> # with PLS connectivity scores and squared distances
> ## Not run: tcg=test.class.genes(X1,X2)
> ## Not run: results.tcg=get.results(tcg)
> ## Not run: results.tcg
> 
> # perform a test for differential connectivity of a selected group of 
> # genes with PLS connectivity scores without rescaling the data,
> # symmetrizing the scores, or rescaling the scores and with squared distances
> # based on 10000 permutations
> ## Not run: our.genes=c(1,3)
> ## Not run: tcg2=test.class.genes(X1,X2,genelist=our.genes,scores="PLS",
> ## distance="sqr",num.permutations=10000,rescale.data=FALSE,
> ## symmetrize.scores=FALSE,rescale.scores=FALSE)
> ## Not run: tcg2
> ## 
> ## or, equivalently
> ##
> ## Not run: our.genes=c("G2","G4")
> ## Not run: tcg2=test.class.genes(X1,X2,genelist=our.genes,scores="PLS",
> ## distance="abs",num.permutations=10000,rescale.data=FALSE,
> ## symmetrize.scores=FALSE,rescale.scores=FALSE)
> ## Not run: tcg2
> 
> # perform a test for differential connectivity of all genes
> # with PLS connectivity scores and with custom distances
> ## Not run: our.dist=function(score1,score2){pmin(abs(score1-score2),1)}
> ## Not run: tcg3=test.class.genes(X1,X2,scores=PLSnet,distance=our.dist)
> ## Not run: tcg3
> 
> # perform a test for differential connectivity of all genes 
> # with correlation connectivity scores
> ## Not run: tcg4=test.class.genes(X1,X2,scores="cor")
> ## Not run: tcg4
> 
> # perform a test for differential connectivity of all genes 
> # with principal components regression connectivity scores
> ## Not run: tcg5=test.class.genes(X1,X2,scores="PC")
> ## Not run: tcg5
> 
> # perform a test for differential connectivity of individual genes 
> # with ridge regression connectivity scores with rescaled data,
> # symmetrized and rescaled scores and a penalty parameter equal to 3
> ## Not run: tcg6=test.class.genes(X1,X2,scores="RR",rescale.scores=TRUE,
> ## lambda=3)
> ## Not run: tcg6
> 
> # perform a test for differential connectivity of individual genes  
> # with custom ridge regression connectivity scores with 
> # centered and rescaled data and symmetrized and rescaled scores
> ## Not run: ourRR=function(X,y,lambda=3){
> ## solve(t(X)%*%X+lambda*diag(ncol(X)))%*%t(X)%*%y}
> ## Not run: ourRRnet=function(X){gennet(X,f=ourRR,recenter.data=TRUE,
> ## rescale.data=TRUE,symmetrize.scores=TRUE,rescale.scores=TRUE)}
> ## Not run: tcg7=test.class.genes(X1,X2,scores=ourRRnet)
> ## Not run: tcg7
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("test.class.genes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("test.individual.genes")
> ### * test.individual.genes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: test.individual.genes
> ### Title: Test for differential connectivity of individual genes
> ### Aliases: test.individual.genes
> 
> ### ** Examples
> 
> # small example illustrating test procedures
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> 
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> 
> # perform a test for differential connectivity of individual genes 
> # with PLS connectivity scores and squared distances
> ## Not run: tig=test.individual.genes(X1,X2)
> ## Not run: summary(tig)
> 
> # extract results for a test for differential connectivity of individual genes
> ## Not run: results.tig=get.results(tig)
> ## Not run: results.tig
> 
> # perform a test for differential connectivity of individual genes 
> # with PLS connectivity scores without rescaling the data,
> # symmetrizing the scores, or rescaling the scores and with squared distances
> # based on 10000 permutations
> ## Not run: tig2=test.individual.genes(X1,X2,scores="PLS",distance="sqr",
> ## num.permutations=10000,rescale.data=FALSE,symmetrize.scores=FALSE,
> ## rescale.scores=FALSE)
> ## Not run: summary(tig2)
> 
> # perform a test for differential connectivity of individual genes 
> # with PLS connectivity scores and with custom distances
> ## Not run: our.dist=function(score1,score2){pmin(abs(score1-score2),1)}
> ## Not run: tig3=test.individual.genes(X1,X2,scores=PLSnet,distance=our.dist)
> ## Not run: summary(tig3)
> 
> # perform a test for differential connectivity of individual genes 
> # with correlation connectivity scores
> ## Not run: tig4=test.individual.genes(X1,X2,scores="cor")
> ## Not run: summary(tig4)
> 
> # perform a test for differential connectivity of individual genes 
> # with principal components regression connectivity scores
> ## Not run: tig5=test.individual.genes(X1,X2,scores="PC")
> ## Not run: summary(tig5)
> 
> # perform a test for differential connectivity of individual genes 
> # with ridge regression connectivity scores with rescaled data,
> # symmetrized and rescaled scores and a penalty parameter equal to 3
> ## Not run: tig6=test.individual.genes(X1,X2,scores="RR",
> ## rescale.scores=TRUE,lambda=3)
> ## Not run: summary(tig6)
> 
> # perform a test for differential connectivity of individual genes  
> # with custom ridge regression connectivity scores with 
> # centered and rescaled data and symmetrized and rescaled scores
> ## Not run: ourRR=function(X,y,lambda=3){
> ## solve(t(X)%*%X+lambda*diag(ncol(X)))%*%t(X)%*%y}
> ## Not run: ourRRnet=function(X){gennet(X,f=ourRR,recenter.data=TRUE,
> ## rescale.data=TRUE,symmetrize.scores=TRUE,rescale.scores=TRUE)}
> ## Not run: tig7=test.individual.genes(X1,X2,scores=ourRRnet)
> ## Not run: summary(tig7)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("test.individual.genes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("test.modular.structure")
> ### * test.modular.structure
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: test.modular.structure
> ### Title: Test for differential modular structures
> ### Aliases: test.modular.structure
> 
> ### ** Examples
> 
> # small example illustrating test procedures
> X1=rbind(
+ c(2.5,6.7,4.5,2.3,8.4,3.1),
+ c(1.2,0.7,4.0,9.1,6.6,7.1),
+ c(4.3,-1.2,7.5,3.8,1.0,9.3),
+ c(9.5,7.6,5.4,2.3,1.1,0.2))
> colnames(X1)=paste("G",1:6,sep="")
> 
> X2=rbind(
+ c(4.5,2.4,6.8,5.6,4.5,1.2,4.5),
+ c(7.6,9.0,0.1,3.4,5.6,5.5,1.2),
+ c(8.3,4.5,7.0,1.2,4.3,3.7,6.8),
+ c(3.4,1.1,6.9,7.2,3.1,0.9,6.6),
+ c(3.4,2.2,1.3,5.5,9.8,6.7,0.6))
> colnames(X2)=paste("G",8:2,sep="")
> 
> # perform a test for modular structure using a minimum module size of 2
> # and threshold of .5 with PLS connectivity scores
> ## Not run: tms=test.modular.structure(X1,X2,min.module.size=2)
> ## Not run: summary(tms)
> 
> # extract results for a test of modular structure
> ## Not run: results.tms=get.results(tms)
> ## Not run: results.tms
> 
> # perform a test for modular structure using a minimum module size of 2
> # and threshold of .5 with PLS connectivity scores without rescaling the data,
> # symmetrizing the scores, or rescaling the scores based on 10000 permutations
> ## Not run: tms2=test.modular.structure(X1,X2,scores="PLS",min.module.size=2,
> ## num.permutations=10000,rescale.data=FALSE,symmetrize.scores=FALSE,
> ## rescale.scores=FALSE)
> ## Not run: summary(tms2)
> 
> # perform a test for modular structure using a minimum module size of 2
> # and threshold of .5 with correlation connectivity scores
> ## Not run: tms3=test.modular.structure(X1,X2,scores="cor",min.module.size=2)
> ## Not run: summary(tms3)
> 
> # perform a test for modular structure using a minimum module size of 3
> # and threshold of .7 with principal components regression connectivity scores
> ## Not run: tms4=test.modular.structure(X1,X2,scores="PC",min.module.size=3,
> ## epsilon=.7)
> ## Not run: summary(tms4)
> 
> # perform a test for modular structure using a minimum module size of 2
> # and threshold of .9 with ridge regression connectivity scores with 
> # rescaled data, symmetrized and rescaled scores and a penalty parameter 
> # equal to 3
> ## Not run: tms5=test.modular.structure(X1,X2,scores="RR",min.module.size=2,
> ## epsilon=.5,rescale.scores=TRUE,lambda=3)
> ## Not run: summary(tms5)
> 
> # perform a test for modular structure using a minimum module size of 2 and 
> # threshold of .9 with custom ridge regression connectivity scores with 
> # centered and rescaled data and symmetrized and rescaled scores
> ## Not run: ourRR=function(X,y,lambda=3){
> ## solve(t(X)%*%X+lambda*diag(ncol(X)))%*%t(X)%*%y}
> ## Not run: ourRRnet=function(X){gennet(X,f=ourRR,recenter.data=TRUE,
> ## rescale.data=TRUE,symmetrize.scores=TRUE,rescale.scores=TRUE)}
> ## Not run: tms6=test.modular.structure(X1,X2,scores=ourRRnet,
> ## min.module.size=2,epsilon=.9)
> ## Not run: summary(tms6)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("test.modular.structure", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.161 0.008 0.169 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
