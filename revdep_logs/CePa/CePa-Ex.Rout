
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "CePa"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "CePa-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('CePa')
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: snow
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CePa-package")
> ### * CePa-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CePa-package
> ### Title: Centrality-based pathway enrichment
> ### Aliases: CePa CePa-package
> ### Keywords: package
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # load the pathway database
> ##D data(PID.db)
> ##D 
> ##D # if you only have a differential gene list or other genes of interest
> ##D # in form of a list, you can apply the centrality-extended ORA method
> ##D res = cepa.all(dif = dif, bk = bk, pc = PID.db$NCI)
> ##D # in the above code, dif is your differential gene list, bk is your background
> ##D # gene list which always be whole set of genes on a certain microarray. If you 
> ##D # do not have a background gene list, do not set it and the function would use
> ##D # the whole human genome genes as default. pc is the pathway catalogue which in
> ##D # this example is the NCI catalogue gathered from PID database.
> ##D 
> ##D # after about 20 min, you can obtain a detailed report of the analysis
> ##D report(res)
> ##D 
> ##D                
> ##D # if you have a complete gene expression data, you can apply the centrality-extended
> ##D # GSA methods
> ##D res = cepa.all(mat = mat, label = label, pc = PID.db$NCI)
> ##D # mat is your expression value matrix, label is the design of the microarray experiment.
> ##D # By default, we use absolute value of t-value as the statistic for each gene and
> ##D # use the mean value of genes' statistics as the pathway statistic.
> ##D 
> ##D # after about 50 min, you can obtain a detailed report of the analysis
> ##D report(res)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CePa-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("PID.db")
> ### * PID.db
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: PID.db
> ### Title: pathway catalogues from Pathway Interaction Database(PID)
> ### Aliases: PID.db
> 
> ### ** Examples
> 
> data(PID.db)
> names(PID.db)
[1] "NCI"      "BioCarta" "KEGG"     "Reactome"
> PID.db$NCI

  The catalogue contains 206 pathways.

> plot(PID.db$NCI)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("PID.db", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cepa")
> ### * cepa
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cepa
> ### Title: Apply CePa algorithm on a single pathway
> ### Aliases: cepa
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI, id = 2)
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("P53_symbol.gct")
> ##D label = read.cls("P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa(mat = eset, label = label, pc = PID.db$NCI, id = 2)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cepa", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cepa.all")
> ### * cepa.all
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cepa.all
> ### Title: Apply CePa algorithm on a list of pathways under multiple
> ###   centralities
> ### Aliases: cepa.all
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa.all(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI)
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("http://mcube.nju.edu.cn/jwang/lab/soft/cepa/P53_symbol.gct")
> ##D label = read.cls("http://mcube.nju.edu.cn/jwang/lab/soft/cepa/P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa.all(mat = eset, label = label, pc = PID.db$NCI)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cepa.all", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cepa.all.parallel")
> ### * cepa.all.parallel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cepa.all.parallel
> ### Title: use CePa package through parallel computing
> ### Aliases: cepa.all.parallel
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D res.ora = cepa.all.parallel(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI, ncores = 4)
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("http://mcube.nju.edu.cn/jwang/lab/soft/cepa/P53_symbol.gct")
> ##D label = read.cls("http://mcube.nju.edu.cn/jwang/lab/soft/cepa/P53.cls", treatment="MUT", control="WT")
> ##D res.gsa = cepa.all.parallel(mat = eset, label = label, pc = PID.db$NCI, ncores = 4)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cepa.all.parallel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cepa.ora")
> ### * cepa.ora
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cepa.ora
> ### Title: Apply centrality-extended ORA on a single pathway
> ### Aliases: cepa.ora
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI, id = 2)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cepa.ora", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cepa.ora.all")
> ### * cepa.ora.all
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cepa.ora.all
> ### Title: Apply centrality-extented ORA on a list of pathways
> ### Aliases: cepa.ora.all
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa.ora.all(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cepa.ora.all", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cepa.univariate")
> ### * cepa.univariate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cepa.univariate
> ### Title: Apply centrality-extended GSA on a single pathway
> ### Aliases: cepa.univariate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D data(PID.db)
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("P53_symbol.gct")
> ##D label = read.cls("P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa.univariate(mat = eset, label = label, pc = PID.db$NCI, id = 2)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cepa.univariate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cepa.univariate.all")
> ### * cepa.univariate.all
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cepa.univariate.all
> ### Title: Apply centrality-extented GSA on a list of pathways
> ### Aliases: cepa.univariate.all
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D data(PID.db)
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53.cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("http://mcube.nju.edu.cn/jwang/lab/soft/cepa/P53_symbol.gct")
> ##D label = read.cls("http://mcube.nju.edu.cn/jwang/lab/soft/cepa/P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa.univariate.all(mat = eset, label = label, pc = PID.db$NCI)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cepa.univariate.all", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gene.list")
> ### * gene.list
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gene.list
> ### Title: Differential gene list and background gene list
> ### Aliases: gene.list
> 
> ### ** Examples
> 
> data(gene.list)
> names(gene.list)
[1] "bk"  "dif"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gene.list", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("generate.pathway")
> ### * generate.pathway
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: generate.pathway
> ### Title: Generate igraph object from edge list
> ### Aliases: generate.pathway
> 
> ### ** Examples
> 
> 
> edgelist = rbind(c("a", "b"), c("a", "b"), c("a", "c"))
> g = generate.pathway(edgelist)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("generate.pathway", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.cepa")
> ### * get.cepa
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.cepa
> ### Title: get single cepa object from cepa.all object
> ### Aliases: get.cepa
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa.all(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI)
> ##D ora = get.cepa(res.ora, id = 5, cen = 3)
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("P53_symbol.gct")
> ##D label = read.cls("P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa.all(mat = eset, label = label, pc = PID.db$NCI)
> ##D gsa = get.cepa(res.gsa, id = 5, cen = 3)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.cepa", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("p.table")
> ### * p.table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: p.table
> ### Title: Table of p-values of pathways
> ### Aliases: p.table
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa.all(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI)
> ##D p.table(res.ora)
> ##D p.table(res.ora, adj.method = "BH")
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("P53_symbol.gct")
> ##D label = read.cls("P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa.all(mat = eset, label = label, pc = PID.db$NCI)
> ##D p.table(res.gsa)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("p.table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pathway.nodes")
> ### * pathway.nodes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pathway.nodes
> ### Title: names of the pathway nodes
> ### Aliases: pathway.nodes
> 
> ### ** Examples
> 
> interaction = rbind(c("a", "b"),
+                     c("a", "c"))
> g = generate.pathway(interaction)
> pathway.nodes(g)
[1] "a" "b" "c"
> 
> pathway = barabasi.game(200)
> pathway.nodes(pathway)
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108
[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126
[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144
[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162
[163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
[181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198
[199] 199 200
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pathway.nodes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.cepa")
> ### * plot.cepa
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.cepa
> ### Title: Plot the cepa object
> ### Aliases: plot.cepa
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI, id = 2)
> ##D plot(res.ora)
> ##D plot(res.ora, type = "null")
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("P53_symbol.gct")
> ##D label = read.cls("P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa(mat = eset, label = label, pc = PID.db$NCI, id = 2)
> ##D plot(res.gsa, type = "null")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.cepa", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.cepa.all")
> ### * plot.cepa.all
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.cepa.all
> ### Title: plot the cepa.all object
> ### Aliases: plot.cepa.all
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa.all(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI)
> ##D plot(res.ora)
> ##D plot(res.ora, id = 3)
> ##D plot(res.ora, id = 3, type = "null")
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("P53_symbol.gct")
> ##D label = read.cls("P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa.all(mat = eset, label = label, pc = PID.db$NCI)
> ##D plot(res.gsa)
> ##D plot(res.gsa, id = 3, cen = 2)
> ##D plot(res.gsa, id = 3, cen = 2, type = "null")
> ##D 
> ##D ###########################################################
> ##D # 
> ##D #     write a new p.adjust to supprot qvalue
> ##D #
> ##D library(qvalue)
> ##D p.adjust = function(p, method = c("holm", "hochberg", "hommel", "bonferroni",
> ##D                     "BH", "BY", "fdr", "none", "qvalue"), ...) {
> ##D     if(method == "qvalue") {
> ##D         # qvalue has more arguments, pass them by ...
> ##D         qvalue(p, ...)$qvalue
> ##D     } else {
> ##D         stats::p.adjust(p, method)
> ##D     }
> ##D }
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.cepa.all", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.pathway.catalogue")
> ### * plot.pathway.catalogue
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.pathway.catalogue
> ### Title: plot pathway.catalogue object
> ### Aliases: plot.pathway.catalogue
> 
> ### ** Examples
> 
> data(PID.db)
> NCI = PID.db$NCI
> plot(NCI)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.pathway.catalogue", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotGraph")
> ### * plotGraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotGraph
> ### Title: Plot graph for the pathway network
> ### Aliases: plotGraph
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa.all(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI)
> ##D ora = get.cepa(res.ora, id = 5, cen = 3)
> ##D plotGraph(ora)
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("P53_symbol.gct")
> ##D label = read.cls("P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa.all(mat = eset, label = label, pc = PID.db$NCI)
> ##D gsa = get.cepa(res.gsa, id = 5, cen = 3)
> ##D plotGraph(gsa)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotGraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotNull")
> ### * plotNull
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotNull
> ### Title: Plot the null distribution of the pathway score
> ### Aliases: plotNull
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa.all(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI)
> ##D ora = get.cepa(res.ora, id = 5, cen = 3)
> ##D plotNull(ora)
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("P53_symbol.gct")
> ##D label = read.cls("P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa.all(mat = eset, label = label, pc = PID.db$NCI)
> ##D gsa = get.cepa(res.gsa, id = 5, cen = 3)
> ##D plotNull(gsa)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotNull", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.cepa")
> ### * print.cepa
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.cepa
> ### Title: print the cepa object
> ### Aliases: print.cepa
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI, id = 2)
> ##D res.ora
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("P53_symbol.gct")
> ##D label = read.cls("P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa(mat = eset, label = label, pc = PID.db$NCI, id = 2)
> ##D res.gsa
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.cepa", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.cepa.all")
> ### * print.cepa.all
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.cepa.all
> ### Title: print the cepa.all object
> ### Aliases: print.cepa.all
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa.all(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI)
> ##D res.ora
> ##D 
> ##D # GSA extension
> ##D # P53_symbol.gct and P53_cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("P53_symbol.gct")
> ##D label = read.cls("P53.cls", treatment="MUT", control="WT")
> ##D # will spend about 45 min
> ##D res.gsa = cepa.all(mat = eset, label = label, pc = PID.db$NCI)
> ##D res.gsa
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.cepa.all", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.pathway.catalogue")
> ### * print.pathway.catalogue
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.pathway.catalogue
> ### Title: print pathway.catalogue object
> ### Aliases: print.pathway.catalogue
> 
> ### ** Examples
> 
> data(PID.db)
> NCI = PID.db$NCI
> NCI

  The catalogue contains 206 pathways.

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.pathway.catalogue", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("radiality")
> ### * radiality
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: radiality
> ### Title: Calculate radiality centrality
> ### Aliases: radiality
> 
> ### ** Examples
> 
> require(igraph)
> pathway = barabasi.game(200)
> radiality(pathway)
  [1] 11.743719 12.005025 10.758794 10.969849 11.954774 11.854271 10.869347
  [8] 11.371859 10.728643 10.909548 10.979899 10.758794 10.849246 10.768844
 [15]  9.954774 10.045226  9.824121 10.859296  9.864322  8.989950 10.959799
 [22]  9.884422  8.005025 11.261307 10.065327 10.758794 10.085427 10.939698
 [29] 10.768844 10.859296  7.010050 10.859296 10.417085  9.984925  9.733668
 [36] 11.010050 10.266332  8.829146 10.386935 10.758794  8.899497 10.376884
 [43]  9.954774  8.045226  9.100503  9.080402  8.959799  9.954774 10.748744
 [50]  9.874372  9.150754 10.326633  9.773869  9.442211  9.854271 10.879397
 [57] 10.748744 10.768844 10.376884  8.829146  9.120603  9.763819  9.371859
 [64] 10.376884  8.979899  9.743719  9.090452  9.874372  9.050251  9.391960
 [71] 10.768844  8.447236  9.743719  9.331658  9.944724  9.733668  8.829146
 [78]  8.125628  9.773869  9.864322  8.879397  8.949749  9.050251  8.959799
 [85]  8.959799  9.984925  8.165829  9.874372  8.085427  9.974874 10.376884
 [92] 10.959799 10.376884 10.748744  9.402010  8.748744  9.773869  8.125628
 [99]  8.005025  8.849246  7.994975  9.391960  8.105528  8.969849  9.733668
[106]  7.974874  7.060302 10.376884 10.959799 10.276382  8.407035  7.904523
[113]  6.065327  8.135678  9.050251  8.889447 10.859296 10.758794  8.125628
[120]  9.974874 10.276382  8.165829  9.281407  9.944724  9.944724  9.874372
[127]  9.773869  9.080402  9.432161 10.386935  9.733668  8.085427  7.050251
[134] 11.010050 10.748744  8.477387  9.763819  8.879397  7.050251  9.391960
[141]  7.502513  9.391960  8.386935  8.165829  9.914573  9.984925  8.959799
[148]  9.773869 10.376884  8.869347 10.959799  7.140704  9.884422  8.959799
[155]  8.829146  9.422111  9.763819 10.376884  7.050251  9.763819  9.773869
[162]  9.733668  8.959799  9.391960  9.422111  7.854271  8.437186  9.954774
[169] 11.020101  7.994975  7.170854  7.994975  8.376884  7.170854  8.085427
[176]  9.090452  9.763819  6.507538  9.773869  7.010050  8.376884  7.964824
[183]  8.829146  9.733668  7.170854  8.085427  7.391960  9.733668  9.281407
[190]  7.000000 10.025126  9.884422  7.854271  9.773869 10.859296  8.959799
[197]  8.829146  8.748744 10.859296  6.507538
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("radiality", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("reach")
> ### * reach
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: reach
> ### Title: Calculate largest reach centrality
> ### Aliases: reach
> 
> ### ** Examples
> 
> require(igraph)
> pathway = barabasi.game(200)
> reach(pathway)
  [1] 10  9 11 11  8  8 11  9 10  9  9 11 11 11 12 12 11  9 11 12  9 12 13 10 10
 [26] 11 12  9 11  9 14  9 10 10 11 10 11 12 11 11 13 10 10 13 13 13 13 10 11 12
 [51] 13 11 12 12 12  9 11 11 10 12 11 12 12 10 13 11 13 12 13 12 11 13 11 12 10
 [76] 11 12 12 12 12 13 11 13 11 13 10 14 12 14 12 10  9 10 11 12 12 12 12 13 12
[101] 14 12 14 13 11 14 14 10  9 11 13 14 15 12 13 13  9 11 12 12 11 14 12 10 10
[126] 12 12 11 11 10 11 14 14 10 11 13 12 13 14 12 14 12 13 14 10 10 11 12 10 13
[151]  9 13 10 11 12 11 12 10 14 12 12 11 13 11 11 13 12 10 10 13 15 13 13 15 12
[176] 13 12 15 12 14 13 12 12 11 15 14 14 11 12 15 11 10 13 12  9 11 12 12  9 15
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("reach", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.cls")
> ### * read.cls
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.cls
> ### Title: Read CLS format file
> ### Aliases: read.cls
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # P53.cls can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D label = read.cls("http://mcube.nju.edu.cn/jwang/lab/soft/cepa/P53.cls", treatment="MUT", control="WT")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.cls", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.gct")
> ### * read.gct
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.gct
> ### Title: Read GCT format file
> ### Aliases: read.gct
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # expression data stored in a gct format file
> ##D # P53_symbol.gct can be downloaded from
> ##D # http://mcube.nju.edu.cn/jwang/lab/soft/cepa/
> ##D eset = read.gct("http://mcube.nju.edu.cn/jwang/lab/soft/cepa/P53_symbol.gct")
> ##D 
> ##D head(eset)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.gct", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("report")
> ### * report
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: report
> ### Title: Generate report for CePa analysis
> ### Aliases: report
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(PID.db)
> ##D 
> ##D # ORA extension
> ##D data(gene.list)
> ##D # will spend about 20 min
> ##D res.ora = cepa.all(dif = gene.list$dif, bk = gene.list$bk, pc = PID.db$NCI)
> ##D report(res.ora)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("report", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sampleLabel")
> ### * sampleLabel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sampleLabel
> ### Title: Generate data structure of sample labels
> ### Aliases: sampleLabel
> 
> ### ** Examples
> 
> sampleLabel(c("A", "B", "B", "A", "A", "A", "B", "B"), treatment = "A", control = "B")
$label
[1] "A" "B" "B" "A" "A" "A" "B" "B"

$treatment
[1] "A"

$control
[1] "B"

attr(,"class")
[1] "sampleLabel"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sampleLabel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("set.pathway.catalogue")
> ### * set.pathway.catalogue
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: set.pathway.catalogue
> ### Title: store pathway data and pre-processing
> ### Aliases: set.pathway.catalogue pathway.catalogue
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(PID.db)
> ##D 
> ##D catalogue = set.pathway.catalogue(pathList = PID.db$NCI$pathList[1:20],
> ##D             interactionList = PID.db$NCI$intertionList, mapping = PID.db$NCI$mapping)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("set.pathway.catalogue", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("spread")
> ### * spread
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: spread
> ### Title: Calculate spread centrality
> ### Aliases: spread
> 
> ### ** Examples
> 
> require(igraph)
> pathway = barabasi.game(200)
> spread(pathway)
  [1] 64.69762 59.47063 46.16670 51.35004 56.95595 61.45714 49.76670 57.97857
  [9] 53.42619 46.42738 48.37738 46.16670 49.55004 46.83337 42.05418 42.43514
 [17] 44.24545 44.46071 41.87879 38.27186 43.03492 39.53038 30.90209 51.23333
 [25] 40.21111 46.16670 43.08514 48.54405 46.83337 44.46071 25.96128 44.46071
 [33] 44.35238 37.49444 39.07879 44.31905 39.20956 33.84805 44.25956 46.16670
 [41] 32.68991 42.10238 38.07063 33.15209 34.55777 35.50777 33.08872 38.07063
 [49] 45.50004 39.28038 36.64110 41.42623 36.69704 36.34545 37.94704 45.79405
 [57] 45.50004 46.83337 42.10238 33.84805 35.36926 36.44704 35.63117 42.10238
 [65] 34.00539 39.74545 33.89110 38.08752 33.50777 34.49545 46.83337 29.79547
 [73] 39.74545 33.38117 38.18730 39.07879 33.84805 28.78658 36.69704 38.61371
 [81] 31.88991 31.29903 33.50777 31.34188 33.08872 37.49444 30.35468 38.08752
 [89] 29.03326 39.01847 42.10238 43.03492 42.10238 45.50004 35.16212 32.08139
 [97] 36.69704 28.78658 30.90209 35.18139 28.99714 34.49545 28.78802 33.75539
[105] 39.07879 28.19714 27.51128 42.10238 43.03492 39.87623 29.24547 27.58326
[113] 23.45867 29.45325 33.50777 32.02324 44.46071 46.16670 28.78658 39.01847
[121] 39.87623 30.35468 32.64784 37.40397 37.40397 38.08752 36.69704 33.11926
[129] 35.57760 42.76905 39.07879 29.03326 26.84461 44.31905 45.50004 30.96213
[137] 36.44704 31.88991 26.84461 34.49545 27.53849 34.49545 29.92880 30.35468
[145] 36.60397 37.49444 31.96569 36.69704 42.10238 31.63991 43.03492 25.11302
[153] 36.25397 31.34188 33.84805 34.91093 36.44704 42.10238 26.84461 36.44704
[161] 36.69704 39.07879 33.08872 34.27760 34.91093 28.76756 29.58297 38.07063
[169] 44.98571 30.23542 25.74363 30.23542 29.26213 25.74363 27.90325 33.89110
[177] 36.44704 23.52487 36.69704 25.96128 29.26213 27.14769 33.84805 39.07879
[185] 25.74363 29.03326 25.56071 39.07879 32.64784 24.86228 36.17861 36.25397
[193] 28.76756 36.69704 44.46071 31.34188 33.84805 32.08139 44.46071 23.52487
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("spread", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.8 0.077 3.897 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
