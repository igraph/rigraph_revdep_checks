
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bio3d"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "bio3d-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('bio3d')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("aa.index")
> ### * aa.index
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aa.index
> ### Title: AAindex: Amino Acid Index Database
> ### Aliases: aa.index
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Load AAindex data
> data(aa.index)
> 
> ## Find all indeces described as "volume"
> ind <- which(sapply(aa.index, function(x)
+                     length(grep("volume", x$D, ignore.case=TRUE)) != 0))
> 
> ## find all indeces with author "Kyte"
> ind <- which(sapply(aa.index, function(x) length(grep("Kyte", x$A)) != 0))
> 
> ## examine the index
> aa.index[[ind]]$I
   A    R    N    D    C    Q    E    G    H    I    L    K    M    F    P    S 
 1.8 -4.5 -3.5 -3.5  2.5 -3.5 -3.5 -0.4 -3.2  4.5  3.8 -3.9  1.9  2.8 -1.6 -0.8 
   T    W    Y    V 
-0.7 -0.9 -1.3  4.2 
> 
> ## find indeces which correlate with it
> all.ind <- names(which(Mod(aa.index[[ind]]$C) >= 0.88))
> 
> ## examine them all
> sapply(all.ind, function (x) aa.index[[x]]$I)
  JURD980101 CHOC760103 OLSK800101 JANJ780102 NADH010102 NADH010101 DESM900102
A       1.10       0.38       1.38         51         51         58       1.26
R      -5.10       0.01       0.00          5       -144       -184       0.38
N      -3.50       0.12       0.37         22        -84        -93       0.59
D      -3.60       0.15       0.52         19        -78        -97       0.27
C       2.50       0.45       1.43         74        137        116       1.60
Q      -3.68       0.07       0.22         16       -128       -139       0.39
E      -3.20       0.18       0.71         16       -115       -131       0.23
G      -0.64       0.36       1.34         52        -13        -11       1.08
H      -3.20       0.17       0.66         34        -55        -73       1.00
I       4.50       0.60       2.32         66        106        107       1.44
L       3.80       0.45       1.47         60        103         95       1.36
K      -4.11       0.03       0.15          3       -205        -24       0.33
M       1.90       0.40       1.78         52         73         78       1.52
F       2.80       0.50       1.72         58        108         92       1.46
P      -1.90       0.18       0.85         25        -79        -79       0.54
S      -0.50       0.22       0.86         35        -26        -34       0.98
T      -0.70       0.23       0.89         30         -3         -7       1.01
W      -0.46       0.27       0.82         49         69         59       1.06
Y      -1.30       0.15       0.47         24         11        -11       0.89
V       4.20       0.54       1.99         64        108        100       1.33
  EISD860103 CHOC760104 NADH010103 WOLR810101 RADA880101 MANP780101 KUHL950101
A       0.00       0.20         41       1.94       1.81      12.97       0.78
R      -0.96       0.00       -109     -19.92     -14.92      11.72       1.58
N      -0.86       0.03        -74      -9.68      -6.64      11.42       1.20
D      -0.98       0.04        -47     -10.95      -8.72      10.85       1.35
C       0.76       0.22        169      -1.24       1.28      14.63       0.55
Q      -1.00       0.01       -104      -9.38      -5.54      11.76       1.19
E      -0.89       0.03        -90     -10.20      -6.81      11.89       1.45
G       0.00       0.18        -18       2.39       0.94      12.43       0.68
H      -0.75       0.02        -35     -10.27      -4.66      12.16       0.99
I       0.99       0.19        104       2.15       4.92      15.67       0.47
L       0.89       0.16        103       2.28       4.92      14.90       0.56
K      -0.99       0.00       -148      -9.52      -5.55      11.36       1.10
M       0.94       0.11         77      -1.48       2.35      14.39       0.66
F       0.92       0.14        128      -0.76       2.98      14.00       0.47
P       0.22       0.04        -81      -3.68       0.00      11.37       0.69
S      -0.67       0.08        -31      -5.06      -3.40      11.23       1.00
T       0.09       0.08         10      -4.88      -2.57      11.69       1.05
W       0.67       0.04        102      -5.88       2.33      13.93       0.70
Y      -0.93       0.03         36      -6.11      -0.14      13.42       1.00
V       0.84       0.18        116       1.99       4.04      15.71       0.51
  GUYH850105 OOBM770101
A      -0.27     -1.895
R       2.00     -1.475
N       0.61     -1.560
D       0.50     -1.518
C      -0.23     -2.035
Q       1.00     -1.521
E       0.33     -1.535
G      -0.22     -1.898
H       0.37     -1.755
I      -0.80     -1.951
L      -0.44     -1.966
K       1.17     -1.374
M      -0.31     -1.963
F      -0.55     -1.864
P       0.36     -1.699
S       0.17     -1.753
T       0.18     -1.767
W       0.05     -1.869
Y       0.48     -1.686
V      -0.65     -1.981
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aa.index", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aa.table")
> ### * aa.table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aa.table
> ### Title: Table of Relevant Amino Acids
> ### Aliases: aa.table
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(aa.table)
> aa.table
    aa3 aa1    mass       formula                             name
ALA ALA   A  71.078    C3 H5 N O1                          Alanine
ARG ARG   R 157.194  C6 H13 N4 O1                         Arginine
ASN ASN   N 114.103   C4 H6 N2 O2                       Asparagine
ASP ASP   D 114.079    C4 H4 N O3                    Aspartic Acid
CYS CYS   C 103.143  C3 H5 N O1 S                          Cystein
GLN GLN   Q 117.126   C4 H9 N2 O2                        Glutamine
GLU GLU   E 128.106    C5 H6 N O3                    Glutamic Acid
GLY GLY   G  57.051    C2 H3 N O1                          Glycine
HIS HIS   H 137.139   C6 H7 N3 O1                        Histidine
ILE ILE   I 113.158   C6 H11 N O1                       Isoleucine
LEU LEU   L 113.158   C6 H11 N O1                          Leucine
LYS LYS   K 129.180  C6 H13 N2 O1                           Lysine
MET MET   M 131.196  C5 H9 N O1 S                       Methionine
PHE PHE   F 147.174    C9 H9 N O1                    Phenylalanine
PRO PRO   P  97.115    C5 H7 N O1                          Proline
SER SER   S  87.077    C3 H5 N O2                           Serine
THR THR   T 101.104    C4 H7 N O2                        Threonine
TRP TRP   W 186.210 C11 H10 N2 O1                       Tryptophan
TYR TYR   Y 163.173    C9 H9 N O2                         Tyrosine
VAL VAL   V  99.131    C5 H9 N O1                           Valine
ABA ABA   X  85.104   C4 H7 N1 O1          alpha-aminobutyric acid
ASH ASH   D 115.087    C4 H5 N O3            Aspartic acid Neutral
CIR CIR   R 157.170  C6 H11 N3 O2                       citrulline
CME CME   C 179.260 C5 H9 N O2 S2 s,s-(2-hydroxyethyl)thiocysteine
CMT CMT   C 115.154  C4 H5 N O1 S                 o-methylcysteine
CSD CSD   C 134.134  C3 H4 N O3 S          s-cysteinesulfinic acid
CSO CSO   C 119.142  C3 H5 N O2 S                s-hydroxycysteine
CSW CSW   C 135.142  C3 H5 N O3 S               cysteine-s-dioxide
CSX CSX   C 119.142  C3 H5 N O2 S                   s-oxy cysteine
CYM CYM   C 102.135  C3 H4 N O1 S                 Cystein Negative
CYX CYX   C 102.135  C3 H4 N O1 S                   Cystein SSbond
DDE DDE   H 280.346 C13 H22 N5 O2                      diphthamide
GLH GLH   G 129.114    C5 H7 N O3           Glutatmic acid Neutral
HID HID   H 137.139   C6 H7 N3 O1                        Histidine
HIE HIE   H 137.139   C6 H7 N3 O1                        Histidine
HIP HIP   H 138.147   C6 H8 N3 O1               Histidine Positive
HSD HSD   H 137.139   C6 H7 N3 O1                        Histidine
HSE HSE   H 137.139   C6 H7 N3 O1                        Histidine
HSP HSP   H 138.147   C6 H8 N3 O1               Histidine Positive
IAS IAS   D 115.087    C4 H5 N O3                    beta-aspartyl
KCX KCX   K 172.182  C7 H12 N2 O3        lysine nz-carboxylic acid
LYN LYN   K 129.180  C6 H13 N2 O1                   Lysine Neutral
MHO MHO   M 147.195  C5 H9 N O2 S                  s-oxymethionine
MLY MLY   K 156.225  C8 H16 N2 O1                n-dimethyl-lysine
MSE MSE   M 131.196 C5 H9 N O1 SE                 selenomethionine
OCS OCS   C 151.141  C3 H5 N O4 S            cysteinesulfonic acid
PFF PFF   F 165.164  C9 H8 F N O1         4-fluoro-l-phenylalanine
PTR PTR   Y 243.153 C9 H10 N O5 P                o-phosphotyrosine
SEP SEP   S 167.057  C3 H6 N O5 P                    phosphoserine
TPO TPO   T 181.084  C4 H8 N O5 P                 phosphothreonine
> 
> ## table look up
> aa.table["HIS", ]
    aa3 aa1    mass     formula      name
HIS HIS   H 137.139 C6 H7 N3 O1 Histidine
> 
> ## read PDB, and fetch residue masses
> pdb <- read.pdb(system.file("examples/1hel.pdb", package="bio3d"))
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> aa2mass(pdb)
  [1] 130.1879  99.1310 147.1740  57.0510 157.1940 103.1430 128.1060 113.1580
  [9]  71.0780  71.0780  71.0780 131.1960 129.1800 157.1940 137.1390  57.0510
 [17] 113.1580 114.0790 114.1030 163.1730 157.1940  57.0510 163.1730  87.0770
 [25] 113.1580  57.0510 114.1030 186.2100  99.1310 103.1430  71.0780  71.0780
 [33] 129.1800 147.1740 128.1060  87.0770 114.1030 147.1740 114.1030 101.1040
 [41] 117.1260  71.0780 101.1040 114.1030 157.1940 114.1030 101.1040 114.0790
 [49]  57.0510  87.0770 101.1040 114.0790 163.1730  57.0510 113.1580 113.1580
 [57] 117.1260 113.1580 114.1030  87.0770 157.1940 186.2100 186.2100 103.1430
 [65] 114.1030 114.0790  57.0510 157.1940 101.1040  97.1150  57.0510  87.0770
 [73] 157.1940 114.1030 113.1580 103.1430 114.1030 113.1580  97.1150 103.1430
 [81]  87.0770  71.0780 113.1580 113.1580  87.0770  87.0770 114.0790 113.1580
 [89] 101.1040  71.0780  87.0770  99.1310 114.1030 103.1430  71.0780 129.1800
 [97] 129.1800 113.1580  99.1310  87.0770 114.0790  57.0510 114.1030  57.0510
[105] 131.1960 114.1030  71.0780 186.2100  99.1310  71.0780 186.2100 157.1940
[113] 114.1030 157.1940 103.1430 129.1800  57.0510 101.1040 114.0790  99.1310
[121] 117.1260  71.0780 186.2100 113.1580 157.1940  57.0510 103.1430 157.1940
[129] 130.1653
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aa.table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aa123")
> ### * aa123
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aa123
> ### Title: Convert Between 1-letter and 3-letter Aminoacid Codes
> ### Aliases: aa123 aa321
> ### Keywords: utilities
> 
> ### ** Examples
> 
> # Simple conversion
> aa123(c("D","L","A","G","S","H"))
[1] "ASP" "LEU" "ALA" "GLY" "SER" "HIS"
> aa321(c("ASP", "LEU", "ALA", "GLY", "SER", "HIS"))
[1] "D" "L" "A" "G" "S" "H"
> 
> ## Not run: 
> ##D # Extract sequence from a PDB file's ATOM and SEQRES cards
> ##D pdb <- read.pdb("1BG2") 
> ##D s <- aa321(pdb$seqres)                   # SEQRES
> ##D a <- aa321(pdb$atom[pdb$calpha,"resid"]) # ATOM
> ##D 
> ##D # Write both sequences to a fasta file
> ##D write.fasta(alignment=seqbind(s,a), id=c("seqres","atom"), file="eg2.fa")
> ##D 
> ##D # Alternative approach for ATOM sequence extraction
> ##D pdbseq(pdb)
> ##D pdbseq(pdb, aa1=FALSE )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aa123", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aa2index")
> ### * aa2index
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aa2index
> ### Title: Convert an Aminoacid Sequence to AAIndex Values
> ### Aliases: aa2index
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Residue hydropathy values
> seq <- c("R","S","D","X","-","X","R","H","Q","V","L")
> aa2index(seq)
   R    S    D <NA> <NA> <NA>    R    H    Q    V    L 
-4.5 -0.8 -3.5   NA   NA   NA -4.5 -3.2 -3.5  4.2  3.8 
> 
> ## Not run: 
> ##D ## Use a sliding window average
> ##D aa2index(aa=seq, index=22, window=3)
> ##D 
> ##D ## Use an alignment
> ##D 
> ##D aln  <- read.fasta(system.file("examples/hivp_xray.fa",package="bio3d"))
> ##D prop <- t(apply(aln$ali, 1, aa2index, window=1))
> ##D 
> ##D ## find and use indices for volume calculations
> ##D i <- which(sapply(aa.index,
> ##D        function(x) length(grep("volume", x$D, ignore.case=TRUE)) != 0))
> ##D sapply(i, function(x) aa2index(aa=seq, index=x, window=5)) 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aa2index", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aa2mass")
> ### * aa2mass
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aa2mass
> ### Title: Amino Acid Residues to Mass Converter
> ### Aliases: aa2mass
> ### Keywords: utilities
> 
> ### ** Examples
> 
> resi.names <- c("LYS", "ALA", "CYS", "HIS")
> masses <- aa2mass(resi.names, addter=FALSE)
> 
> ## Not run: 
> ##D ## Fetch atomic masses in a PDB object
> ##D pdb <- read.pdb("3dnd")
> ##D masses <- aa2mass(pdb)
> ##D 
> ##D ## or
> ##D masses <- aa2mass(pdb$atom[1:10,"resid"])
> ##D 
> ##D ## Dealing with unconventional residues
> ##D #pdb <- read.pdb("1xj0")
> ##D 
> ##D #mass.cust <- list("CSX"=122.166)
> ##D #masses <- aa2mass(pdb, mass.custom=mass.cust)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aa2mass", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aln2html")
> ### * aln2html
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aln2html
> ### Title: Create a HTML Page For a Given Alignment
> ### Aliases: aln2html
> ### Keywords: IO
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Read an example alignment
> ##D aln <- read.fasta(system.file("examples/hivp_xray.fa",package="bio3d"))
> ##D 
> ##D ## Produce a HTML file for this alignment
> ##D aln2html(aln, append=FALSE, file=file.path("eg.html"))
> ##D aln2html(aln, colorscheme="ent", file="eg.html")
> ##D ## View/open the file in your web browser
> ##D #browseURL("eg.html")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aln2html", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("angle.xyz")
> ### * angle.xyz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: angle.xyz
> ### Title: Calculate the Angle Between Three Atoms
> ### Aliases: angle.xyz
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Read a PDB file
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Angle between N-CA-C atoms of residue four
> inds <- atom.select(pdb, resno=4, elety=c("N","CA","C"))
> angle.xyz(pdb$xyz[inds$xyz])
[1] 106.7501
> 
> ## Basic stats of all N-CA-C bound angles
> inds <- atom.select(pdb, elety=c("N","CA","C"))
> summary( angle.xyz(pdb$xyz[inds$xyz]) )
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  105.9   109.9   112.0   112.1   113.8   122.2 
> #hist( angle.xyz(pdb$xyz[inds$xyz]), xlab="Angle" )
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("angle.xyz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as.fasta")
> ### * as.fasta
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.fasta
> ### Title: Alignment to FASTA object
> ### Aliases: as.fasta
> ### Keywords: utilities
> 
> ### ** Examples
> 
> as.fasta(c("A", "C", "D"))
       1 3 
seq1   ACD
       1 3 

Call:
  as.fasta(x = c("A", "C", "D"))

Class:
  fasta

Alignment dimensions:
  1 sequence rows; 3 position columns (3 non-gap, 0 gap) 

+ attr: id, ali, call
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.fasta", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as.pdb")
> ### * as.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.pdb
> ### Title: Convert to PDB format
> ### Aliases: as.pdb as.pdb.mol2 as.pdb.prmtop as.pdb.default
> ### Keywords: IO
> 
> ### ** Examples
> 
> ## Vector(s) to PDB object
> pdb <- as.pdb(resno=1:6, elety="CA", resid="ALA", chain="A")

 Summary of PDB generation:
 .. number of atoms in PDB determined by 'resno'

 .. 00000006 atom(s) from 'string' selection 
 .. 00000006 atom(s) in final combined selection 

 .. number of atoms in PDB:  6 
 .. number of calphas in PDB: 6 
 .. number of residues in PDB: 6 

> pdb

 Call:  as.pdb.default(resno = 1:6, resid = "ALA", elety = "CA", chain = "A")

   Total Models#: 1
     Total Atoms#: 6,  XYZs#: 18  Chains#: 1  (values: A)

     Protein Atoms#: 6  (residues/Calpha atoms#: 6)
     Nucleic acid Atoms#: 0  (residues/phosphate atoms#: 0)

     Non-protein/nucleic Atoms#: 0  (residues: 0)
     Non-protein/nucleic resid values: [ none ]

   Protein sequence:
      AAAAAA

+ attr: atom, xyz, calpha, call
> 
> ## Not run: 
> ##D ## Read a PRMTOP file
> ##D prmtop <- read.prmtop("prot_solvated.prmtop")
> ##D 
> ##D ## Atom selection
> ##D ca.inds <- atom.select(prmtop, "calpha")
> ##D 
> ##D ## Read a Amber CRD file
> ##D crds <- read.crd("prot_solvated.inpcrd")
> ##D 
> ##D ## Convert to PDB format
> ##D pdb <- as.pdb(prmtop, crds, inds=ca.inds)
> ##D 
> ##D ## Convert to PDB format
> ##D trj <- read.ncdf("traj.nc", at.sel=ca.inds)
> ##D pdb <- as.pdb(prmtop, trj[20,], inds=ca.inds, inds.crd=NULL)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("as.select")
> ### * as.select
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.select
> ### Title: Convert Atomic Indices to a Select Object
> ### Aliases: as.select
> ### Keywords: utilities
> 
> ### ** Examples
> 
> as.select(c(1,2,3))

 Call:  as.select(x = c(1, 2, 3))

   Atom Indices#: 3  ($atom)
   XYZ  Indices#: 9  ($xyz)

+ attr: atom, xyz, call
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.select", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("atom.index")
> ### * atom.index
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: atom.index
> ### Title: Atom Names/Types
> ### Aliases: atom.index
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(atom.index)
> atom.index
   name symb
1     H    H
2     C    C
3    CA    C
4    CB    C
5    CD    C
6   CD1    C
7   CD2    C
8    CE    C
9   CE1    C
10  CE2    C
11  CE3    C
12   CG    C
13  CG1    C
14  CG2    C
15  CH2    C
16   CZ    C
17  CZ2    C
18  CZ3    C
19    N    N
20  ND1    N
21  ND2    N
22   NE    N
23  NE1    N
24  NE2    N
25  NH1    N
26  NH2    N
27   NZ    N
28    O    O
29  OD1    O
30  OD2    O
31  OE1    O
32  OE2    O
33   OG    O
34  OG1    O
35   OH    O
36  OXT    O
37    S    S
38   SD    S
39   SG    S
40    P    P
41   MG   Mg
42    K    K
43   CL   Cl
44   ZN   Zn
> 
> # Get the atomic symbol of some atoms
> atom.names <- c("CA", "O", "N", "OXT")
> atom.index[match(atom.names, atom.index$name), "symb"]
[1] "C" "O" "N" "O"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("atom.index", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("atom.select")
> ### * atom.select
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: atom.select
> ### Title: Atom Selection from PDB and PRMTOP Structure Objects
> ### Aliases: atom.select atom.select.pdb atom.select.prmtop print.select
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ##- PDB example
> # Read a PDB file
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> # Select protein atoms of chain A
> atom.select(pdb, "protein", chain="A")

 Call:  atom.select.pdb(pdb = pdb, string = "protein", chain = "A")

   Atom Indices#: 1001  ($atom)
   XYZ  Indices#: 3003  ($xyz)

+ attr: atom, xyz, call
> 
> # Select all atoms except from the protein
> atom.select(pdb, "protein", inverse=TRUE, verbose=TRUE)

 .. 00001001 atom(s) from 'string' selection 
 .. 00001001 atom(s) in final combined selection 
 .. 00000000 atom(s) in inversed selection 


 Call:  atom.select.pdb(pdb = pdb, string = "protein", inverse = TRUE, 
    verbose = TRUE)

   Atom Indices#: 0  ($atom)
   XYZ  Indices#: 0  ($xyz)

+ attr: atom, xyz, call
> 
> # Select all C-alpha atoms with residues numbers between 43 and 54
> sele <- atom.select(pdb, "calpha", resno=43:54, verbose=TRUE)

 .. 00000129 atom(s) from 'string' selection 
 .. 00000090 atom(s) from 'resno' selection 
 .. 00000012 atom(s) in final combined selection 

> 
> # Access the PDB data with the selection indices
> print( pdb$atom[ sele$atom, "resid" ] )
 [1] "THR" "ASN" "ARG" "ASN" "THR" "ASP" "GLY" "SER" "THR" "ASP" "TYR" "GLY"
> print( pdb$xyz[ sele$xyz ] )
 [1] 10.705 15.992 17.773 12.828 18.909 18.863 15.061 19.112 21.827 15.247
[11] 22.135 24.062 18.108 23.768 25.931 16.626 22.832 29.261 16.950 19.205
[21] 28.182 13.311 18.716 27.712 11.958 17.610 24.179  8.767 18.608 22.181
[31]  6.899 15.745 20.548  4.390 15.347 17.710
> 
> # Trim PDB to selection
> ca.pdb <- trim.pdb(pdb, sele)
> 
> ## Not run: 
> ##D 
> ##D ##- PRMTOP example
> ##D prmtop <- read.prmtop("prot_solvated.prmtop")
> ##D 
> ##D ## Atom selection
> ##D ca.inds <- atom.select(prmtop, "calpha")
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("atom.select", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("atom2ele")
> ### * atom2ele
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: atom2ele
> ### Title: Atom Names/Types to Atomic Symbols Converter
> ### Aliases: atom2ele atom2ele.default atom2ele.pdb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> atom.names <- c("CA", "O", "N", "OXT")
> atom2ele(atom.names)
[1] "C" "O" "N" "O"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("atom2ele", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("atom2mass")
> ### * atom2mass
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: atom2mass
> ### Title: Atom Names/Types to Mass Converter
> ### Aliases: atom2mass atom2mass.default atom2mass.pdb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> atom.names <- c("CA", "O", "N", "OXT")
> atom2mass(atom.names)
[1] 12.0107 15.9994 14.0067 15.9994
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("atom2mass", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("atom2xyz")
> ### * atom2xyz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: atom2xyz
> ### Title: Convert Between Atom and xyz Indices
> ### Aliases: atom2xyz xyz2atom
> ### Keywords: utilities
> 
> ### ** Examples
> 
> xyz.ind <- atom2xyz(c(1,10,15))
> xyz2atom( xyz.ind )
[1]  1 10 15
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("atom2xyz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("basename.pdb")
> ### * basename.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: basename.pdb
> ### Title: Manipulate PDB File Names
> ### Aliases: basename.pdb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 	basename.pdb("/somedir/somewhere/1bg2_myfile.pdb")
/somedir/somewhere/1bg2_myfile.pdb 
                     "1bg2_myfile" 
> 	basename.pdb("/somedir/somewhere/1bg2_myfile.pdb", TRUE)
/somedir/somewhere/1bg2_myfile.pdb 
                            "1bg2" 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("basename.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("binding.site")
> ### * binding.site
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: binding.site
> ### Title: Binding Site Residues
> ### Aliases: binding.site
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> 
>    ## Not run: 
> ##D   
> ##D      # Interaction between peptide and protein
> ##D      rec.inds <- atom.select(pdb, chain='A', resno=c(1:350))
> ##D      lig.inds <- atom.select(pdb, chain='I', resno=c(5:24))
> ##D      bs <- binding.site(pdb, a.inds=rec.inds, b.inds=lig.inds)
> ##D    
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("binding.site", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bio3d.package")
> ### * bio3d.package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bio3d-package
> ### Title: Biological Structure Analysis
> ### Aliases: bio3d-package bio3d
> ### Keywords: documentation
> 
> ### ** Examples
> 
> help(package="bio3d")     # list the functions within the package

		Information on package ‘bio3d’

Description:

Package:            bio3d
Title:              Biological Structure Analysis
Version:            2.2-2
Author:             Barry Grant, Xin-Qiu Yao, Lars Skjaerven, Julien
                    Ide
VignetteBuilder:    knitr
Imports:            parallel, grid
Suggests:           XML, RCurl, lattice, ncdf, igraph, bigmemory,
                    knitr, testthat (>= 0.9.1)
Depends:            R (>= 3.1.0)
LazyData:           yes
Description:        Utilities to process, organize and explore protein
                    structure, sequence and dynamics data.  Features
                    include the ability to read and write structure,
                    sequence and dynamic trajectory data, perform
                    sequence and structure database searches, data
                    summaries, atom selection, alignment,
                    superposition, rigid core identification,
                    clustering, torsion analysis, distance matrix
                    analysis, structure and sequence conservation
                    analysis, normal mode analysis, principal component
                    analysis of heterogeneous structure data, and
                    correlation network analysis from normal mode and
                    molecular dynamics data.  In addition, various
                    utility functions are provided to enable the
                    statistical and graphical power of the R
                    environment to work with biological sequence and
                    structural data.  Please refer to the URLs below
                    for more information.
Maintainer:         Barry Grant <bjgrant@umich.edu>
License:            GPL (>= 2)
URL:                http://thegrantlab.org/bio3d/,
                    http://bitbucket.org/Grantlab/bio3d
Packaged:           2015-03-03 00:24:17 UTC; xinqyao
NeedsCompilation:   no
Repository:         CRAN
Date/Publication:   2015-03-03 07:34:13
Built:              R 3.2.0; ; 2015-06-13 15:36:52 UTC; unix

Index:

aa.index                AAindex: Amino Acid Index Database
aa.table                Table of Relevant Amino Acids
aa123                   Convert Between 1-letter and 3-letter Aminoacid
                        Codes
aa2index                Convert an Aminoacid Sequence to AAIndex Values
aa2mass                 Amino Acid Residues to Mass Converter
aln2html                Create a HTML Page For a Given Alignment
angle.xyz               Calculate the Angle Between Three Atoms
as.fasta                Alignment to FASTA object
as.pdb                  Convert to PDB format
as.select               Convert Atomic Indices to a Select Object
atom.index              Atom Names/Types
atom.select             Atom Selection from PDB and PRMTOP Structure
                        Objects
atom2ele                Atom Names/Types to Atomic Symbols Converter
atom2mass               Atom Names/Types to Mass Converter
atom2xyz                Convert Between Atom and xyz Indices
basename.pdb            Manipulate PDB File Names
bhattacharyya           Bhattacharyya Coefficient
binding.site            Binding Site Residues
bio3d-package           Biological Structure Analysis
biounit                 Biological Units Construction
blast.pdb               NCBI BLAST Sequence Search and Summary Plot of
                        Hit Statistics
bounds                  Bounds of a Numeric Vector
bounds.sse              Obtain A SSE Object From An SSE Sequence Vector
bwr.colors              Color Palettes
cat.pdb                 Concatenate Multiple PDB Objects
chain.pdb               Find Possible PDB Chain Breaks
check.utility           Check on Missing Utility Programs
clean.pdb               Inspect And Clean Up A PDB Object
cmap                    Contact Map
cna                     Protein Dynamic Correlation Network
                        Construction and Community Analysis.
cnapath                 Suboptimal Path Analysis for Correlation
                        Networks
com                     Center of Mass
combine.select          Combine Atom Selections From PDB Structure
community.tree          Reconstruction of the Girvan-Newman Community
                        Tree for a CNA Class Object.
consensus               Sequence Consensus for an Alignment
conserv                 Score Residue Conservation At Each Position in
                        an Alignment
convert.pdb             Renumber and Convert Between Various PDB
                        formats
core.find               Identification of Invariant Core Positions
cov.nma                 Calculate Covariance Matrix from Normal Modes
covsoverlap             Covariance Overlap
dccm                    DCCM: Dynamical Cross-Correlation Matrix
dccm.enma               Cross-Correlation for Ensemble NMA (eNMA)
dccm.nma                Dynamic Cross-Correlation from Normal Modes
                        Analysis
dccm.pca                Dynamic Cross-Correlation from Principal
                        Component Analysis
dccm.xyz                DCCM: Dynamical Cross-Correlation Matrix
deformation.nma         Deformation Analysis
diag.ind                Diagonal Indices of a Matrix
difference.vector       Difference Vector
dist.xyz                Calculate the Distances Between the Rows of Two
                        Matrices
dm                      Distance Matrix Analysis
dssp                    Secondary Structure Analysis with DSSP or
                        STRIDE
elements                Periodic Table of the Elements
entropy                 Shannon Entropy Score
example.data            Bio3d Example Data
filter.cmap             Contact Map Consensus Filtering
filter.dccm             Filter for Cross-correlation Matrices (Cij)
filter.identity         Percent Identity Filter
filter.rmsd             RMSD Filter
fit.xyz                 Coordinate Superposition
fluct.nma               NMA Fluctuations
formula2mass            Chemical Formula to Mass Converter
gap.inspect             Alignment Gap Summary
geostas                 GeoStaS Domain Finder
get.pdb                 Download PDB Coordinate Files
get.seq                 Download FASTA Sequence Files
hclustplot              Dendrogram with Clustering Annotation
hmmer                   HMMER Sequence Search
identify.cna            Identify Points in a CNA Protein Structure
                        Network Plot
inner.prod              Mass-weighted Inner Product
inspect.connectivity    Check the Connectivity of Protein Structures
is.gap                  Gap Characters
is.pdb                  Is an Object of Class 'pdb(s)'?
is.select               Is an Object of Class 'select'?
is.xyz                  Is an Object of Class 'xyz'?
layout.cna              Protein Structure Network Layout
lbio3d                  List all Functions in the bio3d Package
lmi                     LMI: Linear Mutual Information Matrix
load.enmff              ENM Force Field Loader
mktrj                   PCA / NMA Atomic Displacement Trajectory
motif.find              Find Sequence Motifs.
mustang                 Structure-based Sequence Alignment with MUSTANG
network.amendment       Amendment of a CNA Network According To A Input
                        Community Membership Vector.
nma                     Normal Mode Analysis
nma.pdb                 Normal Mode Analysis
nma.pdbs                Ensemble Normal Mode Analysis
normalize.vector        Mass-Weighted Normalized Vector
orient.pdb              Orient a PDB Structure
overlap                 Overlap analysis
pairwise                Pair Indices
pca                     Principal Component Analysis
pca.array               Principal Component Analysis of an arrary of
                        matrices
pca.pdbs                Principal Component Analysis
pca.tor                 Principal Component Analysis
pca.xyz                 Principal Component Analysis
pdb.annotate            Get Customizable Annotations From PDB
pdb2aln                 Align a PDB structure to an existing alignment
pdb2aln.ind             Mapping from alignment positions to PDB atomic
                        indices
pdb2sse                 Obtain An SSE Sequence Vector From A PDB Object
pdbaln                  Sequence Alignment of PDB Files
pdbfit                  PDB File Coordinate Superposition
pdbs2pdb                PDBs to PDB Converter
pdbseq                  Extract The Aminoacid Sequence From A PDB
                        Object
pdbsplit                Split a PDB File Into Separate Files, One For
                        Each Chain.
pfam                    Download Pfam FASTA Sequence Alignment
plot.bio3d              Plots with marginal SSE annotation
plot.cmap               Plot Contact Matrix
plot.cna                Protein Structure Network Plots in 2D and 3D.
plot.core               Plot Core Fitting Progress
plot.dccm               DCCM Plot
plot.dmat               Plot Distance Matrix
plot.enma               Plot eNMA Results
plot.fasta              Plot a Multiple Sequence Alignment
plot.fluct              Plot Fluctuations
plot.geostas            Plot Geostas Results
plot.hmmer              Plot a Summary of HMMER Hit Statistics.
plot.nma                Plot NMA Results
plot.pca                Plot PCA Results
plot.pca.loadings       Plot Residue Loadings along PC1 to PC3
plot.rmsip              Plot RMSIP Results
print.cna               Summarize and Print Features of a cna Network
                        Graph
print.core              Printing Core Positions and Returning Indices
print.fasta             Printing Sequence Alignments
print.xyz               Printing XYZ coordinates
project.pca             Project Data onto Principal Components
prune.cna               Prune A cna Network Object
read.all                Read Aligned Structure Data
read.crd                Read Coordinate Data from Amber or Charmm
read.crd.amber          Read AMBER Coordinate files
read.crd.charmm         Read CRD File
read.dcd                Read CHARMM/X-PLOR/NAMD Binary DCD files
read.fasta              Read FASTA formated Sequences
read.fasta.pdb          Read Aligned Structure Data
read.mol2               Read MOL2 File
read.ncdf               Read AMBER Binary netCDF files
read.pdb                Read PDB File
read.pdcBD              Read PQR output from pdcBD File
read.pqr                Read PQR File
read.prmtop             Read AMBER Parameter/Topology files
rgyr                    Radius of Gyration
rle2                    Run Length Encoding with Indices
rmsd                    Root Mean Square Deviation
rmsf                    Atomic RMS Fluctuations
rmsip                   Root Mean Square Inner Product
sdENM                   Index for the sdENM ff
seq2aln                 Add a Sequence to an Existing Alignmnet
seqaln                  Sequence Alignment with MUSCLE
seqaln.pair             Sequence Alignment of Identical Protein
                        Sequences
seqbind                 Combine Sequences by Rows Without Recycling
seqidentity             Percent Identity
setup.ncore             Setup for Running Bio3D Functions using
                        Multiple CPU Cores
sip                     Square Inner Product
sse.bridges             SSE Backbone Hydrogen Bonding
store.atom              Store all-atom data from a PDB object
struct.aln              Structure Alignment Of Two PDB Files
torsion.pdb             Calculate Mainchain and Sidechain
                        Torsion/Dihedral Angles
torsion.xyz             Calculate Torsion/Dihedral Angles
trim                    Trim a PDB Object To A Subset of Atoms.
trim.pdbs               Filter or Trim a PDBs Object
trim.xyz                Trim a XYZ Object of Cartesian Coordinates.
unbound                 Sequence Generation from a Bounds Vector
uniprot                 Fetch UniProt Entry Data.
var.xyz                 Pairwise Distance Variance in Cartesian
                        Coordinates
vec2resno               Replicate Per-residue Vector Values
view.cna                View CNA Protein Structure Network Community
                        Output in VMD
view.dccm               Visualization of Dynamic Cross-Correlation
view.modes              Vector Field Visualization of Modes
vmd.colors              VMD Color Palette
wrap.tor                Wrap Torsion Angle Data
write.crd               Write CRD File
write.fasta             Write FASTA Formated Sequences
write.ncdf              Write AMBER Binary netCDF files
write.pdb               Write PDB Format Coordinate File
write.pir               Write PIR Formated Sequences
write.pqr               Write PQR Format Coordinate File

Further information is available in the following vignettes in
directory
‘/Users/gaborcsardi/works/igraph/revdep_check/bio3d.Rcheck/bio3d/doc’:

bio3d_vignettes: bio3d Vignettes (source, pdf)

> #lbio3d()                  # list bio3d function names only
> 
> ## Or visit:
> ##   http://thegrantlab.org/bio3d/html/
> 
> ## See the individual functions for further documentation and examples, e.g.
> #help(read.pdb)
> 
> ## Or online:
> ##    http://thegrantlab.org/bio3d/html/read.pdb.html
> 
> ## Not run: 
> ##D ##-- See the list of Bio3D demos
> ##D demo(package="bio3d")
> ##D 
> ##D ## Try some out, e.g:
> ##D demo(pdb) # PDB Reading, Manipulation, Searching and Alignment
> ##D demo(pca) # Principal Component Analysis
> ##D demo(md)  # Molecular Dynamics Trajectory Analysis
> ##D demo(nma) # Normal Mode Analysis
> ##D 
> ##D ## See package vignettes and tutorals online:
> ##D ##   http://thegrantlab.org/bio3d/tutorials
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bio3d.package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("biounit")
> ### * biounit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: biounit
> ### Title: Biological Units Construction
> ### Aliases: biounit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D    biounit <- biounit(read.pdb("2bfu"), multi=TRUE)
> ##D    write.pdb(biounit[[1]], file="biounit.pdb")
> ##D    # open the pdb file in VMD to have a look on the biological unit
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("biounit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("blast.pdb")
> ### * blast.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: blast.pdb
> ### Title: NCBI BLAST Sequence Search and Summary Plot of Hit Statistics
> ### Aliases: blast.pdb get.blast plot.blast
> ### Keywords: utilities hplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D pdb <- read.pdb("4q21")
> ##D blast <- blast.pdb( pdbseq(pdb) )
> ##D 
> ##D head(blast$hit.tbl)
> ##D top.hits <- plot(blast)
> ##D head(top.hits$hits)
> ##D 
> ##D ## Use 'get.blast()' to retrieve results at a later time.
> ##D #x <- get.blast(blast$url)
> ##D #head(x$hit.tbl)
> ##D 
> ##D # Examine and download 'best' hits
> ##D top.hits <- plot.blast(blast, cutoff=188)
> ##D head(top.hits$hits)
> ##D #get.pdb(top.hits)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("blast.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bounds")
> ### * bounds
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bounds
> ### Title: Bounds of a Numeric Vector
> ### Aliases: bounds
> ### Keywords: utilities
> 
> ### ** Examples
> 
>  test <- c(seq(1,5,1),8,seq(10,15,1))
>  bounds(test)
  start end length
1     1   5      5
2     8   8      1
3    10  15      6
> 
>  test <- rep(c(1,2,4), times=c(2,3,4))
>  bounds(test, dup.ind=TRUE)
       start end length
[1,] 1     1   2      2
[2,] 2     3   5      3
[3,] 3     6   9      4
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bounds", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bounds.sse")
> ### * bounds.sse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bounds.sse
> ### Title: Obtain A SSE Object From An SSE Sequence Vector
> ### Aliases: bounds.sse
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bounds.sse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bwr.colors")
> ### * bwr.colors
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bwr.colors
> ### Title: Color Palettes
> ### Aliases: bwr.colors mono.colors
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bwr.colors", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cat.pdb")
> ### * cat.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cat.pdb
> ### Title: Concatenate Multiple PDB Objects
> ### Aliases: cat.pdb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Read a PDB file from the RCSB online database
> ##D pdb1 <- read.pdb("1etl")
> ##D pdb2 <- read.pdb("1hel")
> ##D 
> ##D ## Concat
> ##D new.pdb <- cat.pdb(pdb1, pdb2, pdb1, rechain=TRUE, renumber=TRUE)
> ##D 
> ##D ## Write to file
> ##D write.pdb(new.pdb, file="concat.pdb")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cat.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("chain.pdb")
> ### * chain.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: chain.pdb
> ### Title: Find Possible PDB Chain Breaks
> ### Aliases: chain.pdb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("chain.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("check.utility")
> ### * check.utility
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: check.utility
> ### Title: Check on Missing Utility Programs
> ### Aliases: check.utility
> ### Keywords: utilities
> 
> ### ** Examples
> 
>    check.utility(c("muscle", "dssp"), quiet=FALSE)
Warning in check.utility(c("muscle", "dssp"), quiet = FALSE) :
    Checking for external utility programs failed
    Please make sure 'muscle', 'dssp' is in your search path, see:
    http://thegrantlab.org/bio3d/tutorials/installing-bio3d#utilities
>    if(!check.utility("mustang")) 
+       cat(" The utility program, MUSTANG, is missing on your system\n")
 The utility program, MUSTANG, is missing on your system
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("check.utility", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("clean.pdb")
> ### * clean.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: clean.pdb
> ### Title: Inspect And Clean Up A PDB Object
> ### Aliases: clean.pdb
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("clean.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cmap")
> ### * cmap
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cmap
> ### Title: Contact Map
> ### Aliases: cmap cmap.default cmap.xyz cmap.pdb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ##- Read PDB file
> pdb <- read.pdb( system.file("examples/hivp.pdb", package="bio3d") )
> 
> ## Atom Selection indices
> inds <- atom.select(pdb, "calpha")
> 
> ## Reference contact map
> ref.cont <- cmap( pdb$xyz[inds$xyz], dcut=6, scut=3 )
> plot.cmap(ref.cont)
> 
> ## Not run: 
> ##D ##- Read Traj file
> ##D trj <- read.dcd( system.file("examples/hivp.dcd", package="bio3d") )
> ##D ## For each frame of trajectory
> ##D sum.cont <- NULL
> ##D for(i in 1:nrow(trj)) {
> ##D 
> ##D   ## Contact map for frame 'i'
> ##D   cont <- cmap(trj[i,inds$xyz], dcut=6, scut=3)
> ##D 
> ##D   ## Product with reference
> ##D   prod.cont <- ref.cont * cont
> ##D   sum.cont <- c(sum.cont, sum(prod.cont,na.rm=TRUE))
> ##D }
> ##D 
> ##D plot(sum.cont, typ="l")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cmap", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cna")
> ### * cna
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cna
> ### Title: Protein Dynamic Correlation Network Construction and Community
> ###   Analysis.
> ### Aliases: cna cna.dccm cna.ensmb
> ### Keywords: analysis
> 
> ### ** Examples
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cna", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cnapath")
> ### * cnapath
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cnapath
> ### Title: Suboptimal Path Analysis for Correlation Networks
> ### Aliases: cnapath summary.cnapath print.cnapath view.cnapath
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cnapath", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("com")
> ### * com
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: com
> ### Title: Center of Mass
> ### Aliases: com com.pdb com.xyz
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D ## Unknown atom names
> ##D pdb <- read.pdb("3dnd")
> ##D inds <- atom.select(pdb, resid="LL2")
> ##D mycom <- com(pdb, inds, rescue=TRUE)
> ##D #warnings()
> ##D 
> ##D 
> ##D ## Map atom names manually
> ##D pdb <- read.pdb("3RE0")
> ##D inds <- atom.select(pdb, resno=201)
> ##D 
> ##D myelety  <- data.frame(name = c("CL2","PT1","N1","N2"), symb = c("Cl","Pt","N","N"))
> ##D mymasses <- data.frame(symb = c("Cl","Pt"), mass = c(35.45, 195.08))
> ##D mycom    <- com(pdb, inds, elety.custom=myelety, mass.custom=mymasses)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("com", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("combine.select")
> ### * combine.select
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: combine.select
> ### Title: Combine Atom Selections From PDB Structure
> ### Aliases: combine.select
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> # Read a PDB file
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## - Build atom selections to be operated
> # Select C-alpha atoms of entire system
> ca.global.inds <- atom.select(pdb, "calpha")
> 
> # Select C-beta atoms of entire protein
> cb.global.inds <- atom.select(pdb, "protein", elety="CB")
> 
> # Select backbone atoms of entire system
> bb.global.inds <- atom.select(pdb, "backbone")
> 
> # Select all atoms with residue number from 46 to 50
> aa.local.inds <- atom.select(pdb, resno=46:50)
> 
> 
> # Do set intersect:
> # - Return C-alpha atoms with residue number from 46 to 50
> ca.local.inds <- combine.select(ca.global.inds, aa.local.inds)
 Intersect of selects
 *  Selected a total of: 5 atoms  *
> print( pdb$atom[ ca.local.inds$atom, ] )
    type eleno elety  alt resid chain resno insert      x      y      z o     b
359 ATOM   359    CA <NA>   ASN     A    46   <NA> 15.247 22.135 24.062 1 12.92
367 ATOM   367    CA <NA>   THR     A    47   <NA> 18.108 23.768 25.931 1 39.90
374 ATOM   374    CA <NA>   ASP     A    48   <NA> 16.626 22.832 29.261 1  9.90
382 ATOM   382    CA <NA>   GLY     A    49   <NA> 16.950 19.205 28.182 1 10.24
386 ATOM   386    CA <NA>   SER     A    50   <NA> 13.311 18.716 27.712 1  7.32
    segid elesy charge
359  <NA>     C   <NA>
367  <NA>     C   <NA>
374  <NA>     C   <NA>
382  <NA>     C   <NA>
386  <NA>     C   <NA>
> 
> # Do set subtract:
> # - Return side-chain atoms with residue number from 46 to 50
> sc.local.inds <- combine.select(aa.local.inds, bb.global.inds, operator="-")
 Select 2 (, 3, ...) is subtracted from select 1
 *  Selected a total of: 13 atoms  *
> print( pdb$atom[ sc.local.inds$atom, ] )
    type eleno elety  alt resid chain resno insert      x      y      z o     b
362 ATOM   362    CB <NA>   ASN     A    46   <NA> 13.989 22.699 24.735 1 11.70
363 ATOM   363    CG <NA>   ASN     A    46   <NA> 12.659 22.418 24.007 1 21.14
364 ATOM   364   OD1 <NA>   ASN     A    46   <NA> 11.762 21.669 24.459 1 23.29
365 ATOM   365   ND2 <NA>   ASN     A    46   <NA> 12.508 23.062 22.886 1 24.99
370 ATOM   370    CB <NA>   THR     A    47   <NA> 18.506 25.250 25.905 1 47.42
371 ATOM   371   OG1 <NA>   THR     A    47   <NA> 17.376 26.053 26.142 1 38.53
372 ATOM   372   CG2 <NA>   THR     A    47   <NA> 19.115 25.572 24.552 1 58.08
377 ATOM   377    CB <NA>   ASP     A    48   <NA> 15.349 23.377 29.887 1 14.78
378 ATOM   378    CG <NA>   ASP     A    48   <NA> 14.119 22.821 29.267 1 19.04
379 ATOM   379   OD1 <NA>   ASP     A    48   <NA> 14.160 21.981 28.422 1 28.31
380 ATOM   380   OD2 <NA>   ASP     A    48   <NA> 13.002 23.315 29.717 1 28.61
389 ATOM   389    CB <NA>   SER     A    50   <NA> 12.113 19.490 28.182 1  4.67
390 ATOM   390    OG <NA>   SER     A    50   <NA> 12.074 20.716 27.461 1  9.76
    segid elesy charge
362  <NA>     C   <NA>
363  <NA>     C   <NA>
364  <NA>     O   <NA>
365  <NA>     N   <NA>
370  <NA>     C   <NA>
371  <NA>     O   <NA>
372  <NA>     C   <NA>
377  <NA>     C   <NA>
378  <NA>     C   <NA>
379  <NA>     O   <NA>
380  <NA>     O   <NA>
389  <NA>     C   <NA>
390  <NA>     O   <NA>
> 
> # Do set union:
> # - Return C-alpha and side-chain atoms with residue number from 46 to 50
> casc.local.inds <- combine.select(ca.local.inds, sc.local.inds, operator="+")
 Union of selects
 *  Selected a total of: 18 atoms  *
> print( pdb$atom[ casc.local.inds$atom, ] )
    type eleno elety  alt resid chain resno insert      x      y      z o     b
359 ATOM   359    CA <NA>   ASN     A    46   <NA> 15.247 22.135 24.062 1 12.92
362 ATOM   362    CB <NA>   ASN     A    46   <NA> 13.989 22.699 24.735 1 11.70
363 ATOM   363    CG <NA>   ASN     A    46   <NA> 12.659 22.418 24.007 1 21.14
364 ATOM   364   OD1 <NA>   ASN     A    46   <NA> 11.762 21.669 24.459 1 23.29
365 ATOM   365   ND2 <NA>   ASN     A    46   <NA> 12.508 23.062 22.886 1 24.99
367 ATOM   367    CA <NA>   THR     A    47   <NA> 18.108 23.768 25.931 1 39.90
370 ATOM   370    CB <NA>   THR     A    47   <NA> 18.506 25.250 25.905 1 47.42
371 ATOM   371   OG1 <NA>   THR     A    47   <NA> 17.376 26.053 26.142 1 38.53
372 ATOM   372   CG2 <NA>   THR     A    47   <NA> 19.115 25.572 24.552 1 58.08
374 ATOM   374    CA <NA>   ASP     A    48   <NA> 16.626 22.832 29.261 1  9.90
377 ATOM   377    CB <NA>   ASP     A    48   <NA> 15.349 23.377 29.887 1 14.78
378 ATOM   378    CG <NA>   ASP     A    48   <NA> 14.119 22.821 29.267 1 19.04
379 ATOM   379   OD1 <NA>   ASP     A    48   <NA> 14.160 21.981 28.422 1 28.31
380 ATOM   380   OD2 <NA>   ASP     A    48   <NA> 13.002 23.315 29.717 1 28.61
382 ATOM   382    CA <NA>   GLY     A    49   <NA> 16.950 19.205 28.182 1 10.24
386 ATOM   386    CA <NA>   SER     A    50   <NA> 13.311 18.716 27.712 1  7.32
389 ATOM   389    CB <NA>   SER     A    50   <NA> 12.113 19.490 28.182 1  4.67
390 ATOM   390    OG <NA>   SER     A    50   <NA> 12.074 20.716 27.461 1  9.76
    segid elesy charge
359  <NA>     C   <NA>
362  <NA>     C   <NA>
363  <NA>     C   <NA>
364  <NA>     O   <NA>
365  <NA>     N   <NA>
367  <NA>     C   <NA>
370  <NA>     C   <NA>
371  <NA>     O   <NA>
372  <NA>     C   <NA>
374  <NA>     C   <NA>
377  <NA>     C   <NA>
378  <NA>     C   <NA>
379  <NA>     O   <NA>
380  <NA>     O   <NA>
382  <NA>     C   <NA>
386  <NA>     C   <NA>
389  <NA>     C   <NA>
390  <NA>     O   <NA>
> 
> # More than two selections:
> # - Return side-chain atoms (but not C-beta) with residue number from 46 to 50
> sc2.local.inds <- combine.select(aa.local.inds, bb.global.inds, cb.global.inds, operator="-")
 Select 2 (, 3, ...) is subtracted from select 1
 *  Selected a total of: 9 atoms  *
> print( pdb$atom[ sc2.local.inds$atom, ] )
    type eleno elety  alt resid chain resno insert      x      y      z o     b
363 ATOM   363    CG <NA>   ASN     A    46   <NA> 12.659 22.418 24.007 1 21.14
364 ATOM   364   OD1 <NA>   ASN     A    46   <NA> 11.762 21.669 24.459 1 23.29
365 ATOM   365   ND2 <NA>   ASN     A    46   <NA> 12.508 23.062 22.886 1 24.99
371 ATOM   371   OG1 <NA>   THR     A    47   <NA> 17.376 26.053 26.142 1 38.53
372 ATOM   372   CG2 <NA>   THR     A    47   <NA> 19.115 25.572 24.552 1 58.08
378 ATOM   378    CG <NA>   ASP     A    48   <NA> 14.119 22.821 29.267 1 19.04
379 ATOM   379   OD1 <NA>   ASP     A    48   <NA> 14.160 21.981 28.422 1 28.31
380 ATOM   380   OD2 <NA>   ASP     A    48   <NA> 13.002 23.315 29.717 1 28.61
390 ATOM   390    OG <NA>   SER     A    50   <NA> 12.074 20.716 27.461 1  9.76
    segid elesy charge
363  <NA>     C   <NA>
364  <NA>     O   <NA>
365  <NA>     N   <NA>
371  <NA>     O   <NA>
372  <NA>     C   <NA>
378  <NA>     C   <NA>
379  <NA>     O   <NA>
380  <NA>     O   <NA>
390  <NA>     O   <NA>
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("combine.select", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("community.tree")
> ### * community.tree
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: community.tree
> ### Title: Reconstruction of the Girvan-Newman Community Tree for a CNA
> ###   Class Object.
> ### Aliases: community.tree
> ### Keywords: analysis
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("community.tree", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("consensus")
> ### * consensus
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: consensus
> ### Title: Sequence Consensus for an Alignment
> ### Aliases: consensus
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> #-- Read HIV protease alignment
> aln <- read.fasta(system.file("examples/hivp_xray.fa",package="bio3d"))
> 
> # Generate consensus
> con <- consensus(aln)
> print(con$seq)
  [1] "P" "Q" "I" "T" "L" "W" "Q" "R" "P" "L" "V" "T" "I" "K" "I" "G" "G" "Q"
 [19] "L" "K" "E" "A" "L" "L" "D" "T" "G" "A" "D" "D" "T" "V" "L" "E" "E" "M"
 [37] "S" "L" "P" "G" "R" "W" "K" "P" "K" "M" "I" "G" "G" "I" "-" "-" "G" "G"
 [55] "F" "I" "K" "V" "R" "Q" "Y" "D" "Q" "I" "-" "I" "E" "I" "C" "G" "H" "K"
 [73] "A" "I" "G" "T" "V" "L" "V" "G" "P" "T" "P" "V" "N" "I" "I" "G" "R" "N"
 [91] "L" "L" "T" "Q" "I" "G" "C" "T" "L" "N" "F"
> 
> # Plot residue frequency matrix
> ##png(filename = "freq.png", width = 1500, height = 780)
> col <- mono.colors(32)
> aa  <- rev(rownames(con$freq))
> 
> image(x=1:ncol(con$freq),
+       y=1:nrow(con$freq),
+       z=as.matrix(rev(as.data.frame(t(con$freq)))),
+       col=col, yaxt="n", xaxt="n",
+       xlab="Alignment Position", ylab="Residue Type")
> 
> # Add consensus along the axis
> axis(side=1, at=seq(0,length(con$seq),by=5))
> axis(side=2, at=c(1:22), labels=aa)
> axis(side=3, at=c(1:length(con$seq)), labels =con$seq)
> axis(side=4, at=c(1:22), labels=aa)
> grid(length(con$seq), length(aa))
> box()
> 
> # Add consensus sequence
> for(i in 1:length(con$seq)) {
+   text(i, which(aa==con$seq[i]),con$seq[i],col="white")
+ }
> 
> # Add lines for residue type separation
> abline(h=c(2.5,3.5, 4.5, 5.5, 3.5, 7.5, 9.5,
+          12.5, 14.5, 16.5, 19.5), col="gray")
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("consensus", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("conserv")
> ### * conserv
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: conserv
> ### Title: Score Residue Conservation At Each Position in an Alignment
> ### Aliases: conserv
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Read an example alignment
> aln <- read.fasta(system.file("examples/hivp_xray.fa",package="bio3d"))
> 
> ## Score conservation
> conserv(x=aln$ali, method="similarity", sub.matrix="bio3d")
  [1] 9.765816e-01 9.952941e-01 8.513097e-01 9.733885e-01 9.952941e-01
  [6] 9.952941e-01 6.199423e-01 9.850477e-01 1.000000e+00 9.379756e-01
 [11] 1.000000e+00 1.000000e+00 9.766926e-01 7.709889e-01 1.000000e+00
 [16] 9.790233e-01 1.000000e+00 1.000000e+00 9.766926e-01 9.258624e-01
 [21] 9.905993e-01 9.790233e-01 1.000000e+00 9.730255e-01 8.756582e-01
 [26] 1.000000e+00 1.000000e+00 9.915494e-01 1.000000e+00 9.776781e-01
 [31] 9.545105e-01 9.590455e-01 6.639556e-01 9.443130e-01 9.271010e-01
 [36] 9.153596e-01 5.746038e-01 1.000000e+00 9.743618e-01 9.761776e-01
 [41] 7.836815e-01 9.766926e-01 9.577003e-01 1.000000e+00 9.518668e-01
 [46] 9.404950e-01 9.750677e-01 9.831099e-01 9.534406e-01 9.534406e-01
 [51] 1.109878e-05 1.109878e-05 1.000000e+00 1.000000e+00 1.000000e+00
 [56] 9.564218e-01 9.790233e-01 9.766926e-01 9.860155e-01 9.813541e-01
 [61] 1.000000e+00 9.766926e-01 9.674029e-01 9.696737e-01 4.100422e-01
 [66] 8.215583e-01 1.000000e+00 9.860155e-01 5.633552e-01 9.813097e-01
 [71] 9.790233e-01 9.971765e-01 8.923885e-01 9.696737e-01 9.831787e-01
 [76] 1.000000e+00 9.860155e-01 9.836848e-01 9.766926e-01 1.000000e+00
 [81] 9.720311e-01 1.000000e+00 1.000000e+00 6.371454e-01 1.000000e+00
 [86] 8.794939e-01 9.674029e-01 1.000000e+00 1.000000e+00 9.776781e-01
 [91] 9.850477e-01 9.340866e-01 1.000000e+00 9.743618e-01 9.813541e-01
 [96] 1.000000e+00 5.092952e-01 9.790233e-01 1.000000e+00 1.000000e+00
[101] 9.850477e-01
> ##conserv(x=aln$ali,method="entropy22", sub.matrix="other")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("conserv", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("convert.pdb")
> ### * convert.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: convert.pdb
> ### Title: Renumber and Convert Between Various PDB formats
> ### Aliases: convert.pdb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # Read a PDB file
> ##D pdb <- read.pdb("4q21")
> ##D pdb
> ##D head( pdb$atom[pdb$calpha,"resno"] )
> ##D 
> ##D # Convert to CHARMM format
> ##D new <- convert.pdb(pdb, type="amber", renumber=TRUE, first.resno=22 )
> ##D head( new$atom[new$calpha,"resno"] )
> ##D 
> ##D # Write a PDB file
> ##D #write.pdb(new, file="tmp4amber.pdb")
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("convert.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("core.find")
> ### * core.find
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: core.find
> ### Title: Identification of Invariant Core Positions
> ### Aliases: core.find core.find.default core.find.pdbs core.find.pdb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ##-- Generate a small kinesin alignment and read corresponding structures
> ##D pdbfiles <- get.pdb(c("1bg2","2ncd","1i6i","1i5s"), URLonly=TRUE)
> ##D pdbs <- pdbaln(pdbfiles)
> ##D 
> ##D ##-- Find 'core' positions
> ##D core <- core.find(pdbs)
> ##D plot(core)
> ##D 
> ##D ##-- Fit on these relatively invarient subset of positions 
> ##D #core.inds <- print(core, vol=1)
> ##D core.inds <- print(core, vol=0.5)
> ##D xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
> ##D 
> ##D ##-- Compare to fitting on all equivalent positions
> ##D xyz2 <- pdbfit(pdbs)
> ##D 
> ##D ## Note that overall RMSD will be higher but RMSF will
> ##D ##  be lower in core regions, which may equate to a
> ##D ##  'better fit' for certain applications
> ##D gaps <- gap.inspect(pdbs$xyz)
> ##D rmsd(xyz[,gaps$f.inds])
> ##D rmsd(xyz2[,gaps$f.inds])
> ##D 
> ##D plot(rmsf(xyz[,gaps$f.inds]), typ="l", col="blue", ylim=c(0,9))
> ##D points(rmsf(xyz2[,gaps$f.inds]), typ="l", col="red")
> ## End(Not run)
> 
> ## Not run: 
> ##D ##-- Run core.find() on a multimodel PDB file
> ##D pdb <- read.pdb('1d1d', multi=TRUE)
> ##D core <- core.find(pdb)
> ##D 
> ##D ##-- Run core.find() on a trajectory
> ##D trtfile <- system.file("examples/hivp.dcd", package="bio3d")
> ##D trj <- read.dcd(trtfile)
> ##D 
> ##D ## Read the starting PDB file to determine atom correspondence
> ##D pdbfile <- system.file("examples/hivp.pdb", package="bio3d")
> ##D pdb <- read.pdb(pdbfile)
> ##D 
> ##D ## select calpha coords from a manageable number of frames
> ##D ca.ind <- atom.select(pdb, "calpha")$xyz
> ##D frames <- seq(1, nrow(trj), by=10)
> ##D 
> ##D core <- core.find( trj[frames, ca.ind], write.pdbs=TRUE )
> ##D 
> ##D ## have a look at the various cores "vmd -m core_pruned/*.pdb"
> ##D 
> ##D ## Lets use a 6A^3 core cutoff
> ##D inds <- print(core, vol=6)
> ##D write.pdb(xyz=pdb$xyz[inds$xyz],resno=pdb$atom[inds$atom,"resno"], file="core.pdb")
> ##D 
> ##D 
> ##D ##- Fit trj onto starting structure based on core indices
> ##D xyz <- fit.xyz( fixed = pdb$xyz,
> ##D                mobile = trj,
> ##D                fixed.inds  = inds$xyz,
> ##D                mobile.inds = inds$xyz)
> ##D 
> ##D ##write.pdb(pdb=pdb, xyz=xyz, file="new_trj.pdb")
> ##D ##write.ncdf(xyz, "new_trj.nc")
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("core.find", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dccm.enma")
> ### * dccm.enma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dccm.enma
> ### Title: Cross-Correlation for Ensemble NMA (eNMA)
> ### Aliases: dccm.enma
> ### Keywords: analysis
> 
> ### ** Examples
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dccm.enma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dccm.nma")
> ### * dccm.nma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dccm.nma
> ### Title: Dynamic Cross-Correlation from Normal Modes Analysis
> ### Aliases: dccm.nma
> ### Keywords: analysis
> 
> ### ** Examples
> 
> 
> ## Fetch stucture
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Calculate normal modes
> modes <- nma(pdb)
 Building Hessian...		Done in 0.061 seconds.
 Diagonalizing Hessian...	Done in 0.152 seconds.
> 
> ## Calculate correlation matrix
> cm <- dccm.nma(modes)
  |                                                                              |                                                                      |   0%  |                                                                              |                                                                      |   1%  |                                                                              |=                                                                     |   1%  |                                                                              |=                                                                     |   2%  |                                                                              |==                                                                    |   2%  |                                                                              |==                                                                    |   3%  |                                                                              |==                                                                    |   4%  |                                                                              |===                                                                   |   4%  |                                                                              |===                                                                   |   5%  |                                                                              |====                                                                  |   5%  |                                                                              |====                                                                  |   6%  |                                                                              |=====                                                                 |   6%  |                                                                              |=====                                                                 |   7%  |                                                                              |=====                                                                 |   8%  |                                                                              |======                                                                |   8%  |                                                                              |======                                                                |   9%  |                                                                              |=======                                                               |   9%  |                                                                              |=======                                                               |  10%  |                                                                              |=======                                                               |  11%  |                                                                              |========                                                              |  11%  |                                                                              |========                                                              |  12%  |                                                                              |=========                                                             |  12%  |                                                                              |=========                                                             |  13%  |                                                                              |=========                                                             |  14%  |                                                                              |==========                                                            |  14%  |                                                                              |==========                                                            |  15%  |                                                                              |===========                                                           |  15%  |                                                                              |===========                                                           |  16%  |                                                                              |============                                                          |  17%  |                                                                              |============                                                          |  18%  |                                                                              |=============                                                         |  18%  |                                                                              |=============                                                         |  19%  |                                                                              |==============                                                        |  19%  |                                                                              |==============                                                        |  20%  |                                                                              |==============                                                        |  21%  |                                                                              |===============                                                       |  21%  |                                                                              |===============                                                       |  22%  |                                                                              |================                                                      |  22%  |                                                                              |================                                                      |  23%  |                                                                              |=================                                                     |  24%  |                                                                              |=================                                                     |  25%  |                                                                              |==================                                                    |  25%  |                                                                              |==================                                                    |  26%  |                                                                              |===================                                                   |  27%  |                                                                              |===================                                                   |  28%  |                                                                              |====================                                                  |  28%  |                                                                              |====================                                                  |  29%  |                                                                              |=====================                                                 |  29%  |                                                                              |=====================                                                 |  30%  |                                                                              |=====================                                                 |  31%  |                                                                              |======================                                                |  31%  |                                                                              |======================                                                |  32%  |                                                                              |=======================                                               |  32%  |                                                                              |=======================                                               |  33%  |                                                                              |========================                                              |  34%  |                                                                              |========================                                              |  35%  |                                                                              |=========================                                             |  35%  |                                                                              |=========================                                             |  36%  |                                                                              |==========================                                            |  37%  |                                                                              |==========================                                            |  38%  |                                                                              |===========================                                           |  38%  |                                                                              |===========================                                           |  39%  |                                                                              |============================                                          |  39%  |                                                                              |============================                                          |  40%  |                                                                              |============================                                          |  41%  |                                                                              |=============================                                         |  41%  |                                                                              |=============================                                         |  42%  |                                                                              |==============================                                        |  42%  |                                                                              |==============================                                        |  43%  |                                                                              |===============================                                       |  44%  |                                                                              |===============================                                       |  45%  |                                                                              |================================                                      |  45%  |                                                                              |================================                                      |  46%  |                                                                              |=================================                                     |  47%  |                                                                              |=================================                                     |  48%  |                                                                              |==================================                                    |  48%  |                                                                              |==================================                                    |  49%  |                                                                              |===================================                                   |  49%  |                                                                              |===================================                                   |  50%  |                                                                              |===================================                                   |  51%  |                                                                              |====================================                                  |  51%  |                                                                              |====================================                                  |  52%  |                                                                              |=====================================                                 |  52%  |                                                                              |=====================================                                 |  53%  |                                                                              |======================================                                |  54%  |                                                                              |======================================                                |  55%  |                                                                              |=======================================                               |  55%  |                                                                              |=======================================                               |  56%  |                                                                              |========================================                              |  57%  |                                                                              |========================================                              |  58%  |                                                                              |=========================================                             |  58%  |                                                                              |=========================================                             |  59%  |                                                                              |==========================================                            |  59%  |                                                                              |==========================================                            |  60%  |                                                                              |==========================================                            |  61%  |                                                                              |===========================================                           |  61%  |                                                                              |===========================================                           |  62%  |                                                                              |============================================                          |  62%  |                                                                              |============================================                          |  63%  |                                                                              |=============================================                         |  64%  |                                                                              |=============================================                         |  65%  |                                                                              |==============================================                        |  65%  |                                                                              |==============================================                        |  66%  |                                                                              |===============================================                       |  67%  |                                                                              |===============================================                       |  68%  |                                                                              |================================================                      |  68%  |                                                                              |================================================                      |  69%  |                                                                              |=================================================                     |  69%  |                                                                              |=================================================                     |  70%  |                                                                              |=================================================                     |  71%  |                                                                              |==================================================                    |  71%  |                                                                              |==================================================                    |  72%  |                                                                              |===================================================                   |  72%  |                                                                              |===================================================                   |  73%  |                                                                              |====================================================                  |  74%  |                                                                              |====================================================                  |  75%  |                                                                              |====================================================                  |  74%  |                                                                              |====================================================                  |  75%  |                                                                              |=====================================================                 |  75%  |                                                                              |=====================================================                 |  76%  |                                                                              |======================================================                |  77%  |                                                                              |======================================================                |  78%  |                                                                              |=======================================================               |  78%  |                                                                              |=======================================================               |  79%  |                                                                              |========================================================              |  79%  |                                                                              |========================================================              |  80%  |                                                                              |========================================================              |  81%  |                                                                              |=========================================================             |  81%  |                                                                              |=========================================================             |  82%  |                                                                              |==========================================================            |  82%  |                                                                              |==========================================================            |  83%  |                                                                              |===========================================================           |  84%  |                                                                              |===========================================================           |  85%  |                                                                              |============================================================          |  85%  |                                                                              |============================================================          |  86%  |                                                                              |=============================================================         |  86%  |                                                                              |=============================================================         |  87%  |                                                                              |=============================================================         |  88%  |                                                                              |==============================================================        |  88%  |                                                                              |==============================================================        |  89%  |                                                                              |===============================================================       |  89%  |                                                                              |===============================================================       |  90%  |                                                                              |===============================================================       |  91%  |                                                                              |================================================================      |  91%  |                                                                              |================================================================      |  92%  |                                                                              |=================================================================     |  92%  |                                                                              |=================================================================     |  93%  |                                                                              |=================================================================     |  94%  |                                                                              |==================================================================    |  94%  |                                                                              |==================================================================    |  95%  |                                                                              |===================================================================   |  95%  |                                                                              |===================================================================   |  96%  |                                                                              |====================================================================  |  96%  |                                                                              |====================================================================  |  97%  |                                                                              |====================================================================  |  98%  |                                                                              |===================================================================== |  98%  |                                                                              |===================================================================== |  99%  |                                                                              |======================================================================|  99%  |                                                                              |======================================================================| 100%
> 
> ## Plot correlation map
> plot(cm, sse = pdb, contour = FALSE, col.regions = bwr.colors(20),
+      at = seq(-1, 1, 0.1))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dccm.nma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dccm.pca")
> ### * dccm.pca
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dccm.pca
> ### Title: Dynamic Cross-Correlation from Principal Component Analysis
> ### Aliases: dccm.pca
> ### Keywords: analysis
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ##-- Read example trajectory file
> ##D trtfile <- system.file("examples/hivp.dcd", package="bio3d")
> ##D trj <- read.dcd(trtfile)
> ##D 
> ##D ## Read the starting PDB file to determine atom correspondence
> ##D pdbfile <- system.file("examples/hivp.pdb", package="bio3d")
> ##D pdb <- read.pdb(pdbfile)
> ##D 
> ##D ## Select residues 24 to 27 and 85 to 90 in both chains
> ##D inds <- atom.select(pdb, resno=c(24:27,85:90), elety='CA')
> ##D 
> ##D ## lsq fit of trj on pdb
> ##D xyz <- fit.xyz(pdb$xyz, trj, fixed.inds=inds$xyz, mobile.inds=inds$xyz)
> ##D 
> ##D ## Do PCA
> ##D pca <- pca.xyz(xyz)
> ##D 
> ##D ## DCCM: only use first 10 PCs
> ##D cij <- dccm(pca, pc = c(1:10))
> ##D 
> ##D ## Plot DCCM
> ##D plot(cij)
> ##D 
> ##D ## DCCM: remove first 10 PCs
> ##D cij <- dccm(pca, pc = -c(1:10))
> ##D 
> ##D ## Plot DCCM
> ##D plot(cij)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dccm.pca", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dccm.xyz")
> ### * dccm.xyz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dccm.xyz
> ### Title: DCCM: Dynamical Cross-Correlation Matrix
> ### Aliases: dccm.xyz cov2dccm
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D ##-- Read example trajectory file
> ##D trtfile <- system.file("examples/hivp.dcd", package="bio3d")
> ##D trj <- read.dcd(trtfile)
> ##D 
> ##D ## Read the starting PDB file to determine atom correspondence
> ##D pdbfile <- system.file("examples/hivp.pdb", package="bio3d")
> ##D pdb <- read.pdb(pdbfile)
> ##D 
> ##D ## select residues 24 to 27 and 85 to 90 in both chains
> ##D inds <- atom.select(pdb, resno=c(24:27,85:90), elety='CA')
> ##D 
> ##D ## lsq fit of trj on pdb
> ##D xyz <- fit.xyz(pdb$xyz, trj, fixed.inds=inds$xyz, mobile.inds=inds$xyz)
> ##D 
> ##D ## DCCM (slow to run so restrict to Calpha)
> ##D cij <- dccm(xyz)
> ##D 
> ##D ## Plot DCCM
> ##D plot(cij)
> ##D 
> ##D ## Or
> ##D library(lattice)
> ##D contourplot(cij, region = TRUE, labels=FALSE, col="gray40",
> ##D             at=c(-1, -0.75, -0.5, -0.25, 0.25, 0.5, 0.75, 1),
> ##D             xlab="Residue No.", ylab="Residue No.",
> ##D             main="DCCM: dynamic cross-correlation map")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dccm.xyz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("deformation.nma")
> ### * deformation.nma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: deformation.nma
> ### Title: Deformation Analysis
> ### Aliases: deformation.nma
> ### Keywords: analysis
> 
> ### ** Examples
> 
> ## Fetch stucture
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Calculate (vibrational) normal modes
> modes <- nma(pdb)
 Building Hessian...		Done in 0.031 seconds.
 Diagonalizing Hessian...	Done in 0.127 seconds.
> 
> ## Calculate deformation energies
> def.energies <- deformation.nma(modes)
> 
> ## Not run: 
> ##D ## Fluctuations of first non-trivial mode
> ##D def.energies <- deformation.nma(modes, mode.inds=seq(7, 16))
> ##D 
> ##D write.pdb(pdb=NULL, xyz=modes$xyz,
> ##D           b=def.energies$ei[,1])
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("deformation.nma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("diag.ind")
> ### * diag.ind
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: diag.ind
> ### Title: Diagonal Indices of a Matrix
> ### Aliases: diag.ind
> ### Keywords: utilities
> 
> ### ** Examples
> 
> diag.ind( matrix(,ncol=5,nrow=5), n=3 )
      [,1]  [,2]  [,3]  [,4]  [,5]
[1,]  TRUE  TRUE  TRUE FALSE FALSE
[2,] FALSE  TRUE  TRUE  TRUE FALSE
[3,] FALSE FALSE  TRUE  TRUE  TRUE
[4,] FALSE FALSE FALSE  TRUE  TRUE
[5,] FALSE FALSE FALSE FALSE  TRUE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("diag.ind", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("difference.vector")
> ### * difference.vector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: difference.vector
> ### Title: Difference Vector
> ### Aliases: difference.vector
> ### Keywords: utilities
> 
> ### ** Examples
> 
> data(kinesin)
> attach(kinesin, warn.conflicts=FALSE)
>      
> # Ignore gap containing positions
> gaps.pos <- gap.inspect(pdbs$xyz)
>      
> #-- Do PCA
> pc.xray <- pca.xyz(pdbs$xyz[, gaps.pos$f.inds])
>      
> # Define a difference vector between two structural states
> diff.inds <- c(grep("d1v8ja", pdbs$id), 
+                grep("d1goja", pdbs$id))
> 
> ## Calculate the difference vector
> dv <- difference.vector( pdbs$xyz[diff.inds,], gaps.pos$f.inds )
> 
> # Calculate the squared overlap between the PCs and the difference vector  
> o <- overlap(pc.xray, dv)
> 
> detach(kinesin)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("difference.vector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dist.xyz")
> ### * dist.xyz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dist.xyz
> ### Title: Calculate the Distances Between the Rows of Two Matrices
> ### Aliases: dist.xyz
> ### Keywords: utilities
> 
> ### ** Examples
> 
>  dist.xyz( c(1,1,1, 3,3,3), c(3,3,3, 2,2,2, 1,1,1))
         [,1]     [,2]     [,3]
[1,] 3.464102 1.732051 0.000000
[2,] 0.000000 1.732051 3.464102
>  dist.xyz( c(1,1,1, 3,3,3), c(3,3,3, 2,2,2, 1,1,1), all.pairs=FALSE)
[1] 3.464102 1.732051       NA
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dist.xyz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dm")
> ### * dm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dm
> ### Title: Distance Matrix Analysis
> ### Aliases: dm dm.pdb dm.xyz
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D ##-- Residue-wise distance matrix based on the
> ##D ##   minimal distance between all available atoms
> ##D l <- dm.xyz(pdb$xyz, grpby=pdb$atom[,"resno"], scut=3)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dssp")
> ### * dssp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dssp
> ### Title: Secondary Structure Analysis with DSSP or STRIDE
> ### Aliases: dssp dssp.pdb dssp.pdbs dssp.xyz stride print.sse
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ##- PDB example
> ##D # Read a PDB file
> ##D pdb <- read.pdb("1bg2")
> ##D sse <- dssp(pdb)
> ##D sse2 <- stride(pdb)
> ##D 
> ##D ## Short summary
> ##D sse
> ##D sse2
> ##D 
> ##D # Helix data
> ##D sse$helix
> ##D 
> ##D # Precent SSE content
> ##D sum(sse$helix$length)/sum(pdb$calpha) * 100
> ##D sum(sse$sheet$length)/sum(pdb$calpha) * 100
> ##D 
> ##D 
> ##D 
> ##D ##- PDBs example
> ##D aln  <- read.fasta( system.file("examples/kif1a.fa",package="bio3d") )
> ##D pdbs <- read.fasta.pdb( aln )
> ##D 
> ##D ## Aligned PDB defined secondary structure
> ##D pdbs$sse
> ##D 
> ##D ## Aligned DSSP defined secondary structure 
> ##D sse <- dssp(pdbs)
> ##D 
> ##D 
> ##D ##- XYZ Trajectory
> ##D pdb <- read.pdb("2mda", multi=TRUE)
> ##D dssp.xyz(pdb$xyz, pdb)
> ##D 
> ##D ## Note. for large MD trajectories you may want to skip some frames, e.g.
> ##D xyz <- rbind(pdb$xyz, pdb$xyz)       ## dummy trajectory
> ##D frames <- seq(1, to=nrow(xyz), by=4) ## frame numbers to examine
> ##D ss <- dssp.xyz(xyz[frames, ], pdb)      ## matrix of sse frame x residue
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dssp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("elements")
> ### * elements
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: elements
> ### Title: Periodic Table of the Elements
> ### Aliases: elements
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(elements)
> elements
    num symb areneg rcov  rbo rvdw maxbnd       mass elneg ionization
1     0   Xx   0.00 0.00 0.00 0.00      0   0.000000  0.00     0.0000
2     1    H   2.20 0.31 0.31 1.10      1   1.007940  2.20    13.5984
3     2   He   0.00 0.28 0.28 1.40      0   4.002602  0.00    24.5874
4     3   Li   0.97 1.28 1.28 1.81      1   6.941000  0.98     5.3917
5     4   Be   1.47 0.96 0.96 1.53      2   9.012182  1.57     9.3227
6     5    B   2.01 0.84 0.84 1.92      4  10.811000  2.04     8.2980
7     6    C   2.50 0.76 0.76 1.70      4  12.010700  2.55    11.2603
8     7    N   3.07 0.71 0.71 1.55      4  14.006700  3.04    14.5341
9     8    O   3.50 0.66 0.66 1.52      2  15.999400  3.44    13.6181
10    9    F   4.10 0.57 0.57 1.47      1  18.998403  3.98    17.4228
11   10   Ne   0.00 0.58 0.58 1.54      0  20.179700  0.00    21.5645
12   11   Na   1.01 1.66 1.66 2.27      1  22.989770  0.93     5.1391
13   12   Mg   1.23 1.41 1.41 1.73      2  24.305000  1.31     7.6462
14   13   Al   1.47 1.21 1.21 1.84      6  26.981538  1.61     5.9858
15   14   Si   1.74 1.11 1.11 2.10      6  28.085500  1.90     8.1517
16   15    P   2.06 1.07 1.07 1.80      6  30.973761  2.19    10.4867
17   16    S   2.44 1.05 1.05 1.80      6  32.065000  2.58    10.3600
18   17   Cl   2.83 1.02 1.02 1.75      1  35.453000  3.16    12.9676
19   18   Ar   0.00 1.06 1.06 1.88      0  39.948000  0.00    15.7596
20   19    K   0.91 2.03 2.03 2.75      1  39.098300  0.82     4.3407
21   20   Ca   1.04 1.76 1.76 2.31      2  40.078000  1.00     6.1132
22   21   Sc   1.20 1.70 1.70 2.30      6  44.955910  1.36     6.5615
23   22   Ti   1.32 1.60 1.60 2.15      6  47.867000  1.54     6.8281
24   23    V   1.45 1.53 1.53 2.05      6  50.941500  1.63     6.7462
25   24   Cr   1.56 1.39 1.39 2.05      6  51.996100  1.66     6.7665
26   25   Mn   1.60 1.39 1.39 2.05      8  54.938049  1.55     7.4340
27   26   Fe   1.64 1.32 1.32 2.05      6  55.845000  1.83     7.9024
28   27   Co   1.70 1.26 1.26 2.00      6  58.933200  1.88     7.8810
29   28   Ni   1.75 1.24 1.24 2.00      6  58.693400  1.91     7.6398
30   29   Cu   1.75 1.32 1.32 2.00      6  63.546000  1.90     7.7264
31   30   Zn   1.66 1.22 1.22 2.10      6  65.380000  1.65     9.3942
32   31   Ga   1.82 1.22 1.22 1.87      3  69.723000  1.81     5.9993
33   32   Ge   2.02 1.20 1.20 2.11      4  72.640000  2.01     7.8994
34   33   As   2.20 1.19 1.19 1.85      3  74.921600  2.18     9.7886
35   34   Se   2.48 1.20 1.20 1.90      2  78.960000  2.55     9.7524
36   35   Br   2.74 1.20 1.20 1.83      1  79.904000  2.96    11.8138
37   36   Kr   0.00 1.16 1.16 2.02      0  83.798000  3.00    13.9996
38   37   Rb   0.89 2.20 2.20 3.03      1  85.467800  0.82     4.1771
39   38   Sr   0.99 1.95 1.95 2.49      2  87.620000  0.95     5.6949
40   39    Y   1.11 1.90 1.90 2.40      6  88.905850  1.22     6.2173
41   40   Zr   1.22 1.75 1.75 2.30      6  91.224000  1.33     6.6339
42   41   Nb   1.23 1.64 1.64 2.15      6  92.906380  1.60     6.7589
43   42   Mo   1.30 1.54 1.54 2.10      6  95.960000  2.16     7.0924
44   43   Tc   1.36 1.47 1.47 2.05      6  98.000000  1.90     7.2800
45   44   Ru   1.42 1.46 1.46 2.05      6 101.070000  2.20     7.3605
46   45   Rh   1.45 1.42 1.42 2.00      6 102.905500  2.28     7.4589
47   46   Pd   1.35 1.39 1.39 2.05      6 106.420000  2.20     8.3369
48   47   Ag   1.42 1.45 1.45 2.10      6 107.868200  1.93     7.5762
49   48   Cd   1.46 1.44 1.44 2.20      6 112.411000  1.69     8.9938
50   49   In   1.49 1.42 1.42 2.20      3 114.818000  1.78     5.7864
51   50   Sn   1.72 1.39 1.39 1.93      4 118.701000  1.96     7.3439
52   51   Sb   1.82 1.39 1.39 2.17      3 121.760000  2.05     8.6084
53   52   Te   2.01 1.38 1.38 2.06      2 127.600000  2.10     9.0096
54   53    I   2.21 1.39 1.39 1.98      1 126.904470  2.66    10.4513
55   54   Xe   0.00 1.40 1.40 2.16      0 131.293000  2.60    12.1298
56   55   Cs   0.86 2.44 2.44 3.43      1 132.905450  0.79     3.8939
57   56   Ba   0.97 2.15 2.15 2.68      2 137.327000  0.89     5.2117
58   57   La   1.08 2.07 2.07 2.50     12 138.905500  1.10     5.5769
59   58   Ce   0.00 2.04 2.04 2.48      6 140.116000  1.12     5.5387
60   59   Pr   0.00 2.03 2.03 2.47      6 140.907650  1.13     5.4730
61   60   Nd   0.00 2.01 2.01 2.45      6 144.240000  1.14     5.5250
62   61   Pm   0.00 1.99 1.99 2.43      6 145.000000  0.00     5.5820
63   62   Sm   0.00 1.98 1.98 2.42      6 150.360000  1.17     5.6437
64   63   Eu   0.00 1.98 1.98 2.40      6 151.964000  0.00     5.6704
65   64   Gd   0.00 1.96 1.96 2.38      6 157.250000  1.20     6.1498
66   65   Tb   0.00 1.94 1.94 2.37      6 158.925340  0.00     5.8638
67   66   Dy   0.00 1.92 1.92 2.35      6 162.500000  1.22     5.9389
68   67   Ho   0.00 1.92 1.92 2.33      6 164.930320  1.23     6.0215
69   68   Er   0.00 1.89 1.89 2.32      6 167.259000  1.24     6.1077
70   69   Tm   0.00 1.90 1.90 2.30      6 168.934210  1.25     6.1843
71   70   Yb   0.00 1.87 1.87 2.28      6 173.054000  0.00     6.2542
72   71   Lu   0.00 1.87 1.87 2.27      6 174.966800  1.27     5.4259
73   72   Hf   1.23 1.75 1.75 2.25      6 178.490000  1.30     6.8251
74   73   Ta   1.33 1.70 1.70 2.20      6 180.947900  1.50     7.5496
75   74    W   1.40 1.62 1.62 2.10      6 183.840000  2.36     7.8640
76   75   Re   1.46 1.51 1.51 2.05      6 186.207000  1.90     7.8335
77   76   Os   1.52 1.44 1.44 2.00      6 190.230000  2.20     8.4382
78   77   Ir   1.55 1.41 1.41 2.00      6 192.217000  2.20     8.9670
79   78   Pt   1.44 1.36 1.36 2.05      6 195.078000  2.28     8.9588
80   79   Au   1.42 1.36 1.36 2.10      6 196.966550  2.54     9.2255
81   80   Hg   1.44 1.32 1.32 2.05      6 200.590000  2.00    10.4375
82   81   Tl   1.44 1.45 1.45 1.96      3 204.383300  1.62     6.1082
83   82   Pb   1.55 1.46 1.46 2.02      4 207.200000  2.33     7.4167
84   83   Bi   1.67 1.48 1.48 2.07      3 208.980400  2.02     7.2855
85   84   Po   1.76 1.40 1.40 1.97      2 209.000000  2.00     8.4140
86   85   At   1.90 1.50 1.50 2.02      1 210.000000  2.20     0.0000
87   86   Rn   0.00 1.50 1.50 2.20      0 222.000000  0.00    10.7485
88   87   Fr   0.00 2.60 2.60 3.48      1 223.000000  0.70     4.0727
89   88   Ra   0.00 2.21 2.21 2.83      2 226.000000  0.90     5.2784
90   89   Ac   0.00 2.15 2.15 2.00      6 227.000000  1.10     5.1700
91   90   Th   0.00 2.06 2.06 2.40      6 232.038100  1.30     6.3067
92   91   Pa   0.00 2.00 2.00 2.00      6 231.035880  1.50     5.8900
93   92    U   0.00 1.96 1.96 2.30      6 238.028910  1.38     6.1941
94   93   Np   0.00 1.90 1.90 2.00      6 237.000000  1.36     6.2657
95   94   Pu   0.00 1.87 1.87 2.00      6 244.000000  1.28     6.0260
96   95   Am   0.00 1.80 1.80 2.00      6 243.000000  1.30     5.9738
97   96   Cm   0.00 1.69 1.69 2.00      6 247.000000  1.30     5.9914
98   97   Bk   0.00 1.60 1.60 2.00      6 247.000000  1.30     6.1979
99   98   Cf   0.00 1.60 1.60 2.00      6 251.000000  1.30     6.2817
100  99   Es   0.00 1.60 1.60 2.00      6 252.000000  1.30     6.4200
101 100   Fm   0.00 1.60 1.60 2.00      6 257.000000  1.30     6.5000
102 101   Md   0.00 1.60 1.60 2.00      6 258.000000  1.30     6.5800
103 102   No   0.00 1.60 1.60 2.00      6 259.000000  1.30     6.6500
104 103   Lr   0.00 1.60 1.60 2.00      6 262.000000  0.00     4.9000
105 104   Rf   0.00 1.60 1.60 2.00      6 267.000000  0.00     6.0000
106 105   Db   0.00 1.60 1.60 2.00      6 268.000000  0.00     0.0000
107 106   Sg   0.00 1.60 1.60 2.00      6 271.000000  0.00     0.0000
108 107   Bh   0.00 1.60 1.60 2.00      6 272.000000  0.00     0.0000
109 108   Hs   0.00 1.60 1.60 2.00      6 270.000000  0.00     0.0000
110 109   Mt   0.00 1.60 1.60 2.00      6 268.000000  0.00     0.0000
111 110   Ds   0.00 1.60 1.60 2.00      6 281.000000  0.00     0.0000
112 111   Rg   0.00 1.60 1.60 2.00      6 280.000000  0.00     0.0000
113 112   Cp   0.00 1.60 1.60 2.00      6 285.000000  0.00     0.0000
114 113  Uut   0.00 1.60 1.60 2.00      6 284.000000  0.00     0.0000
115 114  Uuq   0.00 1.60 1.60 2.00      6 289.000000  0.00     0.0000
116 115  Uup   0.00 1.60 1.60 2.00      6 288.000000  0.00     0.0000
117 116  Uuh   0.00 1.60 1.60 2.00      6 293.000000  0.00     0.0000
    elaffinity  red green blue          name
1    0.0000000 0.07  0.50 0.70         Dummy
2    0.7542037 1.00  1.00 1.00      Hydrogen
3    0.0000000 0.85  1.00 1.00        Helium
4    0.6180490 0.80  0.50 1.00       Lithium
5    0.0000000 0.76  1.00 0.00     Beryllium
6    0.2797230 1.00  0.71 0.71         Boron
7    1.2621180 0.50  0.50 0.50        Carbon
8   -0.0700000 0.05  0.05 1.00      Nitrogen
9    1.4611120 1.00  0.05 0.05        Oxygen
10   3.4011887 0.70  1.00 1.00      Fluorine
11   0.0000000 0.70  0.89 0.96          Neon
12   0.5479260 0.67  0.36 0.95        Sodium
13   0.0000000 0.54  1.00 0.00     Magnesium
14   0.4328300 0.75  0.65 0.65     Aluminium
15   1.3895210 0.50  0.60 0.60       Silicon
16   0.7465000 1.00  0.50 0.00    Phosphorus
17   2.0771029 1.00  1.00 0.19        Sulfur
18   3.6127240 0.12  0.94 0.12      Chlorine
19   0.0000000 0.50  0.82 0.89         Argon
20   0.5014590 0.56  0.25 0.83     Potassium
21   0.0245500 0.24  1.00 0.00       Calcium
22   0.1880000 0.90  0.90 0.90      Scandium
23   0.0840000 0.75  0.76 0.78      Titanium
24   0.5250000 0.65  0.65 0.67      Vanadium
25   0.6758400 0.54  0.60 0.78      Chromium
26   0.0000000 0.61  0.48 0.78     Manganese
27   0.1510000 0.88  0.40 0.20          Iron
28   0.6633000 0.94  0.56 0.63        Cobalt
29   1.1571600 0.31  0.82 0.31        Nickel
30   1.2357800 0.78  0.50 0.20        Copper
31   0.0000000 0.49  0.50 0.69          Zinc
32   0.4100000 0.76  0.56 0.56       Gallium
33   1.2327120 0.40  0.56 0.56     Germanium
34   0.8140000 0.74  0.50 0.89       Arsenic
35   2.0206700 1.00  0.63 0.00      Selenium
36   3.3635880 0.65  0.16 0.16       Bromine
37   0.0000000 0.36  0.72 0.82       Krypton
38   0.4859160 0.44  0.18 0.69      Rubidium
39   0.0520600 0.00  1.00 0.00     Strontium
40   0.3070000 0.58  1.00 1.00       Yttrium
41   0.4260000 0.58  0.88 0.88     Zirconium
42   0.8930000 0.45  0.76 0.79       Niobium
43   0.7472000 0.33  0.71 0.71    Molybdenum
44   0.5500000 0.23  0.62 0.62    Technetium
45   1.0463800 0.14  0.56 0.56     Ruthenium
46   1.1428900 0.04  0.49 0.55       Rhodium
47   0.5621400 0.00  0.41 0.52     Palladium
48   1.3044700 0.88  0.88 1.00        Silver
49   0.0000000 1.00  0.85 0.56       Cadmium
50   0.4040000 0.65  0.46 0.45        Indium
51   1.1120660 0.40  0.50 0.50           Tin
52   1.0474010 0.62  0.39 0.71      Antimony
53   1.9708750 0.83  0.48 0.00     Tellurium
54   3.0590380 0.58  0.00 0.58        Iodine
55   0.0000000 0.26  0.62 0.69         Xenon
56   0.4716260 0.34  0.09 0.56       Caesium
57   0.1446200 0.00  0.79 0.00        Barium
58   0.4700000 0.44  0.83 1.00     Lanthanum
59   0.5000000 1.00  1.00 0.78        Cerium
60   0.5000000 0.85  1.00 0.78  Praseodymium
61   0.5000000 0.78  1.00 0.78     Neodymium
62   0.5000000 0.64  1.00 0.78    Promethium
63   0.5000000 0.56  1.00 0.78      Samarium
64   0.5000000 0.38  1.00 0.78      Europium
65   0.5000000 0.27  1.00 0.78    Gadolinium
66   0.5000000 0.19  1.00 0.78       Terbium
67   0.5000000 0.12  1.00 0.78    Dysprosium
68   0.5000000 0.00  1.00 0.61       Holmium
69   0.5000000 0.00  0.90 0.46        Erbium
70   0.5000000 0.00  0.83 0.32       Thulium
71   0.5000000 0.00  0.75 0.22     Ytterbium
72   0.5000000 0.00  0.67 0.14      Lutetium
73   0.0000000 0.30  0.76 1.00       Hafnium
74   0.3220000 0.30  0.65 1.00      Tantalum
75   0.8150000 0.13  0.58 0.84      Tungsten
76   0.1500000 0.15  0.49 0.67       Rhenium
77   1.0778000 0.15  0.40 0.59        Osmium
78   1.5643600 0.09  0.33 0.53       Iridium
79   2.1251000 0.96  0.93 0.82      Platinum
80   2.3086100 0.80  0.82 0.12          Gold
81   0.0000000 0.71  0.71 0.76       Mercury
82   0.3770000 0.65  0.33 0.30      Thallium
83   0.3640000 0.34  0.35 0.38          Lead
84   0.9423630 0.62  0.31 0.71       Bismuth
85   1.9000000 0.67  0.36 0.00      Polonium
86   2.8000000 0.46  0.31 0.27      Astatine
87   0.0000000 0.26  0.51 0.59         Radon
88   0.0000000 0.26  0.00 0.40      Francium
89   0.0000000 0.00  0.49 0.00        Radium
90   0.0000000 0.44  0.67 0.98      Actinium
91   0.0000000 0.00  0.73 1.00       Thorium
92   0.0000000 0.00  0.63 1.00  Protactinium
93   0.0000000 0.00  0.56 1.00       Uranium
94   0.0000000 0.00  0.50 1.00     Neptunium
95   0.0000000 0.00  0.42 1.00     Plutonium
96   0.0000000 0.33  0.36 0.95     Americium
97   0.0000000 0.47  0.36 0.89        Curium
98   0.0000000 0.54  0.31 0.89     Berkelium
99   0.0000000 0.63  0.21 0.83   Californium
100  0.0000000 0.70  0.12 0.83   Einsteinium
101  0.0000000 0.70  0.12 0.73       Fermium
102  0.0000000 0.70  0.05 0.65   Mendelevium
103  0.0000000 0.74  0.05 0.53      Nobelium
104  0.0000000 0.78  0.00 0.40    Lawrencium
105  0.0000000 0.80  0.00 0.35 Rutherfordium
106  0.0000000 0.82  0.00 0.31       Dubnium
107  0.0000000 0.85  0.00 0.27    Seaborgium
108  0.0000000 0.88  0.00 0.22       Bohrium
109  0.0000000 0.90  0.00 0.18       Hassium
110  0.0000000 0.92  0.00 0.15    Meitnerium
111  0.0000000 0.93  0.00 0.14  Darmstadtium
112  0.0000000 0.94  0.00 0.13   Roentgenium
113  0.0000000 0.95  0.00 0.12   Copernicium
114  0.0000000 0.96  0.00 0.11     Ununtrium
115  0.0000000 0.97  0.00 0.10   Ununquadium
116  0.0000000 0.98  0.00 0.09   Ununpentium
117  0.0000000 0.99  0.00 0.08    Ununhexium
> 
> # Get the mass of some elements
> symb <- c("C","O","H")
> elements[match(symb,elements[,"symb"]),"mass"]
[1] 12.01070 15.99940  1.00794
> 
> # Get the van der Waals radii of some elements
> symb <- c("C","O","H")
> elements[match(symb,elements[,"symb"]),"rvdw"]
[1] 1.70 1.52 1.10
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("elements", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("entropy")
> ### * entropy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: entropy
> ### Title: Shannon Entropy Score
> ### Aliases: entropy
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> # Read HIV protease alignment 
> aln <- read.fasta(system.file("examples/hivp_xray.fa",package="bio3d"))
> 
> # Entropy and consensus
> h   <- entropy(aln)
> con <- consensus(aln)
> 
> names(h$H)=con$seq
> print(h$H)
         P          Q          I          T          L          W          Q 
0.09227725 0.02393486 0.62933888 0.12466516 0.02393486 0.02393486 0.96209081 
         R          P          L          V          T          I          K 
0.07686780 0.00000000 0.27975888 0.00000000 0.00000000 0.09227725 0.86959288 
         I          G          G          Q          L          K          E 
0.00000000 0.09227725 0.00000000 0.00000000 0.09227725 0.27553960 0.04315583 
         A          L          L          D          T          G          A 
0.09227725 0.00000000 0.13088164 0.41854739 0.00000000 0.00000000 0.04315583 
         D          D          T          V          L          E          E 
0.00000000 0.10699510 0.17330174 0.22028327 1.03800101 0.18467696 0.27975888 
         M          S          L          P          G          R          W 
0.39309794 1.13841259 0.00000000 0.09227725 0.10077052 0.85394134 0.09227725 
         K          P          K          M          I          G          G 
0.17747686 0.00000000 0.13478305 0.30355500 0.14799610 0.06707466 0.16082302 
         I          -          -          G          G          F          I 
0.16082302 0.04315583 0.04315583 0.00000000 0.00000000 0.00000000 0.23139803 
         K          V          R          Q          Y          D          Q 
0.09227725 0.09227725 0.09227725 0.09227725 0.00000000 0.09227725 0.13535254 
         I          -          I          E          I          C          G 
0.17330174 1.51410936 0.68264397 0.00000000 0.09227725 1.09295797 0.07686780 
         H          K          A          I          G          T          V 
0.09227725 0.02393486 0.37975268 0.10077052 0.07686780 0.00000000 0.09227725 
         L          V          G          P          T          P          V 
0.09227725 0.09227725 0.00000000 0.09227725 0.00000000 0.00000000 1.25743603 
         N          I          I          G          R          N          L 
0.00000000 0.50872419 0.13535254 0.00000000 0.00000000 0.10699510 0.07686780 
         L          T          Q          I          G          C          T 
0.28389290 0.00000000 0.09227725 0.09227725 0.00000000 1.19427669 0.09227725 
         L          N          F 
0.00000000 0.00000000 0.07686780 
> 
> # Entropy for sub-alignment (positions 1 to 20) 
> h.sub <- entropy(aln$ali[,1:20])
> 
> # Plot entropy and residue frequencies (excluding positions >=60 percent gaps)
> H <- h$H.norm
> H[ apply(h$freq[21:22,],2,sum)>=0.6 ] = 0
> 
> col <- mono.colors(32)
> aa  <- rev(rownames(h$freq))
> oldpar <- par(no.readonly=TRUE)
> layout(matrix(c(1,2),2,1,byrow = TRUE), widths = 7, 
+        heights = c(2, 8), respect = FALSE)
> 
> # Plot 1: entropy
> par(mar = c(0, 4, 2, 2))
> barplot(H, border="white", ylab = "Entropy",
+         space=0, xlim=c(3.7, 97.3),yaxt="n" )
> axis(side=2, at=c(0.2,0.4, 0.6, 0.8))
> axis(side=3, at=(seq(0,length(con$seq),by=5)-0.5),
+      labels=seq(0,length(con$seq),by=5))
> box()
> 
> # Plot2: residue frequencies 
> par(mar = c(5, 4, 0, 2))
> image(x=1:ncol(con$freq),
+       y=1:nrow(con$freq),
+       z=as.matrix(rev(as.data.frame(t(con$freq)))),
+       col=col, yaxt="n", xaxt="n",
+       xlab="Alignment Position", ylab="Residue Type")
> axis(side=1, at=seq(0,length(con$seq),by=5))
> axis(side=2, at=c(1:22), labels=aa)
> axis(side=3, at=c(1:length(con$seq)), labels =con$seq)
> axis(side=4, at=c(1:22), labels=aa)
> grid(length(con$seq), length(aa))
> box()
> 
> for(i in 1:length(con$seq)) {
+   text(i, which(aa==con$seq[i]),con$seq[i],col="white")
+ }
> abline(h=c(3.5, 4.5, 5.5, 3.5, 7.5, 9.5,
+          12.5, 14.5, 16.5, 19.5), col="gray")
> 
> par(oldpar)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("entropy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("filter.cmap")
> ### * filter.cmap
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: filter.cmap
> ### Title: Contact Map Consensus Filtering
> ### Aliases: filter.cmap
> ### Keywords: analysis
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D   ## need abind package
> ##D   if(!require(abind)) {
> ##D      install.packages("abind")
> ##D      require(abind)
> ##D   }
> ##D 
> ##D   ## load example data
> ##D   pdbfile <- system.file("examples/hivp.pdb", package="bio3d")
> ##D   pdb <- read.pdb(pdbfile)
> ##D 
> ##D   trtfile <- system.file("examples/hivp.dcd", package="bio3d")
> ##D   trj <- read.dcd(trtfile, verbose=FALSE)
> ##D 
> ##D   ## split the trj example in two
> ##D   num.of.frames <- dim(trj)[1]
> ##D   trj1 <- trj[1:(num.of.frames/2),]
> ##D   trj2 <- trj[((num.of.frames/2)+1):num.of.frames,]
> ##D 
> ##D   ## Lets work with Calpha atoms only
> ##D   ca.inds <- atom.select(pdb, "calpha")
> ##D   #noh.inds <- atom.select(pdb, "noh")
> ##D 
> ##D   ## calculate single contact map matrices
> ##D   cm.1 <- cmap(trj1[,ca.inds$xyz], pcut=0.3, scut=0, dcut=7, mask.lower=FALSE)
> ##D   cm.2 <- cmap(trj2[,ca.inds$xyz], pcut=0.3, scut=0, dcut=5, mask.lower=FALSE)
> ##D 
> ##D   ## create a 3D contact matrix from 3 simulations
> ##D   cm.all <- abind(cm.1, cm.2, along=3)
> ##D 
> ##D   ## calculate average contact matrix
> ##D   cm.filter <- filter.cmap(cm=cm.all, cutoff.sims=2)
> ##D 
> ##D   ## plot the result
> ##D   par(pty="s", mfcol=c(1,3))
> ##D   image(cm.1, col=c(NA,"black"))
> ##D   image(cm.2, col=c(NA,"black"))
> ##D   image(cm.filter, col=c(NA,"black"))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("filter.cmap", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("filter.dccm")
> ### * filter.dccm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: filter.dccm
> ### Title: Filter for Cross-correlation Matrices (Cij)
> ### Aliases: filter.dccm
> ### Keywords: analysis
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # Example of transducin
> ##D attach(transducin)
> ##D 
> ##D gaps.pos <- gap.inspect(pdbs$xyz)
> ##D modes <- nma.pdbs(pdbs, full=TRUE)
> ##D dccms <- dccm.enma(modes)
> ##D 
> ##D cij <- filter.dccm(dccms, xyz=pdbs)
> ##D 
> ##D # Example protein kinase
> ##D # Select Protein Kinase PDB IDs
> ##D ids <- c("4b7t_A", "2exm_A", "1opj_A", "4jaj_A", "1a9u_A",
> ##D                  "1tki_A", "1csn_A", "1lp4_A")
> ##D 
> ##D # Download and split by chain ID
> ##D files <- get.pdb(ids, path = "raw_pdbs", split=TRUE)
> ##D 
> ##D # Alignment of structures
> ##D pdbs <- pdbaln(files) # Sequence identity
> ##D summary(c(seqidentity(pdbs)))
> ##D 
> ##D # NMA on all structures
> ##D modes <- nma.pdbs(pdbs, full = TRUE)
> ##D 
> ##D # Calculate correlation matrices for each structure
> ##D cij <- dccm(modes)
> ##D 
> ##D # Set DCCM plot panel names for combined figure
> ##D dimnames(cij$all.dccm) = list(NULL, NULL, ids)
> ##D plot.dccm(cij$all.dccm)
> ##D 
> ##D # Filter to display only correlations present in all structures
> ##D cij.all <- filter.dccm(cij, cutoff.sims = 8, cutoff.cij = 0)
> ##D plot.dccm(cij.all, main = "Consensus Residue Cross Correlation")
> ##D 
> ##D detach(transducin)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("filter.dccm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("filter.identity")
> ### * filter.identity
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: filter.identity
> ### Title: Percent Identity Filter
> ### Aliases: filter.identity
> ### Keywords: utilities
> 
> ### ** Examples
> 
> data(kinesin)
> attach(kinesin, warn.conflicts=FALSE)
> 
> ide.mat <- seqidentity(pdbs)
> 
> # Histogram of pairwise identity values
> op <- par(no.readonly=TRUE)
> par(mfrow=c(2,1))
> hist(ide.mat[upper.tri(ide.mat)], breaks=30,xlim=c(0,1),
+      main="Sequence Identity", xlab="Identity")
> 
> k <- filter.identity(ide=ide.mat, cutoff=0.6)
filter.identity(): N clusters @ cutoff =  10 
> ide.cut <- seqidentity(pdbs$ali[k$ind,])
> hist(ide.cut[upper.tri(ide.cut)], breaks=10, xlim=c(0,1),
+      main="Sequence Identity", xlab="Identity")
> 
> #plot(k$tree, axes = FALSE, ylab="Sequence Identity")
> #print(k$ind) # selected
> par(op)
> detach(kinesin)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("filter.identity", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("filter.rmsd")
> ### * filter.rmsd
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: filter.rmsd
> ### Title: RMSD Filter
> ### Aliases: filter.rmsd
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(kinesin)
> ##D attach(kinesin, warn.conflicts=FALSE)
> ##D k <- filter.rmsd(xyz=pdbs,cutoff=0.5)
> ##D pdbs$id[k$ind]
> ##D plot(k$tree, ylab="RMSD")
> ##D abline(h=0.5, col="gray")
> ##D 
> ##D detach(kinesin)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("filter.rmsd", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fit.xyz")
> ### * fit.xyz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fit.xyz
> ### Title: Coordinate Superposition
> ### Aliases: fit.xyz rot.lsq
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fit.xyz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fluct.nma")
> ### * fluct.nma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fluct.nma
> ### Title: NMA Fluctuations
> ### Aliases: fluct.nma
> ### Keywords: analysis
> 
> ### ** Examples
> 
> ## Fetch stucture
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Calculate (vibrational) normal modes
> modes <- nma(pdb)
 Building Hessian...		Done in 0.029 seconds.
 Diagonalizing Hessian...	Done in 0.118 seconds.
> 
> ## Fluctuations
> f <- fluct.nma(modes)
> 
> ## Fluctuations of first non-trivial mode
> f <- fluct.nma(modes, mode.inds=c(7,8))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fluct.nma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("formula2mass")
> ### * formula2mass
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: formula2mass
> ### Title: Chemical Formula to Mass Converter
> ### Aliases: formula2mass
> ### Keywords: utilities
> 
> ### ** Examples
> 
> #formula2mass("C5 H6 N O3")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("formula2mass", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gap.inspect")
> ### * gap.inspect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gap.inspect
> ### Title: Alignment Gap Summary
> ### Aliases: gap.inspect
> ### Keywords: utilities
> 
> ### ** Examples
> 
> aln <- read.fasta( system.file("examples/hivp_xray.fa",
+                    package = "bio3d") )
> 
> gap.stats <- gap.inspect(aln$ali)
> gap.stats$row # Gaps per sequence
  [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 2 2 2 2 2 2 2 2
 [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 3 2 2 4
 [75] 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 2 2 2 2 2 2
[112] 6 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 2 2 2 2 2 2 2
[149] 2 2 2 2 2 6 5 4 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[186] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 4 5 2 2 2
[223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[297] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 2 8 2
[334] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[371] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[408] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
> gap.stats$col # Gaps per position
  [1]   5   1   1   1   1   1   0   0   0   0   0   0   0   2   0   0   0   0
 [19]   0   0   2   0   0   1   0   0   0   0   0   0   0   0   0   0   6   1
 [37]   0   0   0   0   0   0   0   0   0   0   0   0  10  10 423 423   0   0
 [55]   0   0   0   0   0   0   0   0   2   0   0   0   0   0   0   0   0   0
 [73]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   2   0   0   0
 [91]   0   0   0   0   0   0   0   0   0   0   0
> ##gap.stats$bin # Binary matrix (1 for gap, 0 for aminoacid)
> ##aln[,gap.stats$f.inds] # Alignment without gap positions 
> 
> plot(gap.stats$col, typ="h", ylab="No. of Gaps") 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gap.inspect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("geostas")
> ### * geostas
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: geostas
> ### Title: GeoStaS Domain Finder
> ### Aliases: geostas geostas.default geostas.xyz geostas.nma geostas.enma
> ###   geostas.pdb geostas.pdbs amsm.xyz print.geostas
> ### Keywords: analysis
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D #### NMA example
> ##D ## Fetch stucture
> ##D pdb <- read.pdb("1crn")
> ##D 
> ##D ## Calculate (vibrational) normal modes
> ##D modes <- nma(pdb)
> ##D 
> ##D ## Find domains
> ##D gs <- geostas(modes, k=2)
> ##D 
> ##D ## Write NMA trajectory with domain assignment
> ##D mktrj(modes, mode=7, chain=gs$grps)
> ##D 
> ##D ## Redo geostas domain clustering 
> ##D gs <- geostas(modes, amsm=gs$amsm, k=5)
> ##D 
> ##D 
> ##D 
> ##D 
> ##D #### Trajectory example
> ##D ## Read inn DCD trajectory file, fit coordinates
> ##D dcdfile <- system.file("examples/hivp.dcd", package = "bio3d")
> ##D trj <- read.dcd(dcdfile)
> ##D xyz <- fit.xyz(trj[1,], trj)
> ##D 
> ##D ## Find domains
> ##D gs <- geostas(xyz, k=3, fit=FALSE)
> ##D 
> ##D ## Principal component analysis 
> ##D pc.md <- pca.xyz(xyz)
> ##D 
> ##D ## Visualize PCs with colored domains (chain ID)
> ##D mktrj(pc.md, pc=1, chain=gs$grps)
> ##D 
> ##D 
> ##D 
> ##D 
> ##D #### X-ray ensemble GroEL subunits
> ##D # Define the ensemble PDB-ids
> ##D ids <- c("1sx4_[A,B,H,I]", "1xck_[A-B]", "1sx3_[A-B]", "4ab3_[A-B]")
> ##D 
> ##D # Download and split PDBs by chain ID
> ##D raw.files <- get.pdb(ids, path = "raw_pdbs", gzip = TRUE)
> ##D files <- pdbsplit(raw.files, ids, path = "raw_pdbs/split_chain/")
> ##D 
> ##D # Align structures
> ##D pdbs <- pdbaln(files)
> ##D 
> ##D # Find domains
> ##D gs <- geostas(pdbs, k=4, fit=TRUE)
> ##D 
> ##D # Superimpose to core region
> ##D pdbs$xyz <- pdbfit(pdbs, inds=gs$fit.inds)
> ##D 
> ##D # Principal component analysis 
> ##D pc.xray <- pca(pdbs)
> ##D 
> ##D # Visualize PCs with colored domains (chain ID)
> ##D mktrj(pc.xray, pc=1, chain=gs$grps)
> ##D 
> ##D 
> ##D ##- Same, but more manual approach 
> ##D gaps.pos <- gap.inspect(pdbs$xyz)
> ##D 
> ##D # Find core region
> ##D core <- core.find(pdbs)
> ##D 
> ##D # Fit to core region
> ##D xyz <- fit.xyz(pdbs$xyz[1, gaps.pos$f.inds],
> ##D                pdbs$xyz[, gaps.pos$f.inds],
> ##D                fixed.inds=core$xyz,
> ##D                mobile.inds=core$xyz)
> ##D 
> ##D # Find domains
> ##D gs <- geostas(xyz, k=4, fit=FALSE)
> ##D 
> ##D # Perform PCA
> ##D pc.xray <- pca.xyz(xyz)
> ##D 
> ##D # Make trajectory
> ##D mktrj(pc.xray, pc=1, chain=gs$grps)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("geostas", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.pdb")
> ### * get.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.pdb
> ### Title: Download PDB Coordinate Files
> ### Aliases: get.pdb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.seq")
> ### * get.seq
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.seq
> ### Title: Download FASTA Sequence Files
> ### Aliases: get.seq
> ### Keywords: IO utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Sequence identifiers (GI or PDB codes e.g. from blast.pdb etc.)
> ##D get.seq( c("P01112", "Q61411", "P20171") )
> ##D 
> ##D #aa <-get.seq( c("4q21", "5p21") )
> ##D #aa$id
> ##D #aa$ali
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.seq", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hclustplot")
> ### * hclustplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hclustplot
> ### Title: Dendrogram with Clustering Annotation
> ### Aliases: hclustplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hclustplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hmmer")
> ### * hmmer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hmmer
> ### Title: HMMER Sequence Search
> ### Aliases: hmmer
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hmmer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("identify.cna")
> ### * identify.cna
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: identify.cna
> ### Title: Identify Points in a CNA Protein Structure Network Plot
> ### Aliases: identify.cna
> ### Keywords: utility
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D attach(hivp)
> ##D 
> ##D # Read the starting PDB file to determine atom correspondence
> ##D pdbfile <- system.file("examples/hivp.pdb", package="bio3d")
> ##D pdb <- read.pdb(pdbfile)
> ##D 
> ##D # Plot the network
> ##D xy <- plot.cna(net)
> ##D 
> ##D # Use identify.cna on the communities
> ##D d <- identify.cna(xy, cna=net)
> ##D 
> ##D # Right click to end the function...
> ##D ## d <- identify(xy, summary(net)$members)
> ##D 
> ##D detach(hivp)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("identify.cna", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("inner.prod")
> ### * inner.prod
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: inner.prod
> ### Title: Mass-weighted Inner Product
> ### Aliases: inner.prod
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Matrix operations
> x <- 1:3
> y <- diag(x)
> z <- matrix(1:9, ncol = 3, nrow = 3)
> 
> inner.prod(x,y)
[1] 1 4 9
> inner.prod(y,z)
[1]  1 10 27
> 
> 
> ## Application to normal modes
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Calculate (vibrational) normal modes
> modes <- nma(pdb)
 Building Hessian...		Done in 0.034 seconds.
 Diagonalizing Hessian...	Done in 0.114 seconds.
> 
> ## Check for orthogonality 
> inner.prod(modes$U[,7], modes$U[,8])
[1] -9.708146e-15
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("inner.prod", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("inspect.connectivity")
> ### * inspect.connectivity
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: inspect.connectivity
> ### Title: Check the Connectivity of Protein Structures
> ### Aliases: inspect.connectivity
> ### Keywords: analysis
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Fetch PDB files and split to chain A only PDB files
> ##D ids <- c("1a70_A", "1czp_A", "1frd_A", "1fxi_A", "1iue_A", "1pfd_A")
> ##D raw.files <- get.pdb(ids, path = "raw_pdbs")
> ##D files <- pdbsplit(raw.files, ids, path = "raw_pdbs/split_chain")
> ##D 
> ##D ## Sequence Alignement, and connectivity check
> ##D pdbs <- pdbaln(files)
> ##D 
> ##D cons <- inspect.connectivity(pdbs)
> ##D 
> ##D ## omit files with missing residues
> ##D files = files[cons]
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("inspect.connectivity", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("is.gap")
> ### * is.gap
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: is.gap
> ### Title: Gap Characters
> ### Aliases: is.gap
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> is.gap( c("G",".","X","-","G","K","S","T") )
[1] FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE
> 
> ## Not run: 
> ##D aln <- read.fasta( system.file("examples/kif1a.fa",
> ##D                    package = "bio3d") )
> ##D 
> ##D ##- Print only non-gap positions (i.e. no gaps in any sequence)
> ##D aln$ali[, !is.gap(aln) ]
> ##D 
> ##D ##- Mask any existing gaps with an "X"
> ##D xaln <- aln
> ##D xaln$ali[ is.gap(xaln$ali) ]="X"
> ##D 
> ##D ##- Read a new PDB and align its sequence to the existing masked alignment
> ##D pdb <- read.pdb( "1mkj" )
> ##D seq2aln(pdbseq(pdb), xaln, id = "1mkj")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("is.gap", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("is.pdb")
> ### * is.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: is.pdb
> ### Title: Is an Object of Class 'pdb(s)'?
> ### Aliases: is.pdb is.pdbs
> ### Keywords: classes
> 
> ### ** Examples
> 
> # Read a PDB file
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> is.pdb(pdb)
[1] TRUE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("is.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("is.select")
> ### * is.select
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: is.select
> ### Title: Is an Object of Class 'select'?
> ### Aliases: is.select
> ### Keywords: classes
> 
> ### ** Examples
> 
> # Read a PDB file
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> # Print structure summary
> atom.select(pdb)

 Call:  atom.select.pdb(pdb = pdb)

   Atom Indices#: 1001  ($atom)
   XYZ  Indices#: 3003  ($xyz)

+ attr: atom, xyz, call
> 
> # Select all C-alpha atoms with residues numbers between 43 and 54
> ca.inds <- atom.select(pdb, "calpha", resno=43:54)
> is.select(ca.inds)
[1] TRUE
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("is.select", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("is.xyz")
> ### * is.xyz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: is.xyz
> ### Title: Is an Object of Class 'xyz'?
> ### Aliases: is.xyz as.xyz
> ### Keywords: classes
> 
> ### ** Examples
> 
> # Read a PDB file
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> is.xyz(pdb$xyz)
[1] TRUE
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("is.xyz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("layout.cna")
> ### * layout.cna
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: layout.cna
> ### Title: Protein Structure Network Layout
> ### Aliases: layout.cna
> ### Keywords: utility
> 
> ### ** Examples
> 
> 
> # Load the correlation network
> attach(hivp)
> 
> # Read the starting PDB file to determine atom correspondence
> pdbfile <- system.file("examples/hivp.pdb", package="bio3d")
> pdb <- read.pdb(pdbfile)
> 
> # Plot will be slow
> #xy <- plot.cna(net)
> #plot3d.cna(net, pdb)
> 
> layout.cna(net, pdb, k=3)
          [,1]     [,2]       [,3]
 [1,] 54.20721 51.78683  -0.283875
 [2,] 41.19425 55.71650   1.703250
 [3,] 44.24055 51.83473 -15.342545
 [4,] 46.52750 45.66275  -2.527750
 [5,] 47.13800 39.66150  -4.226500
 [6,] 41.07753 37.62945 -14.454408
 [7,] 47.28200 43.16800  -6.872000
 [8,] 50.95400 42.68200  -6.044000
 [9,] 51.68650 42.70700 -10.158000
[10,] 54.76550 47.29200  -9.860750
[11,] 52.06730 44.91635  14.223000
[12,] 37.94462 40.84714  15.046220
[13,] 45.66275 46.52750   2.527750
[14,] 39.66150 47.13800   4.226500
[15,] 45.63000 45.40700   9.031000
[16,] 42.92500 49.11800   6.458000
[17,] 42.70700 51.68650  10.158000
[18,] 47.29200 54.76550   9.860750
> layout.cna(net, pdb)
             [,1]       [,2]
 [1,]  -0.9244384 -8.8471084
 [2,]   3.8885314 -4.4294924
 [3,] -13.8356282 -3.7422487
 [4,]  -2.8404262  0.4926773
 [5,]  -5.6168478  4.9550221
 [6,] -14.8590220  9.6928844
 [7,]  -7.6106804  1.9063132
 [8,]  -7.5147240  0.2103874
 [9,] -11.6278838 -0.4053747
[10,] -11.0810081 -5.9091380
[11,]  12.3469897 -1.4097715
[12,]  14.8544892 10.1150636
[13,]   2.3607940  0.4997270
[14,]   5.1346768  3.5481359
[15,]   8.4868652  1.7018172
[16,]   7.0830006  0.1392125
[17,]  11.1492891 -1.6719364
[18,]  10.6060227 -6.8461708
> 
> # can be used as input to plot.cna and plot3d.cna....
> # plot.cna( net, layout=layout.cna(net, pdb) )
> # plot3d.cna(net, pdb, layout=layout.cna(net, pdb, k=3))
> 
> detach(hivp)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("layout.cna", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lmi")
> ### * lmi
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lmi
> ### Title: LMI: Linear Mutual Information Matrix
> ### Aliases: lmi
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lmi", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("load.enmff")
> ### * load.enmff
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: load.enmff
> ### Title: ENM Force Field Loader
> ### Aliases: load.enmff ff.calpha ff.calphax ff.anm ff.pfanm ff.sdenm
> ###   ff.reach
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Load the c-alpha force field
> pfc.fun <- load.enmff('calpha')
> 
> ## Calculate the pair force constant for a set of C-alpha distances
> force.constants <- pfc.fun( seq(4,8, by=0.5) )
> 
> ## Calculate the complete spring force constant matrix
> ## Fetch PDB
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Fetch only c-alpha coordinates
> ca.inds <- atom.select(pdb, 'calpha')
> xyz <- pdb$xyz[ca.inds$xyz]
> 
> ## Calculate distance matrix
> dists <- dm.xyz(xyz, mask.lower=FALSE)
> 
> ## all pair-wise spring force constants
> fc.matrix <- apply(dists, 1, pfc.fun)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("load.enmff", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mktrj")
> ### * mktrj
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mktrj
> ### Title: PCA / NMA Atomic Displacement Trajectory
> ### Aliases: mktrj mktrj.pca mktrj.nma mktrj.enma
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D ##- PCA example
> ##D attach(transducin)
> ##D 
> ##D # Calculate principal components
> ##D pc.xray <- pca(pdbs, fit=TRUE)
> ##D 
> ##D # Write PC trajectory of pc=1
> ##D outfile = tempfile()
> ##D a <- mktrj(pc.xray, file = outfile)
> ##D outfile
> ##D 
> ##D detach(transducin)
> ##D 
> ##D 
> ##D ##- NMA example
> ##D ## Fetch stucture
> ##D pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
> ##D 
> ##D ## Calculate (vibrational) normal modes
> ##D modes <- nma(pdb)
> ##D 
> ##D ## Visualize modes
> ##D outfile = file.path(tempdir(), "mode_7.pdb")
> ##D mktrj(modes, mode=7, file = outfile)
> ##D outfile
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mktrj", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("motif.find")
> ### * motif.find
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: motif.find
> ### Title: Find Sequence Motifs.
> ### Aliases: motif.find
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("motif.find", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mustang")
> ### * mustang
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mustang
> ### Title: Structure-based Sequence Alignment with MUSTANG
> ### Aliases: mustang
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Fetch PDB files and split to chain A only PDB files
> ##D ids <- c("1a70_A", "1czp_A", "1frd_A")
> ##D files <- get.pdb(ids, split = TRUE, path = tempdir())
> ##D 
> ##D ##-- Or, read a folder/directory of existing PDB files
> ##D #pdb.path <- "my_dir_of_pdbs"
> ##D #files  <- list.files(path=pdb.path ,
> ##D #                     pattern=".pdb",
> ##D #                     full.names=TRUE)
> ##D 
> ##D ##-- Align these PDB sequences
> ##D aln <- mustang(files)
> ##D 
> ##D ##-- Read Aligned PDBs storing coordinate data
> ##D pdbs <- read.fasta.pdb(aln) 
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mustang", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("network.amendment")
> ### * network.amendment
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: network.amendment
> ### Title: Amendment of a CNA Network According To A Input Community
> ###   Membership Vector.
> ### Aliases: network.amendment
> ### Keywords: utility
> 
> ### ** Examples
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("network.amendment", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nma")
> ### * nma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nma
> ### Title: Normal Mode Analysis
> ### Aliases: nma
> ### Keywords: analysis
> 
> ### ** Examples
> 
> 
> ##- Singe structure NMA
> ## Fetch stucture
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Calculate normal modes
> modes <- nma(pdb)
 Building Hessian...		Done in 0.031 seconds.
 Diagonalizing Hessian...	Done in 0.113 seconds.
> 
> ## Print modes
> print(modes)

Call:
  nma.pdb(pdb = pdb)

Class:
  VibrationalModes (nma)

Number of modes:
  387 (6 trivial)

Frequencies:
  Mode 7: 	0.018
  Mode 8: 	0.019
  Mode 9: 	0.024
  Mode 10: 	0.025
  Mode 11: 	0.028
  Mode 12: 	0.029

+ attr: modes, frequencies, force.constants, fluctuations,
        U, L, xyz, mass, temp, triv.modes, natoms, call
> 
> ## Plot modes
> plot(modes)
> 
> ## Visualize modes
> #m7 <- mktrj.nma(modes, mode=7, file="mode_7.pdb")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nma.pdb")
> ### * nma.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nma.pdb
> ### Title: Normal Mode Analysis
> ### Aliases: nma.pdb build.hessian print.nma
> ### Keywords: analysis
> 
> ### ** Examples
> 
> ## Fetch stucture
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Calculate normal modes
> modes <- nma(pdb)
 Building Hessian...		Done in 0.031 seconds.
 Diagonalizing Hessian...	Done in 0.111 seconds.
> 
> ## Print modes
> print(modes)

Call:
  nma.pdb(pdb = pdb)

Class:
  VibrationalModes (nma)

Number of modes:
  387 (6 trivial)

Frequencies:
  Mode 7: 	0.018
  Mode 8: 	0.019
  Mode 9: 	0.024
  Mode 10: 	0.025
  Mode 11: 	0.028
  Mode 12: 	0.029

+ attr: modes, frequencies, force.constants, fluctuations,
        U, L, xyz, mass, temp, triv.modes, natoms, call
> 
> ## Plot modes
> plot(modes)
> 
> ## Visualize modes
> #m7 <- mktrj.nma(modes, mode=7, file="mode_7.pdb")
> 
> ## Not run: 
> ##D ## Use Anisotropic Network Model
> ##D modes <- nma(pdb, ff="anm", mass=FALSE, temp=NULL, cutoff=15)
> ##D 
> ##D ## Use SSE information and SS-bonds
> ##D sse      <- dssp(pdb, resno=FALSE, full=TRUE)
> ##D ss.bonds <- matrix(c(76,94, 64,80, 30,115, 6,127),
> ##D                    ncol=2, byrow=TRUE)
> ##D 
> ##D modes <- nma(pdb, ff="calphax", sse=sse, ss.bonds=ss.bonds)
> ##D 
> ##D 
> ##D ## User defined energy function
> ##D ## Note: Must take a vector of distances
> ##D "my.ff" <- function(r) {
> ##D    ifelse( r>15, 0, 1 )
> ##D }
> ##D 
> ##D ## Modes with a user defined energy function
> ##D modes <- nma(pdb, pfc.fun=my.ff)
> ##D 
> ##D 
> ##D ## A more manual approach
> ##D sele <- atom.select(pdb, chain='A', elety='CA')
> ##D xyz <- pdb$xyz[sele$xyz]
> ##D 
> ##D hessian <- build.hessian(xyz, my.ff)
> ##D modes <- eigen(hessian)
> ##D 
> ##D ## Dealing with unconventional residues
> ##D pdb <- read.pdb("1xj0")
> ##D 
> ##D ## nma(pdb)
> ##D modes <- nma(pdb, mass.custom=list(CSX=121.166))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nma.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nma.pdbs")
> ### * nma.pdbs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nma.pdbs
> ### Title: Ensemble Normal Mode Analysis
> ### Aliases: nma.pdbs print.enma
> ### Keywords: analysis
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nma.pdbs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("normalize.vector")
> ### * normalize.vector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: normalize.vector
> ### Title: Mass-Weighted Normalized Vector
> ### Aliases: normalize.vector
> ### Keywords: utilities
> 
> ### ** Examples
> 
> x <- 1:3
> y <- matrix(1:9, ncol = 3, nrow = 3)
> 
> normalize.vector(x)
[1] 0.2672612 0.5345225 0.8017837
> normalize.vector(y)
          [,1]      [,2]      [,3]
[1,] 0.2672612 0.4558423 0.5025707
[2,] 0.5345225 0.5698029 0.5743665
[3,] 0.8017837 0.6837635 0.6461623
> 
> ## Application to normal modes
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Calculate (vibrational) normal modes
> modes <- nma(pdb)
 Building Hessian...		Done in 0.028 seconds.
 Diagonalizing Hessian...	Done in 0.105 seconds.
> 
> ## Returns a vector
> nv <- normalize.vector(modes$modes[,7])
> 
> ## Returns a matrix
> nv <- normalize.vector(modes$modes[,7:10])
> 
> ## Mass-weighted
> nv <- normalize.vector(modes$modes[,7], mass=modes$mass)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("normalize.vector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("orient.pdb")
> ### * orient.pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: orient.pdb
> ### Title: Orient a PDB Structure
> ### Aliases: orient.pdb
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("orient.pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("overlap")
> ### * overlap
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: overlap
> ### Title: Overlap analysis
> ### Aliases: overlap
> ### Keywords: utilities
> 
> ### ** Examples
> 
> data(kinesin)
> attach(kinesin, warn.conflicts=FALSE)
>      
> # Ignore gap containing positions
> ##gaps.res <- gap.inspect(pdbs$ali)
> gaps.pos <- gap.inspect(pdbs$xyz)
>      
> #-- Do PCA
> pc.xray <- pca.xyz(pdbs$xyz[, gaps.pos$f.inds])
>     
> # Define a difference vector between two structural states
> diff.inds <- c(grep("d1v8ja", pdbs$id), 
+                grep("d1goja", pdbs$id))
> 
> dv <- difference.vector( pdbs$xyz[diff.inds,], gaps.pos$f.inds )
> 
> # Calculate the squared overlap between the PCs and the difference vector  
> o <- overlap(pc.xray, dv)
> o <- overlap(pc.xray$U, dv)
> 
> # Plot results
> plot(o$overlap, type='h', ylim=c(0,1))
> points(o$overlap)
> lines(o$overlap.cum, type='b', col='red')
> 
> 
> detach(kinesin)
> 
> ## Not run: 
> ##D ## Calculate overlap from NMA
> ##D pdb.a <- read.pdb("1cmk")
> ##D pdb.b <- read.pdb("3dnd")
> ##D 
> ##D ## Fetch CA coordinates
> ##D sele.a <- atom.select(pdb.a, chain='E', resno=c(15:350), elety='CA')
> ##D sele.b <- atom.select(pdb.b, chain='A', resno=c(1:350), elety='CA')
> ##D 
> ##D xyz <- rbind(pdb.a$xyz[sele.a$xyz],
> ##D              pdb.b$xyz[sele.b$xyz])
> ##D 
> ##D ## Superimpose
> ##D xyz[2,] <- fit.xyz(xyz[1,], xyz[2,], 1:ncol(xyz))
> ##D 
> ##D ## The difference between the two conformations
> ##D dv <- difference.vector( xyz )
> ##D 
> ##D ## Calculate normal modes
> ##D modes <- nma(pdb.a, inds=sele.a)
> ##D 
> ##D # Calculate the squared overlap between the normal modes 
> ##D # and the difference vector  
> ##D o <- overlap(modes, dv)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("overlap", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pairwise")
> ### * pairwise
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pairwise
> ### Title: Pair Indices
> ### Aliases: pairwise
> ### Keywords: utilities
> 
> ### ** Examples
> 
>   pairwise(3)
     [,1] [,2]
[1,]    1    2
[2,]    1    3
[3,]    2    3
>   pairwise(20)
       [,1] [,2]
  [1,]    1    2
  [2,]    1    3
  [3,]    1    4
  [4,]    1    5
  [5,]    1    6
  [6,]    1    7
  [7,]    1    8
  [8,]    1    9
  [9,]    1   10
 [10,]    1   11
 [11,]    1   12
 [12,]    1   13
 [13,]    1   14
 [14,]    1   15
 [15,]    1   16
 [16,]    1   17
 [17,]    1   18
 [18,]    1   19
 [19,]    1   20
 [20,]    2    3
 [21,]    2    4
 [22,]    2    5
 [23,]    2    6
 [24,]    2    7
 [25,]    2    8
 [26,]    2    9
 [27,]    2   10
 [28,]    2   11
 [29,]    2   12
 [30,]    2   13
 [31,]    2   14
 [32,]    2   15
 [33,]    2   16
 [34,]    2   17
 [35,]    2   18
 [36,]    2   19
 [37,]    2   20
 [38,]    3    4
 [39,]    3    5
 [40,]    3    6
 [41,]    3    7
 [42,]    3    8
 [43,]    3    9
 [44,]    3   10
 [45,]    3   11
 [46,]    3   12
 [47,]    3   13
 [48,]    3   14
 [49,]    3   15
 [50,]    3   16
 [51,]    3   17
 [52,]    3   18
 [53,]    3   19
 [54,]    3   20
 [55,]    4    5
 [56,]    4    6
 [57,]    4    7
 [58,]    4    8
 [59,]    4    9
 [60,]    4   10
 [61,]    4   11
 [62,]    4   12
 [63,]    4   13
 [64,]    4   14
 [65,]    4   15
 [66,]    4   16
 [67,]    4   17
 [68,]    4   18
 [69,]    4   19
 [70,]    4   20
 [71,]    5    6
 [72,]    5    7
 [73,]    5    8
 [74,]    5    9
 [75,]    5   10
 [76,]    5   11
 [77,]    5   12
 [78,]    5   13
 [79,]    5   14
 [80,]    5   15
 [81,]    5   16
 [82,]    5   17
 [83,]    5   18
 [84,]    5   19
 [85,]    5   20
 [86,]    6    7
 [87,]    6    8
 [88,]    6    9
 [89,]    6   10
 [90,]    6   11
 [91,]    6   12
 [92,]    6   13
 [93,]    6   14
 [94,]    6   15
 [95,]    6   16
 [96,]    6   17
 [97,]    6   18
 [98,]    6   19
 [99,]    6   20
[100,]    7    8
[101,]    7    9
[102,]    7   10
[103,]    7   11
[104,]    7   12
[105,]    7   13
[106,]    7   14
[107,]    7   15
[108,]    7   16
[109,]    7   17
[110,]    7   18
[111,]    7   19
[112,]    7   20
[113,]    8    9
[114,]    8   10
[115,]    8   11
[116,]    8   12
[117,]    8   13
[118,]    8   14
[119,]    8   15
[120,]    8   16
[121,]    8   17
[122,]    8   18
[123,]    8   19
[124,]    8   20
[125,]    9   10
[126,]    9   11
[127,]    9   12
[128,]    9   13
[129,]    9   14
[130,]    9   15
[131,]    9   16
[132,]    9   17
[133,]    9   18
[134,]    9   19
[135,]    9   20
[136,]   10   11
[137,]   10   12
[138,]   10   13
[139,]   10   14
[140,]   10   15
[141,]   10   16
[142,]   10   17
[143,]   10   18
[144,]   10   19
[145,]   10   20
[146,]   11   12
[147,]   11   13
[148,]   11   14
[149,]   11   15
[150,]   11   16
[151,]   11   17
[152,]   11   18
[153,]   11   19
[154,]   11   20
[155,]   12   13
[156,]   12   14
[157,]   12   15
[158,]   12   16
[159,]   12   17
[160,]   12   18
[161,]   12   19
[162,]   12   20
[163,]   13   14
[164,]   13   15
[165,]   13   16
[166,]   13   17
[167,]   13   18
[168,]   13   19
[169,]   13   20
[170,]   14   15
[171,]   14   16
[172,]   14   17
[173,]   14   18
[174,]   14   19
[175,]   14   20
[176,]   15   16
[177,]   15   17
[178,]   15   18
[179,]   15   19
[180,]   15   20
[181,]   16   17
[182,]   16   18
[183,]   16   19
[184,]   16   20
[185,]   17   18
[186,]   17   19
[187,]   17   20
[188,]   18   19
[189,]   18   20
[190,]   19   20
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pairwise", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pca.pdbs")
> ### * pca.pdbs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pca.pdbs
> ### Title: Principal Component Analysis
> ### Aliases: pca.pdbs
> ### Keywords: utilities multivariate
> 
> ### ** Examples
> 
> 
> attach(transducin)
> 
> #-- Do PCA ignoring gap containing positions
> pc.xray <- pca(pdbs)
> 
> # Plot results (conformer plots & scree plot)
> plot(pc.xray, col=annotation[, "color"])
> 
> detach(transducin)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pca.pdbs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pca.tor")
> ### * pca.tor
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pca.tor
> ### Title: Principal Component Analysis
> ### Aliases: pca.tor
> ### Keywords: utilities multivariate
> 
> ### ** Examples
> 
> ##-- PCA on torsion data for multiple PDBs 
> data(kinesin)
> attach(kinesin, warn.conflicts=FALSE)
> 
> gaps.pos <- gap.inspect(pdbs$xyz)
> tor <- t(apply( pdbs$xyz[, gaps.pos$f.inds], 1, torsion.xyz, atm.inc=1))
> pc.tor <- pca.tor(tor[,-c(1,218,219,220)])
> #plot(pc.tor)
> plot.pca.loadings(pc.tor)
> 
> detach(kinesin)
> 
> ## Not run: 
> ##D ##-- PCA on torsion data from an MD trajectory
> ##D trj <- read.dcd( system.file("examples/hivp.dcd", package="bio3d") )
> ##D tor <- t(apply(trj, 1, torsion.xyz, atm.inc=1))
> ##D gaps <- gap.inspect(tor)
> ##D pc.tor <- pca.tor(tor[,gaps$f.inds])
> ##D plot.pca.loadings(pc.tor)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pca.tor", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pca.xyz")
> ### * pca.xyz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pca.xyz
> ### Title: Principal Component Analysis
> ### Aliases: pca.xyz print.pca
> ### Keywords: utilities multivariate
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D #-- Read transducin alignment and structures
> ##D aln <- read.fasta(system.file("examples/transducin.fa",package="bio3d"))
> ##D pdbs <- read.fasta.pdb(aln)
> ##D 
> ##D # Find core
> ##D core <- core.find(pdbs, 
> ##D                   #write.pdbs = TRUE,
> ##D                   verbose=TRUE)
> ##D 
> ##D rm(list=c("pdbs", "core"))
> ## End(Not run)
> 
> #-- OR for demo purposes just read previously saved transducin data
> attach(transducin)
> 
> # Previously fitted coordinates based on sub 1.0A^3 core. See core.find() function.
> xyz <- pdbs$xyz
>                 
> #-- Do PCA ignoring gap containing positions
> pc.xray <- pca.xyz(xyz, rm.gaps=TRUE)
NOTE: Removing 49 gap positions with missing coordinate data
      retaining 305 non-gap positions for analysis.
> 
> # Plot results (conformer plots & scree plot overview)
> plot(pc.xray, col=annotation[, "color"])
> 
> # Plot a single conformer plot of PC1 v PC2
> plot(pc.xray, pc.axes=1:2, col=annotation[, "color"])
> 
> ## Plot atom wise loadings
> plot.bio3d(pc.xray$au[,1], ylab="PC1 (A)")
> 
> 
> ## Not run: 
> ##D # Write PC trajectory
> ##D resno = pdbs$resno[1, !is.gap(pdbs)]
> ##D resid = aa123(pdbs$ali[1, !is.gap(pdbs)])
> ##D 
> ##D a <- mktrj.pca(pc.xray, pc=1, file="pc1.pdb",
> ##D                resno=resno, resid=resid )
> ##D 
> ##D b <- mktrj.pca(pc.xray, pc=2, file="pc2.pdb",
> ##D                resno=resno, resid=resid )
> ##D 
> ##D c <- mktrj.pca(pc.xray, pc=3, file="pc3.pdb",
> ##D                resno=resno, resid=resid )
> ## End(Not run)
> 
> detach(transducin)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pca.xyz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pdb.annotate")
> ### * pdb.annotate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pdb.annotate
> ### Title: Get Customizable Annotations From PDB
> ### Aliases: pdb.annotate
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pdb.annotate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pdb2aln")
> ### * pdb2aln
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pdb2aln
> ### Title: Align a PDB structure to an existing alignment
> ### Aliases: pdb2aln
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ##--- Read aligned PDB coordinates (CA only)
> ##D aln  <- read.fasta(system.file("examples/kif1a.fa",package="bio3d"))
> ##D pdbs <- read.fasta.pdb(aln)
> ##D 
> ##D ##--- Read PDB coordinate for a new structure (all atoms)
> ##D id <- get.pdb("2kin", URLonly=TRUE)
> ##D pdb <- read.pdb(id)
> ##D 
> ##D # add pdb to the alignment 
> ##D naln <- pdb2aln(aln=pdbs, pdb=pdb, id=id)
> ##D naln
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pdb2aln", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pdb2aln.ind")
> ### * pdb2aln.ind
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pdb2aln.ind
> ### Title: Mapping from alignment positions to PDB atomic indices
> ### Aliases: pdb2aln.ind
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ##--- Read aligned PDB coordinates (CA only)
> ##D aln  <- read.fasta(system.file("examples/kif1a.fa",package="bio3d"))
> ##D pdbs <- read.fasta.pdb(aln)
> ##D 
> ##D ##--- Read the topology file of MD simulations
> ##D ##--- For illustration, here we read another pdb file (all atoms)
> ##D pdb <- read.pdb("2kin")
> ##D 
> ##D #--- Map the non-gap positions to PDB C-alpha atoms
> ##D #pc.inds <- gap.inspect(pdbs$ali)
> ##D #npc.inds <- pdb2aln.ind(aln=pdbs, pdb=pdb, inds=pc.inds$f.inds)
> ##D 
> ##D #npc.inds$a
> ##D #npc.inds$b
> ##D 
> ##D #--- Or, map the non-gap positions with a known close sequence in the alignment
> ##D #npc.inds <- pdb2aln.ind(aln=pdbs, pdb=pdb, aln.id="1bg2", inds=pc.inds$f.inds)
> ##D 
> ##D #--- Map core positions
> ##D core <- core.find(pdbs)
> ##D core.inds <- pdb2aln.ind(aln=pdbs, pdb=pdb, inds = core$c1A.atom)
> ##D 
> ##D core.inds$a
> ##D core.inds$b
> ##D 
> ##D ##--- Fit simulation trajectories to one of the X-ray structures based on
> ##D ##--- core positions
> ##D #xyz <- fit.xyz(pdbs$xyz[1,], pdb$xyz, core.inds$a$xyz, core.inds$b$xyz)
> ##D 
> ##D ##--- Do PCA of trajectories based on non-gap positions
> ##D #pc.traj <- pca(xyz[, npc.inds$b$xyz])
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pdb2aln.ind", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pdb2sse")
> ### * pdb2sse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pdb2sse
> ### Title: Obtain An SSE Sequence Vector From A PDB Object
> ### Aliases: pdb2sse
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pdb2sse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pdbaln")
> ### * pdbaln
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pdbaln
> ### Title: Sequence Alignment of PDB Files
> ### Aliases: pdbaln
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #files <- get.pdb(c("4q21","5p21"), URLonly=TRUE)
> ##D files <- get.pdb(c("4q21","5p21"), path=tempdir(), overwrite=TRUE)
> ##D pdbaln(files)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pdbaln", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pdbfit")
> ### * pdbfit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pdbfit
> ### Title: PDB File Coordinate Superposition
> ### Aliases: pdbfit pdbfit.pdb pdbfit.pdbs
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #files <- get.pdb(c("4q21","5p21"), URLonly=TRUE)
> ##D files <- get.pdb(c("4q21","5p21"), path=tempdir(), overwrite=TRUE)
> ##D pdbs <- pdbaln(files)
> ##D xyz <- pdbfit(pdbs)
> ##D 
> ##D # Superpose again this time outputing PDBs
> ##D #xyz <- pdbaln( files, outpath="fitted" )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pdbfit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pdbs2pdb")
> ### * pdbs2pdb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pdbs2pdb
> ### Title: PDBs to PDB Converter
> ### Aliases: pdbs2pdb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Fetch PDBs
> ##D pdb.ids <- c("1YX5_B", "3NOB", "1P3Q_U")
> ##D #outdir <- paste(tempdir(), "/raw_pdbs", sep="")
> ##D outdir = "raw_pdbs"
> ##D raw.files <- get.pdb(pdb.ids, path = outdir)
> ##D 
> ##D ## Split PDBs by chain ID and multi-model records
> ##D all.files <- pdbsplit(raw.files, pdb.ids, 
> ##D                 path =paste(outdir, "/split_chain", sep=""))
> ##D 
> ##D ## Align and fit
> ##D pdbs     <- pdbaln(all.files, fit=TRUE)
> ##D 
> ##D ## Convert back to PDB objects
> ##D all.pdbs <- pdbs2pdb(pdbs)
> ##D 
> ##D ## Access the first PDB object
> ##D ## all.pdbs[[1]]
> ##D 
> ##D ## Return PDB objects consisting of only
> ##D ## atoms in non-gap positions
> ##D all.pdbs <- pdbs2pdb(pdbs, rm.gaps=TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pdbs2pdb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pdbseq")
> ### * pdbseq
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pdbseq
> ### Title: Extract The Aminoacid Sequence From A PDB Object
> ### Aliases: pdbseq
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D pdb <- read.pdb( "5p21" )
> ##D pdbseq(pdb)
> ##D 
> ##D #pdbseq(pdb, inds=atom.select(pdb, resno=5:15, elety="CA"), aa1=FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pdbseq", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pdbsplit")
> ### * pdbsplit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pdbsplit
> ### Title: Split a PDB File Into Separate Files, One For Each Chain.
> ### Aliases: pdbsplit
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   ## Save separate PDB files for each chain of a local or on-line file
> ##D   pdbsplit( get.pdb("2KIN", URLonly=TRUE) )
> ##D 
> ##D 
> ##D   ## Split several PDBs by chain ID and multi-model records
> ##D   raw.files <- get.pdb( c("1YX5", "3NOB") , URLonly=TRUE)
> ##D   chain.files <- pdbsplit(raw.files,  path=tempdir(), multi=TRUE)
> ##D   basename(chain.files)
> ##D 
> ##D 
> ##D   ## Output only desired pdbID_chainID combinations
> ##D   ## for the last entry (1f9j), fetch all chains
> ##D   ids <- c("1YX5_A", "3NOB_B", "1F9J")
> ##D   raw.files <- get.pdb( ids , URLonly=TRUE)
> ##D   chain.files <- pdbsplit(raw.files, ids, path=tempdir())
> ##D   basename(chain.files)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pdbsplit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pfam")
> ### * pfam
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pfam
> ### Title: Download Pfam FASTA Sequence Alignment
> ### Aliases: pfam
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pfam", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.bio3d")
> ### * plot.bio3d
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.bio3d
> ### Title: Plots with marginal SSE annotation
> ### Aliases: plot.bio3d plotb3
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D ## Use PDB residue numbers and include short secondary structure elements
> ##D plot.bio3d(pdb$atom[pdb$calpha,"b"], sse=pdb, resno=pdb, ylab="B-factor",
> ##D   typ="l", lwd=1.5, col="blue", sse.min.length=0)
> ##D 
> ##D 
> ##D ## Calculate secondary structure using stride() or dssp()
> ##D #sse <- stride(pdb)
> ##D sse <- dssp(pdb)
> ##D 
> ##D ## Plot of B-factor values along with calculated secondary structure
> ##D plot.bio3d(pdb$atom[pdb$calpha,"b"], sse=sse, ylab="B-factor", typ="l",
> ##D col="blue", lwd=2)
> ## End(Not run)
> 
> ## Plot 'aligned' data respecting gap positions
> attach(transducin)
> 
> pdb = read.pdb("1tnd") ## Reference PDB see: pdbs$id[1]
  Note: Accessing on-line PDB file
  HEADER    BINDING PROTEIN(GTP)                    31-MAR-94   1TND               
> pdb = trim.pdb(pdb, inds=atom.select(pdb, chain="A"))
> 
> ## Plot of B-factor values with gaps
> plot.bio3d(pdbs$b, resno=pdb, sse=pdb, ylab="B-factor")
> 
> ## Plot of B-factor values after removing all gaps 
> plot.bio3d(pdbs$b, rm.gaps=TRUE, resno = pdb, sse=pdb, ylab="B-factor")
> 
> detach(transducin)
> 
> ## Fancy secondary structure elements
> ##plot.bio3d(pdb$atom[pdb$calpha,"b"], sse=pdb, ssetype="fancy")
> ## Currently not implemented
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.bio3d", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.cmap")
> ### * plot.cmap
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.cmap
> ### Title: Plot Contact Matrix
> ### Aliases: plot.cmap
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> ##- Read PDB file
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ##- Calcualte contact map
> cm <- cmap(pdb)
> 
> ##- Plot contact map
> plot.cmap(cm, sse=pdb)
> 
> ##- Add to plot
> plot.cmap(t(cm), col=3, pch=17, add=TRUE)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.cmap", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.cna")
> ### * plot.cna
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.cna
> ### Title: Protein Structure Network Plots in 2D and 3D.
> ### Aliases: plot.cna
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # Plot full residue network colored by communities - will be slow due to number of edges!!
> ##D plot.cna(net, pdb, full=TRUE)
> ##D 
> ##D # Alter plot settings
> ##D plot.cna(net, pdb, full=TRUE, vertex.size=3, weights=1, vertex.label=NA)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.cna", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.core")
> ### * plot.core
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.core
> ### Title: Plot Core Fitting Progress
> ### Aliases: plot.core
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D ##-- Generate a small kinesin alignment and read corresponding structures
> ##D pdbfiles <- get.pdb(c("1bg2","2ncd","1i6i","1i5s"), URLonly=TRUE)
> ##D pdbs <- pdbaln(pdbfiles)
> ##D 
> ##D ##-- Find 'core' positions
> ##D core <- core.find(pdbs)
> ##D plot(core)
> ##D 
> ##D ##-- Fit on these relatively invarient subset of positions 
> ##D core.inds <- print(core)
> ##D xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
> ##D 
> ##D ##-- Compare to fitting on all equivalent positions
> ##D xyz2 <- pdbfit(pdbs)
> ##D 
> ##D ## Note that overall RMSD will be higher but RMSF will
> ##D ##  be lower in core regions, which may equate to a
> ##D ##  'better fit' for certain applications
> ##D gaps <- gap.inspect(pdbs$xyz)
> ##D rmsd(xyz[,gaps$f.inds])
> ##D rmsd(xyz2[,gaps$f.inds])
> ##D 
> ##D plot(rmsf(xyz[,gaps$f.inds]), typ="l", col="blue", ylim=c(0,9))
> ##D points(rmsf(xyz2[,gaps$f.inds]), typ="l", col="red")
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.core", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.dccm")
> ### * plot.dccm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.dccm
> ### Title: DCCM Plot
> ### Aliases: plot.dccm
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D   ##-- Read example trajectory file
> ##D   trtfile <- system.file("examples/hivp.dcd", package="bio3d")
> ##D   trj <- read.dcd(trtfile)
> ##D 
> ##D   ## Read the starting PDB file to determine atom correspondence
> ##D   pdbfile <- system.file("examples/hivp.pdb", package="bio3d")
> ##D   pdb <- read.pdb(pdbfile)
> ##D 
> ##D   ## select residues 24 to 27 and 85 to 90 in both chains
> ##D   inds <- atom.select(pdb, resno=c(24:27,85:90), elety='CA')
> ##D 
> ##D   ## lsq fit of trj on pdb
> ##D   xyz <- fit.xyz(pdb$xyz, trj, fixed.inds=inds$xyz, mobile.inds=inds$xyz)
> ##D 
> ##D   ## Dynamic cross-correlations of atomic displacements
> ##D   cij <- dccm(xyz)
> ##D 
> ##D   ## Default plot
> ##D   plot.dccm(cij)
> ##D 
> ##D   ## Change the color scheme and the range of colored data levels
> ##D   plot.dccm(cij, contour=FALSE, col.regions=bwr.colors(200), at=seq(-1,1,by=0.01) )
> ##D 
> ##D   ## Add secondary structure annotation to plot margins
> ##D   sse <- dssp(read.pdb("1W5Y"), resno=FALSE)
> ##D   plot.dccm(cij, sse=sse) 
> ##D 
> ##D   ## Add additional margin annotation for chains..
> ##D   ch <- ifelse(pdb$atom[pdb$calpha,"chain"]=="A", 1,2)
> ##D   plot.dccm(cij, sse=sse, margin.segments=ch)
> ##D 
> ##D   ## Plot with cluster annotation from dynamic network analysis
> ##D   #net <- cna(cij)
> ##D   #plot.dccm(cij, margin.segments=net$raw.communities$membership)
> ##D 
> ##D   ## Focus on major communities (i.e. exclude those below a certain total length)
> ##D   #plot.dccm(cij, margin.segments=net$raw.communities$membership, segment.min=25)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.dccm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.dmat")
> ### * plot.dmat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.dmat
> ### Title: Plot Distance Matrix
> ### Aliases: plot.dmat
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> # Read PDB file
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> # DM
> d <- dm(pdb,"calpha")
> 
> # Plot DM
> ##filled.contour(d, nlevels = 4)
> ##plot(d)
> plot(d,
+      resnum.1 = pdb$atom[pdb$calpha,"resno"],
+      color.palette = mono.colors,
+      xlab="Residue Number", ylab="Residue Number")
> 
> ## Not run: 
> ##D # Download and align two PDB files
> ##D pdbs <- pdbaln( get.pdb( c( "4q21", "521p"), path=tempdir(), overwrite=TRUE))
> ##D 
> ##D # Get distance matrix
> ##D a <- dm.xyz(pdbs$xyz[1,])
> ##D b <- dm.xyz(pdbs$xyz[2,])
> ##D 
> ##D # Calculate DDM
> ##D c <- a - b
> ##D 
> ##D # Plot DDM
> ##D plot(c,key=FALSE, grid=FALSE)
> ##D 
> ##D plot(c, axis.tick.space=10,
> ##D      resnum.1=pdbs$resno[1,],
> ##D      resnum.2=pdbs$resno[2,],
> ##D      grid.col="black",
> ##D      xlab="Residue No. (4q21)", ylab="Residue No. (521p)")
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.dmat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.enma")
> ### * plot.enma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.enma
> ### Title: Plot eNMA Results
> ### Aliases: plot.enma
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ids <- c("1a70_A", "1czp_A", "1frd_A", "1fxi_A", "1iue_A", "1pfd_A")
> ##D raw.files <- get.pdb(ids, path = "raw_pdbs")
> ##D files <- pdbsplit(raw.files, ids, path = "raw_pdbs/split_chain")
> ##D 
> ##D ## Sequence Alignement
> ##D pdbs <- pdbaln(files)
> ##D 
> ##D ## Normal mode analysis on aligned data
> ##D all.modes <- nma.pdbs(pdbs, rm.gaps=TRUE)
> ##D 
> ##D ## Plot fluctuations
> ##D plot.enma(all.modes, pdbs=pdbs, conservation=TRUE)
> ##D 
> ##D ## group and spread fluctuation profiles
> ##D grps <- rep(NA, length(pdbs$id))
> ##D grps[c(2,3)]=1
> ##D grps[c(4,5)]=2
> ##D 
> ##D plot.enma(all.modes, pdbs=pdbs, col=grps, spread=TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.enma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.fasta")
> ### * plot.fasta
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.fasta
> ### Title: Plot a Multiple Sequence Alignment
> ### Aliases: plot.fasta
> ### Keywords: hplot
> 
> ### ** Examples
> 
> # Read alignment
> aln<-read.fasta(system.file("examples/kif1a.fa",package="bio3d"))
> 
> ## alignment plot
> plot(aln)
> 
> ## Not run: 
> ##D infile <- "http://pfam.sanger.ac.uk/family/PF00071/alignment/seed/format?format=fasta"
> ##D aln <- read.fasta( infile )
> ##D plot(aln)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.fasta", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.fluct")
> ### * plot.fluct
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.fluct
> ### Title: Plot Fluctuations
> ### Aliases: plot.fluct
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## load transducin example data
> ##D attach(transducin)
> ##D 
> ##D ## remove flexible termina for a full-length NMA calculation
> ##D inds = 30:(ncol(pdbs$ali)-8)
> ##D npdbs = trim(pdbs, col.inds = inds)
> ##D gaps.res = gap.inspect(npdbs$ali)
> ##D 
> ##D ## reference PDB for secondary structure annotation
> ##D ref.pdb_id = substr(npdbs$id[1], 1, 4)
> ##D ref.chain_id = substr(npdbs$id[1], 6, 6)
> ##D ref.resno = npdbs$resno[1, !is.na(npdbs$resno[1, ])]
> ##D pdb = read.pdb(ref.pdb_id)
> ##D pdb = trim(pdb, resno=ref.resno, chain=ref.chain_id)
> ##D 
> ##D ## eNMA calculation and obtain modes of motion including atomic fluctuations
> ##D modes <- nma(npdbs, rm.gaps=FALSE, full=FALSE, ncore=NULL)
> ##D x = modes$fluctuation
> ##D 
> ##D ## simple line plot with SSE annotation
> ##D plot.fluct(x, sse = pdb, resno = pdb)
> ##D 
> ##D ## group data by specifying colors of each fluctuation line; same color indicates
> ##D ## same group. Also do significance calculation and annotation
> ##D col = annotation[, "color"]
> ##D col[annotation[, "state3"] == "GDI"] = "blue"
> ##D plot.fluct(x, col=col, signif = TRUE, sse = pdb, resno = pdb)
> ##D 
> ##D ## show only line of mean values for each group. Gapped positions are removed. Nicer  
> ##D ## plot with area shaded for the first group.
> ##D plot.fluct(x, col=col, signif = TRUE, sse = pdb, resno = pdb, mean=TRUE, polygon=TRUE, rm.gaps=TRUE)
> ##D 
> ##D detach(transducin)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.fluct", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.hmmer")
> ### * plot.hmmer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.hmmer
> ### Title: Plot a Summary of HMMER Hit Statistics.
> ### Aliases: plot.hmmer
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.hmmer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.nma")
> ### * plot.nma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.nma
> ### Title: Plot NMA Results
> ### Aliases: plot.nma
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Fetch structure
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Calculate modes
> modes <- nma(pdb)
 Building Hessian...		Done in 0.028 seconds.
 Diagonalizing Hessian...	Done in 0.107 seconds.
> 
> plot(modes, sse=pdb)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.nma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.pca")
> ### * plot.pca
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.pca
> ### Title: Plot PCA Results
> ### Aliases: plot.pca plot.pca.score plot.pca.scree
> ### Keywords: hplot
> 
> ### ** Examples
> 
> data(transducin)
> attach(transducin, warn.conflicts=FALSE)
> 
> pc.xray <- pca(pdbs$xyz, rm.gaps=TRUE)
NOTE: Removing 49 gap positions with missing coordinate data
      retaining 305 non-gap positions for analysis.
> plot(pc.xray)
> 
> ## Color plot by nucleotide state
> vcolors <- annotation[, "color"]
> plot(pc.xray, col=vcolors)
> 
> ## Focus on a single plot of PC1 vs PC2
> x <- plot(pc.xray, pc.axes=1:2, col=vcolors)
> 
> ## Identify points interactively with mouse clicks
> #identify(x, labels=basename.pdb(pdbs$id))
> 
> ## Add labels to select points
> inds <- c(1,10,37)
> text(x[inds,], labels=basename.pdb(pdbs$id[inds]), col="blue")
> 
> ## Alternative labeling method
> #labs <- rownames(annotation)
> #inds <- c(2,7)
> #plot.pca.score(pc.xray, inds=inds, col=vcolors, lab=labs)
> 
> ## color by seq identity groupings
> #ide <- seqidentity(pdbs$ali)
> #hc <- hclust(as.dist(1-ide))
> #grps <- cutree(hc, h=0.2)
> #vcolors <- rainbow(max(grps))[grps]
> #plot.pca.score(pc.xray, inds=inds, col=vcolors, lab=labs)
> 
> detach(transducin)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.pca", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.pca.loadings")
> ### * plot.pca.loadings
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.pca.loadings
> ### Title: Plot Residue Loadings along PC1 to PC3
> ### Aliases: plot.pca.loadings
> ### Keywords: hplot
> 
> ### ** Examples
> 
> data(transducin)
> attach(transducin, warn.conflicts=FALSE)
> pc.xray <- pca.xyz(pdbs$xyz[, gap.inspect(pdbs$xyz)$f.inds])
> plot.pca.loadings(pc.xray$U)
> 
> detach(transducin)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.pca.loadings", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.rmsip")
> ### * plot.rmsip
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.rmsip
> ### Title: Plot RMSIP Results
> ### Aliases: plot.rmsip
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Read PDB structure
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> 
> ## Perform NMA
> modes.a <- nma(pdb, ff="calpha")
 Building Hessian...		Done in 0.063 seconds.
 Diagonalizing Hessian...	Done in 0.111 seconds.
> modes.b <- nma(pdb, ff="anm")
 Building Hessian...		Done in 0.03 seconds.
 Diagonalizing Hessian...	Done in 0.112 seconds.
> 
> ## Calculate and plot RMSIP
> r <- rmsip(modes.a, modes.b)
> plot(r)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.rmsip", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.cna")
> ### * print.cna
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.cna
> ### Title: Summarize and Print Features of a cna Network Graph
> ### Aliases: print.cna summary.cna
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ## Load the correlation network
> attach(hivp)
> 
> ## Read the starting PDB file to determine atom correspondence
> pdbfile <- system.file("examples/hivp.pdb", package="bio3d")
> pdb <- read.pdb(pdbfile)
> 
> ## Examine network composition
> print(net)

Call:
  cna.dccm(cij = cij)

Structure: 
 - NETWORK NODES#:   198 	EDGES#: 1756 
 - COMMUNITY NODES#: 18 	EDGES#: 13 

 + attr: network, communities, community.network,
        community.cij, cij, call
> x<- summary(net)
 id size                      members
  1   24      c(1:4, 94:107, 193:198)
  2    4                          5:8
  3   22               c(9:23, 64:70)
  4    4                        24:27
  5    2                        28:29
  6   49              c(30:63, 71:85)
  7    1                           86
  8    1                           87
  9    2                        88:89
 10    4                        90:93
 11   20 c(108:113, 117:122, 163:170)
 12   50 c(114:116, 129:162, 171:183)
 13    4                      123:126
 14    2                      127:128
 15    1                          184
 16    2                      185:186
 17    2                      187:188
 18    4                      189:192
> x$members[[2]]
5 6 7 8 
5 6 7 8 
> 
> detach(hivp)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.cna", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.core")
> ### * print.core
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.core
> ### Title: Printing Core Positions and Returning Indices
> ### Aliases: print.core
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D ##-- Generate a small kinesin alignment and read corresponding structures
> ##D pdbfiles <- get.pdb(c("1bg2","2ncd","1i6i","1i5s"), URLonly=TRUE)
> ##D pdbs <- pdbaln(pdbfiles)
> ##D 
> ##D ##-- Find 'core' positions
> ##D core <- core.find(pdbs)
> ##D plot(core)
> ##D 
> ##D ##-- Fit on these relatively invarient subset of positions 
> ##D core.inds <- print(core, vol=0.5)
> ##D 
> ##D print(core, vol=0.7)
> ##D print(core, vol=1.0)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.core", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.fasta")
> ### * print.fasta
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.fasta
> ### Title: Printing Sequence Alignments
> ### Aliases: print.fasta .print.fasta.ali
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
>      file <- system.file("examples/kif1a.fa",package="bio3d")
>      aln  <- read.fasta(file)
>      print(aln)
                             1        .         .         .         .         50 
[Truncated_Name:1]1bg2.pdb   NIKVMCRFRPLNESEVNRGDKYIAKFQGEDTV----VIASK-------PY
[Truncated_Name:2]1i6i.pdb   SVKVAVRVRPFNSREMSRDSKCIIQMSGSTTT----IVNPKQPKETPKSF
[Truncated_Name:3]1i5s.pdb   SVKVAVRVRPFNSREMSRDSKCIIQMSGSTTT----IVNPKQPKETPKSF
[Truncated_Name:4]2ncd.pdb   NIRVFCRIRPPLESEENRMC-CTWTYHDESTVELQSIDAQAKSKMGQQIF
                              ^^*  * **    *  *            *     ^            ^ 
                             1        .         .         .         .         50 

                            51        .         .         .         .         100 
[Truncated_Name:1]1bg2.pdb   AFDRVFQSS--------TSQEQVYNDCAKKIVKDVLEGYNGTIFAYGQTS
[Truncated_Name:2]1i6i.pdb   SFDYSYWSHTSPEDINYASQKQVYRDIGEEMLQHAFEGYNVCIFAYGQTG
[Truncated_Name:3]1i5s.pdb   SFDYSYWSHTSPEDINYASQKQVYRDIGEEMLQHAFEGYNVCIFAYGQTG
[Truncated_Name:4]2ncd.pdb   SFDQVFHPL--------SSQSDIF-EMVSPLIQSALDGYNICIFAYGQTG
                              **  ^            **  ^^ ^    ^^    ^***  *******  
                            51        .         .         .         .         100 

                           101        .         .         .         .         150 
[Truncated_Name:1]1bg2.pdb   SGKTHTMEGKLHDPEGMGIIPRIVQDIFNYIYSMDENL-EFHIKVSYFEI
[Truncated_Name:2]1i6i.pdb   AGKSYTMMGKQEK-DQQGIIPQLCEDLFSRINDTTNDNMSYSVEVSYMEI
[Truncated_Name:3]1i5s.pdb   AGKSYTMMGKQEK-DQQGIIPQLCEDLFSRINDTTNDNMSYSVEVSYMEI
[Truncated_Name:4]2ncd.pdb   SGKTYTMDGV---PESVGVIPRTVDLLFDSIRGYRNLGWEYEIKATFLEI
                              **^ ** *     ^  *^**     ^*  *         ^ ^  ^^ ** 
                           101        .         .         .         .         150 

                           151        .         .         .         .         200 
[Truncated_Name:1]1bg2.pdb   YLDKIRDLL-DVSKT-NLSVHEDKNRVPYVKGCTERFVCSPDEVMDTIDE
[Truncated_Name:2]1i6i.pdb   YCERVRDLL-NPKNKGNLRVREHPLLGPYVEDLSKLAVTSYNDIQDLMDS
[Truncated_Name:3]1i5s.pdb   YCERVRDLL-NPKNKGNLRVREHPLLGPYVEDLSKLAVTSYNDIQDLMDS
[Truncated_Name:4]2ncd.pdb   YNEVLYDLLSNEQKDMEIRMAKNNKNDIYVSNITEETVLDPNHLRHLMHT
                             * ^ ^ ***        ^ ^        **   ^   *     ^   ^   
                           151        .         .         .         .         200 

                           201        .         .         .         .         250 
[Truncated_Name:1]1bg2.pdb   GKSNRHVAVTNMNEHSSRSHSIFLINVKQENTQT----EQKLSGKLYLVD
[Truncated_Name:2]1i6i.pdb   GNKARTVAATNMNETSSRSHAVFNIIFTQKRHDAETNITTEKVSKISLVD
[Truncated_Name:3]1i5s.pdb   GNKARTVAATNMNETSSRSHAVFNIIFTQKRHDAETNITTEKVSKISLVD
[Truncated_Name:4]2ncd.pdb   AKMNRATASTAGNERSSRSHAVTKLELIGRHAEK----QEISVGSINLVD
                             ^   *  * *  ** ***** ^  ^                    ^ *** 
                           201        .         .         .         .         250 

                           251        .         .         .         .         300 
[Truncated_Name:1]1bg2.pdb   LAGSEKVSKTGAEGAVLDEAKNINKSLSALGNVISALAEGSTYVPYRDSK
[Truncated_Name:2]1i6i.pdb   LAGSE---------------ANINKSLTTLGKVISALAEMD-FIPYRDSV
[Truncated_Name:3]1i5s.pdb   LAGSER-----AKGTRLKEGANINKSLTTLGKVISALAEMD--IPYRDSV
[Truncated_Name:4]2ncd.pdb   LAGSES--------------PNINRSLSELTNVILALLQKQDHIPYRNSK
                             *****                ***^**^ *  ** **      ^*** *  
                           251        .         .         .         .         300 

                           301        .         .         .         .   344 
[Truncated_Name:1]1bg2.pdb   MTRILQDSLGGNCRTTIVICCSPSSYNESETKSTLLFGQRAKTI
[Truncated_Name:2]1i6i.pdb   LTWLLRENLGGNSRTAMVAALSPADINYDETLSTLRYADRAKQI
[Truncated_Name:3]1i5s.pdb   LTWLLRENLGGNSRTAMVAALSPADINYDETLSTLRYADRAK--
[Truncated_Name:4]2ncd.pdb   LTHLLMPSLGGNSKTLMFINVSPFQDCFQESVKSLRFAASVNSC
                             ^* ^*   **** ^* ^    **      *^  ^* ^^       
                           301        .         .         .         .   344 

Call:
  read.fasta(file = file)

Class:
  fasta

Alignment dimensions:
  4 sequence rows; 344 position columns (293 non-gap, 51 gap) 

+ attr: id, ali, call
> 
>      # print(aln, col.inds=30:100, numbers=FALSE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.fasta", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.xyz")
> ### * print.xyz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.xyz
> ### Title: Printing XYZ coordinates
> ### Aliases: print.xyz
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> # Read a PDB file
> pdb <- read.pdb( system.file("examples/1hel.pdb", package="bio3d") )
  HEADER    HYDROLASE(O-GLYCOSYL)                   10-JAN-92   1HEL               
> print(pdb$xyz)

   Total Frames#: 1
   Total XYZs#:   3003,  (Atoms#:  1001)

    [1]  3.294  10.164  10.266  <...>  -17.769  19.416  8.251  [3003] 

+ attr: Matrix DIM = 1 x 3003
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.xyz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("project.pca")
> ### * project.pca
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: project.pca
> ### Title: Project Data onto Principal Components
> ### Aliases: project.pca z2xyz.pca xyz2z.pca
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(transducin)
> ##D attach(transducin, warn.conflicts=FALSE)
> ##D 
> ##D gaps.pos <- gap.inspect(pdbs$xyz)
> ##D 
> ##D #-- Do PCA without structures 2 and 7
> ##D pc.xray <- pca.xyz(pdbs$xyz[-c(2,7), gaps.pos$f.inds])
> ##D 
> ##D #-- Project structures 2 and 7 onto the PC space
> ##D d <- project.pca(pdbs$xyz[c(2,7), gaps.pos$f.inds], pc.xray)
> ##D 
> ##D plot(pc.xray$z[,1], pc.xray$z[,2],col="gray")
> ##D points(d[,1],d[,2], col="red")
> ##D 
> ##D detach(transducin)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("project.pca", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("prune.cna")
> ### * prune.cna
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: prune.cna
> ### Title: Prune A cna Network Object
> ### Aliases: prune.cna
> ### Keywords: utility
> 
> ### ** Examples
> 
> 
> # Load the correlation network
> attach(hivp)
> 
> # Read the starting PDB file to determine atom correspondence
> pdbfile <- system.file("examples/hivp.pdb", package="bio3d")
> pdb <- read.pdb(pdbfile)
> 
> # Plot coarse grain network based on dynamically coupled communities
> par(mfcol=c(1,2), mar=c(0,0,0,0))
> plot.cna(net)
Error in check_version(graph) : 
  This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
Calls: plot.cna -> <Anonymous> -> update_es_ref -> check_version
Execution halted
