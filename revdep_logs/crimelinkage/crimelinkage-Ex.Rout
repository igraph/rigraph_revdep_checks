
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "crimelinkage"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "crimelinkage-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('crimelinkage')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("clusterPath")
> ### * clusterPath
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: clusterPath
> ### Title: Follows path of one crime up a dendrogram
> ### Aliases: clusterPath
> 
> ### ** Examples
> 
> # See vignette: "Crime Series Identification and Clustering" for usage.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("clusterPath", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("compareCrimes")
> ### * compareCrimes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compareCrimes
> ### Title: Creates evidence variables by calculating 'distance' between
> ###   crime pairs
> ### Aliases: compareCrimes
> 
> ### ** Examples
> 
> data(crimes)
> 
>  varnames = list(
+    spatial = c("X", "Y"),
+    temporal = c("DT.FROM","DT.TO"),
+    categorical = c("MO1",  "MO2", "MO3"))
>  pairs = t(combn(as.character(crimes$crimeID[1:4]),m=2))
> 
>  compareCrimes(pairs,crimes,varnames,binary=TRUE)
    1   2  spatial  temporal      tod       dow MO1 MO2 MO3
1 C:1 C:2 8.784095 0.9998976 5.897258 1.9964254   0   1   0
2 C:1 C:3 5.484273 0.8660373 5.976504 0.3081333   0   1   0
3 C:1 C:4 1.708535 3.3537943 6.070933 3.1661668   0   1   0
4 C:2 C:3 3.557622 1.8729806 5.937860 1.8729806   1   1   1
5 C:2 C:4 8.080877 4.3585857 6.021221 1.7893310   1   1   1
6 C:3 C:4 5.200854 2.4881096 7.631112 3.2827391   1   1   1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compareCrimes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("crimeClust_bayes")
> ### * crimeClust_bayes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: crimeClust_bayes
> ### Title: Bayesian model-based partially-supervised clustering for crime
> ###   series identification
> ### Aliases: crimeClust_bayes
> 
> ### ** Examples
> 
> # Toy dataset with 12 crimes and three criminals.
> 
>  # Make IDs: Criminal 1 committed crimes 1-4, etc.
>  id <- c(1,1,1,1,
+          2,2,2,2,
+                  3,3,3,3)
> 
>  # spatial locations of the crimes:
>  s <- c(0.8,0.9,1.1,1.2,
+         1.8,1.9,2.1,2.2,
+         2.8,2.9,3.1,3.2)
>  s <- cbind(0,s)
> 
>  # Categorical crime features, say mode of entry (1=door, 2=other) and
>  # type of residence (1=apartment, 2=other)
>  Mode <- c(1,1,1,1,  #Different distribution by criminal
+            1,2,1,2,
+            2,2,2,2)
>  Type <- c(1,2,1,2,  #Same distribution for all criminals
+            1,2,1,2,
+            1,2,1,2)
>  Xcat <- cbind(Mode,Type)
> 
>  # Times of the crimes
>  t <- c(1,2,3,4,
+         2,3,4,5,
+         3,4,5,6)
> 
>  # Now let's pretend we don't know the criminal for crimes 1, 4, 6, 8, and 12.
>  id <- c(NA,1,1,NA,2,NA,2,NA,3,3,3,NA)
> 
>  # Fit the model (nb: use much larger iters and burn on real problem)
>  fit <- crimeClust_bayes(criminal=id, s=s, t1=t,t2=t, Xcat=Xcat,
+                    maxcriminals=12,iters=500,burn=100,update=100)
> 
>  # Plot the posterior probability matrix that each pair of crimes was
>  # committed by the same criminal:
>  if(require(fields,quietly=TRUE)){
+  fields::image.plot(1:12,1:12,fit$p.equal,
+             xlab="Crime",ylab="Crime",
+             main="Probability crimes are from the same criminal")
+  }
Loading required package: grid
Spam version 1.0-1 (2014-09-09) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

> 
>  # Extract the crimes with the largest posterior probability
>  bayesPairs(fit$p.equal)
   i1 i2   prob
12  2  3 1.0000
40  5  7 1.0000
61  9 10 1.0000
62  9 11 1.0000
64 10 11 1.0000
63  9 12 0.8900
65 10 12 0.8900
66 11 12 0.8900
1   1  2 0.8325
2   1  3 0.8325
47  6  8 0.4775
13  2  4 0.3900
22  3  4 0.3900
3   1  4 0.3700
39  5  6 0.3175
46  6  7 0.3175
41  5  8 0.2375
52  7  8 0.2375
32  4  6 0.0125
31  4  5 0.0100
33  4  7 0.0100
57  8  9 0.0100
58  8 10 0.0100
59  8 11 0.0100
34  4  8 0.0050
>  bayesProb(fit$p.equal[1,])
  index   prob
1     1 1.0000
2     2 0.8325
3     3 0.8325
4     4 0.3700
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("crimeClust_bayes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:fields’, ‘package:maps’, ‘package:spam’,
  ‘package:grid’

> nameEx("crimeClust_hier")
> ### * crimeClust_hier
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: crimeClust_hier
> ### Title: Agglomerative Hierarchical Crime Series Clustering
> ### Aliases: crimeClust_hier
> 
> ### ** Examples
> 
> # See vignette: "Crime Series Identification and Clustering" for usage.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("crimeClust_hier", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("crimes")
> ### * crimes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: crimes
> ### Title: Ficticious dataset of crime events
> ### Aliases: crimes
> ### Keywords: datasets
> 
> ### ** Examples
> 
> head(crimes)
  crimeID       X        Y MO1  MO2  MO3             DT.FROM
1     C:1 13661.1  -4659.3   6    a    J 1993-01-06 23:55:00
2     C:2  6758.8 -10092.4  25    a    E 1993-01-06 00:00:00
3     C:3 10077.6  -8810.9  25    a    E 1993-01-08 00:00:00
4     C:4 12080.3  -4011.1  25    a    E 1993-01-10 20:27:00
5     C:5 10862.5  -8091.0  19    b    C 1993-01-11 00:00:00
6     C:6 14032.9  -1945.4   7 <NA> <NA> 1993-01-04 15:30:00
                DT.TO
1 1993-01-08 00:00:00
2 1993-01-07 00:00:00
3 1993-01-08 17:30:00
4 1993-01-10 20:27:00
5 1993-01-12 00:00:00
6 1993-01-04 15:30:00
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("crimes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getBF")
> ### * getBF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getBF
> ### Title: Estimates the bayes factor for continous and categorical
> ###   predictors.
> ### Aliases: getBF
> 
> ### ** Examples
> 
> # See vignette: "Statistical Methods for Crime Series Linkage" for usage.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getBF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getCrimeSeries")
> ### * getCrimeSeries
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getCrimeSeries
> ### Title: Generate a list of offenders and their associated crime series.
> ### Aliases: getCrimeSeries
> 
> ### ** Examples
> 
> data(offenders)
> 
>  getCrimeSeries("O:40",offenders)
$offenderID
[1] "O:40"

$crimeID
[1] "C:26"  "C:110" "C:78"  "C:85" 

>  getCrimeSeries(c("O:40","O:3"),offenders)  # list of crime series from multiple offenders
[[1]]
[[1]]$offenderID
[1] "O:40"

[[1]]$crimeID
[1] "C:26"  "C:110" "C:78"  "C:85" 


[[2]]
[[2]]$offenderID
[1] "O:3"

[[2]]$crimeID
[1] "C:29" "C:16" "C:23" "C:25" "C:24" "C:40"


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getCrimeSeries", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getCrimes")
> ### * getCrimes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getCrimes
> ### Title: Generate a list of crimes for a specific offender
> ### Aliases: getCrimes
> 
> ### ** Examples
> 
> data(crimes)
>  data(offenders)
> 
>  getCrimes("O:40",crimes,offenders)
    crimeID       X      Y MO1 MO2 MO3             DT.FROM               DT.TO
26     C:26  9541.4 4124.5  23   h   J 1993-01-29 00:00:00 1993-01-29 14:30:00
78     C:78 10609.4 5683.4  23   a   D 1993-04-23 00:00:00 1993-04-23 16:00:00
85     C:85 11731.8 5429.7  23   a   J 1993-04-30 12:30:00 1993-04-30 14:30:00
110   C:110 11669.4 5353.0  25   f   M 1993-05-01 12:36:00 1993-05-01 12:36:00
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getCrimes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getCriminals")
> ### * getCriminals
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getCriminals
> ### Title: Lookup the offenders responsible for a set of solved crimes
> ### Aliases: getCriminals
> 
> ### ** Examples
> 
> data(offenders)
> 
>  getCriminals("C:1",offenders)
[1] "O:18"
> 
>  getCriminals("C:78",offenders)                      # shows co-offenders
[1] "O:40" "O:72" "O:73"
> 
>  getCriminals(c("C:26","C:78","85","110"),offenders) # all offenders from a crime series
[1] "O:33" "O:40" "O:72" "O:73"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getCriminals", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getDateTime")
> ### * getDateTime
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getDateTime
> ### Title: Creates date-time objects for censored crime data
> ### Aliases: getDateTime
> 
> ### ** Examples
> 
> getDateTime("2014-03-20","1530","2014-03-22","0310")
              DT.FROM               DT.TO
1 2014-03-20 15:30:00 2014-03-22 03:10:00
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getDateTime", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getROC")
> ### * getROC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getROC
> ### Title: Cacluate ROC like metrics.
> ### Aliases: getROC
> 
> ### ** Examples
> 
> f = 1:10
> y = rep(0:1,length=10)
> getROC(f,y)
   FPR TPR       PPV Total TotalRate threshold
1  0.0 0.2 1.0000000     1       0.1        10
2  0.2 0.2 0.5000000     2       0.2         9
3  0.2 0.4 0.6666667     3       0.3         8
4  0.4 0.4 0.5000000     4       0.4         7
5  0.4 0.6 0.6000000     5       0.5         6
6  0.6 0.6 0.5000000     6       0.6         5
7  0.6 0.8 0.5714286     7       0.7         4
8  0.8 0.8 0.5000000     8       0.8         3
9  0.8 1.0 0.5555556     9       0.9         2
10 1.0 1.0 0.5000000    10       1.0         1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getROC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("linkage")
> ### * linkage
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: linkage
> ### Title: Hierarchical Based Linkage
> ### Aliases: linkage
> 
> ### ** Examples
> 
> # See vignette: "Crime Series Identification and Clustering" for usage.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("linkage", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("makeGroups")
> ### * makeGroups
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: makeGroups
> ### Title: Generates crime groups from crime series data
> ### Aliases: makeGroups
> 
> ### ** Examples
> 
> data(crimes)
>  data(offenders)
>  seriesData = makeSeriesData(crimedata=crimes,offenderTable=offenders)
>  groups = makeGroups(seriesData,method=1)
>  head(groups,10)
 [1] 1 2 3 4 5 6 7 8 9 9
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("makeGroups", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("makePairs")
> ### * makePairs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: makePairs
> ### Title: Generates indices of linked and unlinked crime pairs (with
> ###   weights)
> ### Aliases: makeLinked makePairs makeUnlinked
> 
> ### ** Examples
> 
> data(crimes)
>  data(offenders)
>  seriesData = makeSeriesData(crimedata=crimes,offenderTable=offenders)
>  allPairs = makePairs(seriesData,thres=365,m=40)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("makePairs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("makeSeriesData")
> ### * makeSeriesData
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: makeSeriesData
> ### Title: Make crime series data
> ### Aliases: makeSeriesData
> 
> ### ** Examples
> 
> data(crimes)
>  data(offenders)
> 
>  seriesData = makeSeriesData(crimedata=crimes,offenderTable=offenders)
>  head(seriesData)
  crimeID Index CS offenderID                TIME
1     C:6     6  1        O:1 1993-01-04 15:30:00
2     C:9     9  2       O:10 1993-01-11 13:00:00
3   C:121   121  3      O:100 1993-06-02 12:00:00
4   C:127   127  4      O:101 1993-06-04 16:32:00
5   C:100   100  5      O:102 1993-05-17 11:45:00
6    C:94    94  6      O:103 1993-05-10 13:50:00
> 
>  nCrimes = table(seriesData$offenderID)  # length of each crime series
>  table(nCrimes)                  # distribution of crime series length
nCrimes
  1   2   3   4   5   6   7  14 
328  39   6   4   2   6   1   1 
>  mean(nCrimes>1)                 # proportion of offenders with multiple crimes
[1] 0.1524548
> 
>  nCO = table(seriesData$crimeID) # number of co-offenders per crime
>  table(nCO)                      # distribution of number of co-offenders
nCO
  1   2   3   4 
294  78  15   3 
>  mean(nCO>1)                     # proportion of crimes with multiple co-offenders
[1] 0.2461538
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("makeSeriesData", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("naiveBayes")
> ### * naiveBayes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: naiveBayes
> ### Title: Naive bayes classifier using histograms and shrinkage
> ### Aliases: naiveBayes
> 
> ### ** Examples
> 
> # See vignette: "Statistical Methods for Crime Series Linkage" for usage.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("naiveBayes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("offenders")
> ### * offenders
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: offenders
> ### Title: Ficticious offender data
> ### Aliases: offenders
> ### Keywords: datasets
> 
> ### ** Examples
> 
> head(offenders)
  offenderID crimeID
1        O:1     C:6
2        O:2     C:2
3        O:3    C:29
4        O:4    C:19
5        O:5    C:18
6        O:6    C:18
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("offenders", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotBF")
> ### * plotBF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotBF
> ### Title: plots 1D bayes factor
> ### Aliases: plotBF
> 
> ### ** Examples
> 
> # See vignette: "Statistical Methods for Crime Series Linkage" for usage.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotBF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_hcc")
> ### * plot_hcc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_hcc
> ### Title: Plot a hierarchical crime clustering object
> ### Aliases: plot_hcc
> 
> ### ** Examples
> 
> # See vignette: "Crime Series Identification and Clustering" for usage.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_hcc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predictBF")
> ### * predictBF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predictBF
> ### Title: Generate prediction of a component bayes factor
> ### Aliases: predictBF
> 
> ### ** Examples
> 
> # See vignette: "Statistical Methods for Crime Series Linkage" for usage.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predictBF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predictNB")
> ### * predictNB
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predictNB
> ### Title: Generate prediction (sum of log bayes factors) from a
> ###   'naiveBayes' object
> ### Aliases: predictNB
> 
> ### ** Examples
> 
> # See vignette: "Statistical Methods for Crime Series Linkage" for usage.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predictNB", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("seriesID")
> ### * seriesID
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: seriesID
> ### Title: Crime series identification
> ### Aliases: seriesID
> 
> ### ** Examples
> 
> # See vignette: "Crime Series Identification and Clustering" for usage.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("seriesID", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.273 0.054 4.365 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
