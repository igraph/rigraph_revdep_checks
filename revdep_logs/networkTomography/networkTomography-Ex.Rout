
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "networkTomography"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "networkTomography-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('networkTomography')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("agg")
> ### * agg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: agg
> ### Title: Function to aggregate results from matrix to matrix
> ### Aliases: agg
> ### Keywords: arith manip
> 
> ### ** Examples
> 
> mat <- matrix(rnorm(5e3), ncol=5)
> agg(mat)
            [,1]        [,2]         [,3]        [,4]         [,5]
mean -0.01164814 -0.01626191  0.015309034  0.01672225 -0.020063522
sd    1.03491584  1.03998149  1.031106967  1.03865366  0.989371429
min  -3.00804860 -3.25322007 -3.539585961 -3.20805688 -3.671299932
max   3.81027668  3.63957363  2.862142748  3.06452389  2.736970252
q05  -1.72695999 -1.75241173 -1.703375519 -1.64433044 -1.638736316
q16  -1.03355439 -1.03953378 -0.997499908 -0.99470465 -1.025368869
q50  -0.03532423 -0.03448289 -0.005495651  0.01519523 -0.004268064
q84   0.99218996  1.02604862  1.086712188  1.03891811  0.957662897
q95   1.74398317  1.69752273  1.698917926  1.70878694  1.567458072
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("agg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("buildRoutingMat")
> ### * buildRoutingMat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: buildRoutingMat
> ### Title: Build routing matrices for linked star topologies; that is, a
> ###   set of star-topology networks with links between a subset of routers
> ### Aliases: buildRoutingMat
> 
> ### ** Examples
> 
> nVec <- c(3, 3, 3)
> Cmat <- diag(3)
> Cmat[1,2] <- Cmat[2,3] <- 1
> buildRoutingMat(nVec, Cmat)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    1    1    1    1    1    1    1    1    1     0     0     0     0
 [2,]    0    0    0    0    0    0    0    0    0     1     1     1     1
 [3,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [4,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [5,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [6,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [7,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [8,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [9,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[10,]    1    0    0    0    0    0    0    0    0     1     0     0     0
[11,]    0    1    0    0    0    0    0    0    0     0     1     0     0
[12,]    0    0    1    0    0    0    0    0    0     0     0     1     0
[13,]    0    0    0    1    0    0    0    0    0     0     0     0     1
[14,]    0    0    0    0    1    0    0    0    0     0     0     0     0
[15,]    0    0    0    0    0    1    0    0    0     0     0     0     0
[16,]    0    0    0    0    0    0    1    0    0     0     0     0     0
[17,]    0    0    0    0    0    0    0    1    0     0     0     0     0
[18,]    0    0    0    0    0    0    0    0    1     0     0     0     0
[19,]    0    0    0    1    1    1    0    0    0     0     0     0     1
[20,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[21,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[22,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[23,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[24,]    0    0    0    0    0    0    0    0    0     0     0     0     0
      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]
 [1,]     0     0     0     0     0     0     0     0     0     0     0     0
 [2,]     1     1     1     1     1     0     0     0     0     0     0     0
 [3,]     0     0     0     0     0     1     1     1     1     1     1     1
 [4,]     0     0     0     0     0     0     0     0     0     0     0     0
 [5,]     0     0     0     0     0     0     0     0     0     0     0     0
 [6,]     0     0     0     0     0     0     0     0     0     0     0     0
 [7,]     0     0     0     0     0     0     0     0     0     0     0     0
 [8,]     0     0     0     0     0     0     0     0     0     0     0     0
 [9,]     0     0     0     0     0     0     0     0     0     0     0     0
[10,]     0     0     0     0     0     1     0     0     0     0     0     0
[11,]     0     0     0     0     0     0     1     0     0     0     0     0
[12,]     0     0     0     0     0     0     0     1     0     0     0     0
[13,]     0     0     0     0     0     0     0     0     1     0     0     0
[14,]     1     0     0     0     0     0     0     0     0     1     0     0
[15,]     0     1     0     0     0     0     0     0     0     0     1     0
[16,]     0     0     1     0     0     0     0     0     0     0     0     1
[17,]     0     0     0     1     0     0     0     0     0     0     0     0
[18,]     0     0     0     0     1     0     0     0     0     0     0     0
[19,]     1     1     0     0     0     0     0     0     1     1     1     0
[20,]     0     0     0     0     0     0     0     0     0     0     0     0
[21,]     0     0     0     0     0     0     0     0     0     0     0     0
[22,]     0     0     0     0     0     0     0     0     0     0     0     0
[23,]     0     0     0     0     0     0     0     0     0     0     0     0
[24,]     0     0     0     0     0     0     0     0     0     0     0     0
      [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]
 [1,]     0     0     0     0     0     0     0     0     0     0     0     0
 [2,]     0     0     0     0     0     0     0     0     0     0     0     0
 [3,]     1     1     0     0     0     0     0     0     0     0     0     0
 [4,]     0     0     1     1     1     1     1     1     1     1     1     0
 [5,]     0     0     0     0     0     0     0     0     0     0     0     1
 [6,]     0     0     0     0     0     0     0     0     0     0     0     0
 [7,]     0     0     0     0     0     0     0     0     0     0     0     0
 [8,]     0     0     0     0     0     0     0     0     0     0     0     0
 [9,]     0     0     0     0     0     0     0     0     0     0     0     0
[10,]     0     0     1     0     0     0     0     0     0     0     0     1
[11,]     0     0     0     1     0     0     0     0     0     0     0     0
[12,]     0     0     0     0     1     0     0     0     0     0     0     0
[13,]     0     0     0     0     0     1     0     0     0     0     0     0
[14,]     0     0     0     0     0     0     1     0     0     0     0     0
[15,]     0     0     0     0     0     0     0     1     0     0     0     0
[16,]     0     0     0     0     0     0     0     0     1     0     0     0
[17,]     1     0     0     0     0     0     0     0     0     1     0     0
[18,]     0     1     0     0     0     0     0     0     0     0     1     0
[19,]     0     0     0     0     0     0     0     0     0     0     0     0
[20,]     0     0     1     1     1     0     0     0     0     0     0     1
[21,]     0     0     0     0     0     0     0     0     1     1     1     0
[22,]     0     0     0     0     0     0     0     0     0     0     0     0
[23,]     0     0     0     0     0     0     0     0     0     0     0     0
[24,]     0     0     0     0     0     0     0     0     0     0     0     0
      [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]
 [1,]     0     0     0     0     0     0     0     0     0     0     0     0
 [2,]     0     0     0     0     0     0     0     0     0     0     0     0
 [3,]     0     0     0     0     0     0     0     0     0     0     0     0
 [4,]     0     0     0     0     0     0     0     0     0     0     0     0
 [5,]     1     1     1     1     1     1     1     1     0     0     0     0
 [6,]     0     0     0     0     0     0     0     0     1     1     1     1
 [7,]     0     0     0     0     0     0     0     0     0     0     0     0
 [8,]     0     0     0     0     0     0     0     0     0     0     0     0
 [9,]     0     0     0     0     0     0     0     0     0     0     0     0
[10,]     0     0     0     0     0     0     0     0     1     0     0     0
[11,]     1     0     0     0     0     0     0     0     0     1     0     0
[12,]     0     1     0     0     0     0     0     0     0     0     1     0
[13,]     0     0     1     0     0     0     0     0     0     0     0     1
[14,]     0     0     0     1     0     0     0     0     0     0     0     0
[15,]     0     0     0     0     1     0     0     0     0     0     0     0
[16,]     0     0     0     0     0     1     0     0     0     0     0     0
[17,]     0     0     0     0     0     0     1     0     0     0     0     0
[18,]     0     0     0     0     0     0     0     1     0     0     0     0
[19,]     0     0     0     0     0     0     0     0     0     0     0     0
[20,]     1     1     0     0     0     0     0     0     1     1     1     0
[21,]     0     0     0     0     0     1     1     1     0     0     0     0
[22,]     0     0     0     0     0     0     0     0     0     0     0     0
[23,]     0     0     0     0     0     0     0     0     0     0     0     0
[24,]     0     0     0     0     0     0     0     0     0     0     0     0
      [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61]
 [1,]     0     0     0     0     0     0     0     0     0     0     0     0
 [2,]     0     0     0     0     0     0     0     0     0     0     0     0
 [3,]     0     0     0     0     0     0     0     0     0     0     0     0
 [4,]     0     0     0     0     0     0     0     0     0     0     0     0
 [5,]     0     0     0     0     0     0     0     0     0     0     0     0
 [6,]     1     1     1     1     1     0     0     0     0     0     0     0
 [7,]     0     0     0     0     0     1     1     1     1     1     1     1
 [8,]     0     0     0     0     0     0     0     0     0     0     0     0
 [9,]     0     0     0     0     0     0     0     0     0     0     0     0
[10,]     0     0     0     0     0     1     0     0     0     0     0     0
[11,]     0     0     0     0     0     0     1     0     0     0     0     0
[12,]     0     0     0     0     0     0     0     1     0     0     0     0
[13,]     0     0     0     0     0     0     0     0     1     0     0     0
[14,]     1     0     0     0     0     0     0     0     0     1     0     0
[15,]     0     1     0     0     0     0     0     0     0     0     1     0
[16,]     0     0     1     0     0     0     0     0     0     0     0     1
[17,]     0     0     0     1     0     0     0     0     0     0     0     0
[18,]     0     0     0     0     1     0     0     0     0     0     0     0
[19,]     0     0     0     0     0     0     0     0     0     0     0     0
[20,]     0     0     0     0     0     0     0     0     0     0     0     0
[21,]     0     0     1     1     1     0     0     0     0     0     0     0
[22,]     0     0     0     0     0     0     0     0     1     1     1     0
[23,]     0     0     0     0     0     0     0     0     0     0     0     0
[24,]     0     0     0     0     0     0     0     0     0     0     0     0
      [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73]
 [1,]     0     0     0     0     0     0     0     0     0     0     0     0
 [2,]     0     0     0     0     0     0     0     0     0     0     0     0
 [3,]     0     0     0     0     0     0     0     0     0     0     0     0
 [4,]     0     0     0     0     0     0     0     0     0     0     0     0
 [5,]     0     0     0     0     0     0     0     0     0     0     0     0
 [6,]     0     0     0     0     0     0     0     0     0     0     0     0
 [7,]     1     1     0     0     0     0     0     0     0     0     0     0
 [8,]     0     0     1     1     1     1     1     1     1     1     1     0
 [9,]     0     0     0     0     0     0     0     0     0     0     0     1
[10,]     0     0     1     0     0     0     0     0     0     0     0     1
[11,]     0     0     0     1     0     0     0     0     0     0     0     0
[12,]     0     0     0     0     1     0     0     0     0     0     0     0
[13,]     0     0     0     0     0     1     0     0     0     0     0     0
[14,]     0     0     0     0     0     0     1     0     0     0     0     0
[15,]     0     0     0     0     0     0     0     1     0     0     0     0
[16,]     0     0     0     0     0     0     0     0     1     0     0     0
[17,]     1     0     0     0     0     0     0     0     0     1     0     0
[18,]     0     1     0     0     0     0     0     0     0     0     1     0
[19,]     0     0     0     0     0     0     0     0     0     0     0     0
[20,]     0     0     0     0     0     0     0     0     0     0     0     0
[21,]     0     0     0     0     0     0     0     0     0     0     0     0
[22,]     0     0     0     0     0     1     1     1     0     0     0     0
[23,]     0     0     0     0     0     0     0     0     0     0     0     0
[24,]     0     0     0     0     0     0     0     0     0     0     0     0
      [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81]
 [1,]     0     0     0     0     0     0     0     0
 [2,]     0     0     0     0     0     0     0     0
 [3,]     0     0     0     0     0     0     0     0
 [4,]     0     0     0     0     0     0     0     0
 [5,]     0     0     0     0     0     0     0     0
 [6,]     0     0     0     0     0     0     0     0
 [7,]     0     0     0     0     0     0     0     0
 [8,]     0     0     0     0     0     0     0     0
 [9,]     1     1     1     1     1     1     1     1
[10,]     0     0     0     0     0     0     0     0
[11,]     1     0     0     0     0     0     0     0
[12,]     0     1     0     0     0     0     0     0
[13,]     0     0     1     0     0     0     0     0
[14,]     0     0     0     1     0     0     0     0
[15,]     0     0     0     0     1     0     0     0
[16,]     0     0     0     0     0     1     0     0
[17,]     0     0     0     0     0     0     1     0
[18,]     0     0     0     0     0     0     0     1
[19,]     0     0     0     0     0     0     0     0
[20,]     0     0     0     0     0     0     0     0
[21,]     0     0     0     0     0     0     0     0
[22,]     0     0     1     1     1     0     0     0
[23,]     0     0     0     0     0     0     0     0
[24,]     0     0     0     0     0     0     0     0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("buildRoutingMat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("buildStarMat")
> ### * buildStarMat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: buildStarMat
> ### Title: Build routing matrix for star network topology
> ### Aliases: buildStarMat
> ### Keywords: array
> 
> ### ** Examples
> 
> buildStarMat(3)
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]
[1,]    1    1    1    0    0    0    0    0    0
[2,]    0    0    0    1    1    1    0    0    0
[3,]    0    0    0    0    0    0    1    1    1
[4,]    1    0    0    1    0    0    1    0    0
[5,]    0    1    0    0    1    0    0    1    0
[6,]    0    0    1    0    0    1    0    0    1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("buildStarMat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calcN")
> ### * calcN
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calcN
> ### Title: Compute total traffic from a particular time.
> ### Aliases: calcN
> ### Keywords: algebra
> 
> ### ** Examples
> 
> data(bell.labs)
> A.decomp <- decomposeA(bell.labs$A)
> total.traffic <- calcN(yt=bell.labs$Y[1,], A1=A.decomp$A1)
> total.traffic == sum(bell.labs$X[1,])
[1] FALSE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calcN", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calibration_ssm")
> ### * calibration_ssm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calibration_ssm
> ### Title: Estimation for the linear SSM calibration model of Blocker &
> ###   Airoldi (2011)
> ### Aliases: calibration_ssm
> ### Keywords: models multivariate ts
> 
> ### ** Examples
> 
> data(bell.labs)
> 
> lambda0 <- matrix(1, nrow(bell.labs$Y), ncol(bell.labs$A))
> lambda0[100,] <- ipfp(y=bell.labs$Y[100,], A=bell.labs$A,
+                       x0=rep(1, ncol(bell.labs$A)))
> phihat0 <- rep(1, nrow(bell.labs$Y))
> Ft <- 0.5 * diag_mat(rep(1, ncol(bell.labs$A)))
> Rt <- 0.01 * diag_mat(rep(1, nrow(bell.labs$A)))
> 
> # Not run
> #fit.calibration <- calibration_ssm(tme=100, y=bell.labs$Y, A=bell.labs$A,
> #                                   Ft=Ft, Rt=Rt, lambda0=lambda0,
> #                                   phihat0=phihat0, w=23)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calibration_ssm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("diag_ind")
> ### * diag_ind
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: diag_ind
> ### Title: Make vector of 1-dimensional diagonal indices for square matrix
> ### Aliases: diag_ind
> ### Keywords: array
> 
> ### ** Examples
> 
> ind <- diag_ind(5)
> diag_mat(seq(5))[ind]
[1] 1 2 3 4 5
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("diag_ind", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("diag_mat")
> ### * diag_mat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: diag_mat
> ### Title: Make diagonal matrix from vector
> ### Aliases: diag_mat
> ### Keywords: array
> 
> ### ** Examples
> 
> diag_mat(seq(5))
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    0    0    0    0
[2,]    0    2    0    0    0
[3,]    0    0    3    0    0
[4,]    0    0    0    4    0
[5,]    0    0    0    0    5
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("diag_mat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getActive")
> ### * getActive
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getActive
> ### Title: Check for deterministically-known OD flows at single time
> ### Aliases: getActive
> ### Keywords: algebra
> 
> ### ** Examples
> 
> data(bell.labs)
> getActive(bell.labs$Y[1,], bell.labs$A)
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[16] TRUE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getActive", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getSrcDstIndices")
> ### * getSrcDstIndices
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getSrcDstIndices
> ### Title: Find indices of source and destination for each point-to-point
> ###   flow
> ### Aliases: getSrcDstIndices
> ### Keywords: algebra
> 
> ### ** Examples
> 
> data(cmu)
> src.dst.ind <- getSrcDstIndices(cmu$A.full)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getSrcDstIndices", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gravity")
> ### * gravity
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gravity
> ### Title: Run tomogravity estimation on complete time series of aggregate
> ###   flows
> ### Aliases: gravity
> ### Keywords: models multivariate ts
> 
> ### ** Examples
> 
> data(cmu)
> srcDstInd <- getSrcDstIndices(cmu$A.full)
> estimate <- gravity(Y=cmu$Y[1:3,], srcDstInd=srcDstInd)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gravity", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gravity.fit")
> ### * gravity.fit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gravity.fit
> ### Title: Gravity estimation for a single time point
> ### Aliases: gravity.fit
> ### Keywords: models multivariate ts
> 
> ### ** Examples
> 
> data(cmu)
> srcDstInd <- getSrcDstIndices(cmu$A.full)
> estimate <- gravity.fit(yt=cmu$Y.full[1,], srcDstInd=srcDstInd)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gravity.fit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ipfp")
> ### * ipfp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ipfp
> ### Title: Function to run basic IPFP (iterative proportional fitting
> ###   procedure)
> ### Aliases: ipfp
> ### Keywords: array iteration
> 
> ### ** Examples
> 
> A <- buildStarMat(3)
> x <- rgamma(ncol(A), 10, 1/100)
> y <- A %*% x
> x0 <- x * rgamma(length(x), 10, 10)
> ans <- ipfp(y, A, x0, full=TRUE)
> print(ans)
$x
[1]  750.1379 1446.0441 1357.2898 1097.8554  397.1182 1227.9428 1192.0261
[8] 1231.3160  761.8133

$iter
[1] 1000

$errNorm
[1] 6.226885e-13

> print(x)
[1]  766.7251 1404.0808 1382.6660 1082.0993  534.6417 1106.1754 1191.1950
[8] 1135.7558  858.2045
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ipfp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("strphour")
> ### * strphour
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: strphour
> ### Title: Convert time string to decimal hour
> ### Aliases: strphour
> ### Keywords: character
> 
> ### ** Examples
> 
> strphour("31/08/87 12:53:29")
[1] NA
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("strphour", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tomogravity")
> ### * tomogravity
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tomogravity
> ### Title: Run tomogravity estimation on complete time series of aggregate
> ###   flows
> ### Aliases: tomogravity
> ### Keywords: models multivariate ts
> 
> ### ** Examples
> 
> data(cmu)
> estimate <- tomogravity(Y=cmu$Y.full[1, , drop=FALSE], A=cmu$A.full,
+                         lambda=0.01, .progress='text')
  |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100%
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tomogravity", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tomogravity.fit")
> ### * tomogravity.fit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tomogravity.fit
> ### Title: Tomogravity estimation for a single time point using L-BFGS-B
> ### Aliases: tomogravity.fit
> ### Keywords: models multivariate ts
> 
> ### ** Examples
> 
> data(cmu)
> srcDstInd <- getSrcDstIndices(cmu$A.full)
> estimate <- tomogravity.fit(yt=cmu$Y.full[1, ], A=cmu$A.full,
+      srcDstInd=srcDstInd, lambda=0.01)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tomogravity.fit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("twMCMC")
> ### * twMCMC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: twMCMC
> ### Title: Function to run MCMC sampling for model of Tebaldi & West (1998)
> ### Aliases: twMCMC
> ### Keywords: models multivariate
> 
> ### ** Examples
> 
> data(bell.labs)
> # Quick, simple run to test the function
> prior <- list(a=rep(1, ncol(bell.labs$A)), b=rep(0, ncol(bell.labs$A)))
> mcmcOut <- twMCMC(Y=bell.labs$Y[1,], A=bell.labs$A, prior=prior,
+                   ndraws=1000, burnin=100,
+                   verbose=0)
> print(summary(mcmcOut$XDraws))

Iterations = 1:1000
Thinning interval = 1 
Number of chains = 1 
Sample size per chain = 1000 

1. Empirical mean and standard deviation for each variable,
   plus standard error of the mean:

       Mean     SD Naive SE Time-series SE
X1  15491.7 7681.1   242.90         256.23
X2   2395.1 2061.6    65.19          68.70
X3  12706.0 8472.7   267.93         436.23
X4   9329.3 6916.4   218.71         316.97
X5   9472.9 7000.3   221.37         266.08
X6   3942.8 2271.0    71.81         144.63
X7  22784.7 9151.9   289.41         863.92
X8  14863.2 7974.5   252.18         977.11
X9   7381.2 5999.8   189.73         225.68
X10  3442.6 2109.4    66.71         144.87
X11 12674.0 7042.4   222.70         610.84
X12 11463.7 7027.1   222.22         782.11
X13   924.4  859.6    27.18          21.26
X14  1135.8  809.3    25.59          51.30
X15  1653.3 1013.0    32.03          65.60
X16  1689.8 1052.7    33.29          81.46

2. Quantiles for each variable:

       2.5%     25%     50%   75% 97.5%
X1  1627.15  9526.6 15601.9 21432 29414
X2    64.25   672.3  1817.8  3621  7268
X3   553.69  5363.7 11708.4 18842 31012
X4   449.85  3390.7  8108.0 13848 25311
X5   307.78  3535.1  8172.6 14079 25091
X6   272.55  2148.0  3805.5  5526  8702
X7  4772.95 16348.0 22442.5 29915 39383
X8  1256.70  8551.5 14630.0 20454 30337
X9   186.45  2430.4  6004.9 10817 21928
X10  295.30  1794.0  3111.0  4894  8325
X11 1289.00  7479.2 11720.5 17253 28403
X12 1004.83  5578.8 10680.0 16184 25851
X13   23.27   251.0   686.8  1332  3163
X14   70.90   508.0   963.5  1640  3028
X15  133.58   860.0  1495.0  2320  3811
X16  104.97   817.0  1565.5  2412  3963

> print(mcmcOut$accepts)
 [1] 684 688 682 693 685  NA  NA  NA 694  NA  NA  NA 674 698 680  NA
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("twMCMC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.517 0.153 3.681 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
