
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "metafor"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "metafor-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('metafor')
Loading required package: Matrix
Loading 'metafor' package (version 1.9-7). For an overview 
and introduction to the package please type: help(metafor).
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("addpoly.default")
> ### * addpoly.default
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addpoly.default
> ### Title: Add Polygons to Forest Plots (Default Method)
> ### Aliases: addpoly.default
> ### Keywords: aplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a mixed-
> ### effects model with absolute latitude as a moderator
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, mods = ~ ablat,
+            slab=paste(author, year, sep=", "), data=dat.bcg)
> 
> ### forest plot of the observed relative risks
> forest(res, addfit=FALSE, atransf=exp, xlim=c(-8,5), ylim=c(-4.5,16), cex=.8, 
+        order=order(dat.bcg$ablat), ilab=dat.bcg$ablat, ilab.xpos=-3.5)
> 
> ### predicted average log relative risk for 10, 30, and 50 degrees absolute latitude
> x <- predict(res, newmods=c(10, 30, 50))
> 
> ### add predicted average relative risks to forest plot
> addpoly(x$pred, sei=x$se, atransf=exp, col="white", rows=-2,
+         mlab=c("- at 10 Degrees", "- at 30 Degrees", "- at 50 Degrees"), cex=.8)
> abline(h=0)
> text(-8,   -1, "Model-Based Estimates of RR:", pos=4, cex=.8)
> text(-8,   15, "Author(s) and Year",     pos=4, cex=.8)
> text(5,    15, "Relative Risk [95% CI]", pos=2, cex=.8)
> text(-3.5, 15, "Latitude", cex=.8)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addpoly.default", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("addpoly.rma")
> ### * addpoly.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: addpoly.rma
> ### Title: Add Polygons to Forest Plots (Method for 'rma' Objects)
> ### Aliases: addpoly.rma
> ### Keywords: aplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using the Mantel-Haenszel method
> res <- rma.mh(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg,
+               slab=paste(author, year, sep=", "))
> 
> ### forest plot of the observed relative risks with summary estimate
> forest(res, atransf=exp, xlim=c(-7,5), ylim=c(-2.5,16))
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### add summary estimate from the random-effects model to forest plot
> addpoly(res, atransf=exp)
> 
> ### forest plot with subgrouping of studies and summaries per subgroup
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg,
+            slab=paste(author, year, sep=", "))
> forest(res, xlim=c(-16, 6), at=log(c(.05, .25, 1, 4)), atransf=exp,
+        ilab=cbind(dat.bcg$tpos, dat.bcg$tneg, dat.bcg$cpos, dat.bcg$cneg),
+        ilab.xpos=c(-9.5,-8,-6,-4.5), cex=.75, ylim=c(-1, 27),
+        order=order(dat.bcg$alloc), rows=c(3:4,9:15,20:23),
+        mlab="RE Model for All Studies")
> op <- par(cex=.75, font=4)
> text(-16, c(24,16,5), c("Systematic Allocation", "Random Allocation",
+                         "Alternate Allocation"), pos=4)
> par(font=2)
> text(c(-9.5,-8,-6,-4.5), 26, c("TB+", "TB-", "TB+", "TB-"))
> text(c(-8.75,-5.25),     27, c("Vaccinated", "Control"))
> text(-16,                26, "Author(s) and Year",     pos=4)
> text(6,                  26, "Relative Risk [95% CI]", pos=2)
> par(op)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg,
+            subset=(alloc=="systematic"))
> addpoly(res, row=18.5, cex=.75, atransf=exp, mlab="RE Model for Subgroup")
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg,
+            subset=(alloc=="random"))
> addpoly(res, row=7.5, cex=.75, atransf=exp, mlab="RE Model for Subgroup")
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg,
+            subset=(alloc=="alternate"))
> addpoly(res, row=1.5, cex=.75, atransf=exp, mlab="RE Model for Subgroup")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("addpoly.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("anova.rma")
> ### * anova.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: anova.rma
> ### Title: Likelihood Ratio and Wald-Type Tests for 'rma' Objects
> ### Aliases: anova.rma
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model
> res1 <- rma(yi, vi, data=dat, method="ML")
> 
> ### mixed-effects model with two moderators (absolute latitude and publication year)
> res2 <- rma(yi, vi, mods = ~ ablat + year, data=dat, method="ML")
> 
> ### Wald-type test of the two moderators
> anova(res2)

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 33.9192, p-val < .0001

> 
> ### alternative way of specifying the same test
> anova(res2, L=rbind(c(0,1,0), c(0,0,1)))

Hypotheses:            
1: ablat = 0
2:  year = 0

Results:
   estimate     se    zval   pval
1:  -0.0308 0.0063 -4.9057 <.0001
2:  -0.0032 0.0092 -0.3471 0.7285

Omnibus Test of Hypotheses:
QM(df = 2) = 33.9192, p-val < .0001

> 
> ### corresponding likelihood ratio test
> anova(res1, res2)
        df     AIC     BIC    AICc   logLik     LRT   pval       QE  tau^2
Full     4 23.2922 25.5520 28.2922  -7.6461                 28.3251 0.0269
Reduced  2 29.3302 30.4601 30.5302 -12.6651 10.0379 0.0066 152.2330 0.2800
           R^2
Full          
Reduced 90.39%
> 
> ### test of a linear combination
> anova(res2, L=c(1,35,1970))

Hypothesis:                                     
1: intrcpt + 35*ablat + 1970*year = 0

Results:
   estimate     se    zval   pval
1:  -0.7533 0.0837 -9.0039 <.0001

Test of Hypothesis:
QM(df = 1) = 81.0700, p-val < .0001

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("anova.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("baujat")
> ### * baujat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: baujat
> ### Title: Baujat Plots for 'rma' Objects
> ### Aliases: baujat baujat.rma.uni baujat.rma.mh baujat.rma.peto
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load data from Pignon et al. (2000)
> dat <- get(data(dat.pignon2000))
> 
> ### compute estimated log hazard ratios and sampling variances
> dat$yi <- with(dat, OmE/V)
> dat$vi <- with(dat, 1/V)
> 
> ### meta-analysis based on all 65 trials
> res <- rma(yi, vi, data=dat, method="FE", slab=id)
> 
> ### create Baujat plot
> baujat(res)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("baujat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bldiag")
> ### * bldiag
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bldiag
> ### Title: Construct Block Diagonal Matrix
> ### Aliases: bldiag
> ### Keywords: manip
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.berkey1998))
> 
> ### construct list of the variance-covariance matrices of the observed outcomes for the studies
> V <- lapply(split(dat[,c("v1i", "v2i")], dat$trial), as.matrix)
> 
> ### construct block diagonal matrix
> V <- bldiag(V)
> V
        [,1]   [,2]   [,3]  [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]
 [1,] 0.0075 0.0030 0.0000 0e+00 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
 [2,] 0.0030 0.0077 0.0000 0e+00 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
 [3,] 0.0000 0.0000 0.0057 9e-04 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
 [4,] 0.0000 0.0000 0.0009 8e-04 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
 [5,] 0.0000 0.0000 0.0000 0e+00 0.0021 0.0007 0.0000 0.0000 0.0000 0.0000
 [6,] 0.0000 0.0000 0.0000 0e+00 0.0007 0.0014 0.0000 0.0000 0.0000 0.0000
 [7,] 0.0000 0.0000 0.0000 0e+00 0.0000 0.0000 0.0029 0.0009 0.0000 0.0000
 [8,] 0.0000 0.0000 0.0000 0e+00 0.0000 0.0000 0.0009 0.0015 0.0000 0.0000
 [9,] 0.0000 0.0000 0.0000 0e+00 0.0000 0.0000 0.0000 0.0000 0.0148 0.0072
[10,] 0.0000 0.0000 0.0000 0e+00 0.0000 0.0000 0.0000 0.0000 0.0072 0.0304
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bldiag", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("blup")
> ### * blup
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: blup
> ### Title: Best Linear Unbiased Predictions for 'rma.uni' Objects
> ### Aliases: blup blup.rma.uni
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(yi, vi, data=dat)
> blup(res, transf=exp)
     pred  pi.lb  pi.ub
1  0.4492 0.2012 1.0032
2  0.2860 0.1431 0.5716
3  0.3727 0.1590 0.8740
4  0.2471 0.1887 0.3236
5  0.7502 0.4958 1.1352
6  0.4563 0.3883 0.5362
7  0.2882 0.1400 0.5936
8  1.0029 0.8871 1.1338
9  0.6024 0.3911 0.9279
10 0.2873 0.1775 0.4651
11 0.7021 0.5665 0.8702
12 0.7522 0.3064 1.8469
13 0.8635 0.5359 1.3915
> 
> ### illustrate shrinkage of BLUPs towards the (estimated) population average
> res <- rma(yi, vi, data=dat)
> blups <- blup(res)$pred
> plot(NA, NA, xlim=c(.8,2.4), ylim=c(-2,0.5), pch=19,
+      xaxt="n", bty="n", xlab="", ylab="Log Relative Risk")
> segments(rep(1,13), dat$yi, rep(2,13), blups, col="darkgray")
> points(rep(1,13), dat$yi, pch=19)
> points(rep(2,13), blups, pch=19)
> axis(side=1, at=c(1,2), labels=c("Observed\nValues", "BLUPs"), lwd=0)
> segments(.7, res$b, 2.15, res$b, lty="dotted")
> text(2.3, res$b, expression(hat(mu)==-0.71), cex=1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("blup", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("coef.permutest.rma.uni")
> ### * coef.permutest.rma.uni
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: coef.permutest.rma.uni
> ### Title: Extract the Model Coefficient Table from 'permutest.rma.uni'
> ###   Objects
> ### Aliases: coef.permutest.rma.uni
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a mixed-effects model
> ### with two moderators (absolute latitude and publication year)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, 
+            mods = ~ ablat + year, data=dat.bcg)
> 
> ### permutation test
> ## Not run: pres <- permutest(res)
> ## Not run: coef(pres)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("coef.permutest.rma.uni", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("coef.rma")
> ### * coef.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: coef.rma
> ### Title: Extract the Model Coefficients and Coefficient Table from 'rma'
> ###   and 'summary.rma' Objects
> ### Aliases: coef.rma coef.summary.rma
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a mixed-effects model
> ### with two moderators (absolute latitude and publication year)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat + year, data=dat.bcg)
> coef(res)
     intrcpt        ablat         year 
-3.545505079 -0.028011275  0.001907557 
> coef(summary(res))
            estimate          se       zval        pval        ci.lb
intrcpt -3.545505079 29.09587983 -0.1218559 0.903013130 -60.57238164
ablat   -0.028011275  0.01023404 -2.7370689 0.006198931  -0.04806963
year     0.001907557  0.01468382  0.1299088 0.896638598  -0.02687219
               ci.ub
intrcpt 53.481371478
ablat   -0.007952924
year     0.030687307
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("coef.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("confint.rma")
> ### * confint.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: confint.rma.uni
> ### Title: Confidence Intervals for 'rma' Objects
> ### Aliases: confint.rma.uni confint.rma.mh confint.rma.peto
> ###   confint.rma.glmm confint.rma.mv
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### confidence interval for the total amount of heterogeneity
> confint(res)

       estimate   ci.lb   ci.ub
tau^2    0.3132  0.1197  1.1115
tau      0.5597  0.3460  1.0543
I^2(%)  92.2214 81.9177 97.6781
H^2     12.8558  5.5303 43.0677

> 
> ### mixed-effects model with absolute latitude in the model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat, data=dat.bcg)
> 
> ### confidence interval for the residual amount of heterogeneity
> confint(res)

       estimate   ci.lb   ci.ub
tau^2    0.0764  0.0167  0.7848
tau      0.2763  0.1292  0.8859
I^2(%)  68.3931 32.1080 95.6975
H^2      3.1639  1.4729 23.2421

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("confint.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cumul")
> ### * cumul
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cumul
> ### Title: Cumulative Meta-Analysis for 'rma' Objects
> ### Aliases: cumul cumul.rma.uni cumul.rma.mh cumul.rma.peto
> ### Keywords: methods
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model
> res <- rma(yi, vi, data=dat)
> 
> ### cumulative meta-analysis (in the order of publication year)
> cumul(res, transf=exp, order=order(dat$year))
   estimate    zval  pvals  ci.lb  ci.ub       QE    QEp   tau2      I2      H2
1    0.4109 -1.5586 0.1191 0.1343 1.2574   0.0000 1.0000 0.0000  0.0000  1.0000
2    0.2658 -3.7967 0.0001 0.1341 0.5268   0.9315 0.3345 0.0000  0.0000  1.0000
6    0.3783 -3.9602 0.0001 0.2338 0.6120   3.1879 0.2031 0.0872 40.7090  1.6866
3    0.3675 -4.5037 0.0000 0.2377 0.5681   3.8614 0.2768 0.0763 33.9750  1.5146
10   0.3324 -5.5164 0.0000 0.2248 0.4916   7.6415 0.1056 0.0858 48.4120  1.9384
9    0.3778 -5.1875 0.0000 0.2615 0.5457  10.1854 0.0702 0.1046 60.0008  2.5000
12   0.4061 -4.7250 0.0000 0.2794 0.5901  13.2116 0.0398 0.1205 59.9982  2.4999
5    0.4545 -4.0039 0.0001 0.3089 0.6686  19.5749 0.0066 0.1780 72.3904  3.6219
7    0.4208 -4.4107 0.0000 0.2864 0.6182  22.8208 0.0036 0.2023 73.5065  3.7745
11   0.4560 -4.3588 0.0000 0.3204 0.6491  34.1203 0.0001 0.2005 81.4029  5.3772
13   0.4925 -3.9701 0.0001 0.3472 0.6987  39.6122 0.0000 0.2281 83.0110  5.8862
4    0.4517 -4.4184 0.0000 0.3175 0.6426  67.9858 0.0000 0.2732 87.0314  7.7109
8    0.4894 -3.9744 0.0001 0.3441 0.6962 152.2330 0.0000 0.3132 92.2214 12.8558
> 
> ### meta-analysis of the (log) relative risks using the Mantel-Haenszel method
> res <- rma.mh(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### cumulative meta-analysis
> cumul(res, order=order(dat.bcg$year))
   estimate     se     zval   pval   ci.lb   ci.ub       QE    QEp
1   -0.8893 0.5706  -1.5586 0.1191 -2.0077  0.2290   0.0000 1.0000
2   -1.3517 0.3455  -3.9124 0.0001 -2.0289 -0.6746   0.9373 0.3330
6   -0.8273 0.0808 -10.2371 0.0000 -0.9857 -0.6689   3.2109 0.2008
3   -0.8379 0.0802 -10.4490 0.0000 -0.9951 -0.6807   3.8945 0.2731
10  -0.8940 0.0769 -11.6254 0.0000 -1.0447 -0.7433   7.7589 0.1008
9   -0.8507 0.0730 -11.6480 0.0000 -0.9938 -0.7075  10.2660 0.0680
12  -0.8358 0.0725 -11.5275 0.0000 -0.9779 -0.6937  13.2768 0.0388
5   -0.7744 0.0688 -11.2623 0.0000 -0.9092 -0.6397  19.6127 0.0065
7   -0.7896 0.0680 -11.6188 0.0000 -0.9228 -0.6564  22.8443 0.0036
11  -0.6660 0.0577 -11.5373 0.0000 -0.7792 -0.5529  34.1377 0.0001
13  -0.6351 0.0563 -11.2811 0.0000 -0.7454 -0.5247  39.6232 0.0000
4   -0.7758 0.0520 -14.9267 0.0000 -0.8777 -0.6739  68.3763 0.0000
8   -0.4537 0.0393 -11.5338 0.0000 -0.5308 -0.3766 152.5676 0.0000
> cumul(res, order=order(dat.bcg$year), transf=TRUE)
   estimate     zval   pval  ci.lb  ci.ub       QE    QEp
1    0.4109  -1.5586 0.1191 0.1343 1.2574   0.0000 1.0000
2    0.2588  -3.9124 0.0001 0.1315 0.5094   0.9373 0.3330
6    0.4372 -10.2371 0.0000 0.3732 0.5123   3.2109 0.2008
3    0.4326 -10.4490 0.0000 0.3697 0.5062   3.8945 0.2731
10   0.4090 -11.6254 0.0000 0.3518 0.4756   7.7589 0.1008
9    0.4271 -11.6480 0.0000 0.3702 0.4929  10.2660 0.0680
12   0.4335 -11.5275 0.0000 0.3761 0.4997  13.2768 0.0388
5    0.4610 -11.2623 0.0000 0.4028 0.5275  19.6127 0.0065
7    0.4540 -11.6188 0.0000 0.3974 0.5187  22.8443 0.0036
11   0.5138 -11.5373 0.0000 0.4588 0.5753  34.1377 0.0001
13   0.5299 -11.2811 0.0000 0.4745 0.5917  39.6232 0.0000
4    0.4603 -14.9267 0.0000 0.4158 0.5097  68.3763 0.0000
8    0.6353 -11.5338 0.0000 0.5881 0.6862 152.5676 0.0000
> 
> ### meta-analysis of the (log) odds ratios using Peto's method
> res <- rma.mh(ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### cumulative meta-analysis
> cumul(res, order=order(dat.bcg$year))
   estimate     se     zval   pval   ci.lb   ci.ub       QE    QEp
1   -0.9387 0.5976  -1.5708 0.1162 -2.1100  0.2326   0.0000 1.0000
2   -1.4215 0.3595  -3.9539 0.0001 -2.1261 -0.7169   0.9404 0.3322
6   -0.9968 0.0957 -10.4137 0.0000 -1.1844 -0.8092   2.3134 0.3145
3   -1.0061 0.0947 -10.6259 0.0000 -1.1917 -0.8205   2.6721 0.4450
10  -1.0542 0.0893 -11.8020 0.0000 -1.2293 -0.8792   4.6200 0.3286
9   -0.9846 0.0835 -11.7978 0.0000 -1.1482 -0.8211   9.5987 0.0874
12  -0.9652 0.0827 -11.6734 0.0000 -1.1273 -0.8032  13.3029 0.0385
5   -0.8805 0.0775 -11.3644 0.0000 -1.0323 -0.7286  22.4178 0.0022
7   -0.8957 0.0766 -11.6965 0.0000 -1.0457 -0.7456  24.9324 0.0016
11  -0.7286 0.0624 -11.6815 0.0000 -0.8508 -0.6063  41.0143 0.0000
13  -0.6914 0.0607 -11.3982 0.0000 -0.8103 -0.5725  47.3437 0.0000
4   -0.8333 0.0552 -15.0934 0.0000 -0.9415 -0.7251  73.1329 0.0000
8   -0.4734 0.0410 -11.5444 0.0000 -0.5538 -0.3930 163.9426 0.0000
> cumul(res, order=order(dat.bcg$year), transf=TRUE)
   estimate     zval   pval  ci.lb  ci.ub       QE    QEp
1    0.3911  -1.5708 0.1162 0.1212 1.2619   0.0000 1.0000
2    0.2414  -3.9539 0.0001 0.1193 0.4883   0.9404 0.3322
6    0.3691 -10.4137 0.0000 0.3059 0.4452   2.3134 0.3145
3    0.3656 -10.6259 0.0000 0.3037 0.4402   2.6721 0.4450
10   0.3485 -11.8020 0.0000 0.2925 0.4151   4.6200 0.3286
9    0.3736 -11.7978 0.0000 0.3172 0.4400   9.5987 0.0874
12   0.3809 -11.6734 0.0000 0.3239 0.4479  13.3029 0.0385
5    0.4146 -11.3644 0.0000 0.3562 0.4826  22.4178 0.0022
7    0.4083 -11.6965 0.0000 0.3514 0.4745  24.9324 0.0016
11   0.4826 -11.6815 0.0000 0.4271 0.5454  41.0143 0.0000
13   0.5009 -11.3982 0.0000 0.4447 0.5641  47.3437 0.0000
4    0.4346 -15.0934 0.0000 0.3901 0.4843  73.1329 0.0000
8    0.6229 -11.5444 0.0000 0.5748 0.6750 163.9426 0.0000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cumul", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.bangertdrowns2004")
> ### * dat.bangertdrowns2004
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.bangertdrowns2004
> ### Title: Studies on the Effectiveness of Writing-to-Learn Interventions
> ### Aliases: dat.bangertdrowns2004
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.bangertdrowns2004))
> 
> ### random-effects model
> res <- rma(yi, vi, data=dat)
> res

Random-Effects Model (k = 48; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.0499 (SE = 0.0197)
tau (square root of estimated tau^2 value):      0.2235
I^2 (total heterogeneity / total variability):   58.37%
H^2 (total variability / sampling variability):  2.40

Test for Heterogeneity: 
Q(df = 47) = 107.1061, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.2219   0.0460   4.8209   <.0001   0.1317   0.3122      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.bangertdrowns2004", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.begg1989")
> ### * dat.begg1989
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.begg1989
> ### Title: Studies on Bone-Marrow Transplantation versus Chemotherapy for
> ###   the Treatment of Leukemia
> ### Aliases: dat.begg1989
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.begg1989))
> 
> ### turn trt and arms into factors and set reference levels
> dat$trt  <- relevel(factor(dat$trt), ref="CMO")
> dat$arms <- relevel(factor(dat$arms), ref="2")
> 
> ### create data frame with the treatment differences for the controlled studies
> dat2 <- data.frame(yi = dat$yi[c(1,3,5,7)] - dat$yi[c(2,4,6,8)],
+                    vi = dat$vi[c(1,3,5,7)] + dat$vi[c(2,4,6,8)])
> 
> ### DerSimonian and Laird method using the treatment differences
> res <- rma(yi, vi, data=dat2, method="DL", digits=2)
> res

Random-Effects Model (k = 4; tau^2 estimator: DL)

tau^2 (estimated amount of total heterogeneity): 0 (SE = 0.02)
tau (square root of estimated tau^2 value):      0
I^2 (total heterogeneity / total variability):   0.00%
H^2 (total variability / sampling variability):  1.00

Test for Heterogeneity: 
Q(df = 3) = 1.28, p-val = 0.73

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
    0.20     0.08     2.59     <.01     0.05     0.34       ** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### Begg & Pilote (1991) model incorporating the uncontrolled studies
> res <- rma.mv(yi, vi, mods = ~ trt, random = ~ 1 | study, 
+               data=dat, method="ML", digits=2)
> res

Multivariate Meta-Analysis Model (k = 20; method: ML)

Variance Components: 

           estim  sqrt  nlvls  fixed  factor
sigma^2     0.00  0.04     16     no   study

Test for Residual Heterogeneity: 
QE(df = 18) = 27.65, p-val = 0.07

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 16.50, p-val < .01

Model Results:

         estimate    se   zval  pval  ci.lb  ci.ub     
intrcpt      0.32  0.02  16.47  <.01   0.28   0.36  ***
trtBMT       0.15  0.04   4.06  <.01   0.08   0.22  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### model involving bias terms for the uncontrolled studies
> res <- rma.mv(yi, vi, mods = ~ trt + trt:arms, random = ~ 1 | study,
+               data=dat, method="ML", digits=2)
> res

Multivariate Meta-Analysis Model (k = 20; method: ML)

Variance Components: 

           estim  sqrt  nlvls  fixed  factor
sigma^2     0.00  0.03     16     no   study

Test for Residual Heterogeneity: 
QE(df = 16) = 26.72, p-val = 0.04

Test of Moderators (coefficient(s) 2,3,4): 
QM(df = 3) = 17.64, p-val < .01

Model Results:

              estimate    se   zval  pval  ci.lb  ci.ub     
intrcpt           0.30  0.05   6.63  <.01   0.21   0.39  ***
trtBMT            0.20  0.08   2.64  <.01   0.05   0.35   **
trtCMO:arms1      0.03  0.05   0.52  0.60  -0.07   0.12     
trtBMT:arms1     -0.04  0.07  -0.56  0.58  -0.19   0.10     

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### model with random treatment effect
> res <- rma.mv(yi, vi, mods = ~ trt, random = list(~ 1 | study, ~ trt | study),
+               struct="UN", tau2=c(0,NA), rho=0, data=dat, method="ML", digits=2)
> res

Multivariate Meta-Analysis Model (k = 20; method: ML)

Variance Components: 

           estim  sqrt  nlvls  fixed  factor
sigma^2     0.00  0.04     16     no   study

outer factor: study (nlvls = 16)
inner factor: trt   (nlvls = 2)

           estim  sqrt  k.lvl  fixed  level
tau^2.1     0.00  0.00     12    yes    CMO
tau^2.2     0.00  0.00      8     no    BMT

     rho.CMO  rho.BMT    CMO  BMT
CMO        1     0.00      -  yes
BMT     0.00        1      4    -

Test for Residual Heterogeneity: 
QE(df = 18) = 27.65, p-val = 0.07

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 16.50, p-val < .01

Model Results:

         estimate    se   zval  pval  ci.lb  ci.ub     
intrcpt      0.32  0.02  16.47  <.01   0.28   0.36  ***
trtBMT       0.15  0.04   4.06  <.01   0.08   0.22  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### model with random treatment effect, but with equal variances in both arms
> res <- rma.mv(yi, vi, mods = ~ trt, random = list(~ 1 | study, ~ trt | study),
+               struct="CS", rho=0, data=dat, method="ML", digits=2)
> res

Multivariate Meta-Analysis Model (k = 20; method: ML)

Variance Components: 

           estim  sqrt  nlvls  fixed  factor
sigma^2     0.00  0.00     16     no   study

outer factor: study (nlvls = 16)
inner factor: trt   (nlvls = 2)

           estim  sqrt  fixed
tau^2       0.00  0.04     no
rho         0.00          yes

Test for Residual Heterogeneity: 
QE(df = 18) = 27.65, p-val = 0.07

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 15.60, p-val < .01

Model Results:

         estimate    se   zval  pval  ci.lb  ci.ub     
intrcpt      0.32  0.02  16.49  <.01   0.28   0.36  ***
trtBMT       0.15  0.04   3.95  <.01   0.07   0.22  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.begg1989", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.berkey1998")
> ### * dat.berkey1998
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.berkey1998
> ### Title: Studies on Treatments for Periodontal Disease
> ### Aliases: dat.berkey1998
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.berkey1998))
> 
> ### construct list of the variance-covariance matrices of the observed outcomes for the studies
> V <- lapply(split(dat[,c("v1i", "v2i")], dat$trial), as.matrix)
> 
> ### construct block diagonal matrix
> V <- bldiag(V)
> 
> ### fit multiple outcomes (meta-regression) model (with ML estimation)
> res <- rma.mv(yi, V, mods = ~ outcome + outcome:I(year - 1983) - 1,
+               random = ~ outcome | trial, struct="UN", data=dat, method="ML")
> print(res, digits=3)

Multivariate Meta-Analysis Model (k = 10; method: ML)

Variance Components: 

outer factor: trial   (nlvls = 5)
inner factor: outcome (nlvls = 2)

           estim   sqrt  k.lvl  fixed  level
tau^2.1    0.025  0.158      5     no     AL
tau^2.2    0.008  0.090      5     no     PD

    rho.AL  rho.PD    AL  PD
AL       1   0.659     -  no
PD   0.659       1     5   -

Test for Residual Heterogeneity: 
QE(df = 6) = 125.756, p-val < .001

Test of Moderators (coefficient(s) 1,2,3,4): 
QM(df = 4) = 143.430, p-val < .001

Model Results:

                          estimate     se    zval   pval   ci.lb   ci.ub     
outcomeAL                   -0.335  0.079  -4.261  <.001  -0.489  -0.181  ***
outcomePD                    0.348  0.052   6.694  <.001   0.246   0.450  ***
outcomeAL:I(year - 1983)    -0.011  0.024  -0.445  0.656  -0.059   0.037     
outcomePD:I(year - 1983)     0.001  0.015   0.063  0.950  -0.029   0.031     

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.berkey1998", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.bonett2010")
> ### * dat.bonett2010
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.bonett2010
> ### Title: Studies on the Reliability of the CES-D Scale
> ### Aliases: dat.bonett2010
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.bonett2010))
> 
> ### meta-analysis using the raw alpha values
> res <- rma(measure="ARAW", ai=ai, mi=mi, ni=ni, data=dat)
> res

Random-Effects Model (k = 9; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.0004 (SE = 0.0003)
tau (square root of estimated tau^2 value):      0.0199
I^2 (total heterogeneity / total variability):   81.02%
H^2 (total variability / sampling variability):  5.27

Test for Heterogeneity: 
Q(df = 8) = 37.9808, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.9052   0.0077 118.2471   <.0001   0.8902   0.9202      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### meta-analysis using transformed alpha values (using the
> ### transformation suggested by Hakstian & Whalen, 1976)
> res <- rma(measure="AHW", ai=ai, mi=mi, ni=ni, data=dat)
> res

Random-Effects Model (k = 9; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.0011 (SE = 0.0007)
tau (square root of estimated tau^2 value):      0.0328
I^2 (total heterogeneity / total variability):   81.43%
H^2 (total variability / sampling variability):  5.39

Test for Heterogeneity: 
Q(df = 8) = 35.1131, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.5440   0.0125  43.4201   <.0001   0.5195   0.5686      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=transf.iahw)
   pred  ci.lb  ci.ub  cr.lb  cr.ub
 0.9052 0.8891 0.9197 0.8555 0.9420
> 
> ### meta-analysis using transformed alpha values (using the
> ### transformation suggested by Bonett, 2002)
> res <- rma(measure="ABT", ai=ai, mi=mi, ni=ni, data=dat)
> res

Random-Effects Model (k = 9; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.0461 (SE = 0.0302)
tau (square root of estimated tau^2 value):      0.2147
I^2 (total heterogeneity / total variability):   81.40%
H^2 (total variability / sampling variability):  5.38

Test for Heterogeneity: 
Q(df = 8) = 33.3957, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  2.3561   0.0824  28.6085   <.0001   2.1947   2.5175      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=transf.iabt)
   pred  ci.lb  ci.ub  cr.lb  cr.ub
 0.9052 0.8886 0.9193 0.8512 0.9396
> 
> ### examine whether female/mixed samples yield different alphas (with raw alphas)
> res <- rma(measure="ARAW", ai=ai, mi=mi, ni=ni, mods = ~ caregivers, data=dat)
> res

Mixed-Effects Model (k = 9; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.0003 (SE = 0.0002)
tau (square root of estimated tau^2 value):             0.0159
I^2 (residual heterogeneity / unaccounted variability): 71.80%
H^2 (unaccounted variability / sampling variability):   3.55
R^2 (amount of heterogeneity accounted for):            36.19%

Test for Residual Heterogeneity: 
QE(df = 7) = 26.6797, p-val = 0.0004

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 4.3519, p-val = 0.0370

Model Results:

                 estimate      se      zval    pval   ci.lb   ci.ub     
intrcpt            0.8949  0.0083  107.7806  <.0001  0.8786  0.9111  ***
caregiverswomen    0.0277  0.0133    2.0861  0.0370  0.0017  0.0536    *

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, newmods=c(0,1), digits=2)
  pred   se ci.lb ci.ub cr.lb cr.ub
1 0.89 0.01  0.88  0.91  0.86  0.93
2 0.92 0.01  0.90  0.94  0.89  0.96
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.bonett2010", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.bourassa1996")
> ### * dat.bourassa1996
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.bourassa1996
> ### Title: Studies on the Association between Handedness and Eye-Dominance
> ### Aliases: dat.bourassa1996
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.bourassa1996))
> 
> ### calculate log(OR) and corresponding sampling variance with 1/2 correction
> dat <- escalc(measure="OR", ai=lh.le, bi=lh.re, ci=rh.le, di=rh.re, data=dat, add=1/2, to="all")
> 
> ### overall association between handedness and eyedness
> res <- rma(yi, vi, data=dat, subset=sex=="combined")
> res

Random-Effects Model (k = 54; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.4340 (SE = 0.1208)
tau (square root of estimated tau^2 value):      0.6588
I^2 (total heterogeneity / total variability):   89.08%
H^2 (total variability / sampling variability):  9.16

Test for Heterogeneity: 
Q(df = 53) = 355.7748, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  1.3135   0.1098  11.9597   <.0001   1.0982   1.5287      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub cr.lb cr.ub
 3.72  3.00  4.61  1.00 13.77
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.bourassa1996", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.colditz1994")
> ### * dat.colditz1994
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.colditz1994
> ### Title: Studies on the Effectiveness of the BCG Vaccine Against
> ###   Tuberculosis
> ### Aliases: dat.colditz1994 dat.bcg
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> dat
   trial               author year tpos  tneg cpos  cneg ablat      alloc
1      1              Aronson 1948    4   119   11   128    44     random
2      2     Ferguson & Simes 1949    6   300   29   274    55     random
3      3      Rosenthal et al 1960    3   228   11   209    42     random
4      4    Hart & Sutherland 1977   62 13536  248 12619    52     random
5      5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate
6      6      Stein & Aronson 1953  180  1361  372  1079    44  alternate
7      7     Vandiviere et al 1973    8  2537   10   619    19     random
8      8           TPT Madras 1980  505 87886  499 87892    13     random
9      9     Coetzee & Berjak 1968   29  7470   45  7232    27     random
10    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic
11    11       Comstock et al 1974  186 50448  141 27197    18 systematic
12    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic
13    13       Comstock et al 1976   27 16886   29 17825    33 systematic
        yi     vi
1  -0.8893 0.3256
2  -1.5854 0.1946
3  -1.3481 0.4154
4  -1.4416 0.0200
5  -0.2175 0.0512
6  -0.7861 0.0069
7  -1.6209 0.2230
8   0.0120 0.0040
9  -0.4694 0.0564
10 -1.3713 0.0730
11 -0.3394 0.0124
12  0.4459 0.5325
13 -0.0173 0.0714
> 
> ### random-effects model
> res <- rma(yi, vi, data=dat)
> res

Random-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.3132 (SE = 0.1664)
tau (square root of estimated tau^2 value):      0.5597
I^2 (total heterogeneity / total variability):   92.22%
H^2 (total variability / sampling variability):  12.86

Test for Heterogeneity: 
Q(df = 12) = 152.2330, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.7145   0.1798  -3.9744   <.0001  -1.0669  -0.3622      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### average relative risk with 95% CI
> predict(res, transf=exp)
   pred  ci.lb  ci.ub  cr.lb  cr.ub
 0.4894 0.3441 0.6962 0.1546 1.5490
> 
> ### mixed-effects model with absolute latitude and publication year as moderators
> res <- rma(yi, vi, mods = ~ ablat + year, data=dat)
> res

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.1108 (SE = 0.0845)
tau (square root of estimated tau^2 value):             0.3328
I^2 (residual heterogeneity / unaccounted variability): 71.98%
H^2 (unaccounted variability / sampling variability):   3.57
R^2 (amount of heterogeneity accounted for):            64.63%

Test for Residual Heterogeneity: 
QE(df = 10) = 28.3251, p-val = 0.0016

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 12.2043, p-val = 0.0022

Model Results:

         estimate       se     zval    pval     ci.lb    ci.ub    
intrcpt   -3.5455  29.0959  -0.1219  0.9030  -60.5724  53.4814    
ablat     -0.0280   0.0102  -2.7371  0.0062   -0.0481  -0.0080  **
year       0.0019   0.0147   0.1299  0.8966   -0.0269   0.0307    

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### predicted average relative risks for 10-60 degrees absolute latitude
> ### holding the publication year constant at 1970
> predict(res, newmods=cbind(seq(from=10, to=60, by=10), 1970), transf=exp)
    pred  ci.lb  ci.ub  cr.lb  cr.ub
1 0.9345 0.5833 1.4973 0.4179 2.0899
2 0.7062 0.5149 0.9686 0.3421 1.4579
3 0.5337 0.4196 0.6789 0.2663 1.0697
4 0.4033 0.2956 0.5502 0.1958 0.8306
5 0.3048 0.1916 0.4848 0.1369 0.6787
6 0.2303 0.1209 0.4386 0.0921 0.5761
> 
> ### note: the interpretation of the results is difficult because absolute
> ### latitude and publication year are strongly correlated (the more recent
> ### studies were conducted closer to the equator)
> plot(dat$ablat, dat$year)
> cor(dat$ablat, dat$year)
[1] -0.6630572
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.colditz1994", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.collins1985a")
> ### * dat.collins1985a
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.collins1985a
> ### Title: Studies on the Treatment of Upper Gastrointestinal Bleeding by a
> ###   Histamine H2 Antagonist
> ### Aliases: dat.collins1985a
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.collins1985a))
> 
> ### meta-analysis of log ORs using Peto's method (outcome: persistent or recurrent bleedings)
> res <- rma.peto(ai=b.xti, n1i=nti, ci=b.xci, n2i=nci, data=dat)
Warning in rma.peto(ai = b.xti, n1i = nti, ci = b.xci, n2i = nci, data = dat) :
  Tables with NAs omitted from model fitting.
Warning in rma.peto(ai = b.xti, n1i = nti, ci = b.xci, n2i = nci, data = dat) :
  Some yi/vi values are NA.
> print(res, digits=2)

Fixed-Effects Model (k = 25)

Test for Heterogeneity: 
Q(df = 23) = 37.91, p-val = 0.03

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
   -0.12     0.10    -1.22     0.22    -0.32     0.07 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
    0.89     0.73     1.08 

> 
> ## Not run: 
> ##D ### meta-analysis of log ORs using a conditional logistic regression model (FE model)
> ##D res <- rma.glmm(measure="OR", ai=b.xti, n1i=nti, ci=b.xci, n2i=nci, data=dat,
> ##D                 model="CM.EL", method="FE")
> ##D summary(res)
> ##D predict(res, transf=exp, digits=2)
> ##D 
> ##D ### plot the log-likelihoods of the odds ratios
> ##D llplot(measure="OR", ai=b.xti, n1i=nti, ci=b.xci, n2i=nci, data=dat,
> ##D        lwd=1, refline=NA, xlim=c(-4,4), drop00=FALSE)
> ##D 
> ##D ### meta-analysis of log odds ratios using a conditional logistic regression model (RE model)
> ##D res <- rma.glmm(measure="OR", ai=b.xti, n1i=nti, ci=b.xci, n2i=nci, data=dat,
> ##D                 model="CM.EL", method="ML")
> ##D summary(res)
> ##D predict(res, transf=exp, digits=2)
> ## End(Not run)
> 
> ### meta-analysis of log ORs using Peto's method (outcome: need for surgery)
> res <- rma.peto(ai=o.xti, n1i=nti, ci=o.xci, n2i=nci, data=dat)
Warning in rma.peto(ai = o.xti, n1i = nti, ci = o.xci, n2i = nci, data = dat) :
  Tables with NAs omitted from model fitting.
Warning in rma.peto(ai = o.xti, n1i = nti, ci = o.xci, n2i = nci, data = dat) :
  Some yi/vi values are NA.
> print(res, digits=2)

Fixed-Effects Model (k = 22)

Test for Heterogeneity: 
Q(df = 19) = 25.46, p-val = 0.15

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
   -0.25     0.12    -1.97     0.05    -0.49    -0.00 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
    0.78     0.61     1.00 

> 
> ### meta-analysis of log ORs using Peto's method (outcome: death)
> res <- rma.peto(ai=d.xti, n1i=nti, ci=d.xci, n2i=nci, data=dat)
Warning in rma.peto(ai = d.xti, n1i = nti, ci = d.xci, n2i = nci, data = dat) :
  Tables with NAs omitted from model fitting.
Warning in rma.peto(ai = d.xti, n1i = nti, ci = d.xci, n2i = nci, data = dat) :
  Some yi/vi values are NA.
> print(res, digits=2)

Fixed-Effects Model (k = 24)

Test for Heterogeneity: 
Q(df = 21) = 27.33, p-val = 0.16

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
   -0.36     0.16    -2.21     0.03    -0.68    -0.04 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
    0.70     0.51     0.96 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.collins1985a", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.collins1985b")
> ### * dat.collins1985b
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.collins1985b
> ### Title: Studies on the Effects of Diuretics in Pregnancy
> ### Aliases: dat.collins1985b
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.collins1985b))
> 
> ### calculate (log) odds ratio and sampling variance
> dat <- escalc(measure="OR", n1i=pre.nti, n2i=pre.nci, ai=pre.xti, ci=pre.xci, data=dat)
> summary(dat, digits=2, transf=exp)
  id                  author year pre.nti pre.nci pre.xti pre.xci oedema
1  1       Weseley & Douglas 1962     131     136      14      14      0
2  2          Flowers et al. 1962     385     134      21      17      0
3  3                 Menzies 1964      57      48      14      24      1
4  4           Fallis et al. 1964      38      40       6      18      0
5  5         Cuadros & Tatum 1964    1011     760      12      35      1
6  6        Landesman et al. 1965    1370    1336     138     175      0
7  7            Kraus et al. 1966     506     524      15      20      0
8  8    Tervila & Vartiainen 1971     108     103       6       2      0
9  9 Campbell & MacGillivray 1975     153     102      65      40      0
  fup.nti fup.nci ped.xti ped.xci stb.xti stb.xci ned.xti ned.xci   yi   vi
1     131     136       1       4       1       2       0       2 1.04 0.16
2     335     110       6       3       3       2       3       1 0.40 0.12
3      57      48       3       2       1       1       2       1 0.33 0.18
4      34      40       1       3       0       1       1       2 0.23 0.30
5    1011     760      14      13       6       5       8       8 0.25 0.11
6    1370    1336      24      19      NA      NA      NA      NA 0.74 0.01
7     506     524      14      16       6       9       8       7 0.77 0.12
8     108     103       0       0       0       0       0       0 2.97 0.69
9     153     102       0       0       0       0       0       0 1.14 0.07
   sei    zi ci.lb ci.ub
1 0.40  0.10  0.48  2.28
2 0.34 -2.69  0.20  0.78
3 0.42 -2.66  0.14  0.74
4 0.55 -2.69  0.08  0.67
5 0.34 -4.11  0.13  0.48
6 0.12 -2.45  0.59  0.94
7 0.35 -0.75  0.39  1.52
8 0.83  1.31  0.59 15.07
9 0.26  0.52  0.69  1.91
> 
> ### meta-analysis using Peto's method for any form of pre-eclampsia
> rma.peto(n1i=pre.nti, n2i=pre.nci, ai=pre.xti, ci=pre.xci, data=dat, digits=2)

Fixed-Effects Model (k = 9)

Test for Heterogeneity: 
Q(df = 8) = 29.34, p-val < .01

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
   -0.41     0.09    -4.65     <.01    -0.58    -0.24 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
    0.66     0.56     0.79 

> 
> ### meta-analysis including only studies where oedema was not a diagnostic criterion
> rma.peto(n1i=pre.nti, n2i=pre.nci, ai=pre.xti, ci=pre.xci, data=dat, digits=2, subset=(oedema==0))

Fixed-Effects Model (k = 7)

Test for Heterogeneity: 
Q(df = 6) = 15.32, p-val = 0.02

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
   -0.28     0.09    -2.97     <.01    -0.47    -0.10 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
    0.76     0.63     0.91 

> 
> ### meta-analyses of mortality outcomes (perinatal deaths, stillbirths, and neonatal deaths)
> rma.peto(n1i=fup.nti, n2i=fup.nci, ai=ped.xti, ci=ped.xci, data=dat, digits=2)
Warning in rma.peto(n1i = fup.nti, n2i = fup.nci, ai = ped.xti, ci = ped.xci,  :
  Some yi/vi values are NA.

Fixed-Effects Model (k = 9)

Test for Heterogeneity: 
Q(df = 6) = 3.49, p-val = 0.75

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
   -0.09     0.18    -0.50     0.62    -0.45     0.27 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
    0.91     0.64     1.31 

> rma.peto(n1i=fup.nti, n2i=fup.nci, ai=stb.xti, ci=stb.xci, data=dat, digits=2)
Warning in rma.peto(n1i = fup.nti, n2i = fup.nci, ai = stb.xti, ci = stb.xci,  :
  Tables with NAs omitted from model fitting.
Warning in rma.peto(n1i = fup.nti, n2i = fup.nci, ai = stb.xti, ci = stb.xci,  :
  Some yi/vi values are NA.

Fixed-Effects Model (k = 8)

Test for Heterogeneity: 
Q(df = 5) = 0.99, p-val = 0.96

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
   -0.39     0.34    -1.16     0.25    -1.05     0.27 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
    0.68     0.35     1.31 

> rma.peto(n1i=fup.nti, n2i=fup.nci, ai=ned.xti, ci=ned.xci, data=dat, digits=2)
Warning in rma.peto(n1i = fup.nti, n2i = fup.nci, ai = ned.xti, ci = ned.xci,  :
  Tables with NAs omitted from model fitting.
Warning in rma.peto(n1i = fup.nti, n2i = fup.nci, ai = ned.xti, ci = ned.xci,  :
  Some yi/vi values are NA.

Fixed-Effects Model (k = 8)

Test for Heterogeneity: 
Q(df = 5) = 2.54, p-val = 0.77

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
   -0.15     0.31    -0.47     0.64    -0.76     0.47 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
    0.86     0.47     1.59 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.collins1985b", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.curtis1998")
> ### * dat.curtis1998
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.curtis1998
> ### Title: Studies on the Effects of Elevated CO2 Levels on Woody Plant
> ###   Mass
> ### Aliases: dat.curtis1998
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.curtis1998))
> 
> ### calculate log ratio of means and corresponding sampling variances
> dat <- escalc(measure="ROM", m1i=m1i, sd1i=sd1i, n1i=n1i, m2i=m2i, sd2i=sd2i, n2i=n2i, data=dat)
> dat
     id paper         genus        species function. co2.ambi co2.elev    units
1    21    44         ALNUS          RUBRA     N2FIX    350.0    650.0     ul/l
2    22    44         ALNUS          RUBRA     N2FIX    350.0    650.0     ul/l
3    27   121          ACER         RUBRUM     ANGIO    350.0    700.0      ppm
4    32   121       QUERCUS         PRINUS     ANGIO    350.0    700.0      ppm
5    35   121         MALUS      DOMESTICA     ANGIO    350.0    700.0      ppm
6    38   121          ACER    SACCHARINUM     ANGIO    350.0    700.0      ppm
7    44   159      CASTANEA         SATIVA     ANGIO    350.0    700.0      ppm
8    63   183        CITRUS       SINENSIS     ANGIO    395.0    795.0      ppm
9    86   209      CASTANEA         SATIVA     ANGIO    350.0    700.0      ppm
10   87   209      CASTANEA         SATIVA     ANGIO    350.0    700.0      ppm
11   95   210      CASTANEA         SATIVA     ANGIO    350.0    700.0      ppm
12   96   210      CASTANEA         SATIVA     ANGIO    350.0    700.0      ppm
13  120   290         PINUS        RADIATA     GYMNO    340.0    640.0     ul/l
14  125   290    NOTHOFAGUS          FUSCA     ANGIO    340.0    640.0     ul/l
15  130   290   PSEUDOTSUGA      MENZIESII     GYMNO    340.0    640.0     ul/l
16  163   468      CASTANEA         SATIVA     ANGIO    350.0    700.0 umol/mol
17  170   470      CASTANEA         SATIVA     ANGIO    350.0    700.0      ppm
18  182   503         PINUS       ECHINATA     GYMNO    368.0    695.0     ul/l
19  208   505       QUERCUS           ALBA     ANGIO    389.0    793.0   cm3/m3
20  209   505       QUERCUS           ALBA     ANGIO    389.0    793.0   cm3/m3
21  230   506  LIRIODENDRON     TULIPIFERA     ANGIO    371.0    787.0      ppm
22  231   506  LIRIODENDRON     TULIPIFERA     ANGIO    371.0    787.0      ppm
23  236   510       QUERCUS           ALBA     ANGIO    360.0    700.0     ul/l
24  242   510         PINUS       ECHINATA     GYMNO    360.0    700.0     ul/l
25  254   550        BETULA        PENDULA     ANGIO    350.0    700.0 umol/mol
26  256   553         PICEA          ABIES     GYMNO    350.0    750.0   cm3/m3
27  257   553         PICEA          ABIES     GYMNO    350.0    750.0   cm3/m3
28  267   582         PIPER        AURITUM     ANGIO    350.0    700.0      ppm
29  277   582         SENNA      MULTIJUGA     ANGIO    350.0    700.0      ppm
30  287   582    MYRIOCARPA       LONGIPES     ANGIO    350.0    700.0      ppm
31  296   582      CECROPIA    OBTUSIFOLIA     ANGIO    350.0    700.0      ppm
32  306   582 TRICHOSPERMUM      MEXICANUM     ANGIO    350.0    700.0      ppm
33  313   596        BETULA          LENTA     ANGIO    350.0    700.0     ul/l
34  320   596        BETULA     PAPYRIFERA     ANGIO    350.0    700.0     ul/l
35  327   596        BETULA    POPULIFOLIA     ANGIO    350.0    700.0     ul/l
36  334   596        BETULA ALLEGHANIENSIS     ANGIO    350.0    700.0     ul/l
37  343   666         PINUS      BANKSIANA     GYMNO    350.0    750.0 umol/mol
38  344   666         PINUS      BANKSIANA     GYMNO    350.0    750.0 umol/mol
39  392  2003        BETULA      PUBESCENS     ANGIO    350.0    700.0 umol/mol
40  393  2003        BETULA      PUBESCENS     ANGIO    350.0    700.0 umol/mol
41  394  2003        BETULA      PUBESCENS     ANGIO    350.0    560.0 umol/mol
42  395  2003        BETULA      PUBESCENS     ANGIO    350.0    560.0 umol/mol
43  410  2026         PINUS      PONDEROSA     GYMNO    350.0    650.0     ubar
44  411  2026         PINUS      PONDEROSA     GYMNO    350.0    650.0     ubar
45  441  2037          ACER         RUBRUM     ANGIO    350.0    700.0     ul/l
46  442  2037          ACER         RUBRUM     ANGIO    350.0    700.0     ul/l
47  443  2037          ACER         RUBRUM     ANGIO    350.0    700.0     ul/l
48  444  2037       QUERCUS          RUBRA     ANGIO    350.0    700.0     ul/l
49  445  2037       QUERCUS          RUBRA     ANGIO    350.0    700.0     ul/l
50  446  2037       QUERCUS          RUBRA     ANGIO    350.0    700.0     ul/l
51  447  2037          ACER  PENSYLVANICUM     ANGIO    350.0    700.0     ul/l
52  448  2037          ACER  PENSYLVANICUM     ANGIO    350.0    700.0     ul/l
53  449  2037          ACER  PENSYLVANICUM     ANGIO    350.0    700.0     ul/l
54  450  2037        BETULA    POPULIFOLIA     ANGIO    350.0    700.0     ul/l
55  451  2037        BETULA    POPULIFOLIA     ANGIO    350.0    700.0     ul/l
56  452  2037        BETULA    POPULIFOLIA     ANGIO    350.0    700.0     ul/l
57  453  2037      FRAXINUS      AMERICANA     ANGIO    350.0    700.0     ul/l
58  454  2037      FRAXINUS      AMERICANA     ANGIO    350.0    700.0     ul/l
59  455  2037      FRAXINUS      AMERICANA     ANGIO    350.0    700.0     ul/l
60  456  2037        BETULA ALLEGHANIENSIS     ANGIO    350.0    700.0     ul/l
61  457  2037        BETULA ALLEGHANIENSIS     ANGIO    350.0    700.0     ul/l
62  458  2037        BETULA ALLEGHANIENSIS     ANGIO    350.0    700.0     ul/l
63  479  2039      POPULUSX   EURAMERICANA     ANGIO     34.5     69.3       Pa
64  480  2039      POPULUSX   EURAMERICANA     ANGIO     34.5     69.3       Pa
65  523  2045         PICEA        MARIANA     GYMNO    340.0    700.0      ppm
66  524  2045         PICEA        MARIANA     GYMNO    340.0    700.0      ppm
67  525  2045         PICEA        MARIANA     GYMNO    340.0    700.0      ppm
68  526  2045         PICEA        MARIANA     GYMNO    340.0    700.0      ppm
69  547  2048         PICEA         GLAUCA     GYMNO    350.0    700.0 umol/mol
70  548  2048         PICEA         GLAUCA     GYMNO    350.0    700.0 umol/mol
71  561  2048         PICEA        MARIANA     GYMNO    350.0    700.0 umol/mol
72  562  2048         PICEA        MARIANA     GYMNO    350.0    700.0 umol/mol
73  575  2048         PINUS      BANKSIANA     GYMNO    350.0    700.0 umol/mol
74  576  2048         PINUS      BANKSIANA     GYMNO    350.0    700.0 umol/mol
75  614  2110       POPULUS   EURAMERICANA     ANGIO     34.5     69.3       Pa
76  615  2110       POPULUS   EURAMERICANA     ANGIO     34.5     69.3       Pa
77  623  2117         PICEA          ABIES     GYMNO    350.0    700.0 umol/mol
78  624  2117         PICEA          ABIES     GYMNO    350.0    700.0 umol/mol
79  636  2117        BETULA        PENDULA     ANGIO    350.0    700.0 umol/mol
80  637  2117        BETULA        PENDULA     ANGIO    350.0    700.0 umol/mol
81  721  2217     MARANTHES      CORYMBOSA     ANGIO    350.0    700.0 umol/mol
82  725  2223          ACER         RUBRUM     ANGIO    350.0    700.0     ul/l
83  726  2223          ACER         RUBRUM     ANGIO    350.0    700.0     ul/l
84  727  2223          ACER         RUBRUM     ANGIO    350.0    700.0     ul/l
85  731  2223       QUERCUS          RUBRA     ANGIO    350.0    700.0     ul/l
86  732  2223       QUERCUS          RUBRA     ANGIO    350.0    700.0     ul/l
87  733  2223       QUERCUS          RUBRA     ANGIO    350.0    700.0     ul/l
88  737  2223          ACER  PENSYLVANICUM     ANGIO    350.0    700.0     ul/l
89  738  2223          ACER  PENSYLVANICUM     ANGIO    350.0    700.0     ul/l
90  739  2223          ACER  PENSYLVANICUM     ANGIO    350.0    700.0     ul/l
91  743  2223        BETULA    POPULIFOLIA     ANGIO    350.0    700.0     ul/l
92  744  2223        BETULA    POPULIFOLIA     ANGIO    350.0    700.0     ul/l
93  745  2223        BETULA    POPULIFOLIA     ANGIO    350.0    700.0     ul/l
94  749  2223      FRAXINUS      AMERICANA     ANGIO    350.0    700.0     ul/l
95  750  2223      FRAXINUS      AMERICANA     ANGIO    350.0    700.0     ul/l
96  751  2223      FRAXINUS      AMERICANA     ANGIO    350.0    700.0     ul/l
97  755  2223        BETULA ALLEGHANIENSIS     ANGIO    350.0    700.0     ul/l
98  756  2223        BETULA ALLEGHANIENSIS     ANGIO    350.0    700.0     ul/l
99  757  2223        BETULA ALLEGHANIENSIS     ANGIO    350.0    700.0     ul/l
100 765  2224       QUERCUS          RUBRA     ANGIO    385.0    642.0     ul/l
101 774  2224          ACER      SACCHARUM     ANGIO    385.0    642.0     ul/l
102 783  2224       POPULUS    TREMULOIDES     ANGIO    385.0    642.0     ul/l
    time   pot method stock   xtrt   level        m1i        sd1i n1i
1     47   0.5     GC  SEED   FERT    HIGH    6.81690   1.7699820   3
2     47   0.5     GC  SEED   FERT CONTROL    2.59610   0.6674662   5
3     59   2.6     GH  SEED   NONE       .    2.99000   0.8560000   5
4     70   2.6     GH  SEED   NONE       .    5.91000   1.7420000   5
5     64   2.6     GH  SEED   NONE       .    4.61000   1.4070000   4
6     50   2.6     GH  SEED   NONE       .   10.78000   1.1630000   5
7    730  GRND     GC   SAP   NONE       .  153.50000  27.1932000   3
8    365     9     GH   SAP   NONE       . 1439.00000 142.0280000   3
9    365    24     GH  SEED   FERT    HIGH  183.60000  39.0600000  20
10   365    24     GH  SEED   FERT CONTROL   71.72000  14.3000000  16
11   120    12     GH   SAP   NONE       .   45.80000  15.8000000  20
12   120    12     GH   SAP   NONE       .   72.50000  15.0000000  24
13   120     4     GC   SAP   NONE       .   59.10000  12.9000000   8
14   120     4     GC   SAP   NONE       .    4.90000   1.9000000   8
15   120     4     GC   SAP   NONE       .   19.00000   5.4000000   8
16  1095    24    OTC   SAP   NONE       .  146.00000  10.0000000   5
17   180    24    OTC   SAP   NONE       .  129.00000  59.0000000  12
18   287  0.95     GC  SEED   NONE       .    6.91000   3.2200000   5
19   168   2.6     GH  SEED   FERT    HIGH   17.89000  10.1850000   5
20   168   2.6     GH  SEED   FERT CONTROL   14.68000   5.0130000   5
21   168   3.5     GC  SEED   FERT    HIGH   63.97000   7.6600000   5
22   168   3.5     GC  SEED   FERT CONTROL    6.01000   1.0200000   5
23   210  0.95     GC  SEED   NONE       .   14.15000   8.6467000   6
24   168  0.95     GC  SEED   NONE       .    2.20000   0.4111000  10
25    40 HYDRO     GC  SEED   NONE       .   23.11000   0.8443000  22
26   180    50     GC   SAP  OZONE    HIGH  262.10000  16.4000000   6
27   180    50     GC   SAP  OZONE     LOW  273.30000  14.0000000   6
28   111  0.67     GH  SEED   NONE       .   10.14000   2.5200000   4
29   111  0.67     GH  SEED   NONE       .   15.72000   2.7600000   4
30   111  0.67     GH  SEED   NONE       .    9.01000   2.5800000   4
31   111  0.67     GH  SEED   NONE       .   21.33000   3.0600000   4
32   111  0.67     GH  SEED   NONE       .   14.68000   2.8200000   4
33    90  0.66     GH  SEED   NONE       .    8.36000   3.9150000  10
34    90  0.66     GH  SEED   NONE       .    7.91000   1.8090000  10
35    90  0.66     GH  SEED   NONE       .   12.45000   6.9440000  10
36    90  0.66     GH  SEED   NONE       .    7.84000   3.3240000  10
37   270  0.04     GH  SEED    UVB    HIGH    0.09316   0.0714040  10
38   270  0.04     GH  SEED    UVB     LOW    0.59046   0.4103690  10
39    34   0.2     GC  SEED   TEMP    HIGH    4.77000   0.1980000   2
40    34   0.2     GC  SEED   TEMP     LOW    3.74000   0.0424000   2
41    35   0.3     GC  SEED  OZONE    HIGH    3.15000   0.2970000   2
42    35   0.3     GC  SEED  OZONE     LOW    3.78000   0.4240000   2
43    60   1.8     GC  SEED   TEMP    HIGH    2.15000   0.3600000  16
44    60   1.8     GC  SEED   TEMP     LOW    1.76000   0.2800000  16
45  1095   2.8     GH  SEED   FERT     LOW   47.38000   5.0150000   2
46  1095   2.8     GH  SEED  LIGHT     LOW  258.53000  50.3150000   2
47  1095   2.8     GH  SEED FERT+L       .  482.04000  14.8010000   2
48  1095   2.8     GH  SEED   FERT     LOW   30.59000   2.1520000   2
49  1095   2.8     GH  SEED  LIGHT     LOW  172.40000  23.6780000   2
50  1095   2.8     GH  SEED FERT+L       .  277.46000  14.8340000   2
51  1095   2.8     GH  SEED   FERT     LOW   23.08000   4.2940000   2
52  1095   2.8     GH  SEED  LIGHT     LOW  196.80000  26.6140000   2
53  1095   2.8     GH  SEED FERT+L       .  254.39000  32.6240000   2
54  1095   2.8     GH  SEED   FERT     LOW   31.10000   1.0730000   2
55  1095   2.8     GH  SEED  LIGHT     LOW  186.00000  17.7290000   2
56  1095   2.8     GH  SEED FERT+L       .  232.37000   8.8670000   2
57  1095   2.8     GH  SEED   FERT     LOW   25.19000   2.1510000   2
58  1095   2.8     GH  SEED  LIGHT     LOW  120.80000  20.7730000   2
59  1095   2.8     GH  SEED FERT+L       .  262.77000  17.8320000   2
60  1095   2.8     GH  SEED   FERT     LOW   38.36000   3.2150000   2
61  1095   2.8     GH  SEED  LIGHT     LOW  178.33000  11.8330000   2
62  1095   2.8     GH  SEED FERT+L       .  186.26000  11.8340000   2
63   148  GRND    OTC   SAP   FERT    HIGH  113.00000   4.4720000   5
64   148  GRND    OTC   SAP   FERT     LOW   75.00000   8.9440000   5
65   155 0.164     GC  SEED    H2O      WW    4.77300   2.1477000  48
66   155 0.164     GC  SEED    H2O     DRT    3.27200   0.9215000  48
67   155 0.164     GC  SEED   FERT    HIGH    5.24900   1.6628000  48
68   155 0.164     GC  SEED   FERT     LOW    2.79800   0.5958000  48
69   112   0.2     GC  SEED    UVB    HIGH    0.33300   0.1470000  10
70   112   0.2     GC  SEED    UVB     LOW    0.64000   0.1540000  10
71   112   0.2     GC  SEED    UVB    HIGH    0.49800   0.1630000  10
72   112   0.2     GC  SEED    UVB     LOW    0.82400   0.2340000  10
73   112   0.2     GC  SEED    UVB    HIGH    0.84300   0.2340000  10
74   112   0.2     GC  SEED    UVB     LOW    1.53300   0.3950000  10
75   158  GRND    OTC   SAP   FERT    HIGH  562.80000  62.3863000   5
76   158  GRND    OTC   SAP   FERT     LOW  374.40000 109.5673000   5
77    47   0.2     GH  SEED   TEMP    HIGH    1.09200   0.0297000   2
78    47   0.2     GH  SEED   TEMP     LOW    1.12000   0.0141000   2
79    35   0.2     GH   SAP   TEMP    HIGH    6.91000   0.3111000   2
80    35   0.2     GH   SAP   TEMP     LOW    6.94000   0.4243000   2
81   210    10    OTC  SEED   NONE       .   16.95900   2.1860000   5
82   165  1.25     GH  SEED   FERT     LOW    2.40000   0.5634000   6
83   165  1.25     GH  SEED  LIGHT     LOW   16.98000   1.9596000   6
84   165  1.25     GH  SEED FERT+L       .   28.18000   3.2333000   6
85   165  1.25     GH  SEED   FERT     LOW    3.09000   0.7348000   6
86   165  1.25     GH  SEED  LIGHT     LOW   13.80000   2.4250000   6
87   165  1.25     GH  SEED FERT+L       .   18.20000   3.1843000   6
88   165  1.25     GH  SEED   FERT     LOW    1.90000   0.1225000   6
89   165  1.25     GH  SEED  LIGHT     LOW   10.23000   0.6124000   6
90   165  1.25     GH  SEED FERT+L       .   16.59000   2.9149000   6
91   165  1.25     GH  SEED   FERT     LOW    2.34000   0.2694000   6
92   165  1.25     GH  SEED  LIGHT     LOW   16.22000   2.8414000   6
93   165  1.25     GH  SEED FERT+L       .   24.55000   1.3962000   6
94   165  1.25     GH  SEED   FERT     LOW    1.51000   0.1715000   6
95   165  1.25     GH  SEED  LIGHT     LOW    9.12000   1.5922000   6
96   165  1.25     GH  SEED FERT+L       .   18.62000   2.1556000   6
97   165  1.25     GH  SEED   FERT     LOW    1.90000   0.2205000   6
98   165  1.25     GH  SEED  LIGHT     LOW   14.45000   1.6657000   6
99   165  1.25     GH  SEED FERT+L       .   16.98000   0.5389000   6
100   60     6     GC  SEED   NONE       .   16.90000   1.7321000   3
101   60     6     GC  SEED   NONE       .    7.20000   1.7321000   3
102   60     6     GC  SEED   NONE       .  102.60000   6.2354000   3
           m2i       sd2i n2i      yi     vi
1      3.94500  1.1157970   5  0.5470 0.0385
2      2.25120  0.3275839   5  0.1425 0.0175
3      1.93000  0.5520000   5  0.4378 0.0328
4      6.62000  1.6310000   5 -0.1134 0.0295
5      4.10000  1.2570000   4  0.1172 0.0468
6      6.42000  2.0260000   3  0.5183 0.0355
7    127.30000 47.4582000   3  0.1872 0.0568
8   1140.60000 82.9650000   3  0.2324 0.0050
9    144.10000 25.7000000  20  0.2423 0.0039
10    59.94000 14.2800000  16  0.1794 0.0060
11    28.20000 11.9000000  23  0.4850 0.0137
12    60.50000 14.0000000  24  0.1809 0.0040
13    46.40000 13.1000000   8  0.2419 0.0159
14     4.20000  1.0000000   8  0.1542 0.0259
15    18.50000  8.1000000   8  0.0267 0.0341
16   136.00000 35.0000000   5  0.0710 0.0142
17    90.40000 36.0000000  12  0.3556 0.0306
18     6.81000  1.5700000   5  0.0146 0.0541
19    14.62000  2.2940000   5  0.2019 0.0697
20    11.18000  5.7490000   5  0.2724 0.0762
21    54.03000  1.6200000   5  0.1689 0.0030
22     4.93000  1.3500000   5  0.1981 0.0208
23     8.20000  3.3558000   6  0.5456 0.0901
24     1.33000  0.1897000  10  0.5033 0.0055
25    14.94000  0.8443000  22  0.4362 0.0002
26   235.50000 15.0000000   6  0.1070 0.0013
27   236.40000  7.5000000   6  0.1450 0.0006
28     8.81000  2.0600000   4  0.1406 0.0291
29    13.22000  1.9400000   4  0.1732 0.0131
30     9.80000  2.0600000   4 -0.0840 0.0315
31    18.60000  2.3400000   4  0.1370 0.0091
32    12.18000  2.4600000   4  0.1867 0.0194
33     5.30000  6.6250000  10  0.4558 0.1782
34     3.60000  3.0260000  10  0.7872 0.0759
35     4.98000  3.9370000  10  0.9163 0.0936
36     4.01000  2.1060000  10  0.6704 0.0456
37     0.07382  0.0832940  10  0.2327 0.1861
38     0.41117  0.2557020  10  0.3619 0.0870
39     3.83000  0.1414000   2  0.2195 0.0015
40     3.40000  0.0566000   2  0.0953 0.0002
41     2.40000  0.0140000   2  0.2719 0.0045
42     3.17000  0.4240000   2  0.1760 0.0152
43     1.70000  0.3200000  16  0.2348 0.0040
44     1.66000  0.2800000  16  0.0585 0.0034
45    32.99000  5.3750000   2  0.3620 0.0189
46   221.00000 32.5420000   2  0.1568 0.0298
47   396.31000 41.6970000   2  0.1958 0.0060
48    44.80000  7.8790000   2 -0.3815 0.0179
49    44.93000 11.8450000   2  1.3447 0.0442
50   187.67000 26.6350000   2  0.3910 0.0115
51    18.80000  4.6680000   2  0.2051 0.0481
52   109.07000 29.5740000   2  0.5902 0.0459
53   168.88000 20.7340000   2  0.4097 0.0158
54    29.36000  3.9430000   2  0.0576 0.0096
55   161.05000  8.8760000   2  0.1440 0.0061
56   232.69000 17.8970000   2 -0.0014 0.0037
57    23.20000  1.0780000   2  0.0823 0.0047
58   114.68000 26.6250000   2  0.0520 0.0417
59   168.74000 26.8300000   2  0.4429 0.0149
60    26.49000  1.7900000   2  0.3702 0.0058
61   161.74000 14.8560000   2  0.0976 0.0064
62   180.48000 11.8670000   2  0.0315 0.0042
63    76.00000  6.7080000   5  0.3967 0.0019
64    60.00000  8.9440000   5  0.2231 0.0073
65     3.86200  1.4272000  48  0.2118 0.0071
66     2.49000  0.6582000  48  0.2731 0.0031
67     4.03100  1.2956000  48  0.2640 0.0042
68     2.35000  0.5820000  48  0.1745 0.0022
69     0.24300  0.1180000  10  0.3151 0.0431
70     0.44300  0.1300000  10  0.3679 0.0144
71     0.32800  0.1270000  10  0.4176 0.0257
72     0.55000  0.1120000  10  0.4043 0.0122
73     0.59900  0.1320000  10  0.3417 0.0126
74     0.84200  0.1510000  10  0.5992 0.0099
75   381.60000 64.3988000   5  0.3886 0.0082
76   298.20000 96.3745000   5  0.2276 0.0380
77     0.97100  0.0255000   2  0.1174 0.0007
78     0.97500  0.0127000   2  0.1386 0.0002
79     5.95000  0.1980000   2  0.1496 0.0016
80     5.78000  0.0990000   2  0.1829 0.0020
81    10.57800  1.2100000   5  0.4720 0.0059
82     2.24000  0.3919000   6  0.0690 0.0143
83    10.96000  1.9351000   6  0.4378 0.0074
84    19.50000  2.2535000   6  0.3682 0.0044
85     2.04000  0.3674000   6  0.4152 0.0148
86     4.36000  2.4740000   6  1.1522 0.0588
87    14.79000  3.5028000   6  0.2075 0.0145
88     1.51000  0.1715000   6  0.2297 0.0028
89     5.89000  1.3962000   6  0.5521 0.0100
90    13.80000  1.5922000   6  0.1841 0.0074
91     2.24000  0.3919000   6  0.0437 0.0073
92    11.48000  2.0086000   6  0.3456 0.0102
93    19.95000  2.3025000   6  0.2075 0.0028
94     2.14000  0.4899000   6 -0.3487 0.0109
95     5.49000  1.3227000   6  0.5075 0.0148
96    13.49000  0.7593000   6  0.3223 0.0028
97     1.48000  0.1715000   6  0.2498 0.0045
98     8.71000  1.5187000   6  0.5062 0.0073
99    16.59000  0.9553000   6  0.0232 0.0007
100    7.20000  2.5981000   3  0.8532 0.0469
101    4.60000  1.7321000   3  0.4480 0.0666
102   69.70000  3.6373000   3  0.3866 0.0021
> 
> ### meta-analysis of log ratio of means using a random-effects model
> res <- rma(yi, vi, method="DL", data=dat)
> res

Random-Effects Model (k = 102; tau^2 estimator: DL)

tau^2 (estimated amount of total heterogeneity): 0.0216 (SE = 0.0088)
tau (square root of estimated tau^2 value):      0.1471
I^2 (total heterogeneity / total variability):   86.87%
H^2 (total variability / sampling variability):  7.61

Test for Heterogeneity: 
Q(df = 101) = 769.0185, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.2531   0.0185  13.6965   <.0001   0.2168   0.2893      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### average ratio of means with 95% CI
> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub cr.lb cr.ub
 1.29  1.24  1.34  0.96  1.72
> 
> ### meta-analysis for plants grown under nutrient stress
> res <- rma(yi, vi, method="DL", data=dat, subset=(xtrt=="FERT" & level=="LOW"))
> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub cr.lb cr.ub
 1.14  1.04  1.26  0.82  1.59
> 
> ### meta-analysis for plants grown under low light conditions
> res <- rma(yi, vi, method="DL", data=dat, subset=(xtrt=="LIGHT" & level=="LOW"))
> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub cr.lb cr.ub
 1.57  1.34  1.85  0.94  2.63
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.curtis1998", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.debruin2009")
> ### * dat.debruin2009
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.debruin2009
> ### Title: Studies on Standard Care Quality and HAART-Adherence
> ### Aliases: dat.debruin2009
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.debruin2009))
> 
> ### calculate proportions and corresponding sampling variances
> dat <- escalc(measure="PR", xi=xi, ni=ni, data=dat)
> 
> ### random-effects model
> res <- rma(yi, vi, data=dat)
> print(res, digits=2)

Random-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.02 (SE = 0.01)
tau (square root of estimated tau^2 value):      0.15
I^2 (total heterogeneity / total variability):   91.77%
H^2 (total variability / sampling variability):  12.14

Test for Heterogeneity: 
Q(df = 12) = 135.51, p-val < .01

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
    0.48     0.05    10.45     <.01     0.39     0.57      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### mixed-effects meta-regression model with all predictors/covariates
> res <- rma(yi, vi, mods = ~ scq + ethnicity + patients + select + sens, data=dat)
> print(res, digits=3)

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.007 (SE = 0.006)
tau (square root of estimated tau^2 value):             0.085
I^2 (residual heterogeneity / unaccounted variability): 72.43%
H^2 (unaccounted variability / sampling variability):   3.63
R^2 (amount of heterogeneity accounted for):            68.55%

Test for Residual Heterogeneity: 
QE(df = 7) = 22.309, p-val = 0.002

Test of Moderators (coefficient(s) 2,3,4,5,6): 
QM(df = 5) = 21.884, p-val < .001

Model Results:

                  estimate     se    zval   pval   ci.lb   ci.ub     
intrcpt              0.458  0.087   5.243  <.001   0.287   0.629  ***
scq                  0.014  0.005   3.168  0.002   0.005   0.023   **
ethnicityother      -0.231  0.084  -2.759  0.006  -0.395  -0.067   **
patientsstarting     0.081  0.066   1.230  0.219  -0.048   0.209     
selectyes           -0.073  0.075  -0.983  0.325  -0.219   0.073     
sens<400            -0.104  0.080  -1.307  0.191  -0.261   0.052     

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### mixed-effects meta-regression model with scq and ethnicity as predictors/covariates
> res <- rma(yi, vi, mods = ~ scq + ethnicity, data=dat)
> print(res, digits=3)

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.012 (SE = 0.007)
tau (square root of estimated tau^2 value):             0.109
I^2 (residual heterogeneity / unaccounted variability): 83.24%
H^2 (unaccounted variability / sampling variability):   5.97
R^2 (amount of heterogeneity accounted for):            48.39%

Test for Residual Heterogeneity: 
QE(df = 10) = 53.525, p-val < .001

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 10.333, p-val = 0.006

Model Results:

                estimate     se    zval   pval   ci.lb   ci.ub     
intrcpt            0.430  0.075   5.698  <.001   0.282   0.577  ***
scq                0.011  0.005   2.324  0.020   0.002   0.020    *
ethnicityother    -0.196  0.072  -2.725  0.006  -0.337  -0.055   **

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.debruin2009", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.fine1993")
> ### * dat.fine1993
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.fine1993
> ### Title: Studies on Radiation Therapy with or without Adjuvant
> ###   Chemotherapy in Patients with Malignant Gliomas
> ### Aliases: dat.fine1993
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.fine1993))
> 
> ### calculate log(ORs) and sampling variances for each time point
> dat <- escalc(measure="OR", ai=e1i, n1i=nei, ci=c1i, n2i=nci, data=dat, var.names=c("y1i","v1i"))
> dat <- escalc(measure="OR", ai=e2i, n1i=nei, ci=c2i, n2i=nci, data=dat, var.names=c("y2i","v2i"))
> dat <- escalc(measure="OR", ai=e3i, n1i=nei, ci=c3i, n2i=nci, data=dat, var.names=c("y3i","v3i"))
> dat <- escalc(measure="OR", ai=e4i, n1i=nei, ci=c4i, n2i=nci, data=dat, var.names=c("y4i","v4i"))
> 
> ### calculate the covariances (equations in Appendix of Trikalinos & Olkin, 2012)
> dat$v12i <- with(dat, nei / (e1i * (nei - e2i)) + nci / (c1i * (nci - c2i)))
> dat$v13i <- with(dat, nei / (e1i * (nei - e3i)) + nci / (c1i * (nci - c3i)))
> dat$v14i <- with(dat, nei / (e1i * (nei - e4i)) + nci / (c1i * (nci - c4i)))
> dat$v23i <- with(dat, nei / (e2i * (nei - e3i)) + nci / (c2i * (nci - c3i)))
> dat$v24i <- with(dat, nei / (e2i * (nei - e4i)) + nci / (c2i * (nci - c4i)))
> dat$v34i <- with(dat, nei / (e3i * (nei - e4i)) + nci / (c3i * (nci - c4i)))
> 
> ### create dataset in long format
> dat.long <- data.frame(study=rep(1:nrow(dat), each=4), time=1:4, 
+                        yi=c(t(dat[,c("y1i","y2i","y3i","y4i")])),
+                        vi=c(t(dat[,c("v1i","v2i","v3i","v4i")])))
> 
> ### var-cov matrices of the sudies
> V <- lapply(split(dat, dat$study), 
+             function(x) matrix(c( x$v1i, x$v12i, x$v13i, x$v14i, 
+                                  x$v12i,  x$v2i, x$v23i, x$v24i, 
+                                  x$v13i, x$v23i,  x$v3i, x$v34i, 
+                                  x$v14i, x$v24i, x$v34i,  x$v4i), nrow=4, ncol=4, byrow=TRUE))
> 
> ### remove rows for the missing time points in study 17
> dat.long <- na.omit(dat.long)
> 
> ### remove corresponding rows/columns from var-cov matrix
> V[[17]] <- V[[17]][c(2,4),c(2,4)]
> 
> ### make a copy of V
> Vc <- V
> 
> ### replace any (near) singular var-cov matrices with ridge corrected versions
> repl.Vi <- function(Vi) {
+    res <- eigen(Vi)
+    if (any(res$values <= .08)) {
+       round(res$vectors %*% diag(res$values + .08) %*% t(res$vectors), 12)
+    } else {
+       Vi
+    }
+ }
> Vc <- lapply(Vc, repl.Vi)
> 
> ### do not correct var-cov matrix of study 17
> Vc[[17]] <- V[[17]]
> 
> ### construct block diagonal matrix
> Vc <- bldiag(Vc)
> 
> ### multivariate fixed-effects model
> res <- rma.mv(yi, Vc, mods = ~ factor(time) - 1, method="FE", data=dat.long)
> print(res, digits=3)

Multivariate Meta-Analysis Model (k = 66; method: FE)

Variance Components: none

Test for Residual Heterogeneity: 
QE(df = 62) = 62.447, p-val = 0.460

Test of Moderators (coefficient(s) 1,2,3,4): 
QM(df = 4) = 15.631, p-val = 0.004

Model Results:

               estimate     se   zval   pval   ci.lb  ci.ub     
factor(time)1     0.251  0.143  1.755  0.079  -0.029  0.532    .
factor(time)2     0.428  0.114  3.742  <.001   0.204  0.652  ***
factor(time)3     0.343  0.134  2.560  0.010   0.080  0.606    *
factor(time)4     0.281  0.138  2.035  0.042   0.010  0.552    *

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### multivariate random-effects model with heteroscedastic AR(1) structure for the true effects
> res <- rma.mv(yi, Vc, mods = ~ factor(time) - 1, random = ~ time | study,
+               struct="HAR", data=dat.long)
> print(res, digits=3)

Multivariate Meta-Analysis Model (k = 66; method: REML)

Variance Components: 

outer factor: study (nlvls = 17)
inner factor: time  (nlvls = 4)

           estim   sqrt  k.lvl  fixed  level
tau^2.1    0.000  0.000     16     no      1
tau^2.2    0.000  0.000     17     no      2
tau^2.3    0.028  0.166     16     no      3
tau^2.4    0.194  0.441     17     no      4
rho        1.000                   no       

Test for Residual Heterogeneity: 
QE(df = 62) = 62.447, p-val = 0.460

Test of Moderators (coefficient(s) 1,2,3,4): 
QM(df = 4) = 14.695, p-val = 0.005

Model Results:

               estimate     se   zval   pval   ci.lb  ci.ub     
factor(time)1     0.253  0.143  1.769  0.077  -0.027  0.534    .
factor(time)2     0.408  0.115  3.539  <.001   0.182  0.634  ***
factor(time)3     0.366  0.144  2.532  0.011   0.083  0.649    *
factor(time)4     0.352  0.187  1.886  0.059  -0.014  0.718    .

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ## Not run: 
> ##D ### profile the variance components
> ##D par(mfrow=c(2,2))
> ##D profile(res, tau2=1, xlim=c(0,.2))
> ##D profile(res, tau2=2, xlim=c(0,.2))
> ##D profile(res, tau2=3, xlim=c(0,.2))
> ##D profile(res, tau2=4, xlim=c(.1,.3))
> ## End(Not run)
> ## Not run: 
> ##D ### profile the autocorrelation coefficient
> ##D par(mfrow=c(1,1))
> ##D profile(res, rho=1)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.fine1993", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.gibson2002")
> ### * dat.gibson2002
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.gibson2002
> ### Title: Studies on the Effectiveness of Self-Management Education and
> ###   Regular Medical Review for Adults with Asthma
> ### Aliases: dat.gibson2002
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.gibson2002))
> 
> ### fixed-effects model analysis of the standardized mean differences
> dat <- escalc(measure="SMD", m1i=m1i, sd1i=sd1i, n1i=n1i, m2i=m2i, sd2i=sd2i, n2i=n2i, data=dat)
> res <- rma(yi, vi, data=dat, method="FE")
Warning in rma(yi, vi, data = dat, method = "FE") :
  Studies with NAs omitted from model fitting.
> print(res, digits=2)

Fixed-Effects Model (k = 13)

Test for Heterogeneity: 
Q(df = 12) = 26.88, p-val < .01

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   -0.18     0.05    -3.77     <.01    -0.28    -0.09      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### fixed-effects model analysis of the (log) risk ratios
> dat <- escalc(measure="RR", ai=ai, bi=bi, ci=ci, di=di, data=dat)
> res <- rma(yi, vi, data=dat, method="FE")
Warning in rma(yi, vi, data = dat, method = "FE") :
  Studies with NAs omitted from model fitting.
> print(res, digits=2)

Fixed-Effects Model (k = 7)

Test for Heterogeneity: 
Q(df = 6) = 7.34, p-val = 0.29

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   -0.17     0.08    -2.31     0.02    -0.32    -0.03        * 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub
 0.84  0.72  0.97
> 
> ### fixed-effects model analysis of the standardized mean differences and the probit transformed
> ### risk differences (which also provide estimates of the standardized mean difference)
> dat <- escalc(measure="SMD", m1i=m1i, sd1i=sd1i, n1i=n1i, m2i=m2i, sd2i=sd2i, n2i=n2i, data=dat)
> dat <- escalc(measure="PBIT", ai=ai, bi=bi, ci=ci, di=di, data=dat, replace=FALSE)
> dat
           author year n1i   m1i  sd1i n2i   m2i  sd2i ai bi ci di type      yi
1            Cote 1997  50  2.20 12.73  54  5.20 12.50 NA NA NA NA    1 -0.2361
2           Ghosh 1998 140 17.60 24.20 136 34.10 38.80 NA NA NA NA    1 -0.5105
3         Hayward 1996  23  0.38  0.56  19  0.23  0.29 NA NA NA NA    1  0.3209
4           Heard 1999  97  2.09  5.93  94  2.66  4.95 34 63 36 58    1 -0.1038
5  Ignacio-Garcia 1995  35  4.92  6.05  35 20.00 26.34 24 11 29  6    1 -0.7804
6          Knoell 1998  45  0.85  4.75  55  2.31  9.16 NA NA NA NA    1 -0.1930
7       Lahdensuo 1996  56  2.80  9.00  59  4.80  7.20 13 43 25 34    1 -0.2445
8       Sommaruga 1995  20 24.10 11.80  20 31.80 17.90 NA NA NA NA    1 -0.4978
9          Zeiger 1991 128  1.40  3.30 143  2.30  7.60 NA NA NA NA    1 -0.1504
10         Garret 1994 119  6.23 12.20 100  5.71  8.57 58 42 57 33    2  0.0484
11           Neri 1996  32  2.10  8.00  33  5.10 14.00  7 25 13 20    3 -0.2589
12         Hilton 1986  86  0.73  1.48 100  0.47  1.20 NA NA NA NA    4  0.1937
13      Gallefoss 1999  25  8.00 32.00  24 26.00 70.00 NA NA NA NA    5 -0.3277
14           Yoon 1993  28    NA    NA  28    NA    NA  5 23  4 24    1  0.1467
15         Brewin 1995  12    NA    NA  33    NA    NA  0 12 16 17    3 -1.7320
       vi
1  0.0388
2  0.0150
3  0.0973
4  0.0210
5  0.0615
6  0.0406
7  0.0351
8  0.1031
9  0.0148
10 0.0184
11 0.0621
12 0.0217
13 0.0828
14 0.1627
15 0.4546
> res <- rma(yi, vi, data=dat, method="FE")
> print(res, digits=2)

Fixed-Effects Model (k = 15)

Test for Heterogeneity: 
Q(df = 14) = 32.82, p-val < .01

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   -0.19     0.05    -3.87     <.01    -0.28    -0.09      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.gibson2002", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.hackshaw1998")
> ### * dat.hackshaw1998
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.hackshaw1998
> ### Title: Studies on Lung Cancer Risk from ETS Exposure
> ### Aliases: dat.hackshaw1998
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.hackshaw1998))
> 
> ### random-effects model using the log odds ratios
> res <- rma(yi, vi, data=dat, method="DL")
> res

Random-Effects Model (k = 37; tau^2 estimator: DL)

tau^2 (estimated amount of total heterogeneity): 0.0171 (SE = 0.0172)
tau (square root of estimated tau^2 value):      0.1307
I^2 (total heterogeneity / total variability):   24.28%
H^2 (total variability / sampling variability):  1.32

Test for Heterogeneity: 
Q(df = 36) = 47.5453, p-val = 0.0944

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.2139   0.0471   4.5378   <.0001   0.1215   0.3063      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### estimated average odds ratio with CI (and credibility/prediction interval)
> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub cr.lb cr.ub
 1.24  1.13  1.36  0.94  1.63
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.hackshaw1998", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.hart1999")
> ### * dat.hart1999
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.hart1999
> ### Title: Studies on the Effectiveness of Warfarin for Preventing Strokes
> ### Aliases: dat.hart1999
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.hart1999))
> 
> ### calculate log incidence rate ratios and corresponding sampling variances
> dat <- escalc(measure="IRR", x1i=x1i, x2i=x2i, t1i=t1i, t2i=t2i, data=dat)
> dat
  trial  study year x1i n1i t1i x2i n2i t2i compgrp  prevtype   trinr      yi
1     1 AFASAK 1989   9 335 413  19 336 398 placebo   primary 2.8-4.2 -0.7842
2     2   SPAF 1991   8 210 263  19 211 245 placebo   primary 2.0-4.5 -0.9359
3     3 BAATAF 1990   3 212 487  13 208 435 control   primary 1.5-2.7 -1.5793
4     4   CAFA 1991   6 187 237   9 191 241 placebo   primary 2.0-3.0 -0.3887
5     5 SPINAF 1992   7 281 489  23 290 483 placebo   primary 1.4-2.8 -1.2019
6     6   EAFT 1993  20 225 507  50 214 405 placebo secondary 2.5-4.0 -1.1409
      vi
1 0.1637
2 0.1776
3 0.4103
4 0.2778
5 0.1863
6 0.0700
> 
> ### meta-analysis of log incidence rate ratios using a random-effects model
> res <- rma(yi, vi, data=dat)
> res

Random-Effects Model (k = 6; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0 (SE = 0.0987)
tau (square root of estimated tau^2 value):      0
I^2 (total heterogeneity / total variability):   0.00%
H^2 (total variability / sampling variability):  1.00

Test for Heterogeneity: 
Q(df = 5) = 2.9625, p-val = 0.7058

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -1.0168   0.1635  -6.2206   <.0001  -1.3372  -0.6964      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### average incidence rate ratio with 95% CI
> predict(res, transf=exp)
   pred  ci.lb  ci.ub  cr.lb  cr.ub
 0.3617 0.2626 0.4984 0.2626 0.4984
> 
> ### forest plot with extra annotations
> par(mar=c(5,4,1,2))
> forest(res, xlim=c(-11, 5), at=log(c(.05, .25, 1, 4)), atransf=exp, 
+        slab=paste(dat$study, " (", dat$year, ")", sep=""), 
+        ilab=cbind(paste(dat$x1i, "/", dat$t1i, sep=" "), 
+        paste(dat$x2i, "/", dat$t2i, sep=" ")), 
+        ilab.xpos=c(-6.5,-4), cex=.85)
> op <- par(cex=.85, font=2)
> text(-11, 7.5, "Study (Year)", pos=4)
> text(  5, 7.5, "IRR [95% CI]", pos=2)
> text(c(-6.5,-4), 8.0, c("Warfarin", "Control"))
> text(c(-6.5,-4), 7.5, c("Strokes / PT", "Strokes / PT"))
> segments(x0=-7.75, y0=7.75, x1=-2.75, y1=7.75)
> par(op)
> 
> ### meta-analysis of incidence rate differences using a random-effects model
> res <- rma(measure="IRD", x1i=x1i, x2i=x2i, t1i=t1i, t2i=t2i, data=dat)
> res

Random-Effects Model (k = 6; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.0002 (SE = 0.0003)
tau (square root of estimated tau^2 value):      0.0139
I^2 (total heterogeneity / total variability):   50.75%
H^2 (total variability / sampling variability):  2.03

Test for Heterogeneity: 
Q(df = 5) = 10.1606, p-val = 0.0708

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.0339   0.0081  -4.1546   <.0001  -0.0498  -0.0179      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.hart1999", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("dat.hasselblad1998")
> ### * dat.hasselblad1998
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.hasselblad1998
> ### Title: Studies on the Effectiveness of Counseling for Smoking Cessation
> ### Aliases: dat.hasselblad1998
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> data(dat.hasselblad1998)
> 
> ### calculate log odds for each study arm
> dat <- escalc(measure="PLO", xi=xi, ni=ni, add=1/2, to="all", data=dat.hasselblad1998)
> 
> ### create network graph (using 'plyr' and 'igraph' packages if installed)
> if (require(plyr) && require(igraph)) {
+    pairs <- do.call(rbind, sapply(split(dat$trt, dat$study), function(x) t(combn(x,2))))
+    pairs <- ddply(data.frame(pairs), .(X1, X2), count)
+    g <- graph.edgelist(as.matrix(pairs[,1:2]), directed=FALSE)
+    plot(g, edge.curved=FALSE, edge.width=pairs$freq, vertex.label.dist=.7,
+    vertex.label=c("Individual\nCounseling", "Group\nCounseling", "No Contact", "Self-Help"))
+ }
Loading required package: plyr
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> ### convert trt variable to factor with desired ordering of levels
> dat$trt <- factor(dat$trt, levels=c("no_contact", "self_help", "ind_counseling", "grp_counseling"))
> 
> ### add a space before each level (this makes the output a bit more legible)
> levels(dat$trt) <- paste0(" ", levels(dat$trt))
> 
> ### network meta-analysis using an arm-based model with fixed study effects
> ### by setting rho=1/2, tau^2 reflects the amount of heterogeneity for all treatment comparisons
> res <- rma.mv(yi, vi, mods = ~ factor(study) + trt - 1,
+               random = ~ trt | study, rho=1/2, data=dat, btt=25:27)
> res

Multivariate Meta-Analysis Model (k = 50; method: REML)

Variance Components: 

outer factor: study (nlvls = 24)
inner factor: trt   (nlvls = 4)

            estim    sqrt  fixed
tau^2      0.4324  0.6575     no
rho        0.5000            yes

Test for Residual Heterogeneity: 
QE(df = 23) = 202.3334, p-val < .0001

Test of Moderators (coefficient(s) 25,26,27): 
QM(df = 3) = 14.2278, p-val = 0.0026

Model Results:

                    estimate      se     zval    pval    ci.lb    ci.ub     
factor(study)1       -1.3925  0.5820  -2.3926  0.0167  -2.5333  -0.2518    *
factor(study)2       -2.7302  0.5842  -4.6731  <.0001  -3.8753  -1.5851  ***
factor(study)3       -3.7217  0.6681  -5.5703  <.0001  -5.0312  -2.4121  ***
factor(study)4       -2.2710  0.5829  -3.8958  <.0001  -3.4136  -1.1285  ***
factor(study)5       -2.3914  0.7374  -3.2430  0.0012  -3.8367  -0.9461   **
factor(study)6       -0.9698  0.6421  -1.5104  0.1309  -2.2284   0.2887     
factor(study)7       -2.0855  0.6369  -3.2744  0.0011  -3.3339  -0.8372   **
factor(study)8       -1.9592  0.6674  -2.9357  0.0033  -3.2672  -0.6512   **
factor(study)9       -2.3487  0.6032  -3.8936  <.0001  -3.5310  -1.1664  ***
factor(study)10      -1.8062  0.6296  -2.8688  0.0041  -3.0402  -0.5722   **
factor(study)11      -2.2618  0.5978  -3.7835  0.0002  -3.4334  -1.0901  ***
factor(study)12      -3.5643  0.6139  -5.8058  <.0001  -4.7675  -2.3610  ***
factor(study)13      -2.3454  0.5836  -4.0188  <.0001  -3.4892  -1.2015  ***
factor(study)14      -2.0624  0.6492  -3.1767  0.0015  -3.3348  -0.7899   **
factor(study)15      -2.4575  0.6868  -3.5781  0.0003  -3.8037  -1.1114  ***
factor(study)16      -2.1438  0.6707  -3.1964  0.0014  -3.4583  -0.8293   **
factor(study)17      -2.6810  0.6448  -4.1581  <.0001  -3.9447  -1.4173  ***
factor(study)18      -2.4066  0.5964  -4.0353  <.0001  -3.5755  -1.2377  ***
factor(study)19      -1.4441  0.8108  -1.7811  0.0749  -3.0331   0.1450    .
factor(study)20      -2.4041  0.6331  -3.7974  0.0001  -3.6450  -1.1633  ***
factor(study)21      -2.4359  0.5817  -4.1877  <.0001  -3.5760  -1.2958  ***
factor(study)22      -2.8559  0.5991  -4.7667  <.0001  -4.0301  -1.6816  ***
factor(study)23      -2.3268  0.5838  -3.9857  <.0001  -3.4710  -1.1826  ***
factor(study)24      -3.0893  0.5847  -5.2836  <.0001  -4.2353  -1.9433  ***
trt self_help         0.3888  0.3221   1.2070  0.2274  -0.2426   1.0202     
trt ind_counseling    0.6864  0.1904   3.6055  0.0003   0.3133   1.0596  ***
trt grp_counseling    0.8438  0.3641   2.3176  0.0205   0.1302   1.5574    *

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### all pairwise odds ratios of interventions versus no contact
> predict(res, newmods=cbind(matrix(0, nrow=3, ncol=24), diag(3)),
+         intercept=FALSE, transf=exp, digits=2)
  pred ci.lb ci.ub cr.lb cr.ub
1 1.48  0.78  2.77  0.35  6.20
2 1.99  1.37  2.89  0.52  7.60
3 2.33  1.14  4.75  0.53 10.14
> 
> ### all pairwise odds ratios comparing interventions (ic vs sh, gc vs sh, and gc vs ic)
> predict(res, newmods=cbind(matrix(0, nrow=3, ncol=24), rbind(c(-1,1,0), c(-1,0,1), c(0,-1,1))),
+         intercept=FALSE, transf=exp, digits=2)
  pred ci.lb ci.ub cr.lb cr.ub
1 1.35  0.70  2.58  0.32  5.71
2 1.58  0.72  3.43  0.35  7.10
3 1.17  0.59  2.30  0.27  5.02
> 
> ### forest plot of ORs of interventions versus no contact
> dev.new(width=7, height=4)
> par(mar=c(5,4,1,2))
> forest(c(0,res$b[25:27]), sei=c(0,res$se[25:27]), psize=1, xlim=c(-3,4), digits=c(2,1), efac=2,
+        slab=c("No Contact", "Self-Help", "Individual Counseling", "Group Counseling"),
+        atransf=exp, at=log(c(.5, 1, 2, 4, 8)), xlab="Odds Ratio for Intervention vs. No Contact")
> text(-3, 6, "Intervention", pos=4)
> text( 4, 6, "Odds Ratio [95% CI]",  pos=2)
> 
> ### restructure dataset to a contrast-based format
> dat.c <- lapply(split(dat.hasselblad1998, dat.hasselblad1998$study),
+                 function(x) cbind(x[rep(1,nrow(x)-1),], x[-1,5:7]))
> dat.c <- do.call(rbind, dat.c)
> dat.c <- dat.c[,c(1:5,8,6:7,9:10)]
> names(dat.c)[5:10] <- c("trt1", "trt2", "ai", "n1i", "ci", "n2i")
> rownames(dat.c) <- 1:nrow(dat.c)
> dat.c$id <- 1:nrow(dat.c)
> dat.c
   id study            authors year           trt1           trt2 ai  n1i  ci
1   1     1        Reid et al. 1974     no_contact ind_counseling 75  731 363
2   2     2    Cottraux et al. 1983     no_contact ind_counseling  9  140  23
3   3     2    Cottraux et al. 1983     no_contact grp_counseling  9  140  10
4   4     3       Slama et al. 1990     no_contact ind_counseling  2  106   9
5   5     4    Jamrozik et al. 1984     no_contact ind_counseling 58  549 237
6   6     5      Rabkin et al. 1984     no_contact ind_counseling  0   33   9
7   7     6   Decker and Evans 1989      self_help ind_counseling 20   49  16
8   8     7    Richmond et al. 1986     no_contact ind_counseling  3  100  31
9   9     8              Leung 1991     no_contact ind_counseling  1   31  26
10 10     9  Mothersill et al. 1988      self_help ind_counseling 11   78  12
11 11     9  Mothersill et al. 1988      self_help grp_counseling 11   78  29
12 12    10    Langford et al. 1983     no_contact ind_counseling  6   39  17
13 13    11       Gritz et al. 1992     no_contact      self_help 79  702  77
14 14    12    Campbell et al. 1986     no_contact      self_help 18  671  21
15 15    13     Sanders et al. 1989     no_contact ind_counseling 64  642 107
16 16    14    Hilleman et al. 1993 ind_counseling grp_counseling 12   76  20
17 17    15     Gillams et al. 1984 ind_counseling grp_counseling  9   55   3
18 18    16 Mogielnicki et al. 1986      self_help grp_counseling  7   66  32
19 19    17        Page et al. 1986     no_contact ind_counseling  5   62   8
20 20    18    Vetter and Ford 1990     no_contact ind_counseling 20  234  34
21 21    19  Williams and Hall 1988     no_contact grp_counseling  0   20   9
22 22    20    Pallonen et al. 1994     no_contact      self_help  8  116  19
23 23    21     Russell et al. 1983     no_contact ind_counseling 95 1107 143
24 24    22 Stewart and Rosser 1982     no_contact ind_counseling 15  187  36
25 25    23     Russell et al. 1979     no_contact ind_counseling 78  584  73
26 26    24    Kendrick et al. 1995     no_contact ind_counseling 69 1177  54
    n2i
1   714
2   140
3   138
4   205
5  1561
6    48
7    43
8    98
9    95
10   85
11  170
12   77
13  694
14  535
15  761
16   74
17   26
18  127
19   90
20  237
21   20
22  149
23 1031
24  504
25  675
26  888
> 
> ### calculate log odds ratios for each treatment comparison
> dat.c <- escalc(measure="OR", ai=ai, n1i=n1i, ci=ci, n2i=n2i, add=1/2, to="all", data=dat.c)
> dat.c
   id study            authors year           trt1           trt2 ai  n1i  ci
1   1     1        Reid et al. 1974     no_contact ind_counseling 75  731 363
2   2     2    Cottraux et al. 1983     no_contact ind_counseling  9  140  23
3   3     2    Cottraux et al. 1983     no_contact grp_counseling  9  140  10
4   4     3       Slama et al. 1990     no_contact ind_counseling  2  106   9
5   5     4    Jamrozik et al. 1984     no_contact ind_counseling 58  549 237
6   6     5      Rabkin et al. 1984     no_contact ind_counseling  0   33   9
7   7     6   Decker and Evans 1989      self_help ind_counseling 20   49  16
8   8     7    Richmond et al. 1986     no_contact ind_counseling  3  100  31
9   9     8              Leung 1991     no_contact ind_counseling  1   31  26
10 10     9  Mothersill et al. 1988      self_help ind_counseling 11   78  12
11 11     9  Mothersill et al. 1988      self_help grp_counseling 11   78  29
12 12    10    Langford et al. 1983     no_contact ind_counseling  6   39  17
13 13    11       Gritz et al. 1992     no_contact      self_help 79  702  77
14 14    12    Campbell et al. 1986     no_contact      self_help 18  671  21
15 15    13     Sanders et al. 1989     no_contact ind_counseling 64  642 107
16 16    14    Hilleman et al. 1993 ind_counseling grp_counseling 12   76  20
17 17    15     Gillams et al. 1984 ind_counseling grp_counseling  9   55   3
18 18    16 Mogielnicki et al. 1986      self_help grp_counseling  7   66  32
19 19    17        Page et al. 1986     no_contact ind_counseling  5   62   8
20 20    18    Vetter and Ford 1990     no_contact ind_counseling 20  234  34
21 21    19  Williams and Hall 1988     no_contact grp_counseling  0   20   9
22 22    20    Pallonen et al. 1994     no_contact      self_help  8  116  19
23 23    21     Russell et al. 1983     no_contact ind_counseling 95 1107 143
24 24    22 Stewart and Rosser 1982     no_contact ind_counseling 15  187  36
25 25    23     Russell et al. 1979     no_contact ind_counseling 78  584  73
26 26    24    Kendrick et al. 1995     no_contact ind_counseling 69 1177  54
    n2i      yi     vi
1   714 -2.1964 0.0204
2   140 -1.0183 0.1639
3   138 -0.1232 0.2159
4   205 -0.7035 0.5199
5  1561 -0.4098 0.0241
6    48 -2.7797 2.1604
7    43  0.1469 0.1796
8    98 -2.5649 0.3425
9    95 -2.0481 0.7516
10   85  0.0018 0.1954
11  170 -0.2019 0.1427
12   77 -0.3993 0.2574
13  694  0.0158 0.0287
14  535 -0.3894 0.1040
15  761 -0.3874 0.0281
16   74 -0.6632 0.1626
17   26  0.3161 0.4550
18  127 -0.9932 0.1914
19   90 -0.0743 0.3290
20  237 -0.5732 0.0873
21   20 -3.5225 2.2410
22  149 -0.6457 0.1858
23 1031 -0.5379 0.0196
24  504  0.1427 0.0998
25  675  0.2394 0.0300
26  888 -0.0408 0.0348
> 
> ### calculate the variance-covariance matrix of the log odds ratios for multitreatment studies
> ### see Gleser & Olkin (2009), equation (19.11), for the covariance equation
> calc.v <- function(x) {
+    v <- matrix(1/(x$ai[1]+1/2) + 1/(x$n1i[1] - x$ai[1] + 1/2), nrow=nrow(x), ncol=nrow(x))
+    diag(v) <- x$vi
+    v
+ }
> V <- bldiag(lapply(split(dat.c, dat.c$study), calc.v))
> 
> ### convert trt1 and trt2 variables to factors with desired ordering of levels
> lvls <- c("no_contact", "self_help", "ind_counseling", "grp_counseling")
> dat.c$trt1 <- factor(dat.c$trt1, levels=lvls)
> dat.c$trt2 <- factor(dat.c$trt2, levels=lvls)
> 
> ### create variables to indicate the contrast examined
> dat.c <- cbind(dat.c, model.matrix(~ dat.c$trt1 - 1) - model.matrix(~ dat.c$trt2 - 1))
> names(dat.c)[(ncol(dat.c)-3):ncol(dat.c)] <- lvls
> 
> ### network meta-analysis using a contrast-based random-effects model
> ### by setting rho=1/2, tau^2 reflects the amount of heterogeneity for all treatment comparisons
> res <- rma.mv(yi, V, mods = ~ self_help + ind_counseling + grp_counseling - 1,
+               random = ~ factor(id) | study, rho=1/2, data=dat.c)
> res

Multivariate Meta-Analysis Model (k = 26; method: REML)

Variance Components: 

outer factor: study      (nlvls = 24)
inner factor: factor(id) (nlvls = 26)

            estim    sqrt  fixed
tau^2      0.4324  0.6575     no
rho        0.5000            yes

Test for Residual Heterogeneity: 
QE(df = 23) = 202.3334, p-val < .0001

Test of Moderators (coefficient(s) 1,2,3): 
QM(df = 3) = 14.2278, p-val = 0.0026

Model Results:

                estimate      se    zval    pval    ci.lb   ci.ub     
self_help         0.3888  0.3221  1.2070  0.2274  -0.2426  1.0202     
ind_counseling    0.6864  0.1904  3.6055  0.0003   0.3133  1.0596  ***
grp_counseling    0.8438  0.3641  2.3176  0.0205   0.1302  1.5574    *

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.hasselblad1998", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:igraph’, ‘package:plyr’

> nameEx("dat.hine1989")
> ### * dat.hine1989
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.hine1989
> ### Title: Studies on Prophylactic Use of Lidocaine After a Heart Attack
> ### Aliases: dat.hine1989
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.hine1989))
> 
> ### calculate risk differences and corresponding sampling variances
> dat <- escalc(measure="RD", n1i=n1i, n2i=n2i, ai=ai, ci=ci, data=dat)
> dat
  study         source n1i n2i ai ci     yi     vi
1     1  Chopra et al.  39  43  2  1 0.0280 0.0018
2     2       Mogensen  44  44  4  4 0.0000 0.0038
3     3    Pitt et al. 107 110  6  4 0.0197 0.0008
4     4   Darby et al. 103 100  7  5 0.0180 0.0011
5     5 Bennett et al. 110 106  7  3 0.0353 0.0008
6     6 O'Brien et al. 154 146 11  4 0.0440 0.0006
> 
> ### meta-analysis of risk differences using a random-effects model
> res <- rma(yi, vi, data=dat)
> res

Random-Effects Model (k = 6; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0 (SE = 0.0006)
tau (square root of estimated tau^2 value):      0
I^2 (total heterogeneity / total variability):   0.00%
H^2 (total variability / sampling variability):  1.00

Test for Heterogeneity: 
Q(df = 5) = 0.8597, p-val = 0.9731

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.0294   0.0131   2.2531   0.0243   0.0038   0.0551        * 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.hine1989", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.ishak2007")
> ### * dat.ishak2007
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.ishak2007
> ### Title: Studies on Deep-Brain Stimulation
> ### Aliases: dat.ishak2007
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.ishak2007))
> 
> ### create long format dataset
> dat.long <- reshape(dat, direction="long", idvar="study", v.names=c("yi","vi"),
+                     varying=list(c(2,4,6,8), c(3,5,7,9)))
> dat.long <- dat.long[order(dat.long$study, dat.long$time),]
> rownames(dat.long) <- 1:nrow(dat.long)
> 
> ### remove missing measurement occasions from dat.long
> is.miss  <- is.na(dat.long$yi)
> dat.long <- dat.long[!is.miss,]
> 
> ### construct the full (block diagonal) V matrix with an AR(1) structure
> rho.within <- .97 ### value as estimated by Ishak et al. (2007)
> V <- lapply(split(with(dat, cbind(v1i, v2i, v3i, v4i)), dat$study), diag)
> V <- lapply(V, function(v) sqrt(v) %*% toeplitz(ARMAacf(ar=rho.within, lag.max=3)) %*% sqrt(v))
> V <- bldiag(V)
> V <- V[!is.miss,!is.miss] ### remove missing measurement occasions from V
> 
> ### plot data
> with(dat.long, interaction.plot(time, study, yi, type="b", pch=19, lty="solid", xaxt="n",
+                legend=FALSE, xlab="Time Point", ylab="Mean Difference", bty="l"))
> axis(side=1, at=1:4, lab=c("1 (3 months)", "2 (6 months)", "3 (12 months)", "4 (12+ months)"))
> 
> ### multivariate model with heteroscedastic AR(1) structure for the true effects
> res <- rma.mv(yi, V, mods = ~ factor(time) - 1, random = ~ time | study,
+               struct = "HAR", data = dat.long)
> print(res, digits=2)

Multivariate Meta-Analysis Model (k = 82; method: REML)

Variance Components: 

outer factor: study (nlvls = 46)
inner factor: time  (nlvls = 4)

           estim  sqrt  k.lvl  fixed  level
tau^2.1    22.73  4.77     24     no      1
tau^2.2    33.73  5.81     22     no      2
tau^2.3    26.14  5.11     25     no      3
tau^2.4    31.18  5.58     11     no      4
rho         0.88                  no       

Test for Residual Heterogeneity: 
QE(df = 78) = 856.16, p-val < .01

Test of Moderators (coefficient(s) 1,2,3,4): 
QM(df = 4) = 873.16, p-val < .01

Model Results:

               estimate    se    zval  pval   ci.lb   ci.ub     
factor(time)1    -25.90  1.01  -25.60  <.01  -27.89  -23.92  ***
factor(time)2    -27.46  1.14  -24.08  <.01  -29.70  -25.23  ***
factor(time)3    -28.66  1.03  -27.76  <.01  -30.68  -26.63  ***
factor(time)4    -26.49  1.38  -19.17  <.01  -29.20  -23.79  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.ishak2007", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.konstantopoulos2011")
> ### * dat.konstantopoulos2011
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.konstantopoulos2011
> ### Title: Studies on the Effects of Modified School Calendars on Student
> ###   Achievement
> ### Aliases: dat.konstantopoulos2011
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.konstantopoulos2011))
> 
> ### regular random-effects model
> res <- rma(yi, vi, data=dat)
> print(res, digits=3)

Random-Effects Model (k = 56; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.088 (SE = 0.020)
tau (square root of estimated tau^2 value):      0.297
I^2 (total heterogeneity / total variability):   94.70%
H^2 (total variability / sampling variability):  18.89

Test for Heterogeneity: 
Q(df = 55) = 578.864, p-val < .001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   0.128    0.044    2.916    0.004    0.042    0.214       ** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### regular random-effects model using rma.mv()
> res <- rma.mv(yi, vi, random = ~ 1 | study, data=dat)
> print(res, digits=3)

Multivariate Meta-Analysis Model (k = 56; method: REML)

Variance Components: 

           estim   sqrt  nlvls  fixed  factor
sigma^2    0.088  0.297     56     no   study

Test for Heterogeneity: 
Q(df = 55) = 578.864, p-val < .001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   0.128    0.044    2.916    0.004    0.042    0.214       ** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### multilevel random-effects model
> res.ml <- rma.mv(yi, vi, random = list(~ 1 | district, ~ 1 | study), data=dat)
> print(res.ml, digits=3)

Multivariate Meta-Analysis Model (k = 56; method: REML)

Variance Components: 

           estim   sqrt  nlvls  fixed    factor
sigma^2.1  0.065  0.255     11     no  district
sigma^2.2  0.033  0.181     56     no     study

Test for Heterogeneity: 
Q(df = 55) = 578.864, p-val < .001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   0.185    0.085    2.185    0.029    0.019    0.350        * 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### profile variance components
> par(mfrow=c(2,1))
> profile(res.ml, sigma2=1)
  |                                                                              |                                                                      |   0%  |                                                                              |====                                                                  |   5%  |                                                                              |=======                                                               |  10%  |                                                                              |==========                                                            |  15%  |                                                                              |==============                                                        |  20%  |                                                                              |==================                                                    |  25%  |                                                                              |=====================                                                 |  30%  |                                                                              |========================                                              |  35%  |                                                                              |============================                                          |  40%  |                                                                              |================================                                      |  45%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================                                |  55%  |                                                                              |==========================================                            |  60%  |                                                                              |==============================================                        |  65%  |                                                                              |=================================================                     |  70%  |                                                                              |====================================================                  |  75%  |                                                                              |========================================================              |  80%  |                                                                              |============================================================          |  85%  |                                                                              |===============================================================       |  90%  |                                                                              |==================================================================    |  95%  |                                                                              |======================================================================| 100%
> profile(res.ml, sigma2=2)
  |                                                                              |                                                                      |   0%  |                                                                              |====                                                                  |   5%  |                                                                              |=======                                                               |  10%  |                                                                              |==========                                                            |  15%  |                                                                              |==============                                                        |  20%  |                                                                              |==================                                                    |  25%  |                                                                              |=====================                                                 |  30%  |                                                                              |========================                                              |  35%  |                                                                              |============================                                          |  40%  |                                                                              |================================                                      |  45%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================                                |  55%  |                                                                              |==========================================                            |  60%  |                                                                              |==============================================                        |  65%  |                                                                              |=================================================                     |  70%  |                                                                              |====================================================                  |  75%  |                                                                              |========================================================              |  80%  |                                                                              |============================================================          |  85%  |                                                                              |===============================================================       |  90%  |                                                                              |==================================================================    |  95%  |                                                                              |======================================================================| 100%
> 
> ### multivariate parameterization of the model
> res.mv <- rma.mv(yi, vi, random = ~ factor(study) | district, data=dat)
> print(res.mv, digits=3)

Multivariate Meta-Analysis Model (k = 56; method: REML)

Variance Components: 

outer factor: district      (nlvls = 11)
inner factor: factor(study) (nlvls = 56)

           estim   sqrt  fixed
tau^2      0.098  0.313     no
rho        0.665            no

Test for Heterogeneity: 
Q(df = 55) = 578.864, p-val < .001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   0.185    0.085    2.185    0.029    0.019    0.350        * 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### tau^2 from multivariate model = sum of the two variance components from the multilevel model
> round(sum(res.ml$sigma2), 3)
[1] 0.098
> 
> ### rho from multivariate model = intraclass correlation coefficient based on the multilevel model
> round(res.ml$sigma2[1] / sum(res.ml$sigma2), 3)
[1] 0.665
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.konstantopoulos2011", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("dat.lee2004")
> ### * dat.lee2004
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.lee2004
> ### Title: Studies on Acupoint P6 Stimulation for Preventing Nausea
> ### Aliases: dat.lee2004
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.lee2004))
> 
> ### meta-analysis based on relative risks
> res <- rma(measure="RR", ai=ai, n1i=n1i, ci=ci, n2i=n2i, data=dat)
> res

Random-Effects Model (k = 16; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.0554 (SE = 0.0487)
tau (square root of estimated tau^2 value):      0.2353
I^2 (total heterogeneity / total variability):   46.04%
H^2 (total variability / sampling variability):  1.85

Test for Heterogeneity: 
Q(df = 15) = 30.2238, p-val = 0.0111

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.3145   0.0977  -3.2200   0.0013  -0.5059  -0.1231       ** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub cr.lb cr.ub
 0.73  0.60  0.88  0.44  1.20
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.lee2004", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.linde2005")
> ### * dat.linde2005
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.linde2005
> ### Title: Studies on the Effectiveness of St. John's Wort for Treating
> ###   Depression
> ### Aliases: dat.linde2005
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.linde2005))
> 
> ### remove studies with no response information and study with no responses in either group
> dat <- dat[-c(5,6,26),]
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=ai, ci=ci, n1i=n1i, n2i=n2i, data=dat)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(yi, vi, data=dat, method="DL")
> res

Random-Effects Model (k = 23; tau^2 estimator: DL)

tau^2 (estimated amount of total heterogeneity): 0.1413 (SE = 0.0697)
tau (square root of estimated tau^2 value):      0.3759
I^2 (total heterogeneity / total variability):   73.94%
H^2 (total variability / sampling variability):  3.84

Test for Heterogeneity: 
Q(df = 22) = 84.4155, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.5574   0.1002   5.5631   <.0001   0.3610   0.7537      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### mixed-effects meta-regression model with stratification variable
> res <- rma(yi, vi, mods = ~ factor(group) - 1, data=dat, method="DL")
> res

Mixed-Effects Model (k = 23; tau^2 estimator: DL)

tau^2 (estimated amount of residual heterogeneity):     0.0555 (SE = 0.0377)
tau (square root of estimated tau^2 value):             0.2357
I^2 (residual heterogeneity / unaccounted variability): 53.18%
H^2 (unaccounted variability / sampling variability):   2.14

Test for Residual Heterogeneity: 
QE(df = 19) = 40.5792, p-val = 0.0027

Test of Moderators (coefficient(s) 1,2,3,4): 
QM(df = 4) = 68.4988, p-val < .0001

Model Results:

                estimate      se    zval    pval    ci.lb   ci.ub     
factor(group)1    0.6826  0.1546  4.4138  <.0001   0.3795  0.9857  ***
factor(group)2    0.1548  0.1136  1.3622  0.1731  -0.0679  0.3774     
factor(group)3    1.6681  0.2918  5.7166  <.0001   1.0962  2.2401  ***
factor(group)4    0.5442  0.1430  3.8056  0.0001   0.2639  0.8245  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### predicted average relative risk for each level of the stratification variable
> predict(res, newmods=diag(4), transf=exp, digits=2)
  pred ci.lb ci.ub cr.lb cr.ub
1 1.98  1.46  2.68  1.14  3.44
2 1.17  0.93  1.46  0.70  1.95
3 5.30  2.99  9.39  2.54 11.06
4 1.72  1.30  2.28  1.00  2.96
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.linde2005", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.mcdaniel1994")
> ### * dat.mcdaniel1994
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.mcdaniel1994
> ### Title: Studies on the Validity of Employment Interviews
> ### Aliases: dat.mcdaniel1994
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.mcdaniel1994))
> 
> ### calculate r-to-z transformed correlations and corresponding sampling variances
> dat <- escalc(measure="ZCOR", ri=ri, ni=ni, data=dat)
> dat
    study   ni    ri type struct      yi     vi
1       1  123  0.00    j      s  0.0000 0.0083
2       2   95  0.06    p      u  0.0601 0.0109
3       3   69  0.36    j      s  0.3769 0.0152
4       4 1832  0.15    j      s  0.1511 0.0005
5       5   78  0.14    j      s  0.1409 0.0133
6       6  329  0.06    j      s  0.0601 0.0031
7       7  153  0.09    j      s  0.0902 0.0067
8       8   29  0.40    j      s  0.4236 0.0385
9       9   29  0.39    s      s  0.4118 0.0385
10     10  157  0.14    s      s  0.1409 0.0065
11     11  149  0.36    s      s  0.3769 0.0068
12     12   92  0.28    j      u  0.2877 0.0112
13     13   15  0.62    j      s  0.7250 0.0833
14     14   15  0.07    j      u  0.0701 0.0833
15     15  170  0.18    j      u  0.1820 0.0060
16     16   19  0.42    j      s  0.4477 0.0625
17     17   19  0.08    j      u  0.0802 0.0625
18     18   68  0.18    p      u  0.1820 0.0154
19     19   93  0.43    j      u  0.4599 0.0111
20     20   57  0.04    j      u  0.0400 0.0185
21     21   80 -0.04    p   <NA> -0.0400 0.0130
22     22   53  0.05    p   <NA>  0.0500 0.0200
23     23   24 -0.14    p   <NA> -0.1409 0.0476
24     24   57  0.05    j      s  0.0500 0.0185
25     25  275  0.35    j      s  0.3654 0.0037
26     26   45 -0.08    p   <NA> -0.0802 0.0238
27     27   79  0.24    p   <NA>  0.2448 0.0132
28     28  107  0.16    p   <NA>  0.1614 0.0096
29     29   31  0.25    j      u  0.2554 0.0357
30     30  407  0.68    j      s  0.8291 0.0025
31     31   84  0.61    j      s  0.7089 0.0123
32     32    8  0.81    j      s  1.1270 0.2000
33     33    6  0.99    j      s  2.6467 0.3333
34     34    7  0.66    j      s  0.7928 0.2500
35     35   12  0.45    j      s  0.4847 0.1111
36     36   14  0.71    j      s  0.8872 0.0909
37     37   40  0.27    j      s  0.2769 0.0270
38     38   40 -0.02    j      s -0.0200 0.0270
39     39   99  0.29    j      u  0.2986 0.0104
40     40  164  0.13    j      u  0.1307 0.0062
41     41   67  0.03    j      u  0.0300 0.0156
42     42   57  0.00    j      u  0.0000 0.0185
43     43   50  0.09    j      s  0.0902 0.0213
44     44  129 -0.03    j      u -0.0300 0.0079
45     45   49  0.46    s      s  0.4973 0.0217
46     46   63  0.30    s      s  0.3095 0.0167
47     47   56  0.33    s      s  0.3428 0.0189
48     48  238  0.24    p   <NA>  0.2448 0.0043
49     49   20  0.64    j      s  0.7582 0.0588
50     50  122  0.12    j      u  0.1206 0.0084
51     51   51  0.15    j      u  0.1511 0.0208
52     52   40  0.44    j      u  0.4722 0.0270
53     53  210  0.00    j      s  0.0000 0.0048
54     54  334  0.16    j      s  0.1614 0.0030
55     55  310  0.21    p   <NA>  0.2132 0.0033
56     56  180  0.29    j      s  0.2986 0.0056
57     57   93  0.19    j      u  0.1923 0.0111
58     58  472  0.04    j      u  0.0400 0.0021
59     59   44  0.56    j      u  0.6328 0.0244
60     60   75  0.14    j      u  0.1409 0.0139
61     61   68  0.44    j      u  0.4722 0.0154
62     62   38  0.36    j      u  0.3769 0.0286
63     63   42  0.34    j   <NA>  0.3541 0.0256
64     64   39  0.11    j   <NA>  0.1104 0.0278
65     65   49  0.40    j   <NA>  0.4236 0.0217
66     66   41  0.23    j   <NA>  0.2342 0.0263
67     67  200  0.22    j      s  0.2237 0.0051
68     68  850  0.44    j      s  0.4722 0.0012
69     69   41  0.27    j      s  0.2769 0.0263
70     70   32  0.11    j      s  0.1104 0.0345
71     71   65  0.27    j      s  0.2769 0.0161
72     72  125 -0.07    j      s -0.0701 0.0082
73     73  134  0.32    j      s  0.3316 0.0076
74     74   21  0.05    j      u  0.0500 0.0556
75     75   44  0.20    j      u  0.2027 0.0244
76     76  170  0.18    j      u  0.1820 0.0060
77     77  149  0.34    j      s  0.3541 0.0068
78     78  296  0.03    j      s  0.0300 0.0034
79     79   24  0.45    s      s  0.4847 0.0476
80     80  312  0.34    j      s  0.3541 0.0032
81     81  205  0.51    j      s  0.5627 0.0050
82     82   30  0.41    s      s  0.4356 0.0370
83     83   11  0.37    s      s  0.3884 0.1250
84     84   22  0.25    s      s  0.2554 0.0526
85     85   37 -0.17    j      s -0.1717 0.0294
86     86   43  0.47    j      s  0.5101 0.0250
87     87   72  0.32    j      s  0.3316 0.0145
88     88   72 -0.09    s      s -0.0902 0.0145
89     89  108  0.33    j      s  0.3428 0.0095
90     90   73  0.22    j      s  0.2237 0.0143
91     91   73  0.27    s      s  0.2769 0.0143
92     92  117  0.00    j      s  0.0000 0.0088
93     93   80  0.41    j      s  0.4356 0.0130
94     94   95  0.16    j      s  0.1614 0.0109
95     95  182  0.00    j      s  0.0000 0.0056
96     96   93  0.03    j      s  0.0300 0.0111
97     97   64  0.01    j      s  0.0100 0.0164
98     98  370  0.03    j      s  0.0300 0.0027
99     99  131  0.14    j      s  0.1409 0.0078
100   100   87  0.11    j      s  0.1104 0.0119
101   101   80  0.08    j      s  0.0802 0.0130
102   102   41 -0.13    j      s -0.1307 0.0263
103   103   35  0.13    j      u  0.1307 0.0312
104   104  106  0.36    j      s  0.3769 0.0097
105   105   86  0.06    j      s  0.0601 0.0120
106   106   54  0.19    j      s  0.1923 0.0196
107   107  393  0.27    j      s  0.2769 0.0026
108   108  102  0.17    j      s  0.1717 0.0101
109   109  115  0.34    j      s  0.3541 0.0089
110   110   63  0.28    s      s  0.2877 0.0167
111   111   22  0.11    j      s  0.1104 0.0526
112   112   37  0.07    j      u  0.0701 0.0294
113   113  116 -0.13 <NA>   <NA> -0.1307 0.0088
114   114  416  0.12    j      u  0.1206 0.0024
115   115  101  0.12    j      u  0.1206 0.0102
116   116 1359  0.37    j      u  0.3884 0.0007
117   117   82  0.26    p      u  0.2661 0.0127
118   118   32  0.42    j      s  0.4477 0.0345
119   119   42  0.37    j      s  0.3884 0.0256
120   120  196  0.17    j      s  0.1717 0.0052
121   121   44  0.19    j      s  0.1923 0.0244
122   122   47  0.32    s      s  0.3316 0.0227
123   123   37  0.33 <NA>   <NA>  0.3428 0.0294
124   124   12  0.24    j      s  0.2448 0.1111
125   125 1807  0.09 <NA>   <NA>  0.0902 0.0006
126   126   73  0.36    j      s  0.3769 0.0143
127   127   73  0.26    s      s  0.2661 0.0143
128   128   70  0.42    j      s  0.4477 0.0149
129   129   30  0.62    j      s  0.7250 0.0370
130   130   60  0.87    j      s  1.3331 0.0175
131   131   38 -0.07    j      s -0.0701 0.0286
132   132   12  0.65    j      s  0.7753 0.1111
133   133   33  0.17    j      u  0.1717 0.0333
134   134   33  0.30    j      u  0.3095 0.0333
135   135   28  0.45    s      s  0.4847 0.0400
136   136   51  0.24    p      u  0.2448 0.0208
137   137   49  0.02    p      u  0.0200 0.0217
138   138  164  0.23    j      s  0.2342 0.0062
139   139  195  0.17    j      s  0.1717 0.0052
140   140  165  0.32    j      s  0.3316 0.0062
141   141   40  0.36    j      s  0.3769 0.0270
142   142  100  0.09    p      s  0.0902 0.0103
143   143 4195  0.13    j      u  0.1307 0.0002
144   144  179  0.29    j      s  0.2986 0.0057
145   145   74  0.49    j      s  0.5361 0.0141
146   146  110  0.40    j      s  0.4236 0.0093
147   147   31  0.23    j      s  0.2342 0.0357
148   148   70  0.31    j      s  0.3205 0.0149
149   149   21  0.46    j      s  0.4973 0.0556
150   150   29 -0.12    j      s -0.1206 0.0385
151   151   51  0.22    j      u  0.2237 0.0208
152   152   51  0.59    j      s  0.6777 0.0208
153   153   40  0.21    j      s  0.2132 0.0270
154   154   40  0.02    j      s  0.0200 0.0270
155   155  129 -0.03    j      s -0.0300 0.0079
156   156  196  0.28    j      s  0.2877 0.0052
157   157   31 -0.04    j      s -0.0400 0.0357
158   158  494  0.19    j      u  0.1923 0.0020
159   159  101  0.23    j      s  0.2342 0.0102
160   160  175  0.30    j      s  0.3095 0.0058
> 
> ### meta-analysis of the transformed correlations using a random-effects model
> res <- rma(yi, vi, data=dat)
> res

Random-Effects Model (k = 160; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.0293 (SE = 0.0049)
tau (square root of estimated tau^2 value):      0.1712
I^2 (total heterogeneity / total variability):   81.29%
H^2 (total variability / sampling variability):  5.35

Test for Heterogeneity: 
Q(df = 159) = 789.7321, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.2374   0.0170  13.9995   <.0001   0.2042   0.2706      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### average correlation with 95% CI
> predict(res, transf=transf.ztor)
   pred  ci.lb  ci.ub   cr.lb  cr.ub
 0.2330 0.2014 0.2642 -0.0995 0.5187
> 
> ### mixed-effects model with interview type as factor
> ### note: job-related interviews is the reference level
> rma(yi, vi, mods = ~ factor(type), data=dat)
Warning in rma(yi, vi, mods = ~factor(type), data = dat) :
  Studies with NAs omitted from model fitting.

Mixed-Effects Model (k = 157; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.0282 (SE = 0.0049)
tau (square root of estimated tau^2 value):             0.1681
I^2 (residual heterogeneity / unaccounted variability): 79.62%
H^2 (unaccounted variability / sampling variability):   4.91
R^2 (amount of heterogeneity accounted for):            1.92%

Test for Residual Heterogeneity: 
QE(df = 154) = 738.4411, p-val < .0001

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 5.8455, p-val = 0.0538

Model Results:

               estimate      se     zval    pval    ci.lb    ci.ub     
intrcpt          0.2474  0.0187  13.2089  <.0001   0.2107   0.2841  ***
factor(type)p   -0.1228  0.0582  -2.1115  0.0347  -0.2368  -0.0088    *
factor(type)s    0.0573  0.0598   0.9587  0.3377  -0.0599   0.1745     

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### mixed-effects model with interview structure as factor
> ### note: structured interviews is the reference level
> rma(yi, vi, mods = ~ factor(struct), data=dat)
Warning in rma(yi, vi, mods = ~factor(struct), data = dat) :
  Studies with NAs omitted from model fitting.

Mixed-Effects Model (k = 145; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.0298 (SE = 0.0053)
tau (square root of estimated tau^2 value):             0.1727
I^2 (residual heterogeneity / unaccounted variability): 79.91%
H^2 (unaccounted variability / sampling variability):   4.98
R^2 (amount of heterogeneity accounted for):            1.95%

Test for Residual Heterogeneity: 
QE(df = 143) = 701.2270, p-val < .0001

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 3.8417, p-val = 0.0500

Model Results:

                 estimate      se     zval    pval    ci.lb    ci.ub     
intrcpt            0.2697  0.0211  12.7810  <.0001   0.2284   0.3111  ***
factor(struct)u   -0.0786  0.0401  -1.9600  0.0500  -0.1572  -0.0000    *

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### note: the interpretation of the results is difficult since all 
> ### situational interviews were structured, almost all psychological 
> ### interviews were unstructured, and actually for the majority of 
> ### the psychological interviews it was unknown whether the interview 
> ### was structured or unstructured
> table(dat$type, dat$struct, useNA="always")
      
        s  u <NA>
  j    89 34    4
  p     1  5    8
  s    16  0    0
  <NA>  0  0    3
> 
> ### meta-analysis of raw correlations using a random-effects model
> res <- rma(measure="COR", ri=ri, ni=ni, data=dat.mcdaniel1994)
> res

Random-Effects Model (k = 160; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.0331 (SE = 0.0051)
tau (square root of estimated tau^2 value):      0.1819
I^2 (total heterogeneity / total variability):   88.95%
H^2 (total variability / sampling variability):  9.05

Test for Heterogeneity: 
Q(df = 159) = 6136.9194, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.2444   0.0170  14.3885   <.0001   0.2111   0.2777      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.mcdaniel1994", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.molloy2014")
> ### * dat.molloy2014
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.molloy2014
> ### Title: Studies on the Relationship between Conscientiousness and
> ###   Medication Adherence
> ### Aliases: dat.molloy2014
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.molloy2014))
> 
> ### calculate r-to-z transformed correlations and corresponding sampling variances
> dat <- escalc(measure="ZCOR", ri=ri, ni=ni, data=dat, slab=paste(authors, year, sep=", "))
> dat
               authors year  ni     ri controls          design   a_measure
1      Axelsson et al. 2009 109  0.187     none cross-sectional self-report
2      Axelsson et al. 2011 749  0.162     none cross-sectional self-report
3         Bruce et al. 2010  55  0.340     none     prospective       other
4   Christensen et al. 1999 107  0.320     none cross-sectional self-report
5  Christensen & Smith 1995  72  0.270     none     prospective       other
6         Cohen et al. 2004  65  0.000     none     prospective       other
7       Dobbels et al. 2005 174  0.175     none cross-sectional self-report
8        Ediger et al. 2007 326  0.050 multiple     prospective self-report
9         Insel et al. 2006  58  0.260     none     prospective       other
10       Jerant et al. 2011 771  0.010 multiple     prospective       other
11        Moran et al. 1997  56 -0.090 multiple     prospective       other
12   O'Cleirigh et al. 2007  91  0.370     none     prospective self-report
13       Penedo et al. 2003 116  0.000     none cross-sectional self-report
14        Quine et al. 2012 537  0.150     none     prospective self-report
15      Stilley et al. 2004 158  0.240     none     prospective       other
16 Wiebe & Christensen 1997  65  0.040     none     prospective       other
   c_measure meanage quality      yi     vi
1      other   22.00       1  0.1892 0.0094
2        NEO   53.59       1  0.1634 0.0013
3        NEO   43.36       2  0.3541 0.0192
4      other   41.70       1  0.3316 0.0096
5        NEO   46.39       2  0.2769 0.0145
6        NEO   41.20       2  0.0000 0.0161
7        NEO   52.30       1  0.1768 0.0058
8        NEO   41.00       3  0.0500 0.0031
9      other   77.00       2  0.2661 0.0182
10       NEO   78.60       3  0.0100 0.0013
11       NEO   57.20       2 -0.0902 0.0189
12       NEO   37.90       2  0.3884 0.0114
13       NEO   39.20       1  0.0000 0.0088
14     other   69.00       2  0.1511 0.0019
15       NEO   46.20       3  0.2448 0.0065
16       NEO   56.00       1  0.0400 0.0161
> 
> ### meta-analysis of the transformed correlations using a random-effects model
> res <- rma(yi, vi, data=dat)
> res

Random-Effects Model (k = 16; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.0081 (SE = 0.0055)
tau (square root of estimated tau^2 value):      0.0901
I^2 (total heterogeneity / total variability):   61.73%
H^2 (total variability / sampling variability):  2.61

Test for Heterogeneity: 
Q(df = 15) = 38.1595, p-val = 0.0009

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.1499   0.0316   4.7501   <.0001   0.0881   0.2118      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### average correlation with 95% CI
> predict(res, digits=3, transf=transf.ztor)
  pred ci.lb ci.ub  cr.lb cr.ub
 0.149 0.088 0.209 -0.037 0.325
> 
> ### forest plot
> forest(res, addcred=TRUE, xlim=c(-1.6,1.6), atransf=transf.ztor, 
+        at=transf.rtoz(c(-.4,-.2,0,.2,.4,.6)), digits=c(2,1), cex=.8)
> text(-1.6, 18, "Author(s), Year", pos=4, cex=.8)
> text( 1.6, 18, "Correlation [95% CI]", pos=2, cex=.8)
> 
> ### funnel plot
> funnel(res)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.molloy2014", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.nielweise2007")
> ### * dat.nielweise2007
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.nielweise2007
> ### Title: Studies on Anti-Infective-Treated Central Venous Catheters for
> ###   Prevention of Catheter-Related Bloodstream Infections
> ### Aliases: dat.nielweise2007
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.nielweise2007))
> 
> ### standard (inverse-variance) random-effects model
> res <- rma(measure="OR", ai=ai, n1i=n1i, ci=ci, n2i=n2i, data=dat, drop00=TRUE)
Warning in rma(measure = "OR", ai = ai, n1i = n1i, ci = ci, n2i = n2i, data = dat,  :
  Studies with NAs omitted from model fitting.
> print(res, digits=3)

Random-Effects Model (k = 17; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.036 (SE = 0.299)
tau (square root of estimated tau^2 value):      0.189
I^2 (total heterogeneity / total variability):   3.46%
H^2 (total variability / sampling variability):  1.04

Test for Heterogeneity: 
Q(df = 16) = 15.812, p-val = 0.466

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  -0.980    0.243   -4.027    <.001   -1.458   -0.503      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub cr.lb cr.ub
 0.38  0.23  0.60  0.21  0.69
> 
> ### random-effects conditional logistic model
> ## Not run: 
> ##D res <- rma.glmm(measure="OR", ai=ai, n1i=n1i, ci=ci, n2i=n2i, data=dat, model="CM.EL")
> ##D print(res, digits=3)
> ##D predict(res, transf=exp, digits=2)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.nielweise2007", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.nielweise2008")
> ### * dat.nielweise2008
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.nielweise2008
> ### Title: Studies on Anti-Infective-Treated Central Venous Catheters for
> ###   Prevention of Catheter-Related Bloodstream Infections
> ### Aliases: dat.nielweise2008
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.nielweise2008))
> 
> ### standard (inverse-variance) random-effects model
> res <- rma(measure="IRR", x1i=x1i, t1i=t1i, x2i=x2i, t2i=t2i, data=dat)
> print(res, digits=3)

Random-Effects Model (k = 9; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.094 (SE = 0.212)
tau (square root of estimated tau^2 value):      0.306
I^2 (total heterogeneity / total variability):   20.88%
H^2 (total variability / sampling variability):  1.26

Test for Heterogeneity: 
Q(df = 8) = 9.698, p-val = 0.287

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  -0.396    0.227   -1.747    0.081   -0.841    0.048        . 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub cr.lb cr.ub
 0.67  0.43  1.05  0.32  1.42
> 
> ### random-effects conditional Poisson model
> ## Not run: 
> ##D res <- rma.glmm(measure="IRR", x1i=x1i, t1i=t1i, x2i=x2i, t2i=t2i, data=dat, model="CM.EL")
> ##D print(res, digits=3)
> ##D predict(res, transf=exp, digits=2)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.nielweise2008", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.normand1999")
> ### * dat.normand1999
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.normand1999
> ### Title: Studies on the Length of Hospital Stay of Stroke Patients
> ### Aliases: dat.normand1999
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.normand1999))
> 
> ### calculate mean differences and corresponding sampling variances
> dat <- escalc(measure="MD", m1i=m1i, sd1i=sd1i, n1i=n1i, m2i=m2i, sd2i=sd2i, n2i=n2i, data=dat)
> dat
  study             source n1i m1i sd1i n2i m2i sd2i       yi       vi
1     1          Edinburgh 155  55   47 156  75   64 -20.0000  40.5080
2     2     Orpington-Mild  31  27    7  32  29    4  -2.0000   2.0806
3     3 Orpington-Moderate  75  64   17  71 119   29 -55.0000  15.6984
4     4   Orpington-Severe  18  66   20  18 137   48 -71.0000 150.2222
5     5      Montreal-Home   8  14    8  13  18   11  -4.0000  17.3077
6     6  Montreal-Transfer  57  19    7  52  18    4   1.0000   1.1673
7     7          Newcastle  34  52   45  33  41   34  11.0000  94.5891
8     8               Umea 110  21   16 183  31   27 -10.0000   6.3109
9     9            Uppsala  60  30   27  52  23   20   7.0000  19.8423
> 
> ### meta-analysis of mean differences using a random-effects model
> res <- rma(yi, vi, data=dat)
> res

Random-Effects Model (k = 9; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 684.6462 (SE = 359.7542)
tau (square root of estimated tau^2 value):      26.1657
I^2 (total heterogeneity / total variability):   98.97%
H^2 (total variability / sampling variability):  97.21

Test for Heterogeneity: 
Q(df = 8) = 238.9158, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
-15.1060   8.9466  -1.6885   0.0913 -32.6409   2.4289        . 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### meta-analysis of standardized mean differences using a random-effects model
> res <- rma(measure="SMD", m1i=m1i, sd1i=sd1i, n1i=n1i, m2i=m2i, sd2i=sd2i, n2i=n2i, 
+            data=dat, slab=source)
> res

Random-Effects Model (k = 9; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.7908 (SE = 0.4281)
tau (square root of estimated tau^2 value):      0.8893
I^2 (total heterogeneity / total variability):   95.49%
H^2 (total variability / sampling variability):  22.20

Test for Heterogeneity: 
Q(df = 8) = 123.7293, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.5371   0.3087  -1.7401   0.0818  -1.1421   0.0679        . 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### draw forest plot
> forest(res, xlim=c(-7,5), alim=c(-3,1), cex=.8)
> text(-7, 11, "Study/Source",          pos=4, cex=.8)
> text( 5, 11, "Observed SMD [95% CI]", pos=2, cex=.8)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.normand1999", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.pignon2000")
> ### * dat.pignon2000
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.pignon2000
> ### Title: Studies on the Effectiveness of Locoregional Treatment plus
> ###   Chemotherapy for Head and Neck Squamous-Cell Carcinoma
> ### Aliases: dat.pignon2000
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.pignon2000))
> 
> ### compute estimated log hazard ratios and sampling variances
> dat$yi <- with(dat, OmE/V)
> dat$vi <- with(dat, 1/V)
> 
> ### meta-analysis based on all 65 trials
> res <- rma(yi, vi, data=dat, method="FE", digits=2)
> res

Fixed-Effects Model (k = 65)

Test for Heterogeneity: 
Q(df = 64) = 123.67, p-val < .01

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   -0.11     0.02    -4.67     <.01    -0.16    -0.06      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp)
 pred ci.lb ci.ub
 0.90  0.85  0.94
> 
> ### only adjuvant trials
> res <- rma(yi, vi, data=dat, method="FE", subset=grp==1, digits=2)
> res

Fixed-Effects Model (k = 8)

Test for Heterogeneity: 
Q(df = 7) = 7.83, p-val = 0.35

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   -0.02     0.07    -0.34     0.74    -0.16     0.11          

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp)
 pred ci.lb ci.ub
 0.98  0.85  1.12
> 
> ### only neoadjuvant trials
> res <- rma(yi, vi, data=dat, method="FE", subset=grp==2, digits=2)
> res

Fixed-Effects Model (k = 31)

Test for Heterogeneity: 
Q(df = 30) = 31.57, p-val = 0.39

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   -0.06     0.03    -1.64     0.10    -0.12     0.01          

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp)
 pred ci.lb ci.ub
 0.95  0.88  1.01
> 
> ### only concomitant trials
> res <- rma(yi, vi, data=dat, method="FE", subset=grp==3, digits=2)
> res

Fixed-Effects Model (k = 26)

Test for Heterogeneity: 
Q(df = 25) = 73.81, p-val < .01

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
   -0.21     0.04    -5.43     <.01    -0.28    -0.13      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp)
 pred ci.lb ci.ub
 0.81  0.76  0.88
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.pignon2000", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.pritz1997")
> ### * dat.pritz1997
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.pritz1997
> ### Title: Studies on the Effectiveness of Hyperdynamic Therapy for
> ###   Treating Cerebral Vasospasm
> ### Aliases: dat.pritz1997
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.pritz1997))
> 
> ### computation of "weighted average" in Zhou et al. (1999), Table IV
> dat <- escalc(measure="PR", xi=xi, ni=ni, data=dat, add=0)
> theta.hat    <- sum(dat$ni * dat$yi) / sum(dat$ni)
> se.theta.hat <- sqrt(sum(dat$ni^2 * dat$vi) / sum(dat$ni)^2)
> ci.lb        <- theta.hat - 1.96*se.theta.hat
> ci.ub        <- theta.hat + 1.96*se.theta.hat
> round(c(estimate = theta.hat, se = se.theta.hat, ci.lb = ci.lb, ci.ub = ci.ub), 4)
estimate       se    ci.lb    ci.ub 
  0.7546   0.0224   0.7106   0.7986 
> 
> ### random-effects model with raw proportions
> dat <- escalc(measure="PR", xi=xi, ni=ni, data=dat)
> res <- rma(yi, vi, data=dat)
> predict(res)
   pred     se  ci.lb  ci.ub  cr.lb  cr.ub
 0.7968 0.0423 0.7138 0.8797 0.5306 1.0629
> 
> ### random-effects model with logit transformed proportions
> dat <- escalc(measure="PLO", xi=xi, ni=ni, data=dat)
> res <- rma(yi, vi, data=dat)
> predict(res, transf=transf.ilogit)
   pred  ci.lb  ci.ub  cr.lb  cr.ub
 0.7575 0.6605 0.8337 0.4661 0.9179
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.pritz1997", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.raudenbush1985")
> ### * dat.raudenbush1985
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.raudenbush1985
> ### Title: Studies on Assessing the Effects of Teacher Expectations on
> ###   Pupil IQ
> ### Aliases: dat.raudenbush1985
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.raudenbush1985))
> 
> ### random-effects model
> res <- rma(yi, vi, data=dat)
> res

Random-Effects Model (k = 19; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.0188 (SE = 0.0155)
tau (square root of estimated tau^2 value):      0.1372
I^2 (total heterogeneity / total variability):   41.86%
H^2 (total variability / sampling variability):  1.72

Test for Heterogeneity: 
Q(df = 18) = 35.8295, p-val = 0.0074

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  0.0837   0.0516   1.6208   0.1051  -0.0175   0.1849          

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### create weeks variable where values larger than 3 are set to 3
> dat$weeks.c <- ifelse(dat$week > 3, 3, dat$week)
> 
> ### mixed-effects model with weeks.c variable as moderator
> res <- rma(yi, vi, mods=~weeks.c, data=dat, digits=3)
> res

Mixed-Effects Model (k = 19; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.000 (SE = 0.007)
tau (square root of estimated tau^2 value):             0.001
I^2 (residual heterogeneity / unaccounted variability): 0.00%
H^2 (unaccounted variability / sampling variability):   1.00
R^2 (amount of heterogeneity accounted for):            100.00%

Test for Residual Heterogeneity: 
QE(df = 17) = 16.571, p-val = 0.484

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 19.258, p-val < .001

Model Results:

         estimate     se    zval   pval   ci.lb   ci.ub     
intrcpt     0.407  0.087   4.678  <.001   0.237   0.578  ***
weeks.c    -0.157  0.036  -4.388  <.001  -0.227  -0.087  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.raudenbush1985", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.riley2003")
> ### * dat.riley2003
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.riley2003
> ### Title: Studies on MYC-N as a Prognostic Marker for Neuroblastoma
> ### Aliases: dat.riley2003
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.riley2003))
> 
> ### random-effects model analysis for outcome DFS
> res <- rma(yi, sei=sei, data=dat, subset=(outcome == "DFS"), method="DL")
> res

Random-Effects Model (k = 42; tau^2 estimator: DL)

tau^2 (estimated amount of total heterogeneity): 0.4212 (SE = 0.1561)
tau (square root of estimated tau^2 value):      0.6490
I^2 (total heterogeneity / total variability):   65.98%
H^2 (total variability / sampling variability):  2.94

Test for Heterogeneity: 
Q(df = 41) = 120.5237, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  1.4843   0.1303  11.3876   <.0001   1.2288   1.7398      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub cr.lb cr.ub
 4.41  3.42  5.70  1.21 16.15
> 
> ### random-effects model analysis for outcome OS
> res <- rma(yi, sei=sei, data=dat, subset=(outcome == "OS"), method="DL")
> res

Random-Effects Model (k = 56; tau^2 estimator: DL)

tau^2 (estimated amount of total heterogeneity): 0.4223 (SE = 0.1889)
tau (square root of estimated tau^2 value):      0.6499
I^2 (total heterogeneity / total variability):   65.36%
H^2 (total variability / sampling variability):  2.89

Test for Heterogeneity: 
Q(df = 55) = 158.7926, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  1.6356   0.1219  13.4193   <.0001   1.3967   1.8745      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub cr.lb cr.ub
 5.13  4.04  6.52  1.40 18.76
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.riley2003", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dat.senn2013")
> ### * dat.senn2013
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.senn2013
> ### Title: Studies on the Effectiveness of Glucose-Lowering Agents
> ### Aliases: dat.senn2013
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.senn2013))
> 
> ### create network graph (using 'plyr' and 'igraph' packages if installed)
> if (require(plyr) && require(igraph)) {
+    pairs <- do.call(rbind, sapply(split(dat$treatment, dat$study), function(x) t(combn(x,2))))
+    pairs <- ddply(data.frame(pairs), .(X1, X2), count)
+    g <- graph.edgelist(as.matrix(pairs[,1:2]), directed=FALSE)
+    plot(g, edge.curved=FALSE, edge.width=pairs$freq, vertex.label.dist=.8)
+ }
Loading required package: plyr
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> ### table of studies versus treatments examined
> print(addmargins(table(dat$study, dat$treatment)), zero.print="")
                       
                        acarbose benfluorex metformin miglitol pioglitazone
  Alex (1998)                                       1                      
  Baksi (2004)                                                             
  Costa (1997)                 1                                           
  Davidson (2007)                                                          
  De Fronzo (1995)                                  1                      
  Derosa (2004)                                                           1
  Garber (2008)                                                            
  Gonzalez-Ortiz (2004)                             1                      
  Hanefeld (2004)                                   1                     1
  Hermansen (2007)                                                         
  Johnston (1994)                                            1             
  Johnston (1998a)                                           1             
  Johnston (1998b)                                           1             
  Kerenyi (2004)                                                           
  Kim (2007)                                        1                      
  Kipnes (2001)                                                           1
  Lewin (2007)                                      1                      
  Moulin (2006)                           1                                
  Oyama (2008)                 1                                           
  Rosenstock (2008)                                                        
  Stucci (1996)                           1                                
  Vongthavaravat (2002)                                                    
  Willms (1999)                1                    1                      
  Wolffenbuttel (1999)                                                     
  Yang (2003)                                       1                      
  Zhu (2003)                                                               
  Sum                          3          2         8        3            3
                       
                        placebo rosiglitazone sitagliptin sulfonylurea
  Alex (1998)                                                        1
  Baksi (2004)                1             1                         
  Costa (1997)                1                                       
  Davidson (2007)             1             1                         
  De Fronzo (1995)            1                                       
  Derosa (2004)                             1                         
  Garber (2008)               1                                       
  Gonzalez-Ortiz (2004)       1                                       
  Hanefeld (2004)                                                     
  Hermansen (2007)            1                         1             
  Johnston (1994)             1                                       
  Johnston (1998a)            1                                       
  Johnston (1998b)            1                                       
  Kerenyi (2004)              1             1                         
  Kim (2007)                                1                         
  Kipnes (2001)               1                                       
  Lewin (2007)                1                                       
  Moulin (2006)               1                                       
  Oyama (2008)                                                       1
  Rosenstock (2008)           1             1                         
  Stucci (1996)               1                                       
  Vongthavaravat (2002)                     1                        1
  Willms (1999)               1                                       
  Wolffenbuttel (1999)        1             1                         
  Yang (2003)                               1                         
  Zhu (2003)                  1             1                         
  Sum                        19            10           1            3
                       
                        vildagliptin Sum
  Alex (1998)                          2
  Baksi (2004)                         2
  Costa (1997)                         2
  Davidson (2007)                      2
  De Fronzo (1995)                     2
  Derosa (2004)                        2
  Garber (2008)                    1   2
  Gonzalez-Ortiz (2004)                2
  Hanefeld (2004)                      2
  Hermansen (2007)                     2
  Johnston (1994)                      2
  Johnston (1998a)                     2
  Johnston (1998b)                     2
  Kerenyi (2004)                       2
  Kim (2007)                           2
  Kipnes (2001)                        2
  Lewin (2007)                         2
  Moulin (2006)                        2
  Oyama (2008)                         2
  Rosenstock (2008)                    2
  Stucci (1996)                        2
  Vongthavaravat (2002)                2
  Willms (1999)                        3
  Wolffenbuttel (1999)                 2
  Yang (2003)                          2
  Zhu (2003)                           2
  Sum                              1  53
> 
> ### table of frequencies with which treatment pairs were studied
> print(as.table(crossprod(table(dat$study, dat$treatment))), zero.print="")
               
                acarbose benfluorex metformin miglitol pioglitazone placebo
  acarbose             3                    1                             2
  benfluorex                      2                                       2
  metformin            1                    8                     1       4
  miglitol                                           3                    3
  pioglitazone                              1                     3       1
  placebo              2          2         4        3            1      19
  rosiglitazone                             2                     1       6
  sitagliptin                                                             1
  sulfonylurea         1                    1                              
  vildagliptin                                                            1
               
                rosiglitazone sitagliptin sulfonylurea vildagliptin
  acarbose                                           1             
  benfluorex                                                       
  metformin                 2                        1             
  miglitol                                                         
  pioglitazone              1                                      
  placebo                   6           1                         1
  rosiglitazone            10                        1             
  sitagliptin                           1                          
  sulfonylurea              1                        3             
  vildagliptin                                                    1
> 
> ### add means and sampling variances of the means to the dataset
> dat <- escalc(measure="MN", mi=mi, sdi=sdi, ni=ni, data=dat)
> 
> ### turn treatment variable into factor and set reference level
> dat$treatment <- relevel(factor(dat$treatment), ref="placebo")
> 
> ### add a space before each level (this makes the output a bit more legible)
> levels(dat$treatment) <- paste0(" ", levels(dat$treatment))
> 
> ### network meta-analysis using an arm-based fixed-effects model with fixed study effects
> res.fe <- rma.mv(yi, vi, mods = ~ study + treatment - 1, data=dat, slab=paste0(study, treatment))
> res.fe

Multivariate Meta-Analysis Model (k = 53; method: REML)

Variance Components: none

Test for Residual Heterogeneity: 
QE(df = 18) = 96.9841, p-val < .0001

Test of Moderators (coefficient(s) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35): 
QM(df = 35) = 42156.8401, p-val < .0001

Model Results:

                            estimate      se      zval    pval    ci.lb
studyAlex (1998)              1.0917  0.0866   12.6029  <.0001   0.9219
studyBaksi (2004)             0.0560  0.0548    1.0230  0.3063  -0.0513
studyCosta (1997)            -0.2775  0.1047   -2.6496  0.0081  -0.4827
studyDavidson (2007)          0.0709  0.0756    0.9377  0.3484  -0.0773
studyDe Fronzo (1995)        -0.1932  0.0767   -2.5176  0.0118  -0.3436
studyDerosa (2004)            7.8814  0.1041   75.7432  <.0001   7.6774
studyGarber (2008)            0.0700  0.0900    0.7778  0.4367  -0.1064
studyGonzalez-Ortiz (2004)   -0.5693  0.2189   -2.6004  0.0093  -0.9984
studyHanefeld (2004)          8.6201  0.0724  119.1426  <.0001   8.4783
studyHermansen (2007)         0.2700  0.0913    2.9573  0.0031   0.0911
studyJohnston (1994)          0.4319  0.1117    3.8667  0.0001   0.2130
studyJohnston (1998a)         0.6071  0.1353    4.4877  <.0001   0.3420
studyJohnston (1998b)         0.6919  0.1550    4.4642  <.0001   0.3881
studyKerenyi (2004)           0.0642  0.0584    1.1008  0.2710  -0.0501
studyKim (2007)               0.0512  0.1235    0.4147  0.6783  -0.1908
studyKipnes (2001)            0.0158  0.0667    0.2375  0.8123  -0.1149
studyLewin (2007)             0.2892  0.0618    4.6804  <.0001   0.1681
studyMoulin (2006)            0.1220  0.1051    1.1609  0.2457  -0.0840
studyOyama (2008)             0.1352  0.1100    1.2290  0.2191  -0.0804
studyRosenstock (2008)       -0.0241  0.1156   -0.2082  0.8351  -0.2507
studyStucci (1996)            8.6013  0.1849   46.5307  <.0001   8.2390
studyVongthavaravat (2002)    0.4165  0.0954    4.3644  <.0001   0.2295
studyWillms (1999)           -1.3878  0.1402   -9.9014  <.0001  -1.6625
studyWolffenbuttel (1999)     0.2502  0.0617    4.0542  <.0001   0.1292
studyYang (2003)              0.1396  0.1196    1.1680  0.2428  -0.0947
studyZhu (2003)              -0.5819  0.0844   -6.8947  <.0001  -0.7473
treatment acarbose           -0.8273  0.1085   -7.6252  <.0001  -1.0400
treatment benfluorex         -0.9051  0.1271   -7.1211  <.0001  -1.1543
treatment metformin          -1.1140  0.0596  -18.6892  <.0001  -1.2309
treatment miglitol           -0.9438  0.1269   -7.4375  <.0001  -1.1926
treatment pioglitazone       -1.0663  0.0758  -14.0590  <.0001  -1.2149
treatment rosiglitazone      -1.2019  0.0477  -25.2158  <.0001  -1.2953
treatment sitagliptin        -0.5700  0.1291   -4.4145  <.0001  -0.8231
treatment sulfonylurea       -0.4394  0.0915   -4.8041  <.0001  -0.6187
treatment vildagliptin       -0.7000  0.1273   -5.4998  <.0001  -0.9495
                              ci.ub     
studyAlex (1998)             1.2615  ***
studyBaksi (2004)            0.1633     
studyCosta (1997)           -0.0722   **
studyDavidson (2007)         0.2191     
studyDe Fronzo (1995)       -0.0428    *
studyDerosa (2004)           8.0853  ***
studyGarber (2008)           0.2464     
studyGonzalez-Ortiz (2004)  -0.1402   **
studyHanefeld (2004)         8.7619  ***
studyHermansen (2007)        0.4489   **
studyJohnston (1994)         0.6509  ***
studyJohnston (1998a)        0.8723  ***
studyJohnston (1998b)        0.9957  ***
studyKerenyi (2004)          0.1786     
studyKim (2007)              0.2933     
studyKipnes (2001)           0.1466     
studyLewin (2007)            0.4103  ***
studyMoulin (2006)           0.3280     
studyOyama (2008)            0.3508     
studyRosenstock (2008)       0.2025     
studyStucci (1996)           8.9636  ***
studyVongthavaravat (2002)   0.6035  ***
studyWillms (1999)          -1.1131  ***
studyWolffenbuttel (1999)    0.3711  ***
studyYang (2003)             0.3740     
studyZhu (2003)             -0.4165  ***
treatment acarbose          -0.6147  ***
treatment benfluorex        -0.6560  ***
treatment metformin         -0.9972  ***
treatment miglitol          -0.6951  ***
treatment pioglitazone      -0.9176  ***
treatment rosiglitazone     -1.1084  ***
treatment sitagliptin       -0.3169  ***
treatment sulfonylurea      -0.2601  ***
treatment vildagliptin      -0.4505  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### test if treatment factor as a whole is significant
> anova(res.fe, btt=(res.fe$p-8):res.fe$p)

Test of Moderators (coefficient(s) 27,28,29,30,31,32,33,34,35): 
QM(df = 9) = 1060.3371, p-val < .0001

> 
> ### forest plot of the contrast estimates (treatments versus placebos)
> dev.new(width=7, height=5)
dev.new(): using pdf(file="Rplots1.pdf")
> forest(tail(coef(res.fe), 9), tail(diag(vcov(res.fe)), 9), slab=levels(dat$treatment)[-1],
+        xlim=c(-2.5, 2.0), alim=c(-1.5, 0.5), psize=1, xlab="Estimate")
> text(-2.5, 11, "Treatment", pos=4, font=2)
> text( 2.0, 11, "Estimate [95% CI]", pos=2, font=2)
> 
> ### weight matrix for the estimation of the fixed effects (leaving out study effects)
> w <- t(tail(vcov(res.fe) %*% t(model.matrix(res.fe)) %*% weights(res.fe, type="matrix"), 9))
> rownames(w) <- res.fe$slab
> 
> ### create shade plot for the diabetes network with placebo as the reference treatment
> ### negative values in blue shades, positive values in red shades
> dev.new()
dev.new(): using pdf(file="Rplots2.pdf")
> cols <- colorRampPalette(c("blue", "gray95", "red"))(9)
> heatmap(w, Rowv=NA, Colv=NA, scale="none", margins=c(6,11), col=cols,
+         cexRow=.7, cexCol=1, labCol=levels(dat$treatment)[-1])
> 
> ### network meta-analysis using an arm-based random-effects model with fixed study effects
> ### by setting rho=1/2, tau^2 reflects the amount of heterogeneity for all treatment comparisons
> res.re <- rma.mv(yi, vi, mods = ~ study + treatment - 1, random = ~ treatment | study, rho=1/2,
+                  data=dat, slab=paste0(study, treatment))
> 
> ### test if treatment factor as a whole is significant
> anova(res.re, btt=(res.re$p-8):res.re$p)

Test of Moderators (coefficient(s) 27,28,29,30,31,32,33,34,35): 
QM(df = 9) = 167.9616, p-val < .0001

> 
> ### forest plot of the contrast estimates (treatments versus placebos)
> forest(tail(coef(res.re), 9), tail(diag(vcov(res.re)), 9), slab=levels(dat$treatment)[-1],
+        xlim=c(-2.5, 2.0), alim=c(-1.5, 0.5), psize=1, xlab="Estimate")
> text(-2.5, 11, "Treatment", pos=4, font=2)
> text( 2.0, 11, "Estimate [95% CI]", pos=2, font=2)
> 
> ### compute contribution of each study to the overall Q-test value
> qi <- sort(by((resid(res.fe) / sqrt(dat$vi))^2, dat$study, sum))
> 
> ### check that the values add up
> sum(qi)
[1] 96.98407
> res.fe$QE
[1] 96.98407
> 
> ### plot the values
> s <- length(qi)
> par(mar=c(5,10,2,1))
> plot(qi, 1:s, pch=19, xaxt="n", yaxt="n", xlim=c(0,40), xlab="Chi-Square Contribution", ylab="")
> axis(side=1)
> axis(side=2, at=1:s, labels=names(qi), las=1, tcl=0)
> segments(rep(0,s), 1:s, qi, 1:s)
> 
> ### restructure dataset to a contrast-based format
> dat <- dat.senn2013[,c(1,4,3,2,5,6)]
> dat.c <- lapply(split(dat, dat$study),
+                 function(x) cbind(x[rep(1,nrow(x)-1),], x[-1,c(3:6)]))
> dat.c <- do.call(rbind, dat.c)
> names(dat.c)[3:10] <- c("trt1", "n1i", "m1i", "sd1i", "trt2", "n2i", "m2i", "sd2i")
> rownames(dat.c) <- 1:nrow(dat.c)
> dat.c$id <- 1:nrow(dat.c)
> dat.c
                   study comment          trt1 n1i   m1i  sd1i          trt2
1            Alex (1998)  change     metformin 291  0.13 1.428  sulfonylurea
2           Baksi (2004)  change rosiglitazone 218 -1.20 1.112       placebo
3           Costa (1997)  change      acarbose  36 -1.10 0.360       placebo
4        Davidson (2007)  change rosiglitazone 117 -1.20 1.097       placebo
5       De Fronzo (1995)  change     metformin 213 -1.70 1.459       placebo
6          Derosa (2004)     raw  pioglitazone  45  6.80 0.800 rosiglitazone
7          Garber (2008)  change  vildagliptin 132 -0.63 1.034       placebo
8  Gonzalez-Ortiz (2004)  change     metformin  34 -1.30 1.861       placebo
9        Hanefeld (2004)     raw  pioglitazone 319  7.61 1.072     metformin
10      Hermansen (2007)  change   sitagliptin 106 -0.30 0.940       placebo
11       Johnston (1994)  change      miglitol  68 -0.41 1.072       placebo
12      Johnston (1998a)  change      miglitol  91 -0.43 0.954       placebo
13      Johnston (1998b)  change      miglitol  49 -0.12 1.400       placebo
14        Kerenyi (2004)  change rosiglitazone 160 -0.91 0.990       placebo
15            Kim (2007)  change rosiglitazone  57 -1.10 1.341     metformin
16         Kipnes (2001)  change  pioglitazone 182 -1.20 1.369       placebo
17          Lewin (2007)  change     metformin 431 -0.74 1.106       placebo
18         Moulin (2006)  change    benfluorex 161 -0.82 1.028       placebo
19          Oyama (2008)  change      acarbose  41 -0.70 0.800  sulfonylurea
20     Rosenstock (2008)  change rosiglitazone  59 -1.17 1.229       placebo
21         Stucci (1996)     raw    benfluorex  28  8.03 1.290       placebo
22 Vongthavaravat (2002)  change rosiglitazone 164 -1.10 1.559  sulfonylurea
23         Willms (1999)  change     metformin  29 -2.50 0.862      acarbose
24         Willms (1999)  change     metformin  29 -2.50 0.862       placebo
25  Wolffenbuttel (1999)  change rosiglitazone 183 -0.90 1.100       placebo
26           Yang (2003)  change rosiglitazone 102 -1.09 1.650     metformin
27            Zhu (2003)  change rosiglitazone 210 -1.90 1.470       placebo
   n2i   m2i  sd2i id
1  300  0.50 1.450  1
2  233  0.10 1.036  2
3   29 -0.30 0.700  3
4  116  0.14 1.093  4
5  209  0.20 1.446  5
6   42  6.70 0.900  6
7  144  0.07 1.080  7
8   37 -0.90 1.803  8
9  320  7.45 1.073  9
10 106  0.27 0.940 10
11  63  0.33 1.032 11
12  43  0.98 1.311 12
13  34  0.56 1.166 13
14 154 -0.14 0.920 14
15  56 -1.10 1.139 15
16 181  0.10 1.024 16
17 144  0.08 1.004 17
18 156  0.19 1.374 18
19  43 -0.30 0.600 19
20  57 -0.08 1.208 20
21  30  8.26 1.350 21
22 170  0.10 0.992 22
23  31 -2.30 1.782 23
24  29 -1.30 1.831 24
25 192  0.20 1.110 25
26  96 -0.95 1.500 26
27 105 -0.40 1.300 27
> 
> ### calculate mean difference and corresponding sampling variance for each treatment comparison
> dat.c <- escalc(measure="MD", m1i=m1i, sd1i=sd1i, n1i=n1i, m2i=m2i, sd2i=sd2i, n2i=n2i, data=dat.c)
> dat.c
                   study comment          trt1 n1i   m1i  sd1i          trt2
1            Alex (1998)  change     metformin 291  0.13 1.428  sulfonylurea
2           Baksi (2004)  change rosiglitazone 218 -1.20 1.112       placebo
3           Costa (1997)  change      acarbose  36 -1.10 0.360       placebo
4        Davidson (2007)  change rosiglitazone 117 -1.20 1.097       placebo
5       De Fronzo (1995)  change     metformin 213 -1.70 1.459       placebo
6          Derosa (2004)     raw  pioglitazone  45  6.80 0.800 rosiglitazone
7          Garber (2008)  change  vildagliptin 132 -0.63 1.034       placebo
8  Gonzalez-Ortiz (2004)  change     metformin  34 -1.30 1.861       placebo
9        Hanefeld (2004)     raw  pioglitazone 319  7.61 1.072     metformin
10      Hermansen (2007)  change   sitagliptin 106 -0.30 0.940       placebo
11       Johnston (1994)  change      miglitol  68 -0.41 1.072       placebo
12      Johnston (1998a)  change      miglitol  91 -0.43 0.954       placebo
13      Johnston (1998b)  change      miglitol  49 -0.12 1.400       placebo
14        Kerenyi (2004)  change rosiglitazone 160 -0.91 0.990       placebo
15            Kim (2007)  change rosiglitazone  57 -1.10 1.341     metformin
16         Kipnes (2001)  change  pioglitazone 182 -1.20 1.369       placebo
17          Lewin (2007)  change     metformin 431 -0.74 1.106       placebo
18         Moulin (2006)  change    benfluorex 161 -0.82 1.028       placebo
19          Oyama (2008)  change      acarbose  41 -0.70 0.800  sulfonylurea
20     Rosenstock (2008)  change rosiglitazone  59 -1.17 1.229       placebo
21         Stucci (1996)     raw    benfluorex  28  8.03 1.290       placebo
22 Vongthavaravat (2002)  change rosiglitazone 164 -1.10 1.559  sulfonylurea
23         Willms (1999)  change     metformin  29 -2.50 0.862      acarbose
24         Willms (1999)  change     metformin  29 -2.50 0.862       placebo
25  Wolffenbuttel (1999)  change rosiglitazone 183 -0.90 1.100       placebo
26           Yang (2003)  change rosiglitazone 102 -1.09 1.650     metformin
27            Zhu (2003)  change rosiglitazone 210 -1.90 1.470       placebo
   n2i   m2i  sd2i id      yi     vi
1  300  0.50 1.450  1 -0.3700 0.0140
2  233  0.10 1.036  2 -1.3000 0.0103
3   29 -0.30 0.700  3 -0.8000 0.0205
4  116  0.14 1.093  4 -1.3400 0.0206
5  209  0.20 1.446  5 -1.9000 0.0200
6   42  6.70 0.900  6  0.1000 0.0335
7  144  0.07 1.080  7 -0.7000 0.0162
8   37 -0.90 1.803  8 -0.4000 0.1897
9  320  7.45 1.073  9  0.1600 0.0072
10 106  0.27 0.940 10 -0.5700 0.0167
11  63  0.33 1.032 11 -0.7400 0.0338
12  43  0.98 1.311 12 -1.4100 0.0500
13  34  0.56 1.166 13 -0.6800 0.0800
14 154 -0.14 0.920 14 -0.7700 0.0116
15  56 -1.10 1.139 15  0.0000 0.0547
16 181  0.10 1.024 16 -1.3000 0.0161
17 144  0.08 1.004 17 -0.8200 0.0098
18 156  0.19 1.374 18 -1.0100 0.0187
19  43 -0.30 0.600 19 -0.4000 0.0240
20  57 -0.08 1.208 20 -1.0900 0.0512
21  30  8.26 1.350 21 -0.2300 0.1202
22 170  0.10 0.992 22 -1.2000 0.0206
23  31 -2.30 1.782 23 -0.2000 0.1281
24  29 -1.30 1.831 24 -1.2000 0.1412
25 192  0.20 1.110 25 -1.1000 0.0130
26  96 -0.95 1.500 26 -0.1400 0.0501
27 105 -0.40 1.300 27 -1.5000 0.0264
> 
> ### calculate the variance-covariance matrix of the mean differences for the multitreatment studies
> calc.v <- function(x) {
+    v <- matrix(x$sd1i[1]^2 / x$n1i[1], nrow=nrow(x), ncol=nrow(x))
+    diag(v) <- x$vi
+    v
+ }
> V <- bldiag(lapply(split(dat.c, dat.c$study), calc.v))
> 
> ### convert trt1 and trt2 variables to factors and set levels
> lvls <- levels(factor(dat$treatment))
> dat.c$trt1 <- factor(dat.c$trt1, levels=lvls)
> dat.c$trt2 <- factor(dat.c$trt2, levels=lvls)
> 
> ### create variables to indicate the contrast examined
> dat.c <- cbind(dat.c, model.matrix(~ dat.c$trt1 - 1) - model.matrix(~ dat.c$trt2 - 1))
> names(dat.c)[(ncol(dat.c)-9):ncol(dat.c)] <- lvls
> 
> ### network meta-analysis using a contrast-based random-effects model
> ### by setting rho=1/2, tau^2 reflects the amount of heterogeneity for all treatment comparisons
> ### the treatment left out (placebo) becomes the reference level for the treatment comparisons
> res.cb <- rma.mv(yi, V, mods = ~ acarbose + benfluorex + metformin + miglitol + pioglitazone +
+                                  rosiglitazone + sitagliptin + sulfonylurea + vildagliptin - 1,
+                  random = ~ factor(id) | study, rho=1/2, data=dat.c)
> res.cb

Multivariate Meta-Analysis Model (k = 27; method: REML)

Variance Components: 

outer factor: study      (nlvls = 26)
inner factor: factor(id) (nlvls = 27)

            estim    sqrt  fixed
tau^2      0.0999  0.3161     no
rho        0.5000            yes

Test for Residual Heterogeneity: 
QE(df = 18) = 96.9841, p-val < .0001

Test of Moderators (coefficient(s) 1,2,3,4,5,6,7,8,9): 
QM(df = 9) = 167.9616, p-val < .0001

Model Results:

               estimate      se     zval    pval    ci.lb    ci.ub     
acarbose        -0.8414  0.2384  -3.5288  0.0004  -1.3087  -0.3741  ***
benfluorex      -0.7369  0.2776  -2.6545  0.0079  -1.2810  -0.1928   **
metformin       -1.1284  0.1494  -7.5528  <.0001  -1.4212  -0.8356  ***
miglitol        -0.9499  0.2253  -4.2170  <.0001  -1.3914  -0.5084  ***
pioglitazone    -1.1294  0.2119  -5.3295  <.0001  -1.5448  -0.7141  ***
rosiglitazone   -1.2337  0.1235  -9.9933  <.0001  -1.4757  -0.9918  ***
sitagliptin     -0.5700  0.3414  -1.6694  0.0950  -1.2392   0.0992    .
sulfonylurea    -0.4175  0.2326  -1.7950  0.0727  -0.8734   0.0384    .
vildagliptin    -0.7000  0.3408  -2.0543  0.0400  -1.3679  -0.0321    *

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.senn2013", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:igraph’, ‘package:plyr’

> nameEx("dat.yusuf1985")
> ### * dat.yusuf1985
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dat.yusuf1985
> ### Title: Studies of Beta Blockers During and After Myocardial Infarction
> ### Aliases: dat.yusuf1985
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ### load data
> dat <- get(data(dat.yusuf1985))
> 
> ### to select a table for the analysis
> tab <- "6" ### either: 6, 9, 10, 11, 12a, 12b
> 
> ### to double-check total counts as reported in article
> apply(dat[dat$table==tab,4:7], 2, sum, na.rm=TRUE)
  ai  n1i   ci  n2i 
 165 1900  165 1711 
> 
> ### meta-analysis using Peto's one-step method
> res <- rma.peto(ai=ai, n1i=n1i, ci=ci, n2i=n2i, data=dat, subset=(table==tab))
Warning in rma.peto(ai = ai, n1i = n1i, ci = ci, n2i = n2i, data = dat,  :
  Tables with NAs omitted from model fitting.
Warning in rma.peto(ai = ai, n1i = n1i, ci = ci, n2i = n2i, data = dat,  :
  Some yi/vi values are NA.
> res

Fixed-Effects Model (k = 21)

Test for Heterogeneity: 
Q(df = 17) = 10.8275, p-val = 0.8654

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
 -0.0692   0.1194  -0.5794   0.5623  -0.3031   0.1648 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
  0.9332   0.7385   1.1792 

> predict(res, transf=exp, digits=2)
 pred ci.lb ci.ub
 0.93  0.74  1.18
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dat.yusuf1985", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("escalc")
> ### * escalc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: escalc
> ### Title: Calculate Effect Sizes and Outcome Measures
> ### Aliases: escalc escalc.default escalc.formula [.escalc [.summary.escalc
> ###   cbind.escalc cbind.summary.escalc
> ### Keywords: datagen
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> dat
   trial               author year tpos  tneg cpos  cneg ablat      alloc
1      1              Aronson 1948    4   119   11   128    44     random
2      2     Ferguson & Simes 1949    6   300   29   274    55     random
3      3      Rosenthal et al 1960    3   228   11   209    42     random
4      4    Hart & Sutherland 1977   62 13536  248 12619    52     random
5      5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate
6      6      Stein & Aronson 1953  180  1361  372  1079    44  alternate
7      7     Vandiviere et al 1973    8  2537   10   619    19     random
8      8           TPT Madras 1980  505 87886  499 87892    13     random
9      9     Coetzee & Berjak 1968   29  7470   45  7232    27     random
10    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic
11    11       Comstock et al 1974  186 50448  141 27197    18 systematic
12    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic
13    13       Comstock et al 1976   27 16886   29 17825    33 systematic
        yi     vi
1  -0.8893 0.3256
2  -1.5854 0.1946
3  -1.3481 0.4154
4  -1.4416 0.0200
5  -0.2175 0.0512
6  -0.7861 0.0069
7  -1.6209 0.2230
8   0.0120 0.0040
9  -0.4694 0.0564
10 -1.3713 0.0730
11 -0.3394 0.0124
12  0.4459 0.5325
13 -0.0173 0.0714
> 
> ### suppose that for a particular study, yi and vi are known (i.e., have
> ### already been calculated) but the 2x2 table counts are not known; with
> ### replace=FALSE, the yi and vi values for that study are not replaced
> dat[1:12,10:11] <- NA
> dat[13,4:7] <- NA
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat, replace=FALSE)
> dat
   trial               author year tpos  tneg cpos  cneg ablat      alloc
1      1              Aronson 1948    4   119   11   128    44     random
2      2     Ferguson & Simes 1949    6   300   29   274    55     random
3      3      Rosenthal et al 1960    3   228   11   209    42     random
4      4    Hart & Sutherland 1977   62 13536  248 12619    52     random
5      5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate
6      6      Stein & Aronson 1953  180  1361  372  1079    44  alternate
7      7     Vandiviere et al 1973    8  2537   10   619    19     random
8      8           TPT Madras 1980  505 87886  499 87892    13     random
9      9     Coetzee & Berjak 1968   29  7470   45  7232    27     random
10    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic
11    11       Comstock et al 1974  186 50448  141 27197    18 systematic
12    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic
13    13       Comstock et al 1976   NA    NA   NA    NA    33 systematic
        yi     vi
1  -0.8893 0.3256
2  -1.5854 0.1946
3  -1.3481 0.4154
4  -1.4416 0.0200
5  -0.2175 0.0512
6  -0.7861 0.0069
7  -1.6209 0.2230
8   0.0120 0.0040
9  -0.4694 0.0564
10 -1.3713 0.0730
11 -0.3394 0.0124
12  0.4459 0.5325
13 -0.0173 0.0714
> 
> ### using formula interface (first rearrange data into long format)
> dat.long <- to.long(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+                     data=dat.bcg, append=FALSE, vlong=TRUE)
> escalc(measure="RR", outcome ~ group | study, weights=freq, data=dat.long)
        yi     vi
1  -0.8893 0.3256
2  -1.5854 0.1946
3  -1.3481 0.4154
4  -1.4416 0.0200
5  -0.2175 0.0512
6  -0.7861 0.0069
7  -1.6209 0.2230
8   0.0120 0.0040
9  -0.4694 0.0564
10 -1.3713 0.0730
11 -0.3394 0.0124
12  0.4459 0.5325
13 -0.0173 0.0714
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("escalc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fitstats")
> ### * fitstats
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fitstats
> ### Title: Fit Statistics and Information Criteria for 'rma' Objects
> ### Aliases: fitstats fitstats.rma logLik.rma deviance.rma AIC.rma BIC.rma
> ###   nobs.rma df.residual.rma
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res1 <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+             data=dat.bcg, method="ML")
> 
> ### mixed-effects model with two moderators (latitude and publication year)
> res2 <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, mods = ~ ablat + year,
+             data=dat.bcg, method="ML")
> 
> fitstats(res1)
                 ML
logLik:   -12.66508
deviance:  37.11602
AIC:       29.33015
BIC:       30.46005
AICc:      30.53015
> fitstats(res2)
                 ML
logLik:   -7.646115
deviance: 27.078099
AIC:      23.292231
BIC:      25.552028
AICc:     28.292231
> 
> logLik(res1)
'log Lik.' -12.66508 (df=2)
> logLik(res2)
'log Lik.' -7.646115 (df=4)
> 
> deviance(res1)
[1] 37.11602
> deviance(res2)
[1] 27.0781
> 
> AIC(res1)
[1] 29.33015
> AIC(res2)
[1] 23.29223
> 
> AIC(res1, correct=TRUE)
[1] 30.53015
> AIC(res2, correct=TRUE)
[1] 28.29223
> 
> BIC(res1)
[1] 30.46005
> BIC(res2)
[1] 25.55203
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fitstats", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fitted.rma")
> ### * fitted.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fitted.rma
> ### Title: Fitted Values for 'rma' Objects
> ### Aliases: fitted.rma
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a mixed-effects model
> ### with two moderators (absolute latitude and publication year)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat + year, data=dat.bcg)
> fitted(res)
         1          2          3          4          5          6          7 
-1.0620809 -1.3682974 -0.9831677 -1.2308520 -0.1460425 -1.0525432 -0.3141101 
         8          9         10         11         12         13 
-0.1326896 -0.5477381 -0.9812602 -0.2841913 -0.7138982 -0.7005453 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fitted.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("forest.cumul.rma")
> ### * forest.cumul.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: forest.cumul.rma
> ### Title: Forest Plots (Method for 'cumul.rma' Objects)
> ### Aliases: forest.cumul.rma
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model
> res <- rma(yi, vi, data=dat, slab=paste(author, year, sep=", "))
> 
> x <- cumul(res, order=order(dat$year))
> forest(x, cex=.8)
> forest(x, alim=c(-2,1), cex=.8)
> 
> ### meta-analysis of the (log) relative risks using the Mantel-Haenszel method
> res <- rma.mh(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg,
+               slab=paste(author, year, sep=", "))
> x <- cumul(res, order=order(dat$year))
> forest(x, alim=c(-2,1), cex=.8)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("forest.cumul.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("forest.default")
> ### * forest.default
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: forest.default
> ### Title: Forest Plots (Default Method)
> ### Aliases: forest.default
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### default forest plot of the observed log relative risks
> forest(dat$yi, dat$vi)
> 
> ### forest plot of the observed relative risks
> forest(dat$yi, dat$vi, slab=paste(dat$author, dat$year, sep=", "), transf=exp,
+        alim=c(0,2), steps=5, xlim=c(-2,3.5), refline=1, cex=.9)
> 
> ### forest plot of the observed relative risks
> forest(dat$yi, dat$vi, slab=paste(dat$author, dat$year, sep=", "), atransf=exp,
+        at=log(c(.05,.25,1,4,20)), xlim=c(-10,8), cex=.9)
> 
> ### see also examples for the forest.rma function
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("forest.default", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("forest.rma")
> ### * forest.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: forest.rma
> ### Title: Forest Plots (Method for 'rma' Objects)
> ### Aliases: forest.rma
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg,
+            slab=paste(author, year, sep=", "))
> 
> ### default forest plot of the log relative risks and summary estimate
> forest(res)
> 
> ### summary estimate in row -1; studies in rows k=13 through 1; horizontal
> ### lines in rows 0 and k+1; and two extra lines of space at the top for
> ### headings or other annotations
> op <- par(xpd=TRUE)
> text(x=-8.5, y=-1:16, -1:16, pos=4, cex=.5)
> par(op)
> 
> ### can also inspect defaults chosen
> defaults <- forest(res)
> defaults
$xlim
[1] -8.00  7.26

$alim
[1] -3  2

$at
[1] -3 -2 -1  0  1  2

$ylim
[1] -1.5 16.0

$rows
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13

$cex
[1] 1

$cex.lab
[1] 1

$cex.axis
[1] 1

> 
> ### several forest plots illustrating the use of various arguments
> forest(res, cex=.8)
> forest(res, cex=.8, addcred=TRUE)
> forest(res, cex=.8, alim=c(-3,3))
> forest(res, cex=.8, order="prec", alim=c(-3,3))
> forest(res, cex=.8, order=order(dat.bcg$ablat), addcred=TRUE)
> 
> ### adjust xlim values to see how that changes the plot
> forest(res)
> par("usr")[1:2] ### this shows what xlim values were chosen by default
[1] -8.00  7.26
> forest(res, xlim=c(-16,14))
> forest(res, xlim=c(-18,10))
> forest(res, xlim=c(-10,10))
> 
> ### illustrate transf argument
> forest(res, transf=exp, at=c(0,1,2,4,6), xlim=c(-8,12), cex=.8, refline=1)
> 
> ### illustrate atransf argument
> forest(res, atransf=exp, at=log(c(.05,.25,1,4,20)), xlim=c(-8,7), cex=.8)
> 
> ### showweights argument
> forest(res, atransf=exp, at=log(c(.05,.25,1,4,20)), xlim=c(-8,8),
+        order="prec", showweights=TRUE, cex=.8)
> 
> ### forest plot with extra annotations (may need to stretch plotting device)
> forest(res, atransf=exp, at=log(c(.05, .25, 1, 4)), xlim=c(-16,6),
+        ilab=cbind(dat.bcg$tpos, dat.bcg$tneg, dat.bcg$cpos, dat.bcg$cneg),
+        ilab.xpos=c(-9.5,-8,-6,-4.5), cex=.75)
> op <- par(cex=.75, font=2)
> text(c(-9.5,-8,-6,-4.5), 15, c("TB+", "TB-", "TB+", "TB-"))
> text(c(-8.75,-5.25),     16, c("Vaccinated", "Control"))
> text(-16,                15, "Author(s) and Year",     pos=4)
> text(6,                  15, "Relative Risk [95% CI]", pos=2)
> par(op)
> 
> ### mixed-effects model with absolute latitude in the model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, mods = ~ ablat,
+            data=dat.bcg, slab=paste(author, year, sep=", "))
> 
> ### forest plot with observed and fitted values
> forest(res, xlim=c(-9,5), order="fit", cex=.8, ilab=dat.bcg$ablat,
+        ilab.xpos=-3.5, atransf=exp, at=log(c(.05,.25,1,4)))
> op <- par(font=2)
> text(-9,   15, "Author(s) and Year",    pos=4, cex=.8)
> text( 5,   15, "Observed RR [95% CI]",  pos=2, cex=.8)
> text(-3.5, 15, "Latitude",                     cex=.8)
> par(op)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg,
+            slab=paste(author, year, sep=", "))
> 
> ### for more complicated plots, the ylim and rows arguments may be useful
> forest(res)
> forest(res, ylim=c(-1.5, 16)) ### the default
> forest(res, ylim=c(-1.5, 20)) ### extra space in plot
> forest(res, ylim=c(-1.5, 20), rows=c(17:15, 12:6, 3:1)) ### set positions
> 
> ### forest plot with subgrouping of studies (may need to stretch plotting device)
> forest(res, xlim=c(-16, 6), at=log(c(.05, .25, 1, 4)), atransf=exp,
+        ilab=cbind(dat.bcg$tpos, dat.bcg$tneg, dat.bcg$cpos, dat.bcg$cneg),
+        ilab.xpos=c(-9.5,-8,-6,-4.5), cex=.75, ylim=c(-1, 21),
+        order=order(dat.bcg$alloc), rows=c(1:2,5:11,14:17))
> op <- par(cex=.75, font=4)
> text(-16, c(18,12,3), c("Systematic Allocation", "Random Allocation",
+                         "Alternate Allocation"), pos=4)
> par(cex=.75, font=2)
> text(c(-9.5,-8,-6,-4.5), 20, c("TB+", "TB-", "TB+", "TB-"))
> text(c(-8.75,-5.25),     21, c("Vaccinated", "Control"))
> text(-16,                20, "Author(s) and Year",     pos=4)
> text(6,                  20, "Relative Risk [95% CI]", pos=2)
> par(op)
> 
> ### see also the addpoly.rma function for an example where summaries
> ### for the three subgroups are added to such a forest plot
> 
> ### illustrate use of clim argument with a meta-analysis of raw correlation
> ### coefficients (data from Pritz, 1997); without clim=c(0,1), some of the
> ### CIs would have upper bounds larger than 1
> dat <- escalc(measure="PR", xi=xi, ni=ni, data=dat.pritz1997)
> res <- rma(yi, vi, data=dat, slab=paste0(study, ") ", authors))
> forest(res, xlim=c(-1,2), alim=c(0,1), psize=1, refline=coef(res), clim=c(0,1))
> text(-1, 16, "Author(s)", pos=4)
> text( 2, 16, "Proportion [95% CI]", pos=2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("forest.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("fsn")
> ### * fsn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fsn
> ### Title: Fail-Safe N Analysis (File Drawer Analysis)
> ### Aliases: fsn
> ### Keywords: htest
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> fsn(yi, vi, data=dat)

Fail-safe N Calculation Using the Rosenthal Approach 

Observed Significance Level: <.0001 
Target Significance Level:   0.05 

Fail-safe N: 598 

> fsn(yi, vi, data=dat, type="Orwin")

Fail-safe N Calculation Using the Orwin Approach 

Average Effect Size: -0.7407 
Target Effect Size:  -0.3703 

Fail-safe N: 14 

> fsn(yi, vi, data=dat, type="Rosenberg")

Fail-safe N Calculation Using the Rosenberg Approach 

Average Effect Size:         -0.4303 
Observed Significance Level: <.0001 
Target Significance Level:   0.05 

Fail-safe N: 370 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fsn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("funnel")
> ### * funnel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: funnel
> ### Title: Funnel Plots for 'rma' Objects
> ### Aliases: funnel funnel.rma
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### standard funnel plot
> funnel(res)
> 
> ### funnel plot with relative risk values on the x-axis
> funnel(res, atransf=exp, at=log(c(.12, .25, .5, 1, 2)))
> 
> ### contour-enhanced funnel plot centered at 0 (see Peters et al., 2008)
> funnel(res, level=c(90, 95, 99), shade=c("white", "gray", "darkgray"),
+        refline=0, atransf=exp, at=log(c(.10, .25, .5, 1, 2, 4, 10)))
> 
> ### mixed-effects model with absolute latitude in the model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, mods = ~ ablat,
+            data=dat.bcg)
> 
> ### funnel plot of the residuals
> funnel(res)
> 
> ### simulate a large meta-analytic dataset (correlations with rho = 0.2)
> ### with no heterogeneity or publication bias; then try out different
> ### versions of the funnel plot
> 
> gencor <- function(rhoi, ni) {
+    x1 <- rnorm(ni, mean=0, sd=1)
+    x2 <- rnorm(ni, mean=0, sd=1)
+    x3 <- rhoi*x1 + sqrt(1-rhoi^2)*x2
+    cor(x1, x3)
+ }
> 
> k  <- 200                               ### number of studies to simulate
> ni <- round(rchisq(k, df=2) * 20 + 20)  ### simulate sample sizes (skewed distribution)
> ri <- mapply(gencor, rep(0.2,k), ni)    ### simulate correlations
> 
> res <- rma(measure="ZCOR", ri=ri, ni=ni, method="FE") ### use r-to-z transformed correlations
> 
> funnel(res, yaxis="sei")
> funnel(res, yaxis="vi")
> funnel(res, yaxis="seinv")
> funnel(res, yaxis="vinv")
> funnel(res, yaxis="ni")
> funnel(res, yaxis="ninv")
> funnel(res, yaxis="sqrtni")
> funnel(res, yaxis="sqrtninv")
> funnel(res, yaxis="lni")
> funnel(res, yaxis="wi")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("funnel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hc")
> ### * hc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hc
> ### Title: Meta-Analysis based on the Method by Henmi and Copas (2010)
> ### Aliases: hc hc.rma.uni
> ### Keywords: htest
> 
> ### ** Examples
> 
> ### load data from Lee & Done (2004)
> data(dat.lee2004)
> 
> ### meta-analysis based on log odds ratios
> res <- rma(measure="OR", ai=ai, n1i=n1i, ci=ci, n2i=n2i, data=dat.lee2004)
> res

Random-Effects Model (k = 16; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.3526 (SE = 0.2254)
tau (square root of estimated tau^2 value):      0.5938
I^2 (total heterogeneity / total variability):   62.35%
H^2 (total variability / sampling variability):  2.66

Test for Heterogeneity: 
Q(df = 15) = 38.4231, p-val = 0.0008

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.6820   0.2013  -3.3877   0.0007  -1.0766  -0.2874      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### funnel plot as in Henmi and Copas (2010)
> funnel(res, yaxis="seinv", refline=0, xlim=c(-3,3), ylim=c(.5,3.5), steps=7, digits=1)
> 
> ### use method by Henmi and Copas (2010) as a sensitivity analysis
> hc(res)
    method   tau2 estimate     se   ci.lb   ci.ub
rma   REML 0.3526  -0.6820 0.2013 -1.0766 -0.2874
hc      DL 0.3325  -0.5145 0.2178 -0.9994 -0.0295
> 
> ### back-transform results to odds ratio scale
> hc(res, transf=exp)
    method   tau2 estimate se  ci.lb  ci.ub
rma   REML 0.3526   0.5056 NA 0.3408 0.7502
hc      DL 0.3325   0.5978 NA 0.3681 0.9709
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("influence.rma.uni")
> ### * influence.rma.uni
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: influence.rma.uni
> ### Title: Outlier and Influential Case Diagnostics for 'rma.uni' Objects
> ### Aliases: influence.rma.uni print.infl.rma.uni cooks.distance.rma.uni
> ###   dfbetas.rma.uni hatvalues.rma.uni
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a mixed-effects model
> ### with two moderators (absolute latitude and publication year)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat + year, data=dat.bcg)
> influence(res)
$inf
   rstudent  dffits cook.d  cov.r tau2.del  QE.del    hat  weight inf
1    0.2978  0.1785 0.0348 1.8003   0.1317 28.3142 0.1725  3.3664    
2   -0.4303 -0.2368 0.0620 1.9207   0.1308 27.5744 0.2367  4.8106    
3   -0.5100 -0.1094 0.0125 1.2348   0.1191 27.7572 0.0487  2.7920    
4   -1.4032 -2.9415 7.3179 3.5225   0.0906 23.1836 0.8082 11.2312   *
5   -0.1490 -0.0263 0.0032 2.6341   0.1497 27.2543 0.2483  9.0681    
6    1.0551  0.8926 0.7205 1.3621   0.0994 21.2875 0.4061 12.4817    
7   -2.5961 -0.6815 0.4173 0.2379   0.0544 19.1240 0.0766  4.4008    
8    0.4793  0.3703 0.1899 2.9984   0.1498 24.1266 0.3627 12.8020    
9    0.2027  0.1305 0.0237 2.2071   0.1501 28.2874 0.1030  8.7848    
10  -0.9872 -0.3870 0.1470 1.0702   0.1072 24.7567 0.1310  7.9919    
11  -0.1197 -0.0030 0.0052 2.8336   0.1583 25.5103 0.2214 11.9238    
12   1.4677  0.2171 0.0469 0.9274   0.1059 26.1197 0.0235  2.2836    
13   2.1302  0.8150 0.4994 0.2178   0.0498 21.4920 0.1612  8.0630    

$dfb
   intrcpt   ablat    year
1   0.1492 -0.0622 -0.1491
2  -0.0949 -0.1001  0.0963
3  -0.0280 -0.0403  0.0283
4   2.2248 -2.5380 -2.2161
5   0.0350  0.0063 -0.0354
6   0.5935 -0.0008 -0.5954
7  -0.2659  0.5368  0.2591
8  -0.0394 -0.2110  0.0431
9   0.0728 -0.0865 -0.0718
10 -0.1188 -0.0973  0.1194
11  0.0631 -0.0343 -0.0631
12 -0.0413  0.0465  0.0419
13 -0.8276  0.6269  0.8279

> plot(influence(res))
> 
> cooks.distance(res)
          1           2           3           4           5           6 
0.034763870 0.061956371 0.012503192 7.317914072 0.003236974 0.720524896 
          7           8           9          10          11          12 
0.417263935 0.189852980 0.023722929 0.146959603 0.005232795 0.046915399 
         13 
0.499370066 
> dfbetas(res)
       intrcpt         ablat        year
1   0.14917967 -0.0622252054 -0.14912286
2  -0.09490912 -0.1001134132  0.09631548
3  -0.02800023 -0.0402975197  0.02831386
4   2.22478959 -2.5380258049 -2.21609317
5   0.03503418  0.0063184438 -0.03539793
6   0.59345585 -0.0008194425 -0.59535883
7  -0.26591994  0.5367554905  0.25909857
8  -0.03940376 -0.2109707986  0.04309572
9   0.07275483 -0.0864500483 -0.07183699
10 -0.11880193 -0.0972914132  0.11940279
11  0.06308093 -0.0342764351 -0.06312338
12 -0.04127415  0.0464523571  0.04192960
13 -0.82760563  0.6269221266  0.82787287
> hatvalues(res)
         1          2          3          4          5          6          7 
0.17250070 0.23668273 0.04870101 0.80821407 0.24826116 0.40606407 0.07657599 
         8          9         10         11         12         13 
0.36274386 0.10304034 0.13102564 0.22140605 0.02353859 0.16124580 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("influence.rma.uni", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("labbe")
> ### * labbe
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: labbe
> ### Title: L'Abbe Plots for 'rma' Objects
> ### Aliases: labbe labbe.rma
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### default plot
> labbe(res)
> 
> ### funnel plot with risk values on the x- and y-axis
> labbe(res, transf=exp)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("labbe", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("leave1out")
> ### * leave1out
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: leave1out
> ### Title: Leave-One-Out Diagnostics for 'rma' Objects
> ### Aliases: leave1out leave1out.rma.uni leave1out.rma.mh
> ###   leave1out.rma.peto
> ### Keywords: methods
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model
> res <- rma(yi, vi, data=dat)
> 
> ### cumulative meta-analysis
> leave1out(res)
   estimate     se    zval   pval   ci.lb   ci.ub        Q     Qp   tau2
1   -0.7071 0.1900 -3.7223 0.0002 -1.0794 -0.3348 151.5826 0.0000 0.3362
2   -0.6540 0.1807 -3.6195 0.0003 -1.0082 -0.2999 145.3176 0.0000 0.2926
3   -0.6856 0.1857 -3.6916 0.0002 -1.0495 -0.3216 150.1970 0.0000 0.3207
4   -0.6284 0.1766 -3.5580 0.0004 -0.9746 -0.2822  96.5626 0.0000 0.2628
5   -0.7642 0.1918 -3.9845 0.0001 -1.1401 -0.3883 151.3200 0.0000 0.3278
6   -0.7109 0.2003 -3.5499 0.0004 -1.1034 -0.3184 128.1867 0.0000 0.3596
7   -0.6552 0.1805 -3.6307 0.0003 -1.0090 -0.3015 145.8296 0.0000 0.2930
8   -0.7948 0.1799 -4.4184 0.0000 -1.1473 -0.4422  67.9858 0.0000 0.2732
9   -0.7412 0.1967 -3.7686 0.0002 -1.1267 -0.3557 152.2051 0.0000 0.3495
10  -0.6530 0.1843 -3.5439 0.0004 -1.0142 -0.2919 139.8271 0.0000 0.2987
11  -0.7579 0.1958 -3.8708 0.0001 -1.1416 -0.3741 151.4655 0.0000 0.3405
12  -0.7598 0.1821 -4.1727 0.0000 -1.1167 -0.4029 150.7868 0.0000 0.3082
13  -0.7775 0.1855 -4.1908 0.0000 -1.1412 -0.4139 149.7884 0.0000 0.3037
        I2      H2
1  93.2259 14.7622
2  92.2540 12.9098
3  92.9354 14.1551
4  90.4125 10.4302
5  92.7634 13.8187
6  90.9118 11.0033
7  92.2777 12.9495
8  87.0314  7.7109
9  93.2133 14.7346
10 92.2322 12.8737
11 91.8110 12.2114
12 92.6782 13.6579
13 92.3444 13.0623
> leave1out(res, transf=exp)
   estimate    zval   pval  ci.lb  ci.ub        Q     Qp   tau2      I2      H2
1    0.4931 -3.7223 0.0002 0.3398 0.7155 151.5826 0.0000 0.3362 93.2259 14.7622
2    0.5199 -3.6195 0.0003 0.3649 0.7409 145.3176 0.0000 0.2926 92.2540 12.9098
3    0.5038 -3.6916 0.0002 0.3501 0.7250 150.1970 0.0000 0.3207 92.9354 14.1551
4    0.5334 -3.5580 0.0004 0.3774 0.7541  96.5626 0.0000 0.2628 90.4125 10.4302
5    0.4657 -3.9845 0.0001 0.3198 0.6782 151.3200 0.0000 0.3278 92.7634 13.8187
6    0.4912 -3.5499 0.0004 0.3318 0.7273 128.1867 0.0000 0.3596 90.9118 11.0033
7    0.5193 -3.6307 0.0003 0.3646 0.7397 145.8296 0.0000 0.2930 92.2777 12.9495
8    0.4517 -4.4184 0.0000 0.3175 0.6426  67.9858 0.0000 0.2732 87.0314  7.7109
9    0.4765 -3.7686 0.0002 0.3241 0.7007 152.2051 0.0000 0.3495 93.2133 14.7346
10   0.5205 -3.5439 0.0004 0.3627 0.7469 139.8271 0.0000 0.2987 92.2322 12.8737
11   0.4687 -3.8708 0.0001 0.3193 0.6879 151.4655 0.0000 0.3405 91.8110 12.2114
12   0.4678 -4.1727 0.0000 0.3274 0.6684 150.7868 0.0000 0.3082 92.6782 13.6579
13   0.4595 -4.1908 0.0000 0.3194 0.6611 149.7884 0.0000 0.3037 92.3444 13.0623
> 
> ### meta-analysis of the (log) relative risks using the Mantel-Haenszel method
> res <- rma.mh(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### cumulative meta-analysis
> leave1out(res)
   estimate     se     zval   pval   ci.lb   ci.ub        Q     Qp
1   -0.4514 0.0394 -11.4462 0.0000 -0.5287 -0.3741 151.9153 0.0000
2   -0.4410 0.0395 -11.1512 0.0000 -0.5185 -0.3635 145.5727 0.0000
3   -0.4495 0.0394 -11.4001 0.0000 -0.5267 -0.3722 150.5130 0.0000
4   -0.3392 0.0414  -8.1874 0.0000 -0.4205 -0.2580  96.5629 0.0000
5   -0.4614 0.0400 -11.5474 0.0000 -0.5397 -0.3831 151.6611 0.0000
6   -0.3666 0.0448  -8.1809 0.0000 -0.4544 -0.2788 129.2200 0.0000
7   -0.4466 0.0395 -11.3046 0.0000 -0.5241 -0.3692 146.2134 0.0000
8   -0.7758 0.0520 -14.9267 0.0000 -0.8777 -0.6739  68.3763 0.0000
9   -0.4532 0.0399 -11.3633 0.0000 -0.5314 -0.3751 152.5497 0.0000
10  -0.4278 0.0399 -10.7338 0.0000 -0.5059 -0.3497 140.0446 0.0000
11  -0.4698 0.0421 -11.1706 0.0000 -0.5522 -0.3874 151.8140 0.0000
12  -0.4566 0.0394 -11.5865 0.0000 -0.5338 -0.3794 151.1253 0.0000
13  -0.4637 0.0398 -11.6542 0.0000 -0.5417 -0.3858 150.1246 0.0000
> leave1out(res, transf=exp)
   estimate     zval   pval  ci.lb  ci.ub        Q     Qp
1    0.6367 -11.4462 0.0000 0.5894 0.6879 151.9153 0.0000
2    0.6434 -11.1512 0.0000 0.5954 0.6952 145.5727 0.0000
3    0.6380 -11.4001 0.0000 0.5905 0.6892 150.5130 0.0000
4    0.7123  -8.1874 0.0000 0.6568 0.7726  96.5629 0.0000
5    0.6304 -11.5474 0.0000 0.5829 0.6818 151.6611 0.0000
6    0.6931  -8.1809 0.0000 0.6348 0.7567 129.2200 0.0000
7    0.6398 -11.3046 0.0000 0.5921 0.6913 146.2134 0.0000
8    0.4603 -14.9267 0.0000 0.4158 0.5097  68.3763 0.0000
9    0.6356 -11.3633 0.0000 0.5878 0.6872 152.5497 0.0000
10   0.6520 -10.7338 0.0000 0.6030 0.7049 140.0446 0.0000
11   0.6251 -11.1706 0.0000 0.5757 0.6788 151.8140 0.0000
12   0.6334 -11.5865 0.0000 0.5864 0.6843 151.1253 0.0000
13   0.6289 -11.6542 0.0000 0.5817 0.6799 150.1246 0.0000
> 
> ### meta-analysis of the (log) odds ratios using Peto's method
> res <- rma.peto(ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### cumulative meta-analysis
> leave1out(res)
   estimate     se     zval   pval   ci.lb   ci.ub        Q     Qp
1   -0.4722 0.0408 -11.5791 0.0000 -0.5521 -0.3923 167.2005 0.0000
2   -0.4616 0.0409 -11.2751 0.0000 -0.5418 -0.3814 160.5154 0.0000
3   -0.4702 0.0408 -11.5317 0.0000 -0.5501 -0.3903 165.7913 0.0000
4   -0.3591 0.0435  -8.2533 0.0000 -0.4443 -0.2738 112.1274 0.0000
5   -0.4832 0.0413 -11.6873 0.0000 -0.5642 -0.4021 166.3727 0.0000
6   -0.3710 0.0451  -8.2328 0.0000 -0.4593 -0.2827 139.3918 0.0000
7   -0.4660 0.0408 -11.4343 0.0000 -0.5459 -0.3861 158.6048 0.0000
8   -0.8161 0.0531 -15.3842 0.0000 -0.9201 -0.7122  67.1837 0.0000
9   -0.4747 0.0413 -11.4973 0.0000 -0.5557 -0.3938 167.7284 0.0000
10  -0.4486 0.0413 -10.8488 0.0000 -0.5296 -0.3675 155.8992 0.0000
11  -0.4911 0.0434 -11.3135 0.0000 -0.5762 -0.4060 166.5326 0.0000
12  -0.4775 0.0407 -11.7236 0.0000 -0.5573 -0.3976 166.0703 0.0000
13  -0.4853 0.0411 -11.7960 0.0000 -0.5659 -0.4046 164.7427 0.0000
> leave1out(res, transf=exp)
   estimate     zval   pval  ci.lb  ci.ub        Q     Qp
1    0.6236 -11.5791 0.0000 0.5757 0.6755 167.2005 0.0000
2    0.6303 -11.2751 0.0000 0.5817 0.6829 160.5154 0.0000
3    0.6249 -11.5317 0.0000 0.5769 0.6769 165.7913 0.0000
4    0.6983  -8.2533 0.0000 0.6413 0.7605 112.1274 0.0000
5    0.6168 -11.6873 0.0000 0.5688 0.6689 166.3727 0.0000
6    0.6900  -8.2328 0.0000 0.6317 0.7538 139.3918 0.0000
7    0.6275 -11.4343 0.0000 0.5793 0.6797 158.6048 0.0000
8    0.4421 -15.3842 0.0000 0.3985 0.4906  67.1837 0.0000
9    0.6220 -11.4973 0.0000 0.5737 0.6745 167.7284 0.0000
10   0.6385 -10.8488 0.0000 0.5888 0.6924 155.8992 0.0000
11   0.6120 -11.3135 0.0000 0.5621 0.6663 166.5326 0.0000
12   0.6204 -11.7236 0.0000 0.5728 0.6719 166.0703 0.0000
13   0.6155 -11.7960 0.0000 0.5679 0.6672 164.7427 0.0000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("leave1out", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("llplot")
> ### * llplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: llplot
> ### Title: Log-Likelihood Plot of a Parameter Corresponding to an Outcome
> ###   or Effect Size Measure
> ### Aliases: llplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### create plot
> llplot(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### load histamine H2 antagonist data
> data(dat.collins1985a)
> 
> ### create plot (Figure 2 in van Houwelingen, Zwinderman, & Stijnen, 1993)
> llplot(measure="OR", ai=b.xci, n1i=nci, ci=b.xti, n2i=nti, data=dat.collins1985a,
+        lwd=1, refline=NA, xlim=c(-4,4), drop00=FALSE)
Warning in llplot(measure = "OR", ai = b.xci, n1i = nci, ci = b.xti, n2i = nti,  :
  Studies with NAs omitted from plotting.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("llplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("metafor.news")
> ### * metafor.news
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: metafor.news
> ### Title: Read News File of the Metafor Package
> ### Aliases: metafor.news
> ### Keywords: utilities
> 
> ### ** Examples
> 
> metafor.news()
Changes in version 1.9-7 (2015-05-21):

    o   default optimizer for rma.mv() changed to nlminb() (instead of optim()
	with "Nelder-Mead"); extensive testing indicated that nlminb() (and
	also optim() with "BFGS") is typically quicker and more robust; note
	that this is in principle a non-backwards compatible change, but really
	a necessary one; and you can always revert to the old behavior with
	'control=list(optimizer="optim", optmethod="Nelder-Mead")'

    o   all tests have been updated in accordance with the recommended syntax
	of the 'testthat' package; for example, expect_equivalent(x,y) is used
	instead of test_that(x, is_equivalent_to(y))

    o   changed a few 'is_identical_to()' comparisons to expect_equivalent()
	ones (that failed on Sparc Solaris)

Changes in version 1.9-6 (2015-05-07):

    o   funnel() now works again for 'rma.glmm' objects (note to self: quit
	breaking things that work!)

    o   rma.glmm() will now only issue a warning (and not an error) when the
	Hessian for the saturated model cannot be inverted (which is needed to
	compute the Wald-type test for heterogeneity, so the test statistic is
	then simply set to NA)

    o   rma.mv() now allows for two terms of the form ~ inner | outer; the
	variance components corresponding to such a structure are called gamma2
	and correlations are called phi; other functions that work with objects
	of class 'rma.mv' have been updated accordingly

    o   rma.mv() now provides (even) more optimizer choices: nlm() from the
	'stats' package, hjk() and nmk() from the 'dfoptim' package, and
	ucminf() from the 'ucminf' package; choose the desired optimizer via
	the control argument (e.g., control=list(optimizer="nlm"))

    o   profile.rma.uni() and profile.rma.mv() now can do parallel processing
	(which is especially relevant for 'rma.mv' objects, where profiling is
	crucial and model fitting can be slow)

    o   the various confint() functions now have a 'transf' argument (to apply
	some kind of transformation to the model coefficients and confidence
	interval bounds); coefficients and bounds for objects of class 'rma.mh'
	and 'rma.peto' are no longer automatically transformed

    o   the various forest() functions no longer enforce that the actual x-axis
	limits ('alim') encompass the observed outcomes to be plotted; also,
	outcomes below or above the actual x-axis limits are no longer shown

    o   the various forest() functions now provide control over the horizontal
	lines (at the top/bottom) that are automatically added to the plot via
	the 'lty' argument (this also allows for removing them); also, the
	vertical reference line is now placed *behind* the points/CIs

    o   forest.default() now has argument 'col' which can be used to specify
	the color(s) to be used for drawing the study labels, points, CIs, and
	annotations

    o   the 'efac' argument for forest.rma() now also allows two values, the
	first for the arrows and CI limits, the second for summary estimates

    o   corrected some axis labels in various plots when measure="PLO"

    o   axes in labbe() plots now have "(Group 1)" and "(Group 2)" added by
	default

    o   anova.rma() gains argument 'L' for specifying linear combinations of
	the coefficients in the model that should be tested to be zero

    o   in case removal of a row of data would lead to one or more inestimable
	model coefficients, baujat(), cooks.distance(), dfbetas(), influence(),
	and rstudent() could fail for 'rma.uni' objects; such cases are now
	handled properly

    o   for models with moderators, the predict() function now shows the study
	labels when they have been specified by the user (and 'newmods' is not
	used)

    o   if there is only one fixed effect (model coefficient) in the model, the
	print.infl.rma.uni() function now shows the DFBETAS values with the
	other case diagnostics in a single table (for easier inspection); if
	there is more than one fixed effect, a separate table is still used for
	the DFBETAS values (with one column for each coefficient)

    o   added measure="SMCRH" to the escalc() function for the standardized
	mean change using raw score standardization with heteroscedastic
	population variances at the two measurement occasions

    o   added measure="ROMC" to the escalc() function for the (log transformed)
	ratio of means (response ratio) when the means reflect two measurement
	occasions (e.g., for a single group of people) and hence are correlated

    o   added own function for computing/estimating the tetrachoric correlation
	coefficient (for measure="RTET"); package therefore no longer suggests
	'polycor' but now suggest 'mvtnorm' (which is loaded as needed)

    o   element 'fill' returned by trimfill.rma.uni() is now a logical vector
	(instead of a 0/1 dummy variable)

    o   print.list.rma() now also returns the printed results invisibly as a
	data frame

    o   added a new dataset (dat.senn2013) as another illustration of a network
	meta-analysis

    o   metafor now depends on at least version 3.1.0 of R

Changes in version 1.9-5 (2014-11-24):

    o   moved the 'stats' and 'Matrix' packages from 'Depends' to 'Imports'; as
	a result, had to add 'utils' to 'Imports'; moved the 'Formula' package
	from 'Depends' to 'Suggests'

    o   added update.rma() function (for updating/refitting a model); model
	objects also now store and keep the call

    o   the vcov() function now also extracts the marginal variance-covariance
	matrix of the observed effect sizes or outcomes from a fitted model
	(of class 'rma.uni' or 'rma.mv')

    o   rma.mv() now makes use of the Cholesky decomposition when there is a
	'random = ~ inner | outer' formula and struct="UN"; this is numerically
	more stable than the old approach that avoided non-positive definite
	solutions by forcing the log-likelihood to be -Inf in those cases; the
	old behavior can be restored with 'control = list(cholesky=FALSE)'

    o   rma.mv() now requires the 'inner' variable in an '~ inner | outer'
	formula to be a factor or character variable (except when 'struct' is
	"AR" or "HAR"); use '~ factor(inner) | outer' in case it isn't

    o   anova.rma.uni() function changed to anova.rma() that works now for both
	'rma.uni' and 'rma.mv' objects

    o   the profile.rma.mv() function now omits the number of the variance or
	correlation component from the plot title and x-axis label when the
	model only includes one of the respective parameters

    o   profile() functions now pass on the ... argument also to the title()
	function used to create the figure titles (esp. relevant when using
	the 'cex.main' argument)

    o   the 'drop00' argument of the rma.mh() and rma.peto() functions now also
	accepts a vector with two logicals, the first applies when calculating
	the observed outcomes, the second when applying the Mantel-Haenszel or
	Peto's method

    o   weights.rma.uni() now shows the correct weights when weighted=FALSE

    o   argument 'showweight' renamed to 'showweights' in the forest.default()
	and forest.rma() functions (more consistent with the naming of the
	various weights() functions)

    o   added model.matrix.rma() function (to extract the model matrix from
	objects of class 'rma')

    o   funnel() and radial() now (invisibly) return data frames with the
	coordinates of the points that were drawn (may be useful for manual
	labeling of points in the plots)

    o   permutest.rma.uni() function now uses a numerical tolerance when making
	comparisons (>= or <=) between an observed test statistic and the test
	statistic under the permuted data; when using random permutations, the
	function now ensures that the very first permutation correspond to the
	original data

    o   corrected some missing/redundant row/column labels in some output

    o   most require() calls replaced with requireNamespace() to avoid altering
	the search path (hopefully this won't break stuff ...)

    o   some non-visible changes including more use of some (non-exported)
	helper functions for common tasks

    o   dataset dat.collins91985a updated (including all reported outcomes and
	some more information about the various trials)

    o   oh, and guess what? I updated the documentation ...

Changes in version 1.9-4 (2014-07-30):

    o   added method="GENQ" to rma.uni() for the generalized Q-statistic
	estimator of tau^2, which allows for used-defined weights (note: the DL
	and HE estimators are just special cases of this method)

    o   when the model was fitted with method="GENQ", then confint() will now
	use the generalized Q-statistic method to construct the corresponding
	confidence interval for tau^2 (thanks to Dan Jackson for the code);
	the iterative method used to obtain the CI makes use of Farebrother's
	algorithm as implemented in the 'CompQuadForm' package

    o   slight improvements in how the rma.uni() function handles non-positive
	sampling variances

    o   rma.uni(), rma.mv(), and rma.glmm() now try to detect and remove any
	redundant predictors before the model fitting; therefore, if there are
	exact linear relationships among the predictor variables (i.e., perfect
	multicollinearity), terms are removed to obtain a set of predictors
	that is no longer perfectly multicollinear (a warning is issued when
	this happens); note that the order of how the variables are specified
	in the model formula can influence which terms are removed

    o   the last update introduced an error in how hat values were computed
	when the model was fitted with the rma() function using the Knapp &
	Hartung method (i.e., when knha=TRUE); this has been fixed

    o   regtest() no longer works (for now) with 'rma.mv' objects (it wasn't
	meant to in the first place); if you want to run something along the
	same lines, just consider adding some measure of the precision of the
	observed outcomes (e.g., their standard errors) as a predictor to the
	model

    o   added "sqrtni" and "sqrtninv" as possible options for the 'predictor'
	argument of regtest()

    o   more optimizers are now available for the rma.mv() function via the
	'nloptr' package by setting 'control = list(optimizer="nloptr")'; when
	using this optimizer, the default is to use the BOBYQA implementation
	from that package with a relative convergence criterion of 1e-8 on the
	function value (see documentation on how to change these defaults)

    o   predict.rma() function now works for 'rma.mv' objects with multiple
	tau^2 values even if the user specifies the 'newmods' argument but not
	the 'tau2.levels' argument (but a warning is issued and the
	credibility/prediction intervals are not computed)

    o   argument 'var.names' now works properly in escalc() when the user has
	not made use of the 'data' argument (thanks to Jarrett Byrnes for
	bringing this to my attention)

    o   added plot() function for cumulative random-effects models results as
	obtained with the cumul.rma.uni() function; the plot shows the model
	estimate on the x-axis and the corresponding tau^2 estimate on the
	y-axis in the cumulative order of the results

    o   fixed the omitted offset term in the underlying model fitted by the
	rma.glmm() function when method="ML", measure="IRR", and model="UM.FS",
	that is, when fitting a mixed-effects Poisson regression model with
	fixed study effects to two-group event count data (thanks to Peter
	Konings for pointing out this error)

    o   added two new datasets (dat.bourassa1996, dat.riley2003)

    o   added function replmiss() (just a useful helper function)

    o   package now uses LazyData: TRUE

    o   some improvements to the documentation (do I still need to mention this
	every time?)

Changes in version 1.9-3 (2014-05-05):

    o   some minor tweaks to rma.uni() that should be user transparent

    o   rma.uni() now has a 'weights' argument, allowing the user to specify
	arbitrary user-defined weights; all functions affected by this have
	been updated accordingly

    o   better handling of mismatched length of yi and ni vectors in rma.uni()
	and rma.mv() functions

    o   subsetting is now handled as early as possible within functions with
	subsetting capabilities; this avoids some (rare) cases where studies
	ultimately excluded by the subsetting could still affect the results

    o   some general tweaks to rma.mv() that should make it a bit faster

    o   argument 'V' of rma.mv() now also accepts a list of var-cov matrices
	for the observed effects or outcomes; from the list elements, the full
	(block diagonal) var-cov matrix V is then automatically constructed

    o   rma.mv() now has a new argument 'W' allowing the user to specify
	arbitrary user-defined weights or an arbitrary weight matrix

    o   rma.mv() now has a new argument 'sparse'; by setting this to true, the
	function uses sparse matrix objects to the extent possible; this can
	speed up model fitting substantially for certain models (hence, the
	'metafor' package now depends on the 'Matrix' package)

    o   rma.mv() now allows for struct="AR" and struct="HAR", to fit models
	with (heteroscedastic) autoregressive (AR1) structures among the true
	effects (useful for meta-analyses of studies reporting outcomes at
	multiple time points)

    o   rma.mv() now has a new argument 'Rscale' which can be used to control
	how matrices specified via the 'R' argument are scaled (see docs for
	more details)

    o   rma.mv() now only checks for missing values in the rows of the lower
	triangular part of the V matrix (including the diagonal); this way, if
	Vi = matrix(c(.5,NA,NA,NA), nrow=2, ncol=2) is the var-cov matrix of
	the sampling errors for a particular study with two outcomes, then only
	the second row/column needs to be removed before the model fitting (and
	not the entire study)

    o   added five new datasets (dat.begg1989, dat.ishak2007, dat.fine1993,
	dat.konstantopoulos2011, and dat.hasselblad1998) to provide further
	illustrations of the use of the rma.mv() function (for meta-analyses
	combining controlled and uncontrolled studies, for meta-analyses of
	longitudinal studies, for multilevel meta-analyses, and for network
	meta-analyses / mixed treatment comparison meta-analyses)

    o   added rstandard.rma.mv() function to compute standardized residuals for
	models fitted with the rma.mv() function (rstudent.rma.mv() to be added
	at a later point); also added hatvalues.rma.mv() for computing the hat
	values and weights.rma.uni() for computing the weights (i.e., the
	diagonal elements of the weight matrix)

    o   the various weights() functions now have a new argument 'type' to
	indicate whether only the diagonal elements of the weight matrix
	(default) or the entire weight matrix should be returned

    o   the various hatvalues() functions now have a new argument 'type' to
	indicate whether only the diagonal elements of the hat matrix (default)
	or the entire hat matrix should be returned

    o   predict.rma() function now works properly for 'rma.mv' objects (also
	has a new argument 'tau2.levels' to specify, where applicable, the
	levels of the inner factor when computing credibility/prediction
	intervals)

    o   forest.rma() function now provides a bit more control over the color of
	the summary polygon and is now compatible with 'rma.mv' objects; also,
	has a new argument 'lty', which provides more control over the line
	type for the individual CIs and the credibility interval

    o   addpoly.default() and addpoly.rma() now have a 'border' argument (for
	consistency with the forest.rma() function); addpoly.rma() now yields
	the correct CI bounds when the model was fitted with knha=TRUE

    o   forest.cumul.rma() now provides the correct CI bounds when the models
	were fitted with the Knapp & Hartung method (i.e., when knha=TRUE in
	the original rma() function call)

    o   the various forest() functions now return information about the chosen
	values for arguments xlim, alim, at, ylim, rows, cex, cex.lab, and
	cex.axis invisibly (useful for tweaking the default values); thanks to
	Michael Dewey for the suggestion

    o   the various forest() functions now have a new argument, clim, to set
	limits for the confidence/credibility/prediction interval bounds

    o   cumul.mh() and cumul.peto() now get the order of the studies right when
	there are missing values in the data

    o   the 'transf' argument of leave1out.rma.mh(), leave1out.rma.peto(),
	cumul.rma.mh(), and cumul.rma.peto() should now be used to specify the
	actual function for the transformation (the former behavior of setting
	this argument to TRUE to exponentiate log RRs, log ORs, or log IRRs
	still works for back-compatibility); this is more consistent with how
	the cumul.rma.uni() and leave1out.rma.uni() functions work and is also
	more flexible

    o   added bldiag() function to construct a block diagonal matrix from (a
	list of) matrices (may be needed to construct the V matrix when using
	the rma.mv() function); bdiag() function from the 'Matrix' package does
	the same thing, but creates sparse matrix objects

    o   profile.rma.mv() now has a 'startmethod' argument; by setting this to
	"prev", successive model fits are started at the parameter estimates
	from the previous model fit; this may speed things up a bit; also, the
	method for automatically choosing the xlim values has been changed

    o   slight improvement to profile.rma.mv() function, which would throw an
	error if the last model fit did not converge

    o   added a new dataset (dat.linde2005) for replication of the analyses in
	Viechtbauer (2007)

    o   added a new dataset (dat.molloy2014) for illustrating the meta-analysis
	of (r-to-z transformed) correlation coefficients

    o   added a new dataset (dat.gibson2002) to illustrate the combined
	analysis of standardized mean differences and probit transformed risk
	differences

    o   computations in weights.mh() slightly changed to prevent integer
	overflows for large counts

    o   unnecessary warnings in transf.ipft.hm() are now suppressed (cases that
	raised those warnings were already handled correctly)

    o   in predict(), blup(), cumul(), and leave1out(), when using the 'transf'
	argument, the standard errors (which are NA) are no longer shown in the
	output

    o   argument 'slab' in various functions will now also accept non-unique
	study labels; make.unique() is used as needed to make them unique

    o   vignettes("metafor") and vignettes("metafor_diagram") work again (yes,
	I know they are not true vignettes in the strict sense, but I think
	they should show up on the CRAN website for the package and using a
	minimal valid Sweave document that is recognized by the R build system
	makes that happen)

    o   escalc() and its summary() method now keep better track when the data
	frame contains multiple columns with outcome or effect size values (and
	corresponding sampling variances) for print formating; also simplified
	the class structure a bit (and hence, print.summary.escalc() removed)

    o   summary.escalc() has a new argument 'H0' to specify the value of the
	outcome under the null hypothesis for computing the test statistics

    o   added measures "OR2DN" and "D2ORN" to escalc() for transforming log
	odds ratios to standardized mean differences and vice-versa, based on
	the method of Cox & Snell (1989), which assumes normally distributed
	response variables within the two groups before the dichotomization

    o   permutest.rma.uni() function now catches an error when the number of
	permutations requested is too large (for R to even create the objects
	to store the results in) and produces a proper error message

    o   funnel.rma() function now allows the 'yaxis' argument to be set to "wi"
	so that the actual weights (in %) are placed on the y-axis (useful when
	arbitrary user-defined have been specified)

    o   for rma.glmm(), the control argument 'optCtrl' is now used for passing
	control arguments to all of the optimizers (hence, control arguments
	nlminbCtrl and minqaCtrl are now defunct)

    o   rma.glmm() should not throw an error anymore when including only a
	single moderator/predictor in the model

    o   predict.rma() now returns an object of class 'list.rma' (therefore,
	function print.predict.rma() has been removed)

    o   for 'rma.list' objects, added `[`, head(), and tail() methods

    o   automated testing using the 'testthat' package (still many more tests
	to add, but finally made a start on this)

    o   encoding changed to UTF-8 (to use 'foreign characters' in the docs and
	to make the HTML help files look a bit nicer)

    o   guess what? some improvements to the documentation! (also combined some
	of the help files to reduce the size of the manual a bit; and yes, it's
	still way too big)

Changes in version 1.9-2 (2013-10-07):

    o   added function rma.mv() to fit multivariate/multilevel meta-analytic
	models via appropriate linear (mixed-effects) models; this function
	allows for modeling of non-independent sampling errors and/or true
	effects and can be used for network meta-analyses, meta-analyses
	accounting for phylogenetic relatedness, and other complicated
	meta-analytic data structures

    o   added the AICc to the information criteria computed by the various
	model fitting functions

    o   if the value of tau^2 is fixed by the user via the corresponding
	argument in rma.uni(), then tau^2 is no longer counted as an additional
	parameter for the computation of the information criteria (i.e., AIC,
	BIC, and AICc)

    o   rma.uni(), rma.glmm(), and rma.mv() now use a more stringent check
	whether the model matrix is of full rank

    o   added profile() method functions for objects of class 'rma.uni' and
	'rma.mv' (can be used to obtain a plot of the profiled log-likelihood
	as a function of a specific variance component or correlation parameter
	of the model)

    o   predict.rma() function now has an 'intercept' argument that allows the
	user to decide whether the intercept term should be included when
	calculating the predicted values (rare that this should be changed from
	the default)

    o   for rma.uni(), rma.glmm(), and rma.mv(), the 'control' argument can now
	also accept an integer value; values > 1 generate more verbose output
	about the progress inside of the function

    o   rma.glmm() has been updated to work with lme4 1.0.x for fitting various
	models; as a result, model="UM.RS" can only use nAGQ=1 at the moment
	(hopefully this will change in the future)

    o   the 'control' argument of rma.glmm() can now be used to pass all
	desired control arguments to the various functions and optimizers used
	for the model fitting (admittedly the use of lists within this argument
	is a bit unwieldy, but much more flexible)

    o   rma.mh() and rma.peto() also now have a 'verbose' argument (not really
	needed, but added for sake of consistency across functions)

    o   fixed (silly) error that would prevent rma.glmm() from running for
	measures "IRR", "PLO", and "IRLN" when there are missing values in the
	data (lesson: add some missing values to datasets for the unit tests!)

    o   a bit of code reorganization (should be user transparent)

    o   vignettes ("metafor" and "metafor_diagram") are now just 'other files'
	in the doc directory (as these were not true vignettes to begin with)

    o   some improvements to the documentation (as always)

Changes in version 1.9-1 (2013-07-20):

    o   rma.mh() now also implements the Mantel-Haenszel method for incidence
	rate differences (measure="IRD")

    o   when analyzing incidence rate ratios (measure="IRR") with the rma.mh()
	function, the Mantel-Haenszel test for person-time data is now also
	provided

    o   rma.mh() has a new argument 'correct' (default is TRUE) to indicate
	whether the continuity correction should be applied when computing the
	(Cochran-)Mantel-Haenszel test statistic

    o   renamed elements 'CMH' and 'CMHp' (for the Cochran-Mantel-Haenszel test
	statistic and corresponding p-value) to 'MH' and 'MHp'

    o   added function baujat() to create Baujat plots

    o   added a new dataset (dat.pignon2000) to illustrate the use of the
	baujat() function

    o   added function to.table() to convert data from vector format into the
	corresponding table format

    o   added function to.long() to convert data from vector format into the
	corresponding long format

    o   rma.glmm() now even runs when k=1 (yielding trivial results)

    o   for models with an intercept and moderators, rma.glmm() now internally
	rescales (non-dummy) variables to z-scores during the model fitting
	(this improves the stability of the model fitting, especially when
	model="CM.EL"); results are given after back-scaling, so this should
	be transparent to the user

    o   in rma.glmm(), default number of quadrature points (nAGQ) is now 7
	(setting this to 100 was a bit overkill)

    o   a few more error checks here and there for misspecified arguments

    o   some improvements to the documentation

Changes in version 1.9-0 (2013-06-21):

    o   vignette renamed to 'metafor' so vignette("metafor") works now

    o   added a diagram to the documentation, showing the various functions in
	the metafor package (and how they relate to each other); can be loaded
	with vignette("metafor_diagram")

    o   anova.rma.uni() function can now also be used to test (sub)sets of
	model coefficients with a Wald-type test when a single model is passed
	to the function

    o   the pseudo R^2 statistic is now automatically calculated by the
	rma.uni() function and supplied in the output (only for mixed-effects
	models and when the model includes an intercept, so that the random-
	effects model is clearly nested within the mixed-effects model)

    o   component 'VAF' is now called 'R2' in anova.rma.uni() function

    o   added function hc() that carries out a random-effects model analysis
	using the method by Henmi and Copas (2010); thanks to Michael Dewey for
	the suggestion and providing the code

    o   added new dataset (dat.lee2004), which was used in the article by Henmi
	and Copas (2010) to illustrate their method

    o   fixed missing x-axis labels in the forest() functions

    o   rma.glmm() now computes Hessian matrices via the 'numDeriv' package
	when model="CM.EL" and measure="OR" (i.e., for the conditional logistic
	model with exact likelihood); so 'numDeriv' is now a suggested package
	and is loaded within rma.glmm() when required

    o   trimfill.rma.uni() now also implements the "Q0" estimator (although the
	"L0" and "R0" estimators are generally to be preferred)

    o   trimfill.rma.uni() now also calculates the SE of the estimated number
	of missing studies and, for estimator "R0", provides a formal test of
	the null hypothesis that the number of missing studies on a given side
	is zero

    o   added new dataset (dat.bangertdrowns2004)

    o   the 'level' argument in various functions now either accepts a value
	representing a percentage or a proportion (values greater than 1 are
	assumed to be a percentage)

    o   summary.escalc() now computes confidence intervals correctly when using
	the 'transf' argument

    o   computation of Cochran-Mantel-Haenszel statistic in rma.mh() changed
	slightly to avoid integer overflow with very big counts

    o   some internal improvements with respect to object attributes that were
	getting discarded when subsetting

    o   some general code cleanup

    o   some improvements to the documentation

Changes in version 1.8-0 (2013-04-11):

    o   added additional clarifications about the change score outcome measures
	("MC", "SMCC", and "SMCR") to the help file for the escalc() function
	and changed the code so that "SMCR" no longer expects argument 'sd2i'
	NA
	for bringing this to my attention)

    o   sampling variance for the biserial correlation coefficient ("RBIS") is
	now calculated in a slightly more accurate way

    o   llplot() now properly scales the log-likelihoods

    o   argument 'which' in the plot.infl.rma.uni() function has been replaced
	with argument 'plotinf' which can now also be set to FALSE to suppress
	plotting of the various case diagnostics altogether

    o   labeling of the axes in labbe() plots is now correct for odds ratios
	(and transformations thereof)

    o   added two new datasets (dat.nielweise2007 and dat.nielweise2008) to
	illustrate some methods/models from the rma.glmm() function

    o   added a new dataset (dat.yusuf1985) to illustrate the use of rma.peto()

    o   test for heterogeneity is now conducted by the rma.peto() function
	exactly as described by Yusuf et al. (1985)

    o   in rma.glmm(), default number of quadrature points (nAGQ) is now 100
	(which is quite a bit slower, but should provide more than sufficient
	accuracy in most cases)

    o   the standard errors of the HS and DL estimators of tau^2 are now
	correctly computed when tau^2 is prespecified by the user in the rma()
	function; in addition, the standard error of the SJ estimator is also
	now provided when tau^2 is prespecified

    o   rma.uni() and rma.glmm() now use a better method to check whether the
	model matrix is of full rank

    o   I^2 and H^2 statistics are now also calculated for mixed-effects models
	by the rma.uni() and rma.glmm() function; confint.rma.uni() provides
	the corresponding confidence intervals for rma.uni() models

    o   various print() methods now have a new argument called 'signif.stars',
	which defaults to getOption("show.signif.stars") (which by default is
	TRUE) to determine whether the infamous 'significance stars' should be
	printed

    o   slight changes in wording in the output produced by the print.rma.uni()
	and print.rma.glmm() functions

    o   some improvements to the documentation

Changes in version 1.7-0 (2013-02-06):

    o   added rma.glmm() function for fitting of appropriate generalized linear
	(mixed-effects) models when analyzing odds ratios, incidence rate
	ratios, proportions, or rates; the function makes use of the 'lme4' and
	'BiasedUrn' packages; these are now suggested packages and loaded
	within rma.glmm() only when required (this makes for faster loading of
	the 'metafor' package)

    o   addded several methods functions for objects of class 'rma.glmm' (not
	all methods yet implemented; to be completed in the future)

    o   rma.uni() now allows the user to specify a formula for the 'yi'
	argument, so instead of rma(yi, vi, mods=~mod1+mod2), one can specify
	the same model with rma(yi~mod1+mod2, vi)

    o   rma.uni() now has a 'weights' argument to specify the inverse of the
	sampling variances (instead of using the 'vi' or 'sei' arguments); for
	now, this is all this argument should be used for (in the future, this
	argument may potentially be used to allow the user to define
	alternative weights)

    o   rma.uni() now checks whether the model matrix is not of full rank and
	issues an error accordingly (instead of the rather cryptic error that
	was issued before)

    o   rma.uni() now has a 'verbose' argument

    o   coef.rma() now returns only the model coefficients (this change was
	necessary to make the package compatible with the 'multcomp' package;
	see help(rma) for an example); use coef(summary()) to obtain the full
	table of results

    o   the escalc() function now does some more extensive error checking for
	misspecified data and some unusual cases

    o   'append' argument is now TRUE by default in the escalc() function

    o   objects generated by the escalc() function now have their own class

    o   added print() and summary() methods for objects of class 'escalc'

    o   added `[` and cbind() methods for objects of class 'escalc'

    o   added a few additional arguments to the escalc() function (i.e., slab,
	subset, var.names, replace, digits)

    o   added 'drop00' argument to the escalc(), rma.uni(), rma.mh(), and
	rma.peto() functions

    o   added "MN", "MC", "SMCC", and "SMCR" measures to the escalc() and
	rma.uni() functions for the raw mean, the raw mean change, and the
	standardized mean change (with change score or raw score
	standardization) as possible outcome measures

    o   the "IRFT" measure in the escalc() and rma.uni() functions is now
	computed with 1/2*(sqrt(xi/ti) + sqrt(xi/ti+1/ti)) which is more
	consistent with the definition of the Freeman-Tukey transformation for
	proportions

    o   added "RTET" measure to the escalc() and rma.uni() functions to compute
	the tetrachoric correlation coefficient based on 2x2 table data (the
	'polycor' package is therefore now a suggested package, which is loaded
	within escalc() only when required)

    o   added "RPB" and "RBIS" measures to the escalc() and rma.uni() functions
	to compute the point-biserial and biserial correlation coefficient
	based on means and standard deviations

    o   added "PBIT" and "OR2D" measures to the escalc() and rma.uni()
	functions to compute the standardized mean difference based on 2x2
	table data

    o   added the "D2OR" measure to the escalc() and rma.uni() functions to
	compute the log odds ratio based on the standardized mean difference

    o   added "SMDH" measure to the escalc() and rma.uni() functions to compute
	the standardized mean difference without assuming equal population
	variances

    o   added "ARAW", "AHW", and "ABT" measures to the escalc() and rma.uni()
	functions for the raw value of Cronbach's alpha, the transformation
	suggested by Hakstian & Whalen (1976), and the transformation suggested
	by Bonett (2002) for the meta-analysis of reliability coefficients (see
	help(escalc) for details)

    o   corrected a small mistake in the equation used to compute the sampling
	variance of the phi coefficient (measure="PHI") in the escalc()
	function

    o   the permutest.rma.uni() function now uses an algorithm to find only the
	unique permutations of the model matrix (which may be much smaller
	than the total number of permutations), making the exact permutation
	test feasible in a larger set of circumstances (thanks to John Hodgson
	NA
	coming up with a recursive algorithm for finding the unique
	permutations)

    o   credibility interval in forest.rma() is now indicated with a dotted
	(instead of a dashed) line; ends of the interval are now marked with
	vertical bars

    o   completely rewrote the funnel.rma() function which now supports many
	more options for the values to put on the y-axis; trimfill.rma.uni()
	function was adapted accordingly

    o   removed the 'ni' argument from the regtest.rma() function; instead,
	sample sizes can now be explicitly specified via the 'ni' argument when
	using the rma.uni() function (i.e., when measure="GEN"); the escalc()
	function also now adds information on the 'ni' values to the resulting
	data frame (as an attribute of the 'yi' variable), so, if possible,
	this information is passed on to regtest.rma()

    o   added switch so that regtest() can also provide the full results from
	the fitted model (thanks to Michael Dewey for the suggestion)

    o   weights.rma.mh() now shows the weights in % as intended (thanks to
	Gavin Stewart for pointing out this error)

    o   more flexible handling of the 'digits' argument in the various forest
	functions

    o   forest functions now use pretty() by default to set the x-axis tick
	locations ('alim' and 'at' arguments can still be used for complete
	control)

    o   studies that are considered to be 'influential' are now marked with an
	asterisk when printing the results returned by the influence.rma.uni()
	function (see the documentation of this function for details on how
	such studies are identified)

    o   added additional extractor functions for some of the influence measures
	(i.e., cooks.distance, dfbetas); unfortunately, the 'covratio' and
	'dffits' functions in the 'stats' package are not generic; so, to avoid
	masking, there are currently no extractor functions for these measures

    o   better handling of missing values in some unusual situations

    o   corrected small bug in fsn() that would not allow the user to specify
	the standard errors instead of the sampling variances (thanks to Bernd
	Weiss for pointing this out)

    o   plot.infl.rma.uni() function now allows the user to specify which plots
	to draw (and the layout) and adds the option to show study labels on
	the x-axis

    o   added proper print() method for objects generated by the
	confint.rma.uni(), confint.mh(), and confint.peto() functions

    o   when 'transf' or 'atransf' argument was a monotonically *decreasing*
	function, then confidence, prediction, and credibility interval bounds
	were in reversed order; various functions now check for this and order
	the bounds correctly

    o   trimfill.rma.uni() now only prints information about the number of
	imputed studies when actually printing the model object

    o   qqnorm.rma.uni(), qqnorm.rma.mh(), and qqnorm.rma.peto() functions now
	have a new argument called 'label', which allows for labeling of
	points; the functions also now return (invisibly) the x and y
	coordinates of the points drawn

    o   rma.mh() with measure="RD" now computes the standard error of the
	estimated risk difference based on Sato, Greenland, & Robins (1989),
	which provides a consistent estimate under both large-stratum and
	sparse-data limiting models

    o   the restricted maximum likelihood (REML) is now calculated using the
	full likelihood equation (without leaving out additive constants)

    o   the model deviance is now calculated as -2 times the difference between
	the model log-likelihood and the log-likelihood under the saturated
	model (this is a more appropriate definition of the deviance than just
	taking -2 times the model log-likelihood)

    o   naming scheme of illustrative datasets bundled with the package has
	been changed; now datasets are called <dat.authoryear>; therefore, the
	datasets are now called (old name -> new name):
	* dat.bcg      -> dat.colditz1994
	* dat.warfarin -> dat.hart1999
	* dat.los      -> dat.normand1999
	* dat.co2      -> dat.curtis1998
	* dat.empint   -> dat.mcdaniel1994

    o   but dat.bcg has been kept as an alias for dat.colditz1994, as it has
	been referenced under that name in some publications

    o   added new dataset (dat.pritz1997) to illustrate the meta-analysis of
	proportions (raw values and transformations thereof)

    o   added new dataset (dat.bonett2010) to illustrate the meta-analysis of
	Cronbach's alpha values (raw values and transformations thereof)

    o   added new datasets (dat.hackshaw1998, dat.raudenbush1985)

    o   (approximate) standard error of the tau^2 estimate is now computed and
	shown for most of the (residual) heterogeneity estimators

    o   added nobs() and df.residual() methods for objects of class 'rma'

    o   metafor.news() is now simply a wrapper for news(package="metafor")

    o   the package code is now byte-compiled, which yields some modest
	increases in execution speed

    o   some general code cleanup

    o   the 'metafor' package no longer depends on the 'nlme' package

    o   some improvements to the documentation

Changes in version 1.6-0 (2011-04-13):

    o   trimfill.rma.uni() now returns a proper object even when the number of
	missing studies is estimated to be zero

    o   added the (log transformed) ratio of means as a possible outcome
	measure to the escalc() and rma.uni() functions (measure="ROM")

    o   added new dataset (dat.co2) to illustrate the use of the ratio of means
	outcome measure

    o   some additional error checking in the various forest functions
	(especially when using the 'ilab' argument)

    o   in labbe.rma(), the solid and dashed lines are now drawn behind (and
	not on top of) the points

    o   slight change to transf.ipft.hm() so that missing values in 'targs$ni'
	are ignored

    o   some improvements to the documentation

Changes in version 1.5-0 (2010-12-16):

    o   the 'metafor' package now has its own project website at:
	http://www.metafor-project.org/
	NA

    o   the forest.default() and addpoly.default() functions now allow the user
	to directly specify the lower and upper confidence interval bounds
	(this can be useful when the CI bounds have been calculated with other
	methods/functions)

    o   added the incidence rate for a single group and for two groups (and
	transformations thereof) as possible outcome measures to the escalc()
	and rma.uni() functions (measure="IRR", "IRD", "IRSD", "IR", "IRLN",
	"IRS", and "IRFT")

    o   added the incidence rate ratio as a possible outcome measure to the
	rma.mh() function

    o   added transformation functions related to incidence rates

    o   added the Freeman-Tukey double arcsine transformation and its inverse
	to the transformation functions

    o   added some additional error checking for out-of-range p-values in the
	permutest.rma.uni() function

    o   added some additional checking for out-of-range values in several
	transformation functions

    o   added confint() methods for 'rma.mh' and 'rma.peto' objects (only for
	completeness sake; print already provides CIs)

    o   added new datasets (dat.warfarin, dat.los, dat.empint)

    o   some improvements to the documentation

Changes in version 1.4-0 (2010-07-31):

    o   a papar about the package has now been published in the Journal of
	Statistical Software (http://www.jstatsoft.org/v36/i03/)

    o   added citation info; see: citation("metafor")

    o   the 'metafor' package now depends on the 'nlme' package

    o   added extractor functions for the AIC, BIC, and deviance

    o   some updates to the documentation

Changes in version 1.3-0 (2010-06-25):

    o   the 'metafor' package now depends on the 'Formula' package

    o   made escalc() generic and implemented a default and a formula interface

    o   added the (inverse) arcsine transformation to the set of transformation
	functions

Changes in version 1.2-0 (2010-05-18):

    o   cases where k is very small (e.g., k equal to 1 or 2) are now handled
	more gracefully

    o   added sanity check for cases where all observed outcomes are equal to
	each other (this led to division by zero when using the Knapp &
	Hartung method)

    o   the "smarter way to set the number of iterations for permutation tests"
	(see notes for previous version below) now actually works like it is
	supposed to

    o   the permutest.rma.uni() function now provides more sensible results
	when k is very small; the documentation for the function has also been
	updated with some notes about the use of permutation tests under those
	circumstances

    o   made some general improvements to the various forest plot functions
	making them more flexible in particular when creating more complex
	displays; most importantly, added a 'rows' argument and removed the
	'addrows' argument

    o   some additional examples have been added to the help files for the
	forest and addpoly functions to demonstrate how to create more complex
	displays with these functions

    o   added 'showweight' argument to the forest.default() and forest.rma()
	functions

    o   cumul() functions not showing all of the output columns when using
	fixed-effects models has been corrected

    o   weights.rma.uni() function now handles NAs appropriately

    o   weights.rma.mh() and weights.rma.peto() functions added

    o   logLik.rma() function now behaves more like other logLik() functions
	(such as logLik.lm() and logLik.lme())

Changes in version 1.1-0 (2010-04-28):

    o   cint() generic removed and replaced with confint() method for objects
	of class 'rma.uni'

    o   slightly improved the code to set the x-axis title in the forest() and
	funnel() functions

    o   added coef() method for 'permutest.rma.uni' objects

    o   added 'append' argument to escalc() function

    o   implemented a smarter way to set the number of iterations for
	permutation tests (i.e., the permutest.rma.uni() function will now
	switch to an exact test if the number of iterations required for an
	exact test is actually smaller than the requested number of iterations
	for an approximate test)

    o   changed the way how p-values for individual coefficients are calculated
	in permutest.rma.uni() to 'two times the one-tailed area under the
	permutation distribution' (more consistent with the way we typically
	define two-tailed p-values)

    o   added 'retpermdist' argument to permutest.rma.uni() to return the
	permutation distributions of the test statistics

    o   slight improvements to the various transformation functions to cope
	better with some extreme cases

    o   p-values are now calculated in such a way that very small p-values
	stored in fitted model objects are no longer truncated to 0 (the
	printed results are still truncated depending on the number of digits
	specified)

    o   changed the default number of iterations for the ML, REML, and EB
	estimators from 50 to 100

Changes in version 1.0-1 (2010-02-02):

    o   version jump in conjunction with the upcoming publication of a paper in
	the Journal of Statistical Software describing the 'metafor' package

    o   instead of specifying a model matrix, the user can now specify a model
	formula for the 'mods' argument in the rma() function (e.g., like in
	the lm() function)

    o   permutest() function now allows exact permutation tests (but this is
	only feasible when k is not too large)

    o   forest() function now uses the 'level' argument properly to adjust the
	CI level of the summary estimate for models without moderators (i.e.,
	for fixed- and random-effets models)

    o   forest() function can now also show the credibility interval as a
	dashed line for a random-effects model

    o   information about the measure used is now passed on to the forest() and
	funnel() functions, which try to set an appropriate x-axis title
	accordingly

    o   funnel() function now has more arguments (e.g., atransf, at) providing
	more control over the display of the x-axis

    o   predict() function now has its own print() method and has a new
	argument called 'addx', which adds the values of the moderator
	variables to the returned object (when addx=TRUE)

    o   functions now properly handle the na.action "na.pass" (treated
	essentially like "na.exclude")

    o   added method for weights() to extract the weights used when fitting
	models with rma.uni()

    o   some small improvements to the documentation

Changes in version 0.5-7 (2009-12-06):

    o   added permutest() function for permutation tests

    o   added metafor.news() function to display the NEWS file of the 'metafor'
	package within R (based on same idea in the 'animate' package by Yihui
	Xie)

    o   added some checks for values below machine precision

    o   a bit of code reorganization (nothing that affects how the functions
	work)

Changes in version 0.5-6 (2009-10-19):

    o   small changes to the computation of the DFFITS and DFBETAS values in
	the influence() function, so that these statistics are more in line
	with their definitions in regular linear regression models

    o   added option to the plot function for objects returned by influence()
	to allow plotting the covariance ratios on a log scale (now the
	default)

    o   slight adjustments to various print() functions (to catch some errors
	when certain values were NA)

    o   added a control option to rma() to adjust the step length of the Fisher
	scoring algorithm by a constant factor (this may be useful when the
	algorithm does not converge)

Changes in version 0.5-5 (2009-10-08):

    o   added the phi coefficient (measure="PHI"), Yule's Q ("YUQ"), and Yule's
	Y ("YUY") as additional measures to the escalc() function for 2x2 table
	data

    o   forest plots now order the studies so that the first study is at the
	top of the plot and the last study at the bottom (the order can still
	be set with the 'order' or 'subset' argument)

    o   added cumul() function for cumulative meta-analyses (with a
	corresponding forest() method to plot the cumulative results)

    o   added leave1out() function for leave-one-out diagnostics

    o   added option to qqnorm.rma.uni() so that the user can choose whether to
	apply the Bonferroni correction to the bounds of the pseudo confidence
	envelope

    o   some internal changes to the class and methods names

    o   some small corrections to the documentation

Changes in version 0.5-4 (2009-09-18):

    o   corrected the trimfill() function

    o   improvements to various print functions

    o   added a regtest() function for various regression tests of funnel plot
	asymmetry (e.g., Egger's regression test)

    o   made ranktest() generic and added a method for objects of class 'rma'
	so that the test can be carried out after fitting

    o   added anova() function for full vs reduced model comparisons via fit
	statistics and likelihood ratio tests

    o   added the Orwin and Rosenberg approaches to fsn()

    o   added H^2 measure to the output for random-effects models

    o   in escalc(), measure="COR" is now used for the (usual) raw correlation
	coefficient and measure="UCOR" for the bias corrected correlation
	coefficients

    o   some small corrections to the documentation

Changes in version 0.5-3 (2009-07-31):

    o   small changes to some of the examples

    o   added the log transformed proportion (measure="PLN") as another
	measure to the escalc() function; changed "PL" to "PLO" for the logit
	(i.e., log odds) transformation for proportions

Changes in version 0.5-2 (2009-07-06):

    o   added an option in plot.infl.rma.uni() to open a new device for
	plotting the DFBETAS values

    o   thanks to Jim Lemon, added a much better method for adjusting the size
	of the labels, annotations, and symbols in the forest() function when
	the number of studies is large

Changes in version 0.5-1 (2009-06-14):

    o   made some small changes to the documentation (some typos corrected,
	some confusing points clarified)

Changes in version 0.5-0 (2009-06-05):

    o   first version released on CRAN
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("metafor.news", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("model.matrix.rma")
> ### * model.matrix.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: model.matrix.rma
> ### Title: Model Matrix for 'rma' Objects
> ### Aliases: model.matrix.rma
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a mixed-effects meta-regression model
> ### with multiple moderators (absolute latitude, publication year, and allocation method)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat + year + alloc, data=dat.bcg)
> model.matrix(res)
   intrcpt ablat year allocrandom allocsystematic
1        1    44 1948           1               0
2        1    55 1949           1               0
3        1    42 1960           1               0
4        1    52 1977           1               0
5        1    13 1973           0               0
6        1    44 1953           0               0
7        1    19 1973           1               0
8        1    13 1980           1               0
9        1    27 1968           1               0
10       1    42 1961           0               1
11       1    18 1974           0               1
12       1    33 1969           0               1
13       1    33 1976           0               1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("model.matrix.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("permutest")
> ### * permutest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: permutest
> ### Title: Permutation Tests for 'rma.uni' Objects
> ### Aliases: permutest permutest.rma.uni
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model
> res <- rma(yi, vi, data=dat)
> 
> ### permutation test (approximate and exact)
> ## Not run: 
> ##D 
> ##D permutest(res)
> ##D permutest(res, exact=TRUE)
> ## End(Not run)
> 
> ### mixed-effects model with two moderators (absolute latitude and publication year)
> res <- rma(yi, vi, mods = ~ ablat + year, data=dat)
> 
> ### permutation test (approximate only; exact not feasible)
> ## Not run: 
> ##D 
> ##D permres <- permutest(res, iter=10000, retpermdist=TRUE)
> ##D permres
> ##D 
> ##D ### histogram of permutation distribution for absolute latitude
> ##D ### dashed horizontal line: the observed value of the test statistic
> ##D ### red curve: standard normal density
> ##D ### blue curve: kernel density estimate of the permutation distribution
> ##D ### note that the tail area under the permutation distribution is larger
> ##D ### than under a standard normal density (hence, the larger p-value)
> ##D hist(permres$zval.perm[,2], breaks=120, freq=FALSE, xlim=c(-5,5), ylim=c(0,.4),
> ##D      main="Permutation Distribution", xlab="Value of Test Statistic", col="gray90")
> ##D abline(v=res$zval[2], lwd=2, lty="dashed")
> ##D abline(v=0, lwd=2)
> ##D curve(dnorm, from=-5, to=5, add=TRUE, lwd=2, col=rgb(1,0,0,alpha=.7))
> ##D lines(density(permres$zval.perm[,2]), lwd=2, col=rgb(0,0,1,alpha=.7))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("permutest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.cumul.rma")
> ### * plot.cumul.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.cumul.rma
> ### Title: Plot Method for 'cumul.rma' Objects
> ### Aliases: plot.cumul.rma
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model
> res <- rma(yi, vi, data=dat)
> 
> ### cumulative meta-analysis (in the order of publication year)
> sav <- cumul(res, transf=exp, order=order(dat$year))
> 
> ### plot of model estimate and tau^2 over time
> plot(sav)
> 
> ### illustrate some other plot options
> plot(sav, yaxis="I2", ylim=c(0,100), atransf=exp, at=log(seq(1.3, 1.6, by=.1)),
+      lwd=5, cex=0, cols=c("green","blue","red"))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.cumul.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.infl.rma.uni")
> ### * plot.infl.rma.uni
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.infl.rma.uni
> ### Title: Plot Method for 'infl.rma.uni' Objects
> ### Aliases: plot.infl.rma.uni
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a mixed-effects model
> ### with two moderators (absolute latitude and publication year)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat + year, data=dat.bcg)
> plot(influence(res))
> plot(influence(res), plotinf=1:4)
> plot(influence(res), plotinf=1:4, layout=c(4,1))
> plot(influence(res), plotdfb=TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.infl.rma.uni", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.rma")
> ### * plot.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.rma.uni
> ### Title: Plot Method for 'rma' Objects
> ### Aliases: plot.rma.uni plot.rma.mh plot.rma.peto plot.rma.glmm
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> plot(res, qqplot=TRUE)
> 
> ### mixed-effects model with two moderators (absolute latitude and publication year)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat + year, data=dat.bcg)
> plot(res, qqplot=TRUE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict.rma")
> ### * predict.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict.rma
> ### Title: Predicted Values for 'rma' Objects
> ### Aliases: predict.rma
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### average relative risk with 95% CI
> predict(res, transf=exp)
   pred  ci.lb  ci.ub  cr.lb  cr.ub
 0.4894 0.3441 0.6962 0.1546 1.5490
> 
> ### mixed-effects model with absolute latitude as a moderator
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, mods = ~ ablat,
+            data=dat.bcg)
> 
> ### predicted average relative risks for given absolute latitude values
> predict(res, transf=exp, addx=TRUE)
     pred  ci.lb  ci.ub  cr.lb  cr.ub X.intrcpt X.ablat
1  0.3574 0.2714 0.4705 0.1947 0.6560         1      44
2  0.2595 0.1749 0.3848 0.1328 0.5070         1      55
3  0.3788 0.2927 0.4901 0.2079 0.6900         1      42
4  0.2831 0.1977 0.4054 0.1478 0.5422         1      52
5  0.8809 0.6321 1.2276 0.4667 1.6625         1      13
6  0.3574 0.2714 0.4705 0.1947 0.6560         1      44
7  0.7397 0.5639 0.9704 0.4036 1.3557         1      19
8  0.8809 0.6321 1.2276 0.4667 1.6625         1      13
9  0.5861 0.4716 0.7284 0.3270 1.0505         1      27
10 0.3788 0.2927 0.4901 0.2079 0.6900         1      42
11 0.7616 0.5752 1.0083 0.4138 1.4016         1      18
12 0.4922 0.3989 0.6073 0.2753 0.8799         1      33
13 0.4922 0.3989 0.6073 0.2753 0.8799         1      33
> 
> ### predicted average relative risks for 10-60 degrees absolute latitude
> predict(res, newmods=c(10, 20, 30, 40, 50, 60), transf=exp)
    pred  ci.lb  ci.ub  cr.lb  cr.ub
1 0.9612 0.6668 1.3857 0.5000 1.8478
2 0.7185 0.5526 0.9343 0.3936 1.3117
3 0.5371 0.4355 0.6623 0.3005 0.9600
4 0.4015 0.3151 0.5115 0.2218 0.7266
5 0.3001 0.2144 0.4201 0.1586 0.5678
6 0.2243 0.1423 0.3538 0.1105 0.4552
> 
> ### mixed-effects model with two moderators (absolute latitude and publication year)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat + year, data=dat.bcg)
> 
> ### predicted average relative risks for 10 and 60 degrees latitude in 1950 and 1980
> predict(res, newmods=cbind(c(10,60,10,60),c(1950,1950,1980,1980)), transf=exp, addx=TRUE)
    pred  ci.lb  ci.ub  cr.lb  cr.ub X.intrcpt X.ablat X.year
1 0.8995 0.3689 2.1933 0.2981 2.7146         1      10   1950
2 0.2217 0.1278 0.3847 0.0944 0.5208         1      60   1950
3 0.9525 0.6199 1.4637 0.4361 2.0802         1      10   1980
4 0.2348 0.1005 0.5481 0.0805 0.6843         1      60   1980
> 
> ### mixed-effects model with two moderators (one of which is a factor)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat + factor(alloc), data=dat.bcg)
> 
> ### examine how the factor was actually coded for the studies in the dataset
> predict(res, addx=TRUE)
      pred     se   ci.lb   ci.ub   cr.lb   cr.ub X.intrcpt X.ablat
1  -1.1744 0.2137 -1.5932 -0.7557 -2.0293 -0.3196         1      44
2  -1.4745 0.2742 -2.0119 -0.9370 -2.3933 -0.5556         1      55
3  -1.1199 0.2061 -1.5238 -0.7159 -1.9676 -0.2722         1      42
4  -1.3926 0.2552 -1.8928 -0.8925 -2.2902 -0.4951         1      52
5  -0.0614 0.3336 -0.7152  0.5924 -1.0528  0.9300         1      13
6  -0.9069 0.3176 -1.5295 -0.2844 -1.8780  0.0642         1      44
7  -0.4925 0.2338 -0.9508 -0.0343 -1.3674  0.3823         1      19
8  -0.3289 0.2694 -0.8568  0.1991 -1.2422  0.5845         1      13
9  -0.7107 0.2007 -1.1040 -0.3175 -1.5534  0.1320         1      27
10 -0.7939 0.2667 -1.3166 -0.2712 -1.7042  0.1164         1      42
11 -0.1393 0.2654 -0.6594  0.3808 -1.0481  0.7695         1      18
12 -0.5484 0.2438 -1.0263 -0.0706 -1.4337  0.3369         1      33
13 -0.5484 0.2438 -1.0263 -0.0706 -1.4337  0.3369         1      33
   X.factor.alloc.random X.factor.alloc.systematic
1                      1                         0
2                      1                         0
3                      1                         0
4                      1                         0
5                      0                         0
6                      0                         0
7                      1                         0
8                      1                         0
9                      1                         0
10                     0                         1
11                     0                         1
12                     0                         1
13                     0                         1
> 
> ### predictd average relative risks at 30 degrees for the three factor levels
> ### note: the contrast (dummy) variables need to specified explicitly here
> predict(res, newmods=c(30, 0, 0), addx=TRUE)   # for alternate  allocation
    pred     se   ci.lb  ci.ub   cr.lb  cr.ub X.intrcpt X.ablat
 -0.5251 0.2923 -1.0980 0.0478 -1.4651 0.4149         1      30
 X.factor.alloc.random X.factor.alloc.systematic
                     0                         0
> predict(res, newmods=c(30, 1, 0), addx=TRUE)   # for random     allocation
    pred     se   ci.lb   ci.ub   cr.lb  cr.ub X.intrcpt X.ablat
 -0.7926 0.1941 -1.1729 -0.4122 -1.6293 0.0442         1      30
 X.factor.alloc.random X.factor.alloc.systematic
                     1                         0
> predict(res, newmods=c(30, 0, 1), addx=TRUE)   # for systematic allocation
    pred     se   ci.lb  ci.ub   cr.lb  cr.ub X.intrcpt X.ablat
 -0.4666 0.2420 -0.9410 0.0078 -1.3501 0.4168         1      30
 X.factor.alloc.random X.factor.alloc.systematic
                     0                         1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("print.escalc")
> ### * print.escalc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: print.escalc
> ### Title: Print and Summary Methods for 'escalc' Objects
> ### Aliases: print.escalc summary.escalc
> ### Keywords: print
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> dat
   trial               author year tpos  tneg cpos  cneg ablat      alloc
1      1              Aronson 1948    4   119   11   128    44     random
2      2     Ferguson & Simes 1949    6   300   29   274    55     random
3      3      Rosenthal et al 1960    3   228   11   209    42     random
4      4    Hart & Sutherland 1977   62 13536  248 12619    52     random
5      5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate
6      6      Stein & Aronson 1953  180  1361  372  1079    44  alternate
7      7     Vandiviere et al 1973    8  2537   10   619    19     random
8      8           TPT Madras 1980  505 87886  499 87892    13     random
9      9     Coetzee & Berjak 1968   29  7470   45  7232    27     random
10    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic
11    11       Comstock et al 1974  186 50448  141 27197    18 systematic
12    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic
13    13       Comstock et al 1976   27 16886   29 17825    33 systematic
        yi     vi
1  -0.8893 0.3256
2  -1.5854 0.1946
3  -1.3481 0.4154
4  -1.4416 0.0200
5  -0.2175 0.0512
6  -0.7861 0.0069
7  -1.6209 0.2230
8   0.0120 0.0040
9  -0.4694 0.0564
10 -1.3713 0.0730
11 -0.3394 0.0124
12  0.4459 0.5325
13 -0.0173 0.0714
> 
> ### apply summary function
> summary(dat)
   trial               author year tpos  tneg cpos  cneg ablat      alloc
1      1              Aronson 1948    4   119   11   128    44     random
2      2     Ferguson & Simes 1949    6   300   29   274    55     random
3      3      Rosenthal et al 1960    3   228   11   209    42     random
4      4    Hart & Sutherland 1977   62 13536  248 12619    52     random
5      5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate
6      6      Stein & Aronson 1953  180  1361  372  1079    44  alternate
7      7     Vandiviere et al 1973    8  2537   10   619    19     random
8      8           TPT Madras 1980  505 87886  499 87892    13     random
9      9     Coetzee & Berjak 1968   29  7470   45  7232    27     random
10    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic
11    11       Comstock et al 1974  186 50448  141 27197    18 systematic
12    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic
13    13       Comstock et al 1976   27 16886   29 17825    33 systematic
        yi     vi    sei       zi   ci.lb   ci.ub
1  -0.8893 0.3256 0.5706  -1.5586 -2.0077  0.2290
2  -1.5854 0.1946 0.4411  -3.5941 -2.4500 -0.7208
3  -1.3481 0.4154 0.6445  -2.0917 -2.6113 -0.0849
4  -1.4416 0.0200 0.1415 -10.1908 -1.7188 -1.1643
5  -0.2175 0.0512 0.2263  -0.9613 -0.6611  0.2260
6  -0.7861 0.0069 0.0831  -9.4599 -0.9490 -0.6232
7  -1.6209 0.2230 0.4722  -3.4323 -2.5465 -0.6953
8   0.0120 0.0040 0.0629   0.1899 -0.1114  0.1353
9  -0.4694 0.0564 0.2376  -1.9760 -0.9350 -0.0038
10 -1.3713 0.0730 0.2702  -5.0747 -1.9010 -0.8417
11 -0.3394 0.0124 0.1114  -3.0460 -0.5577 -0.1210
12  0.4459 0.5325 0.7297   0.6111 -0.9843  1.8762
13 -0.0173 0.0714 0.2672  -0.0648 -0.5410  0.5064
> summary(dat, transf=exp)
   trial               author year tpos  tneg cpos  cneg ablat      alloc
1      1              Aronson 1948    4   119   11   128    44     random
2      2     Ferguson & Simes 1949    6   300   29   274    55     random
3      3      Rosenthal et al 1960    3   228   11   209    42     random
4      4    Hart & Sutherland 1977   62 13536  248 12619    52     random
5      5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate
6      6      Stein & Aronson 1953  180  1361  372  1079    44  alternate
7      7     Vandiviere et al 1973    8  2537   10   619    19     random
8      8           TPT Madras 1980  505 87886  499 87892    13     random
9      9     Coetzee & Berjak 1968   29  7470   45  7232    27     random
10    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic
11    11       Comstock et al 1974  186 50448  141 27197    18 systematic
12    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic
13    13       Comstock et al 1976   27 16886   29 17825    33 systematic
       yi     vi    sei       zi  ci.lb  ci.ub
1  0.4109 0.3256 0.5706  -1.5586 0.1343 1.2574
2  0.2049 0.1946 0.4411  -3.5941 0.0863 0.4864
3  0.2597 0.4154 0.6445  -2.0917 0.0734 0.9186
4  0.2366 0.0200 0.1415 -10.1908 0.1793 0.3121
5  0.8045 0.0512 0.2263  -0.9613 0.5163 1.2536
6  0.4556 0.0069 0.0831  -9.4599 0.3871 0.5362
7  0.1977 0.2230 0.4722  -3.4323 0.0784 0.4989
8  1.0120 0.0040 0.0629   0.1899 0.8946 1.1449
9  0.6254 0.0564 0.2376  -1.9760 0.3926 0.9962
10 0.2538 0.0730 0.2702  -5.0747 0.1494 0.4310
11 0.7122 0.0124 0.1114  -3.0460 0.5725 0.8860
12 1.5619 0.5325 0.7297   0.6111 0.3737 6.5284
13 0.9828 0.0714 0.2672  -0.0648 0.5821 1.6593
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("print.escalc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("profile.rma")
> ### * profile.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: profile.rma.uni
> ### Title: Profile Plots for 'rma' Objects
> ### Aliases: profile.rma.uni profile.rma.mv
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log odds ratios and corresponding sampling variances
> dat <- escalc(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model using rma.uni()
> res <- rma(yi, vi, data=dat)
> 
> ### profile over tau^2
> profile(res)
  |                                                                              |                                                                      |   0%  |                                                                              |====                                                                  |   5%  |                                                                              |=======                                                               |  10%  |                                                                              |==========                                                            |  15%  |                                                                              |==============                                                        |  20%  |                                                                              |==================                                                    |  25%  |                                                                              |=====================                                                 |  30%  |                                                                              |========================                                              |  35%  |                                                                              |============================                                          |  40%  |                                                                              |================================                                      |  45%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================                                |  55%  |                                                                              |==========================================                            |  60%  |                                                                              |==============================================                        |  65%  |                                                                              |=================================================                     |  70%  |                                                                              |====================================================                  |  75%  |                                                                              |========================================================              |  80%  |                                                                              |============================================================          |  85%  |                                                                              |===============================================================       |  90%  |                                                                              |==================================================================    |  95%  |                                                                              |======================================================================| 100%
> 
> ### change data into long format
> dat.long <- to.long(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### set levels of group variable ("exp" = experimental/vaccinated; "con" = control/non-vaccinated)
> levels(dat.long$group) <- c("exp", "con")
> 
> ### set "con" to reference level
> dat.long$group <- relevel(dat.long$group, ref="con")
> 
> ### calculate log odds and corresponding sampling variances
> dat.long <- escalc(measure="PLO", xi=out1, mi=out2, data=dat.long)
> 
> ### bivariate random-effects model using rma.mv()
> res <- rma.mv(yi, vi, mods = ~ group, random = ~ group | study, struct="UN", data=dat.long)
> res

Multivariate Meta-Analysis Model (k = 26; method: REML)

Variance Components: 

outer factor: study (nlvls = 13)
inner factor: group (nlvls = 2)

            estim    sqrt  k.lvl  fixed  level
tau^2.1    2.6173  1.6178     13     no    con
tau^2.2    1.5486  1.2444     13     no    exp

     rho.con  rho.exp    con  exp
con        1   0.9450      -   no
exp   0.9450        1     13    -

Test for Residual Heterogeneity: 
QE(df = 24) = 5270.3863, p-val < .0001

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 15.5470, p-val < .0001

Model Results:

          estimate      se     zval    pval    ci.lb    ci.ub     
intrcpt    -4.0960  0.4529  -9.0432  <.0001  -4.9837  -3.2082  ***
groupexp   -0.7414  0.1880  -3.9430  <.0001  -1.1099  -0.3729  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### profile over tau^2_1, tau^2_2, and rho
> ### note: for rho, adjust region over which profiling is done ("zoom in" on area around estimate)
> ## Not run: 
> ##D par(mfrow=c(3,1))
> ##D profile(res, tau2=1)
> ##D profile(res, tau2=2)
> ##D profile(res, rho=1, xlim=c(.90, .98))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("profile.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("qqnorm.rma")
> ### * qqnorm.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: qqnorm.rma.uni
> ### Title: Normal QQ Plots for 'rma' Objects
> ### Aliases: qqnorm.rma.uni qqnorm.rma.mh qqnorm.rma.peto qqnorm.rma.glmm
> ###   qqnorm.rma.mv
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> qqnorm(res)
> 
> ### mixed-effects model with absolute latitude as a moderator
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, mods = ~ ablat,
+            data=dat.bcg)
> qqnorm(res)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("qqnorm.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("radial")
> ### * radial
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: radial
> ### Title: Radial (Galbraith) Plots for 'rma' Objects
> ### Aliases: radial galbraith radial.rma
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a fixed-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg, method="FE")
> radial(res)
> 
> ### line from (0,0) with slope equal to the log relative risk from the 4th study
> abline(a=0, b=c(-1.44155119), lty="dotted")
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> radial(res)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("radial", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ranktest")
> ### * ranktest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ranktest
> ### Title: Rank Correlation Test for Funnel Plot Asymmetry for 'rma'
> ###   Objects
> ### Aliases: ranktest ranktest.rma
> ### Keywords: htest
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model
> res <- rma(yi, vi, data=dat)
> 
> ranktest(res)

Rank Correlation Test for Funnel Plot Asymmetry

Kendall's tau = 0.0256, p = 0.9524

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ranktest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("regtest")
> ### * regtest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: regtest
> ### Title: Regression Test for Funnel Plot Asymmetry for 'rma' Objects
> ### Aliases: regtest regtest.rma
> ### Keywords: htest
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### fit random-effects model
> res <- rma(yi, vi, data=dat)
> 
> ### classical Egger test
> regtest(res, model="lm")

Regression Test for Funnel Plot Asymmetry

model:     weighted regression with multiplicative dispersion
predictor: standard error

test for funnel plot asymmetry: t = -1.4013, df = 11, p = 0.1887

> 
> ### random/mixed-effects version of the Egger test
> regtest(res)

Regression Test for Funnel Plot Asymmetry

model:     mixed-effects meta-regression model
predictor: standard error

test for funnel plot asymmetry: z = -0.8033, p = 0.4218

> 
> ### more examples
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat)
> 
> regtest(res, model="lm", predictor="ni")

Regression Test for Funnel Plot Asymmetry

model:     weighted regression with multiplicative dispersion
predictor: sample size

test for funnel plot asymmetry: t = 4.4112, df = 11, p = 0.0010

> regtest(res, model="lm", predictor="ninv")

Regression Test for Funnel Plot Asymmetry

model:     weighted regression with multiplicative dispersion
predictor: inverse of the sample size

test for funnel plot asymmetry: t = -1.4485, df = 11, p = 0.1754

> 
> regtest(res, model="rma", predictor="ni")

Regression Test for Funnel Plot Asymmetry

model:     mixed-effects meta-regression model
predictor: sample size

test for funnel plot asymmetry: z = 2.0488, p = 0.0405

> regtest(res, model="rma", predictor="ninv")

Regression Test for Funnel Plot Asymmetry

model:     mixed-effects meta-regression model
predictor: inverse of the sample size

test for funnel plot asymmetry: z = -1.2566, p = 0.2089

> 
> ### testing for asymmetry after accounting for the influence of a moderator
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat, data=dat)
> regtest(res, model="lm")

Regression Test for Funnel Plot Asymmetry

model:     weighted regression with multiplicative dispersion
predictor: standard error

test for funnel plot asymmetry: t = -1.0876, df = 10, p = 0.3023

> regtest(res)

Regression Test for Funnel Plot Asymmetry

model:     mixed-effects meta-regression model
predictor: standard error

test for funnel plot asymmetry: z = -0.5990, p = 0.5492

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("regtest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("replmiss")
> ### * replmiss
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: replmiss
> ### Title: Replace Missing Values in a Vector
> ### Aliases: replmiss
> ### Keywords: manip
> 
> ### ** Examples
> 
> x <- c(4,2,7,NA,1,NA,5)
> x <- replmiss(x,0)
> x
[1] 4 2 7 0 1 0 5
> 
> x <- c(4,2,7,NA,1,NA,5)
> y <- c(2,3,6,5,8,1,2)
> x <- replmiss(x,y)
> x
[1] 4 2 7 5 1 1 5
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("replmiss", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("residuals.rma")
> ### * residuals.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: residuals.rma
> ### Title: Residual Values based on 'rma' Objects
> ### Aliases: residuals.rma rstandard.rma.uni rstandard.rma.mh
> ###   rstandard.rma.mv rstandard.rma.peto rstudent.rma.uni rstudent.rma.mh
> ###   rstudent.rma.peto
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> rstudent(res)
     resid     se       z
1  -0.1822 0.8354 -0.2181
2  -0.9314 0.7210 -1.2918
3  -0.6625 0.8778 -0.7547
4  -0.8131 0.5603 -1.4512
5   0.5466 0.6448  0.8477
6  -0.0752 0.6376 -0.1180
7  -0.9657 0.7407 -1.3037
8   0.8067 0.5563  1.4501
9   0.2718 0.6668  0.4076
10 -0.7183 0.6369 -1.1277
11  0.4185 0.6255  0.6691
12  1.2057 0.9348  1.2898
13  0.7602 0.6400  1.1879
> 
> ### mixed-effects model with absolute latitude as a moderator
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, mods = ~ ablat,
+            data=dat.bcg)
> rstudent(res)
     resid     se       z
1   0.1488 0.6587  0.2259
2  -0.2801 0.5811 -0.4819
3  -0.3906 0.7177 -0.5442
4  -0.2709 0.4078 -0.6644
5  -0.1044 0.4489 -0.2325
6   0.3183 0.3296  0.9657
7  -1.4026 0.5256 -2.6687
8   0.2270 0.4082  0.5560
9   0.0804 0.4226  0.1903
10 -0.4538 0.4002 -1.1338
11 -0.0704 0.3993 -0.1764
12  1.1763 0.7867  1.4954
13  0.7315 0.3529  2.0730
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("residuals.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rma.glmm")
> ### * rma.glmm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rma.glmm
> ### Title: Meta-Analysis via Generalized Linear (Mixed-Effects) Models
> ### Aliases: rma.glmm
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### random-effects model using rma.uni() (standard RE model analysis)
> rma(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+     data=dat.bcg, method="ML", verbose=TRUE)
Iteration 0 	tau^2 = 0.3495 
Iteration 1 	tau^2 = 0.3034 
Iteration 2 	tau^2 = 0.3025 
Iteration 3 	tau^2 = 0.3025 
Iteration 4 	tau^2 = 0.3025 
Fisher scoring algorithm converged after 4 iterations.

Random-Effects Model (k = 13; tau^2 estimator: ML)

tau^2 (estimated amount of total heterogeneity): 0.3025 (SE = 0.1549)
tau (square root of estimated tau^2 value):      0.5500
I^2 (total heterogeneity / total variability):   91.23%
H^2 (total variability / sampling variability):  11.40

Test for Heterogeneity: 
Q(df = 12) = 163.1649, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.7420   0.1780  -4.1694   <.0001  -1.0907  -0.3932      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### random-effects models using rma.glmm() (require 'lme4' package)
> 
> ### unconditional model with fixed study effects
> ## Not run: 
> ##D rma.glmm(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
> ##D          data=dat.bcg, model="UM.FS", verbose=TRUE)
> ## End(Not run)
> 
> ### unconditional model with random study effects
> ## Not run: 
> ##D rma.glmm(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
> ##D          data=dat.bcg, model="UM.RS", verbose=TRUE)
> ## End(Not run)
> 
> ### conditional model with approximate likelihood
> ## Not run: 
> ##D rma.glmm(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
> ##D          data=dat.bcg, model="CM.AL", verbose=TRUE)
> ## End(Not run)
> 
> ### conditional model with exact likelihood (be patient!)
> ### note: fitting this model is very slow, so be patient
> ## Not run: 
> ##D rma.glmm(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
> ##D          data=dat.bcg, model="CM.EL", verbose=TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rma.glmm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rma.mh")
> ### * rma.mh
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rma.mh
> ### Title: Meta-Analysis via the Mantel-Haenszel Method
> ### Aliases: rma.mh
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the (log) odds ratios using the Mantel-Haenszel method
> rma.mh(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)

Fixed-Effects Model (k = 13)

Test for Heterogeneity: 
Q(df = 12) = 163.9426, p-val < .0001

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
 -0.4734   0.0410 -11.5444   <.0001  -0.5538  -0.3930 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
  0.6229   0.5748   0.6750 

Cochran-Mantel-Haenszel Test:    CMH = 135.6889, df = 1,  p-val < .0001
Tarone's Test for Heterogeneity: X^2 = 171.7567, df = 12, p-val < .0001

> 
> ### meta-analysis of the (log) relative risks using the Mantel-Haenszel method
> rma.mh(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)

Fixed-Effects Model (k = 13)

Test for Heterogeneity: 
Q(df = 12) = 152.5676, p-val < .0001

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
 -0.4537   0.0393 -11.5338   <.0001  -0.5308  -0.3766 

Model Results (RR scale):

estimate    ci.lb    ci.ub 
  0.6353   0.5881   0.6862 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rma.mh", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rma.mv")
> ### * rma.mv
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rma.mv
> ### Title: Meta-Analysis via Multivariate/Multilevel Linear (Mixed-Effects)
> ###   Models
> ### Aliases: rma.mv
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log odds ratios and corresponding sampling variances
> dat <- escalc(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model using rma.uni()
> rma(yi, vi, data=dat)

Random-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.3378 (SE = 0.1784)
tau (square root of estimated tau^2 value):      0.5812
I^2 (total heterogeneity / total variability):   92.07%
H^2 (total variability / sampling variability):  12.61

Test for Heterogeneity: 
Q(df = 12) = 163.1649, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.7452   0.1860  -4.0057   <.0001  -1.1098  -0.3806      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### random-effects model using rma.mv()
> ### note: sigma^2 in this model is the same as tau^2 from the previous model
> rma.mv(yi, vi, random = ~ 1 | trial, data=dat)

Multivariate Meta-Analysis Model (k = 13; method: REML)

Variance Components: 

            estim    sqrt  nlvls  fixed  factor
sigma^2    0.3378  0.5812     13     no   trial

Test for Heterogeneity: 
Q(df = 12) = 163.1649, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.7452   0.1860  -4.0057   <.0001  -1.1098  -0.3806      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### change data into long format
> dat.long <- to.long(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### set levels of group variable ("exp" = experimental/vaccinated; "con" = control/non-vaccinated)
> levels(dat.long$group) <- c("exp", "con")
> 
> ### set "con" to reference level
> dat.long$group <- relevel(dat.long$group, ref="con")
> 
> ### calculate log odds and corresponding sampling variances
> dat.long <- escalc(measure="PLO", xi=out1, mi=out2, data=dat.long)
> 
> ### bivariate random-effects model using rma.mv()
> res <- rma.mv(yi, vi, mods = ~ group, random = ~ group | study, struct="UN", data=dat.long)
> res

Multivariate Meta-Analysis Model (k = 26; method: REML)

Variance Components: 

outer factor: study (nlvls = 13)
inner factor: group (nlvls = 2)

            estim    sqrt  k.lvl  fixed  level
tau^2.1    2.6173  1.6178     13     no    con
tau^2.2    1.5486  1.2444     13     no    exp

     rho.con  rho.exp    con  exp
con        1   0.9450      -   no
exp   0.9450        1     13    -

Test for Residual Heterogeneity: 
QE(df = 24) = 5270.3863, p-val < .0001

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 15.5470, p-val < .0001

Model Results:

          estimate      se     zval    pval    ci.lb    ci.ub     
intrcpt    -4.0960  0.4529  -9.0432  <.0001  -4.9837  -3.2082  ***
groupexp   -0.7414  0.1880  -3.9430  <.0001  -1.1099  -0.3729  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rma.mv", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rma.peto")
> ### * rma.peto
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rma.peto
> ### Title: Meta-Analysis via Peto's Method
> ### Aliases: rma.peto
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load data
> data(dat.bcg)
> 
> ### meta-analysis of the (log) odds ratios using Peto's method
> rma.peto(ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)

Fixed-Effects Model (k = 13)

Test for Heterogeneity: 
Q(df = 12) = 167.7302, p-val < .0001

Model Results (log scale):

estimate       se     zval     pval    ci.lb    ci.ub 
 -0.4744   0.0407 -11.6689   <.0001  -0.5541  -0.3948 

Model Results (OR scale):

estimate    ci.lb    ci.ub 
  0.6222   0.5746   0.6738 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rma.peto", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rma.uni")
> ### * rma.uni
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rma.uni
> ### Title: Meta-Analysis via Linear (Mixed-Effects) Models
> ### Aliases: rma.uni rma
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model (method="REML" is default, so technically not needed)
> rma(yi, vi, data=dat, method="REML")

Random-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.3132 (SE = 0.1664)
tau (square root of estimated tau^2 value):      0.5597
I^2 (total heterogeneity / total variability):   92.22%
H^2 (total variability / sampling variability):  12.86

Test for Heterogeneity: 
Q(df = 12) = 152.2330, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.7145   0.1798  -3.9744   <.0001  -1.0669  -0.3622      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> rma(yi, sei=sqrt(vi), data=dat, method="REML")

Random-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.3132 (SE = 0.1664)
tau (square root of estimated tau^2 value):      0.5597
I^2 (total heterogeneity / total variability):   92.22%
H^2 (total variability / sampling variability):  12.86

Test for Heterogeneity: 
Q(df = 12) = 152.2330, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.7145   0.1798  -3.9744   <.0001  -1.0669  -0.3622      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### supplying the 2x2 table cell frequencies directly to the rma() function
> rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat, method="REML")

Random-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.3132 (SE = 0.1664)
tau (square root of estimated tau^2 value):      0.5597
I^2 (total heterogeneity / total variability):   92.22%
H^2 (total variability / sampling variability):  12.86

Test for Heterogeneity: 
Q(df = 12) = 152.2330, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.7145   0.1798  -3.9744   <.0001  -1.0669  -0.3622      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### mixed-effects model with two moderators (absolute latitude and publication year)
> rma(yi, vi, mods=cbind(ablat, year), data=dat, method="REML")

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.1108 (SE = 0.0845)
tau (square root of estimated tau^2 value):             0.3328
I^2 (residual heterogeneity / unaccounted variability): 71.98%
H^2 (unaccounted variability / sampling variability):   3.57
R^2 (amount of heterogeneity accounted for):            64.63%

Test for Residual Heterogeneity: 
QE(df = 10) = 28.3251, p-val = 0.0016

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 12.2043, p-val = 0.0022

Model Results:

         estimate       se     zval    pval     ci.lb    ci.ub    
intrcpt   -3.5455  29.0959  -0.1219  0.9030  -60.5724  53.4814    
ablat     -0.0280   0.0102  -2.7371  0.0062   -0.0481  -0.0080  **
year       0.0019   0.0147   0.1299  0.8966   -0.0269   0.0307    

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### using a model formula to specify the same model
> rma(yi, vi, mods = ~ ablat + year, data=dat, method="REML")

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.1108 (SE = 0.0845)
tau (square root of estimated tau^2 value):             0.3328
I^2 (residual heterogeneity / unaccounted variability): 71.98%
H^2 (unaccounted variability / sampling variability):   3.57
R^2 (amount of heterogeneity accounted for):            64.63%

Test for Residual Heterogeneity: 
QE(df = 10) = 28.3251, p-val = 0.0016

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 12.2043, p-val = 0.0022

Model Results:

         estimate       se     zval    pval     ci.lb    ci.ub    
intrcpt   -3.5455  29.0959  -0.1219  0.9030  -60.5724  53.4814    
ablat     -0.0280   0.0102  -2.7371  0.0062   -0.0481  -0.0080  **
year       0.0019   0.0147   0.1299  0.8966   -0.0269   0.0307    

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### using a model formula as part of the yi argument
> rma(yi ~ ablat + year, vi, data=dat, method="REML")

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.1108 (SE = 0.0845)
tau (square root of estimated tau^2 value):             0.3328
I^2 (residual heterogeneity / unaccounted variability): 71.98%
H^2 (unaccounted variability / sampling variability):   3.57
R^2 (amount of heterogeneity accounted for):            64.63%

Test for Residual Heterogeneity: 
QE(df = 10) = 28.3251, p-val = 0.0016

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 12.2043, p-val = 0.0022

Model Results:

         estimate       se     zval    pval     ci.lb    ci.ub    
intrcpt   -3.5455  29.0959  -0.1219  0.9030  -60.5724  53.4814    
ablat     -0.0280   0.0102  -2.7371  0.0062   -0.0481  -0.0080  **
year       0.0019   0.0147   0.1299  0.8966   -0.0269   0.0307    

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### manual dummy coding of the allocation factor
> alloc.random     <- ifelse(dat$alloc == "random",     1, 0)
> alloc.alternate  <- ifelse(dat$alloc == "alternate",  1, 0)
> alloc.systematic <- ifelse(dat$alloc == "systematic", 1, 0)
> 
> ### test the allocation factor (in the presence of the other moderators)
> ### note: "alternate" is the reference level of the allocation factor
> ### note: the intercept is the first coefficient, so btt=c(2,3)
> rma(yi, vi, mods = ~ alloc.random + alloc.systematic + year + ablat,
+     data=dat, method="REML", btt=c(2,3))

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.1796 (SE = 0.1425)
tau (square root of estimated tau^2 value):             0.4238
I^2 (residual heterogeneity / unaccounted variability): 73.09%
H^2 (unaccounted variability / sampling variability):   3.72
R^2 (amount of heterogeneity accounted for):            42.67%

Test for Residual Heterogeneity: 
QE(df = 8) = 26.2030, p-val = 0.0010

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 1.3663, p-val = 0.5050

Model Results:

                  estimate       se     zval    pval     ci.lb    ci.ub   
intrcpt           -14.4984  38.3943  -0.3776  0.7057  -89.7498  60.7531   
alloc.random       -0.3421   0.4180  -0.8183  0.4132   -1.1613   0.4772   
alloc.systematic    0.0101   0.4467   0.0226  0.9820   -0.8654   0.8856   
year                0.0075   0.0194   0.3849  0.7003   -0.0306   0.0456   
ablat              -0.0236   0.0132  -1.7816  0.0748   -0.0495   0.0024  .

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### using a model formula to specify the same model
> rma(yi, vi, mods = ~ factor(alloc) + year + ablat, data=dat, method="REML", btt=c(2,3))

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.1796 (SE = 0.1425)
tau (square root of estimated tau^2 value):             0.4238
I^2 (residual heterogeneity / unaccounted variability): 73.09%
H^2 (unaccounted variability / sampling variability):   3.72
R^2 (amount of heterogeneity accounted for):            42.67%

Test for Residual Heterogeneity: 
QE(df = 8) = 26.2030, p-val = 0.0010

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 1.3663, p-val = 0.5050

Model Results:

                         estimate       se     zval    pval     ci.lb    ci.ub
intrcpt                  -14.4984  38.3943  -0.3776  0.7057  -89.7498  60.7531
factor(alloc)random       -0.3421   0.4180  -0.8183  0.4132   -1.1613   0.4772
factor(alloc)systematic    0.0101   0.4467   0.0226  0.9820   -0.8654   0.8856
year                       0.0075   0.0194   0.3849  0.7003   -0.0306   0.0456
ablat                     -0.0236   0.0132  -1.7816  0.0748   -0.0495   0.0024
                          
intrcpt                   
factor(alloc)random       
factor(alloc)systematic   
year                      
ablat                    .

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### test all pairwise differences with Holm's method (using the 'multcomp' package if installed)
> res <- rma(yi, vi, mods = ~ factor(alloc) - 1, data=dat, method="REML")
> res

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.3615 (SE = 0.2111)
tau (square root of estimated tau^2 value):             0.6013
I^2 (residual heterogeneity / unaccounted variability): 88.77%
H^2 (unaccounted variability / sampling variability):   8.91

Test for Residual Heterogeneity: 
QE(df = 10) = 132.3676, p-val < .0001

Test of Moderators (coefficient(s) 1,2,3): 
QM(df = 3) = 15.9842, p-val = 0.0011

Model Results:

                         estimate      se     zval    pval    ci.lb    ci.ub
factor(alloc)alternate    -0.5180  0.4412  -1.1740  0.2404  -1.3827   0.3468
factor(alloc)random       -0.9658  0.2672  -3.6138  0.0003  -1.4896  -0.4420
factor(alloc)systematic   -0.4289  0.3449  -1.2434  0.2137  -1.1050   0.2472
                            
factor(alloc)alternate      
factor(alloc)random      ***
factor(alloc)systematic     

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> if (require(multcomp))
+    summary(glht(res, linfct=contrMat(c("alternate"=1,"random"=1,"systematic"=1),
+            type="Tukey")), test=adjusted("holm"))
Loading required package: multcomp
Loading required package: mvtnorm
Loading required package: survival
Loading required package: TH.data

	 Simultaneous Tests for General Linear Hypotheses

Multiple Comparisons of Means: Tukey Contrasts


Fit: rma(yi = yi, vi = vi, mods = ~factor(alloc) - 1, data = dat, 
    method = "REML")

Linear Hypotheses:
                            Estimate Std. Error z value Pr(>|z|)
random - alternate == 0     -0.44782    0.51582  -0.868    0.771
systematic - alternate == 0  0.08904    0.56004   0.159    0.874
systematic - random == 0     0.53686    0.43636   1.230    0.656
(Adjusted p values reported -- holm method)

> 
> ### subgrouping versus using a single model with a factor (subgrouping provides
> ### an estimate of tau^2 within each subgroup, but the number of studies in each
> ### subgroup is quite small; the model with the allocation factor provides a
> ### single estimate of tau^2 based on a larger number of studies, but assumes
> ### that tau^2 is the same within each subgroup)
> res.a <- rma(yi, vi, data=dat, subset=(alloc=="alternate"))
> res.r <- rma(yi, vi, data=dat, subset=(alloc=="random"))
> res.s <- rma(yi, vi, data=dat, subset=(alloc=="systematic"))
> res.a

Random-Effects Model (k = 2; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.1326 (SE = 0.2286)
tau (square root of estimated tau^2 value):      0.3641
I^2 (total heterogeneity / total variability):   82.02%
H^2 (total variability / sampling variability):  5.56

Test for Heterogeneity: 
Q(df = 1) = 5.5625, p-val = 0.0183

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.5408   0.2816  -1.9204   0.0548  -1.0927   0.0111        . 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> res.r

Random-Effects Model (k = 7; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.3925 (SE = 0.3030)
tau (square root of estimated tau^2 value):      0.6265
I^2 (total heterogeneity / total variability):   89.93%
H^2 (total variability / sampling variability):  9.93

Test for Heterogeneity: 
Q(df = 6) = 110.2133, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.9710   0.2760  -3.5186   0.0004  -1.5118  -0.4301      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> res.s

Random-Effects Model (k = 4; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.4003 (SE = 0.4199)
tau (square root of estimated tau^2 value):      0.6327
I^2 (total heterogeneity / total variability):   86.42%
H^2 (total variability / sampling variability):  7.36

Test for Heterogeneity: 
Q(df = 3) = 16.5919, p-val = 0.0009

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.4242   0.3597  -1.1792   0.2383  -1.1293   0.2809          

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> res <- rma(yi, vi, mods = ~ factor(alloc) - 1, data=dat)
> res

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.3615 (SE = 0.2111)
tau (square root of estimated tau^2 value):             0.6013
I^2 (residual heterogeneity / unaccounted variability): 88.77%
H^2 (unaccounted variability / sampling variability):   8.91

Test for Residual Heterogeneity: 
QE(df = 10) = 132.3676, p-val < .0001

Test of Moderators (coefficient(s) 1,2,3): 
QM(df = 3) = 15.9842, p-val = 0.0011

Model Results:

                         estimate      se     zval    pval    ci.lb    ci.ub
factor(alloc)alternate    -0.5180  0.4412  -1.1740  0.2404  -1.3827   0.3468
factor(alloc)random       -0.9658  0.2672  -3.6138  0.0003  -1.4896  -0.4420
factor(alloc)systematic   -0.4289  0.3449  -1.2434  0.2137  -1.1050   0.2472
                            
factor(alloc)alternate      
factor(alloc)random      ***
factor(alloc)systematic     

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### demonstrating that Q_E + Q_M = Q_Total for fixed-effects models
> ### note: this does not work for random/mixed-effects models, since Q_E and
> ### Q_Total are calculated under the assumption that tau^2 = 0, while the
> ### calculation of Q_M incorporates the estimate of tau^2
> res <- rma(yi, vi, data=dat, method="FE")
> res ### this gives Q_Total

Fixed-Effects Model (k = 13)

Test for Heterogeneity: 
Q(df = 12) = 152.2330, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.4303   0.0405 -10.6247   <.0001  -0.5097  -0.3509      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> res <- rma(yi, vi, mods = ~ ablat + year, data=dat, method="FE")
> res ### this gives Q_E and Q_M

Fixed-Effects with Moderators Model (k = 13)

Test for Residual Heterogeneity: 
QE(df = 10) = 28.3251, p-val = 0.0016

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 123.9079, p-val < .0001

Model Results:

         estimate       se     zval    pval    ci.lb    ci.ub     
intrcpt   17.1518  10.8321   1.5834  0.1133  -4.0786  38.3822     
ablat     -0.0339   0.0040  -8.4766  <.0001  -0.0417  -0.0260  ***
year      -0.0085   0.0055  -1.5518  0.1207  -0.0192   0.0022     

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> res$QE + res$QM
[1] 152.233
> 
> ### decomposition of Q_E into subgroup Q-values
> res <- rma(yi, vi, mods = ~ factor(alloc), data=dat)
> res

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.3615 (SE = 0.2111)
tau (square root of estimated tau^2 value):             0.6013
I^2 (residual heterogeneity / unaccounted variability): 88.77%
H^2 (unaccounted variability / sampling variability):   8.91
R^2 (amount of heterogeneity accounted for):            0.00%

Test for Residual Heterogeneity: 
QE(df = 10) = 132.3676, p-val < .0001

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 1.7675, p-val = 0.4132

Model Results:

                         estimate      se     zval    pval    ci.lb   ci.ub   
intrcpt                   -0.5180  0.4412  -1.1740  0.2404  -1.3827  0.3468   
factor(alloc)random       -0.4478  0.5158  -0.8682  0.3853  -1.4588  0.5632   
factor(alloc)systematic    0.0890  0.5600   0.1590  0.8737  -1.0086  1.1867   

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> res.a <- rma(yi, vi, data=dat, subset=(alloc=="alternate"))
> res.r <- rma(yi, vi, data=dat, subset=(alloc=="random"))
> res.s <- rma(yi, vi, data=dat, subset=(alloc=="systematic"))
> 
> res.a$QE ### Q-value within subgroup "alternate"
[1] 5.562514
> res.r$QE ### Q-value within subgroup "random"
[1] 110.2133
> res.s$QE ### Q-value within subgroup "systematic"
[1] 16.59186
> 
> res$QE
[1] 132.3676
> res.a$QE + res.r$QE + res.s$QE
[1] 132.3676
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rma.uni", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:multcomp’, ‘package:TH.data’, ‘package:survival’,
  ‘package:mvtnorm’

> nameEx("to.long")
> ### * to.long
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: to.long
> ### Title: Convert Data from Vector to Long Format
> ### Aliases: to.long
> ### Keywords: manip
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### convert data to long format
> dat <- to.long(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> dat
   trial               author year tpos  tneg cpos  cneg ablat      alloc study
1      1              Aronson 1948    4   119   11   128    44     random     1
2      1              Aronson 1948    4   119   11   128    44     random     1
3      2     Ferguson & Simes 1949    6   300   29   274    55     random     2
4      2     Ferguson & Simes 1949    6   300   29   274    55     random     2
5      3      Rosenthal et al 1960    3   228   11   209    42     random     3
6      3      Rosenthal et al 1960    3   228   11   209    42     random     3
7      4    Hart & Sutherland 1977   62 13536  248 12619    52     random     4
8      4    Hart & Sutherland 1977   62 13536  248 12619    52     random     4
9      5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate     5
10     5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate     5
11     6      Stein & Aronson 1953  180  1361  372  1079    44  alternate     6
12     6      Stein & Aronson 1953  180  1361  372  1079    44  alternate     6
13     7     Vandiviere et al 1973    8  2537   10   619    19     random     7
14     7     Vandiviere et al 1973    8  2537   10   619    19     random     7
15     8           TPT Madras 1980  505 87886  499 87892    13     random     8
16     8           TPT Madras 1980  505 87886  499 87892    13     random     8
17     9     Coetzee & Berjak 1968   29  7470   45  7232    27     random     9
18     9     Coetzee & Berjak 1968   29  7470   45  7232    27     random     9
19    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic    10
20    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic    10
21    11       Comstock et al 1974  186 50448  141 27197    18 systematic    11
22    11       Comstock et al 1974  186 50448  141 27197    18 systematic    11
23    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic    12
24    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic    12
25    13       Comstock et al 1976   27 16886   29 17825    33 systematic    13
26    13       Comstock et al 1976   27 16886   29 17825    33 systematic    13
   group out1  out2
1      1    4   119
2      2   11   128
3      1    6   300
4      2   29   274
5      1    3   228
6      2   11   209
7      1   62 13536
8      2  248 12619
9      1   33  5036
10     2   47  5761
11     1  180  1361
12     2  372  1079
13     1    8  2537
14     2   10   619
15     1  505 87886
16     2  499 87892
17     1   29  7470
18     2   45  7232
19     1   17  1699
20     2   65  1600
21     1  186 50448
22     2  141 27197
23     1    5  2493
24     2    3  2338
25     1   27 16886
26     2   29 17825
> 
> ### extra long format
> dat <- to.long(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg, vlong=TRUE)
> dat
   trial               author year tpos  tneg cpos  cneg ablat      alloc study
1      1              Aronson 1948    4   119   11   128    44     random     1
2      1              Aronson 1948    4   119   11   128    44     random     1
3      1              Aronson 1948    4   119   11   128    44     random     1
4      1              Aronson 1948    4   119   11   128    44     random     1
5      2     Ferguson & Simes 1949    6   300   29   274    55     random     2
6      2     Ferguson & Simes 1949    6   300   29   274    55     random     2
7      2     Ferguson & Simes 1949    6   300   29   274    55     random     2
8      2     Ferguson & Simes 1949    6   300   29   274    55     random     2
9      3      Rosenthal et al 1960    3   228   11   209    42     random     3
10     3      Rosenthal et al 1960    3   228   11   209    42     random     3
11     3      Rosenthal et al 1960    3   228   11   209    42     random     3
12     3      Rosenthal et al 1960    3   228   11   209    42     random     3
13     4    Hart & Sutherland 1977   62 13536  248 12619    52     random     4
14     4    Hart & Sutherland 1977   62 13536  248 12619    52     random     4
15     4    Hart & Sutherland 1977   62 13536  248 12619    52     random     4
16     4    Hart & Sutherland 1977   62 13536  248 12619    52     random     4
17     5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate     5
18     5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate     5
19     5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate     5
20     5 Frimodt-Moller et al 1973   33  5036   47  5761    13  alternate     5
21     6      Stein & Aronson 1953  180  1361  372  1079    44  alternate     6
22     6      Stein & Aronson 1953  180  1361  372  1079    44  alternate     6
23     6      Stein & Aronson 1953  180  1361  372  1079    44  alternate     6
24     6      Stein & Aronson 1953  180  1361  372  1079    44  alternate     6
25     7     Vandiviere et al 1973    8  2537   10   619    19     random     7
26     7     Vandiviere et al 1973    8  2537   10   619    19     random     7
27     7     Vandiviere et al 1973    8  2537   10   619    19     random     7
28     7     Vandiviere et al 1973    8  2537   10   619    19     random     7
29     8           TPT Madras 1980  505 87886  499 87892    13     random     8
30     8           TPT Madras 1980  505 87886  499 87892    13     random     8
31     8           TPT Madras 1980  505 87886  499 87892    13     random     8
32     8           TPT Madras 1980  505 87886  499 87892    13     random     8
33     9     Coetzee & Berjak 1968   29  7470   45  7232    27     random     9
34     9     Coetzee & Berjak 1968   29  7470   45  7232    27     random     9
35     9     Coetzee & Berjak 1968   29  7470   45  7232    27     random     9
36     9     Coetzee & Berjak 1968   29  7470   45  7232    27     random     9
37    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic    10
38    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic    10
39    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic    10
40    10      Rosenthal et al 1961   17  1699   65  1600    42 systematic    10
41    11       Comstock et al 1974  186 50448  141 27197    18 systematic    11
42    11       Comstock et al 1974  186 50448  141 27197    18 systematic    11
43    11       Comstock et al 1974  186 50448  141 27197    18 systematic    11
44    11       Comstock et al 1974  186 50448  141 27197    18 systematic    11
45    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic    12
46    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic    12
47    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic    12
48    12   Comstock & Webster 1969    5  2493    3  2338    33 systematic    12
49    13       Comstock et al 1976   27 16886   29 17825    33 systematic    13
50    13       Comstock et al 1976   27 16886   29 17825    33 systematic    13
51    13       Comstock et al 1976   27 16886   29 17825    33 systematic    13
52    13       Comstock et al 1976   27 16886   29 17825    33 systematic    13
   group outcome  freq
1      1       1     4
2      1       2   119
3      2       1    11
4      2       2   128
5      1       1     6
6      1       2   300
7      2       1    29
8      2       2   274
9      1       1     3
10     1       2   228
11     2       1    11
12     2       2   209
13     1       1    62
14     1       2 13536
15     2       1   248
16     2       2 12619
17     1       1    33
18     1       2  5036
19     2       1    47
20     2       2  5761
21     1       1   180
22     1       2  1361
23     2       1   372
24     2       2  1079
25     1       1     8
26     1       2  2537
27     2       1    10
28     2       2   619
29     1       1   505
30     1       2 87886
31     2       1   499
32     2       2 87892
33     1       1    29
34     1       2  7470
35     2       1    45
36     2       2  7232
37     1       1    17
38     1       2  1699
39     2       1    65
40     2       2  1600
41     1       1   186
42     1       2 50448
43     2       1   141
44     2       2 27197
45     1       1     5
46     1       2  2493
47     2       1     3
48     2       2  2338
49     1       1    27
50     1       2 16886
51     2       1    29
52     2       2 17825
> 
> ### load data from Hart et al. (1999)
> data(dat.hart1999)
> 
> ### convert data to long format
> dat <- to.long(measure="IRR", x1i=x1i, x2i=x2i, t1i=t1i, t2i=t2i,
+                data=dat.hart1999, var.names=c("id", "group", "events", "ptime"))
> dat
   trial  study year x1i n1i t1i x2i n2i t2i compgrp  prevtype   trinr id group
1      1 AFASAK 1989   9 335 413  19 336 398 placebo   primary 2.8-4.2  1     1
2      1 AFASAK 1989   9 335 413  19 336 398 placebo   primary 2.8-4.2  1     2
3      2   SPAF 1991   8 210 263  19 211 245 placebo   primary 2.0-4.5  2     1
4      2   SPAF 1991   8 210 263  19 211 245 placebo   primary 2.0-4.5  2     2
5      3 BAATAF 1990   3 212 487  13 208 435 control   primary 1.5-2.7  3     1
6      3 BAATAF 1990   3 212 487  13 208 435 control   primary 1.5-2.7  3     2
7      4   CAFA 1991   6 187 237   9 191 241 placebo   primary 2.0-3.0  4     1
8      4   CAFA 1991   6 187 237   9 191 241 placebo   primary 2.0-3.0  4     2
9      5 SPINAF 1992   7 281 489  23 290 483 placebo   primary 1.4-2.8  5     1
10     5 SPINAF 1992   7 281 489  23 290 483 placebo   primary 1.4-2.8  5     2
11     6   EAFT 1993  20 225 507  50 214 405 placebo secondary 2.5-4.0  6     1
12     6   EAFT 1993  20 225 507  50 214 405 placebo secondary 2.5-4.0  6     2
   events ptime
1       9   413
2      19   398
3       8   263
4      19   245
5       3   487
6      13   435
7       6   237
8       9   241
9       7   489
10     23   483
11     20   507
12     50   405
> 
> ### load data from Normand (1999)
> data(dat.normand1999)
> 
> ### convert data to long format
> dat <- to.long(measure="MD", m1i=m1i, sd1i=sd1i, n1i=n1i,
+                m2i=m2i, sd2i=sd2i, n2i=n2i, data=dat.normand1999,
+                var.names=c("id", "group", "mean", "sd", "n"))
> dat
   study             source n1i m1i sd1i n2i m2i sd2i id group mean sd   n
1      1          Edinburgh 155  55   47 156  75   64  1     1   55 47 155
2      1          Edinburgh 155  55   47 156  75   64  1     2   75 64 156
3      2     Orpington-Mild  31  27    7  32  29    4  2     1   27  7  31
4      2     Orpington-Mild  31  27    7  32  29    4  2     2   29  4  32
5      3 Orpington-Moderate  75  64   17  71 119   29  3     1   64 17  75
6      3 Orpington-Moderate  75  64   17  71 119   29  3     2  119 29  71
7      4   Orpington-Severe  18  66   20  18 137   48  4     1   66 20  18
8      4   Orpington-Severe  18  66   20  18 137   48  4     2  137 48  18
9      5      Montreal-Home   8  14    8  13  18   11  5     1   14  8   8
10     5      Montreal-Home   8  14    8  13  18   11  5     2   18 11  13
11     6  Montreal-Transfer  57  19    7  52  18    4  6     1   19  7  57
12     6  Montreal-Transfer  57  19    7  52  18    4  6     2   18  4  52
13     7          Newcastle  34  52   45  33  41   34  7     1   52 45  34
14     7          Newcastle  34  52   45  33  41   34  7     2   41 34  33
15     8               Umea 110  21   16 183  31   27  8     1   21 16 110
16     8               Umea 110  21   16 183  31   27  8     2   31 27 183
17     9            Uppsala  60  30   27  52  23   20  9     1   30 27  60
18     9            Uppsala  60  30   27  52  23   20  9     2   23 20  52
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("to.long", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("to.table")
> ### * to.table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: to.table
> ### Title: Convert Data from Vector to Table Format
> ### Aliases: to.table
> ### Keywords: manip
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### create tables
> dat <- to.table(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+                 data=dat.bcg, slab=paste(author, year, sep=", "),
+                 rows=c("Vaccinated", "Not Vaccinated"), cols=c("TB+", "TB-"))
> dat
, , Aronson, 1948

               TB+ TB-
Vaccinated       4 119
Not Vaccinated  11 128

, , Ferguson & Simes, 1949

               TB+ TB-
Vaccinated       6 300
Not Vaccinated  29 274

, , Rosenthal et al, 1960

               TB+ TB-
Vaccinated       3 228
Not Vaccinated  11 209

, , Hart & Sutherland, 1977

               TB+   TB-
Vaccinated      62 13536
Not Vaccinated 248 12619

, , Frimodt-Moller et al, 1973

               TB+  TB-
Vaccinated      33 5036
Not Vaccinated  47 5761

, , Stein & Aronson, 1953

               TB+  TB-
Vaccinated     180 1361
Not Vaccinated 372 1079

, , Vandiviere et al, 1973

               TB+  TB-
Vaccinated       8 2537
Not Vaccinated  10  619

, , TPT Madras, 1980

               TB+   TB-
Vaccinated     505 87886
Not Vaccinated 499 87892

, , Coetzee & Berjak, 1968

               TB+  TB-
Vaccinated      29 7470
Not Vaccinated  45 7232

, , Rosenthal et al, 1961

               TB+  TB-
Vaccinated      17 1699
Not Vaccinated  65 1600

, , Comstock et al, 1974

               TB+   TB-
Vaccinated     186 50448
Not Vaccinated 141 27197

, , Comstock & Webster, 1969

               TB+  TB-
Vaccinated       5 2493
Not Vaccinated   3 2338

, , Comstock et al, 1976

               TB+   TB-
Vaccinated      27 16886
Not Vaccinated  29 17825

> 
> ### load data from Hart et al. (1999)
> data(dat.hart1999)
> 
> ### create tables
> dat <- to.table(measure="IRR", x1i=x1i, x2i=x2i, t1i=t1i, t2i=t2i,
+                 data=dat.hart1999, slab=paste(study, year, sep=", "),
+                 rows=c("Warfarin Group", "Placebo/Control Group"))
> dat
, , AFASAK, 1989

                      Events Person-Time
Warfarin Group             9         413
Placebo/Control Group     19         398

, , SPAF, 1991

                      Events Person-Time
Warfarin Group             8         263
Placebo/Control Group     19         245

, , BAATAF, 1990

                      Events Person-Time
Warfarin Group             3         487
Placebo/Control Group     13         435

, , CAFA, 1991

                      Events Person-Time
Warfarin Group             6         237
Placebo/Control Group      9         241

, , SPINAF, 1992

                      Events Person-Time
Warfarin Group             7         489
Placebo/Control Group     23         483

, , EAFT, 1993

                      Events Person-Time
Warfarin Group            20         507
Placebo/Control Group     50         405

> 
> ### load data from Normand (1999)
> data(dat.normand1999)
> 
> ### create tables
> dat <- to.table(measure="MD", m1i=m1i, sd1i=sd1i, n1i=n1i,
+                 m2i=m2i, sd2i=sd2i, n2i=n2i, data=dat.normand1999,
+                 slab=source, rows=c("Specialized Care", "Routine Care"))
> dat
, , Edinburgh

                 Mean SD   n
Specialized Care   55 47 155
Routine Care       75 64 156

, , Orpington-Mild

                 Mean SD  n
Specialized Care   27  7 31
Routine Care       29  4 32

, , Orpington-Moderate

                 Mean SD  n
Specialized Care   64 17 75
Routine Care      119 29 71

, , Orpington-Severe

                 Mean SD  n
Specialized Care   66 20 18
Routine Care      137 48 18

, , Montreal-Home

                 Mean SD  n
Specialized Care   14  8  8
Routine Care       18 11 13

, , Montreal-Transfer

                 Mean SD  n
Specialized Care   19  7 57
Routine Care       18  4 52

, , Newcastle

                 Mean SD  n
Specialized Care   52 45 34
Routine Care       41 34 33

, , Umea

                 Mean SD   n
Specialized Care   21 16 110
Routine Care       31 27 183

, , Uppsala

                 Mean SD  n
Specialized Care   30 27 60
Routine Care       23 20 52

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("to.table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("transf")
> ### * transf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: transf
> ### Title: Transformation Function
> ### Aliases: transf.rtoz transf.ztor transf.logit transf.ilogit
> ###   transf.arcsin transf.iarcsin transf.pft transf.ipft transf.ipft.hm
> ###   transf.isqrt transf.irft transf.iirft transf.ahw transf.iahw
> ###   transf.abt transf.iabt transf.ztor.int transf.exp.int
> ###   transf.ilogit.int
> ### Keywords: manip
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### average relative risk with 95% CI
> predict(res, transf=exp)
   pred  ci.lb  ci.ub  cr.lb  cr.ub
 0.4894 0.3441 0.6962 0.1546 1.5490
> 
> ### average relative risk with 95% CI using the integral transformation
> predict(res, transf=transf.exp.int, targs=list(tau2=res$tau2, lower=-4, upper=4))
   pred  ci.lb  ci.ub  cr.lb  cr.ub
 0.5724 0.4024 0.8142 0.1809 1.8117
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("transf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("trimfill")
> ### * trimfill
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: trimfill
> ### Title: Trim and Fill Analysis for 'rma.uni' Objects
> ### Aliases: trimfill trimfill.rma.uni
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a fixed-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg, method="FE")
> res.tf <- trimfill(res)
> res.tf

Estimated number of missing studies on the right side: 4 (SE = 2.3853)

Fixed-Effects Model (k = 17)

Test for Heterogeneity: 
Q(df = 16) = 262.7316, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.2910   0.0383  -7.6057   <.0001  -0.3660  -0.2160      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> funnel(res.tf)
> 
> ### estimator "R0" also provides test
> res.tf <- trimfill(res, estimator="R0")
> res.tf

Estimated number of missing studies on the right side: 4 (SE = 3.1623)
Test of H0: no missing studies on the right side: p-val = 0.0312

Fixed-Effects Model (k = 17)

Test for Heterogeneity: 
Q(df = 16) = 262.7316, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.2910   0.0383  -7.6057   <.0001  -0.3660  -0.2160      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### meta-analysis of the log relative risks using a random-effects model
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> res.tf <- trimfill(res)
> res.tf

Estimated number of missing studies on the right side: 1 (SE = 2.4528)

Random-Effects Model (k = 14; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.3313 (SE = 0.1701)
tau (square root of estimated tau^2 value):      0.5756
I^2 (total heterogeneity / total variability):   92.14%
H^2 (total variability / sampling variability):  12.72

Test for Heterogeneity: 
Q(df = 13) = 154.6750, p-val < .0001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
 -0.6571   0.1785  -3.6805   0.0002  -1.0070  -0.3072      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> funnel(res.tf)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("trimfill", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("update.rma")
> ### * update.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: update.rma
> ### Title: Model Updating for 'rma' Objects
> ### Aliases: update.rma
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### calculate log relative risks and corresponding sampling variances
> dat <- escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
> 
> ### random-effects model (method="REML" is default)
> res <- rma(yi, vi, data=dat, digits=3)
> res

Random-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of total heterogeneity): 0.313 (SE = 0.166)
tau (square root of estimated tau^2 value):      0.560
I^2 (total heterogeneity / total variability):   92.22%
H^2 (total variability / sampling variability):  12.86

Test for Heterogeneity: 
Q(df = 12) = 152.233, p-val < .001

Model Results:

estimate       se     zval     pval    ci.lb    ci.ub          
  -0.715    0.180   -3.974    <.001   -1.067   -0.362      *** 

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### mixed-effects model with two moderators (absolute latitude and publication year)
> res <- update(res, ~ ablat + year)
> res

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.111 (SE = 0.084)
tau (square root of estimated tau^2 value):             0.333
I^2 (residual heterogeneity / unaccounted variability): 71.98%
H^2 (unaccounted variability / sampling variability):   3.57
R^2 (amount of heterogeneity accounted for):            64.63%

Test for Residual Heterogeneity: 
QE(df = 10) = 28.325, p-val = 0.002

Test of Moderators (coefficient(s) 2,3): 
QM(df = 2) = 12.204, p-val = 0.002

Model Results:

         estimate      se    zval   pval    ci.lb   ci.ub    
intrcpt    -3.546  29.096  -0.122  0.903  -60.572  53.481    
ablat      -0.028   0.010  -2.737  0.006   -0.048  -0.008  **
year        0.002   0.015   0.130  0.897   -0.027   0.031    

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### remove 'year' moderator
> res <- update(res, ~ . - year)
> res

Mixed-Effects Model (k = 13; tau^2 estimator: REML)

tau^2 (estimated amount of residual heterogeneity):     0.076 (SE = 0.059)
tau (square root of estimated tau^2 value):             0.276
I^2 (residual heterogeneity / unaccounted variability): 68.39%
H^2 (unaccounted variability / sampling variability):   3.16
R^2 (amount of heterogeneity accounted for):            75.62%

Test for Residual Heterogeneity: 
QE(df = 11) = 30.733, p-val = 0.001

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 16.357, p-val < .001

Model Results:

         estimate     se    zval   pval   ci.lb   ci.ub     
intrcpt     0.251  0.249   1.009  0.313  -0.237   0.740     
ablat      -0.029  0.007  -4.044  <.001  -0.043  -0.015  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### fit model with ML estimation
> update(res, method="ML")

Mixed-Effects Model (k = 13; tau^2 estimator: ML)

tau^2 (estimated amount of residual heterogeneity):     0.034 (SE = 0.028)
tau (square root of estimated tau^2 value):             0.185
I^2 (residual heterogeneity / unaccounted variability): 49.33%
H^2 (unaccounted variability / sampling variability):   1.97
R^2 (amount of heterogeneity accounted for):            87.73%

Test for Residual Heterogeneity: 
QE(df = 11) = 30.733, p-val = 0.001

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 28.911, p-val < .001

Model Results:

         estimate     se    zval   pval   ci.lb   ci.ub     
intrcpt     0.282  0.187   1.507  0.132  -0.085   0.649     
ablat      -0.030  0.005  -5.377  <.001  -0.040  -0.019  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### example with rma.glmm()
> res <- rma.glmm(measure="OR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg, digits=3)
> res <- update(res, mods = ~ ablat)
> res

Mixed-Effects Model (k = 13; tau^2 estimator: ML)
Model Type: Unconditional Model with Fixed Study Effects

tau^2 (estimated amount of residual heterogeneity):     0
tau (square root of estimated tau^2 value):             0
I^2 (residual heterogeneity / unaccounted variability): 0.00%
H^2 (unaccounted variability / sampling variability):   1.00

Tests for Residual Heterogeneity: 
Wld(df = 11) = 25.095, p-val = 0.009
LRT(df = 11) = 25.014, p-val = 0.009

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 143.181, p-val < .001

Model Results:

         estimate     se     zval   pval   ci.lb   ci.ub     
intrcpt     0.399  0.082    4.851  <.001   0.238   0.560  ***
ablat      -0.033  0.003  -11.966  <.001  -0.039  -0.028  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> ### conditional model with approximate likelihood
> update(res, model="CM.AL")

Mixed-Effects Model (k = 13; tau^2 estimator: ML)
Model Type: Conditional Model with Approximate Likelihood

tau^2 (estimated amount of residual heterogeneity):     0.032
tau (square root of estimated tau^2 value):             0.179
I^2 (residual heterogeneity / unaccounted variability): 45.97%
H^2 (unaccounted variability / sampling variability):   1.85

Tests for Residual Heterogeneity: 
Wld(df = 11) = 29.895, p-val = 0.002
LRT(df = 11) = 30.013, p-val = 0.002

Test of Moderators (coefficient(s) 2): 
QM(df = 1) = 31.169, p-val < .001

Model Results:

         estimate     se    zval   pval   ci.lb   ci.ub     
intrcpt     0.293  0.187   1.568  0.117  -0.073   0.659     
ablat      -0.030  0.005  -5.583  <.001  -0.040  -0.019  ***

---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("update.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("vcov.rma")
> ### * vcov.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: vcov.rma
> ### Title: Extract the Variance-Covariance Matrix of the Parameter
> ###   Estimates from 'rma' Objects
> ### Aliases: vcov.rma
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a mixed-effects model
> ### with two moderators (absolute latitude and publication year)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg,
+            mods = ~ ablat + year, data=dat.bcg)
> vcov(res)
            intrcpt         ablat          year
intrcpt 846.5702228 -0.1783751581 -0.4272176864
ablat    -0.1783752  0.0001047356  0.0000889397
year     -0.4272177  0.0000889397  0.0002156144
> 
> ### marginal var-cov matrix of the observed log relative risks
> vcov(res, type="obs")
           [,1]      [,2]      [,3]      [,4]      [,5]     [,6]      [,7]
 [1,] 0.4363721 0.0000000 0.0000000 0.0000000 0.0000000 0.000000 0.0000000
 [2,] 0.0000000 0.3053685 0.0000000 0.0000000 0.0000000 0.000000 0.0000000
 [3,] 0.0000000 0.0000000 0.5261553 0.0000000 0.0000000 0.000000 0.0000000
 [4,] 0.0000000 0.0000000 0.0000000 0.1307974 0.0000000 0.000000 0.0000000
 [5,] 0.0000000 0.0000000 0.0000000 0.0000000 0.1619975 0.000000 0.0000000
 [6,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.117693 0.0000000
 [7,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000 0.3338046
 [8,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000 0.0000000
 [9,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000 0.0000000
[10,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000 0.0000000
[11,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000 0.0000000
[12,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000 0.0000000
[13,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000 0.0000000
           [,8]      [,9]     [,10]     [,11]     [,12]    [,13]
 [1,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000
 [2,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000
 [3,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000
 [4,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000
 [5,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000
 [6,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000
 [7,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.000000
 [8,] 0.1147489 0.0000000 0.0000000 0.0000000 0.0000000 0.000000
 [9,] 0.0000000 0.1672216 0.0000000 0.0000000 0.0000000 0.000000
[10,] 0.0000000 0.0000000 0.1838121 0.0000000 0.0000000 0.000000
[11,] 0.0000000 0.0000000 0.0000000 0.1231996 0.0000000 0.000000
[12,] 0.0000000 0.0000000 0.0000000 0.0000000 0.6432932 0.000000
[13,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.182192
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("vcov.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("weights.rma")
> ### * weights.rma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: weights.rma.uni
> ### Title: Compute Weights for 'rma' Objects
> ### Aliases: weights.rma.uni weights.rma.mh weights.rma.peto
> ###   weights.rma.glmm weights.rma.mv
> ### Keywords: models
> 
> ### ** Examples
> 
> ### load BCG vaccine data
> data(dat.bcg)
> 
> ### meta-analysis of the log relative risks using a mixed-effects model
> ### with two moderators (absolute latitude and publication year)
> res <- rma(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, 
+            mods = ~ ablat + year, data=dat.bcg)
> weights(res)
        1         2         3         4         5         6         7         8 
 3.366420  4.810621  2.791974 11.231203  9.068114 12.481731  4.400814 12.801967 
        9        10        11        12        13 
 8.784824  7.991920 11.923841  2.283581  8.062988 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("weights.rma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  13.271 0.264 13.6 0 0 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
