
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fuzzyMM"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "fuzzyMM-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('fuzzyMM')
Loading required package: osmar
Loading required package: XML
Loading required package: RCurl
Loading required package: bitops
Loading required package: geosphere
Loading required package: sp

Attaching package: ‘osmar’

The following object is masked from ‘package:utils’:

    find

Loading required package: frbs
Warning: replacing previous import by ‘rgeos::union’ when loading ‘fuzzyMM’
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("FIS_IMP")
> ### * FIS_IMP
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FIS_IMP
> ### Title: Fuzzy Inference System 1 (FIS1)
> ### Aliases: FIS_IMP
> ### Keywords: datasets
> 
> ### ** Examples
> 
> fis_imp <- get_fis("IMP")
> fis_imp
$num.labels
     [,1] [,2] [,3] [,4]
[1,]    3    2    2    2

$varout.mf
NULL

$rule
     [,1] [,2] [,3] [,4]        [,5]  [,6] [,7] [,8]        [,9]  [,10] [,11]
[1,] "IF" "v"  "is" "high"      "and" "HE" "is" "small"     "and" "PD"  "is" 
[2,] "IF" "v"  "is" "high"      "and" "HE" "is" "large"     "and" "PD"  "is" 
[3,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "dont_care" "and" "PD"  "is" 
[4,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "dont_care" "and" "PD"  "is" 
[5,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "small"     "and" "PD"  "is" 
[6,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "large"     "and" "PD"  "is" 
     [,12]       [,13] [,14]  [,15] [,16]       [,17] 
[1,] "dont_care" "and" "HDOP" "is"  "dont_care" "THEN"
[2,] "dont_care" "and" "HDOP" "is"  "dont_care" "THEN"
[3,] "short"     "and" "HDOP" "is"  "good"      "THEN"
[4,] "long"      "and" "HDOP" "is"  "good"      "THEN"
[5,] "short"     "and" "HDOP" "is"  "dont_care" "THEN"
[6,] "long"      "and" "HDOP" "is"  "dont_care" "THEN"

$varinp.mf
         high      low     zero      small      large      short       long
[1,] 6.000000  6.00000  6.00000  6.0000000  6.0000000  6.0000000  6.0000000
[2,] 3.063413 -4.59512 -4.59512 -0.3676096  0.2625783 -0.3063413  0.3063413
[3,] 4.500000  3.00000  1.00000 32.5000000 42.5000000 25.0000000 35.0000000
[4,]       NA       NA       NA         NA         NA         NA         NA
[5,]       NA       NA       NA         NA         NA         NA         NA
         good     bad
[1,]  6.00000 6.00000
[2,] -4.59512 4.59512
[3,]  4.00000 5.00000
[4,]       NA      NA
[5,]       NA      NA

$range.data.ori
     [,1] [,2] [,3] [,4] [,5]
[1,]    0    0    0    0    0
[2,]   50  360   60   20  100

$type.model
[1] "TSK"

$type.tnorm
[1] "MIN"

$type.implication.func
[1] "MIN"

$type.mf
[1] "SIGMOID"

$type.defuz
NULL

$type.snorm
[1] "MAX"

$func.tsk
     [,1]
[1,]   50
[2,]   10
[3,]   50
[4,]   10
[5,]  100
[6,]   10

$method.type
[1] "MANUAL"

$name
[1] "Sim-1"

$colnames.var
[1] "v"      "HE"     "PD"     "HDOP"   "output"

$class
function (x)  .Primitive("class")

attr(,"class")
[1] "frbs"
> # Plot membership functions
> plotMF(fis_imp)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FIS_IMP", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FIS_SMP1")
> ### * FIS_SMP1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FIS_SMP1
> ### Title: Fuzzy Inference System 2 (FIS2)
> ### Aliases: FIS_SMP1
> ### Keywords: datasets
> 
> ### ** Examples
> 
> fis_smp1 <- get_fis("SMP1")
> fis_smp1
$num.labels
     [,1] [,2] [,3] [,4] [,5] [,6] [,7]
[1,]    3    2    2    2    2    2    1

$varout.mf
NULL

$rule
      [,1] [,2]    [,3] [,4]        [,5]  [,6]   [,7] [,8]        [,9]  [,10]  
 [1,] "IF" "speed" "is" "dont_care" "and" "HDOP" "is" "dont_care" "and" "alpha"
 [2,] "IF" "speed" "is" "dont_care" "and" "HDOP" "is" "dont_care" "and" "alpha"
 [3,] "IF" "speed" "is" "dont_care" "and" "HDOP" "is" "dont_care" "and" "alpha"
 [4,] "IF" "speed" "is" "dont_care" "and" "HDOP" "is" "dont_care" "and" "alpha"
 [5,] "IF" "speed" "is" "dont_care" "and" "HDOP" "is" "dont_care" "and" "alpha"
 [6,] "IF" "speed" "is" "dont_care" "and" "HDOP" "is" "dont_care" "and" "alpha"
 [7,] "IF" "speed" "is" "dont_care" "and" "HDOP" "is" "dont_care" "and" "alpha"
 [8,] "IF" "speed" "is" "zero"      "and" "HDOP" "is" "good"      "and" "alpha"
 [9,] "IF" "speed" "is" "dont_care" "and" "HDOP" "is" "good"      "and" "alpha"
[10,] "IF" "speed" "is" "dont_care" "and" "HDOP" "is" "good"      "and" "alpha"
[11,] "IF" "speed" "is" "fast"      "and" "HDOP" "is" "dont_care" "and" "alpha"
[12,] "IF" "speed" "is" "fast"      "and" "HDOP" "is" "good"      "and" "alpha"
      [,11] [,12]       [,13] [,14]  [,15] [,16]       [,17] [,18]        [,19]
 [1,] "is"  "below90"   "and" "beta" "is"  "below90b"  "and" "delta_dist" "is" 
 [2,] "is"  "above90"   "and" "beta" "is"  "dont_care" "and" "delta_dist" "is" 
 [3,] "is"  "dont_care" "and" "beta" "is"  "above90b"  "and" "delta_dist" "is" 
 [4,] "is"  "below90"   "and" "beta" "is"  "below90b"  "and" "delta_dist" "is" 
 [5,] "is"  "above90"   "and" "beta" "is"  "dont_care" "and" "delta_dist" "is" 
 [6,] "is"  "dont_care" "and" "beta" "is"  "above90b"  "and" "delta_dist" "is" 
 [7,] "is"  "below90"   "and" "beta" "is"  "below90b"  "and" "delta_dist" "is" 
 [8,] "is"  "dont_care" "and" "beta" "is"  "dont_care" "and" "delta_dist" "is" 
 [9,] "is"  "dont_care" "and" "beta" "is"  "dont_care" "and" "delta_dist" "is" 
[10,] "is"  "dont_care" "and" "beta" "is"  "dont_care" "and" "delta_dist" "is" 
[11,] "is"  "dont_care" "and" "beta" "is"  "dont_care" "and" "delta_dist" "is" 
[12,] "is"  "dont_care" "and" "beta" "is"  "dont_care" "and" "delta_dist" "is" 
      [,20]       [,21] [,22] [,23] [,24]       [,25] [,26] [,27] [,28]      
 [1,] "dont_care" "and" "HI"  "is"  "dont_care" "and" "HI1" "is"  "dont_care"
 [2,] "pos"       "and" "HI"  "is"  "dont_care" "and" "HI1" "is"  "dont_care"
 [3,] "pos"       "and" "HI"  "is"  "dont_care" "and" "HI1" "is"  "dont_care"
 [4,] "dont_care" "and" "HI"  "is"  "small"     "and" "HI1" "is"  "dont_care"
 [5,] "pos"       "and" "HI"  "is"  "small"     "and" "HI1" "is"  "dont_care"
 [6,] "pos"       "and" "HI"  "is"  "small"     "and" "HI1" "is"  "dont_care"
 [7,] "dont_care" "and" "HI"  "is"  "large"     "and" "HI1" "is"  "dont_care"
 [8,] "dont_care" "and" "HI"  "is"  "dont_care" "and" "HI1" "is"  "dont_care"
 [9,] "neg"       "and" "HI"  "is"  "dont_care" "and" "HI1" "is"  "dont_care"
[10,] "pos"       "and" "HI"  "is"  "dont_care" "and" "HI1" "is"  "dont_care"
[11,] "dont_care" "and" "HI"  "is"  "small"     "and" "HI1" "is"  "dont_care"
[12,] "dont_care" "and" "HI"  "is"  "dont_care" "and" "HI1" "is"  "180"      
      [,29] 
 [1,] "THEN"
 [2,] "THEN"
 [3,] "THEN"
 [4,] "THEN"
 [5,] "THEN"
 [6,] "THEN"
 [7,] "THEN"
 [8,] "THEN"
 [9,] "THEN"
[10,] "THEN"
[11,] "THEN"
[12,] "THEN"

$varinp.mf
         fast     slow     zero     good     bad    below90     above90
[1,] 6.000000  6.00000  6.00000  6.00000 6.00000  6.0000000   6.0000000
[2,] 3.063413 -4.59512 -4.59512 -4.59512 4.59512 -0.6126826   0.3063413
[3,] 4.500000  3.00000  1.00000  4.00000 5.00000 92.5000000 105.0000000
[4,]       NA       NA       NA       NA      NA         NA          NA
[5,]       NA       NA       NA       NA      NA         NA          NA
       below90b    above90b       pos       neg     small      large 180
[1,]  6.0000000   6.0000000  6.000000 6.0000000  6.000000  6.0000000   4
[2,] -0.6126826   0.3063413 -0.919024 0.6126826 -0.919024  0.6126826 125
[3,] 92.5000000 105.0000000  0.000000 2.5000000 15.000000 22.5000000 150
[4,]         NA          NA        NA        NA        NA         NA 200
[5,]         NA          NA        NA        NA        NA         NA 225

$range.data.ori
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    0    0    0    0 -500    0    0    0
[2,]   50   20  360  360  500  360  360  100

$type.model
[1] "TSK"

$type.tnorm
[1] "MIN"

$type.implication.func
[1] "MIN"

$type.mf
[1] "MIX"

$type.defuz
NULL

$type.snorm
[1] "MAX"

$func.tsk
      [,1]
 [1,]  100
 [2,]   10
 [3,]   10
 [4,]  100
 [5,]   10
 [6,]   10
 [7,]   10
 [8,]  100
 [9,]   50
[10,]   10
[11,]   50
[12,]  100

$method.type
[1] "MANUAL"

$name
[1] "Sim-2"

$colnames.var
[1] "speed"      "HDOP"       "alpha"      "beta"       "delta_dist"
[6] "HI"         "HI1"        "output"    

$class
function (x)  .Primitive("class")

attr(,"class")
[1] "frbs"
> # Plot membership functions
> plotMF(fis_smp1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FIS_SMP1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FIS_SMP2")
> ### * FIS_SMP2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FIS_SMP2
> ### Title: Fuzzy Inference System 3 (FIS3)
> ### Aliases: FIS_SMP2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> fis_smp2 <- get_fis("SMP2")
> fis_smp2
$num.labels
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    3    2    2    2    2    2

$varout.mf
NULL

$rule
      [,1] [,2] [,3] [,4]        [,5]  [,6] [,7] [,8]        [,9]  [,10] [,11]
 [1,] "IF" "v"  "is" "high"      "and" "HE" "is" "small"     "and" "PD"  "is" 
 [2,] "IF" "v"  "is" "high"      "and" "HE" "is" "large"     "and" "PD"  "is" 
 [3,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "dont_care" "and" "PD"  "is" 
 [4,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "dont_care" "and" "PD"  "is" 
 [5,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "small"     "and" "PD"  "is" 
 [6,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "large"     "and" "PD"  "is" 
 [7,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "dont_care" "and" "PD"  "is" 
 [8,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "dont_care" "and" "PD"  "is" 
 [9,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "dont_care" "and" "PD"  "is" 
[10,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "dont_care" "and" "PD"  "is" 
      [,12]       [,13] [,14]  [,15] [,16]       [,17] [,18]          [,19]
 [1,] "dont_care" "and" "HDOP" "is"  "dont_care" "and" "Connectivity" "is" 
 [2,] "dont_care" "and" "HDOP" "is"  "dont_care" "and" "Connectivity" "is" 
 [3,] "short"     "and" "HDOP" "is"  "good"      "and" "Connectivity" "is" 
 [4,] "long"      "and" "HDOP" "is"  "good"      "and" "Connectivity" "is" 
 [5,] "short"     "and" "HDOP" "is"  "dont_care" "and" "Connectivity" "is" 
 [6,] "long"      "and" "HDOP" "is"  "dont_care" "and" "Connectivity" "is" 
 [7,] "dont_care" "and" "HDOP" "is"  "dont_care" "and" "Connectivity" "is" 
 [8,] "dont_care" "and" "HDOP" "is"  "dont_care" "and" "Connectivity" "is" 
 [9,] "dont_care" "and" "HDOP" "is"  "dont_care" "and" "Connectivity" "is" 
[10,] "dont_care" "and" "HDOP" "is"  "dont_care" "and" "Connectivity" "is" 
      [,20]       [,21] [,22]      [,23] [,24]       [,25] 
 [1,] "dont_care" "and" "dist_err" "is"  "dont_care" "THEN"
 [2,] "dont_care" "and" "dist_err" "is"  "dont_care" "THEN"
 [3,] "dont_care" "and" "dist_err" "is"  "dont_care" "THEN"
 [4,] "dont_care" "and" "dist_err" "is"  "dont_care" "THEN"
 [5,] "dont_care" "and" "dist_err" "is"  "dont_care" "THEN"
 [6,] "dont_care" "and" "dist_err" "is"  "dont_care" "THEN"
 [7,] "indirect"  "and" "dist_err" "is"  "dont_care" "THEN"
 [8,] "direct"    "and" "dist_err" "is"  "dont_care" "THEN"
 [9,] "dont_care" "and" "dist_err" "is"  "small2"    "THEN"
[10,] "dont_care" "and" "dist_err" "is"  "large2"    "THEN"

$varinp.mf
         high      low     zero      small      large      short       long
[1,] 6.000000  6.00000  6.00000  6.0000000  6.0000000  6.0000000  6.0000000
[2,] 3.063413 -4.59512 -4.59512 -0.3676096  0.2625783 -0.3063413  0.3063413
[3,] 4.500000  3.00000  1.00000 32.5000000 42.5000000 25.0000000 35.0000000
[4,]       NA       NA       NA         NA         NA         NA         NA
[5,]       NA       NA       NA         NA         NA         NA         NA
         good     bad indirect direct    small2     large2
[1,]  6.00000 6.00000        1      1  6.000000  6.0000000
[2,] -4.59512 4.59512       -1      0 -0.919024  0.6126826
[3,]  4.00000 5.00000        0      1 10.000000 17.5000000
[4,]       NA      NA        1      2        NA         NA
[5,]       NA      NA       NA     NA        NA         NA

$range.data.ori
     [,1] [,2] [,3] [,4] [,5] [,6] [,7]
[1,]    0    0    0    0    0    0    0
[2,]   50  360   60   20    1 1000  100

$type.model
[1] "TSK"

$type.tnorm
[1] "MIN"

$type.implication.func
[1] "MIN"

$type.mf
[1] "MIX"

$type.defuz
NULL

$type.snorm
[1] "MAX"

$func.tsk
      [,1]
 [1,]   50
 [2,]   10
 [3,]   50
 [4,]   10
 [5,]  100
 [6,]   10
 [7,]   10
 [8,]  100
 [9,]  100
[10,]   10

$method.type
[1] "MANUAL"

$name
[1] "Sim-3"

$colnames.var
[1] "v"            "HE"           "PD"           "HDOP"         "Connectivity"
[6] "dist_err"     "output"      

$class
function (x)  .Primitive("class")

attr(,"class")
[1] "frbs"
> # Plot membership functions
> plotMF(fis_smp2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FIS_SMP2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("create_drn")
> ### * create_drn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: create_drn
> ### Title: Digital Road Network
> ### Aliases: create_drn
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(traj)
> ##D roads <- create_drn(bbox(traj))
> ##D 
> ##D # Plot everything
> ##D plot(traj)
> ##D lines(slot(roads, "sl"))
> ##D 
> ##D # Shortest path
> ##D shortest.paths(slot(roads, "g"), V(slot(roads, "g"))[1], V(slot(roads, "g"))[23])
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("create_drn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_fis")
> ### * get_fis
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_fis
> ### Title: Get Fuzzy Inference System
> ### Aliases: get_fis
> 
> ### ** Examples
> 
> fis_imp <- get_fis("IMP")
> fis_imp
$num.labels
     [,1] [,2] [,3] [,4]
[1,]    3    2    2    2

$varout.mf
NULL

$rule
     [,1] [,2] [,3] [,4]        [,5]  [,6] [,7] [,8]        [,9]  [,10] [,11]
[1,] "IF" "v"  "is" "high"      "and" "HE" "is" "small"     "and" "PD"  "is" 
[2,] "IF" "v"  "is" "high"      "and" "HE" "is" "large"     "and" "PD"  "is" 
[3,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "dont_care" "and" "PD"  "is" 
[4,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "dont_care" "and" "PD"  "is" 
[5,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "small"     "and" "PD"  "is" 
[6,] "IF" "v"  "is" "dont_care" "and" "HE" "is" "large"     "and" "PD"  "is" 
     [,12]       [,13] [,14]  [,15] [,16]       [,17] 
[1,] "dont_care" "and" "HDOP" "is"  "dont_care" "THEN"
[2,] "dont_care" "and" "HDOP" "is"  "dont_care" "THEN"
[3,] "short"     "and" "HDOP" "is"  "good"      "THEN"
[4,] "long"      "and" "HDOP" "is"  "good"      "THEN"
[5,] "short"     "and" "HDOP" "is"  "dont_care" "THEN"
[6,] "long"      "and" "HDOP" "is"  "dont_care" "THEN"

$varinp.mf
         high      low     zero      small      large      short       long
[1,] 6.000000  6.00000  6.00000  6.0000000  6.0000000  6.0000000  6.0000000
[2,] 3.063413 -4.59512 -4.59512 -0.3676096  0.2625783 -0.3063413  0.3063413
[3,] 4.500000  3.00000  1.00000 32.5000000 42.5000000 25.0000000 35.0000000
[4,]       NA       NA       NA         NA         NA         NA         NA
[5,]       NA       NA       NA         NA         NA         NA         NA
         good     bad
[1,]  6.00000 6.00000
[2,] -4.59512 4.59512
[3,]  4.00000 5.00000
[4,]       NA      NA
[5,]       NA      NA

$range.data.ori
     [,1] [,2] [,3] [,4] [,5]
[1,]    0    0    0    0    0
[2,]   50  360   60   20  100

$type.model
[1] "TSK"

$type.tnorm
[1] "MIN"

$type.implication.func
[1] "MIN"

$type.mf
[1] "SIGMOID"

$type.defuz
NULL

$type.snorm
[1] "MAX"

$func.tsk
     [,1]
[1,]   50
[2,]   10
[3,]   50
[4,]   10
[5,]  100
[6,]   10

$method.type
[1] "MANUAL"

$name
[1] "Sim-1"

$colnames.var
[1] "v"      "HE"     "PD"     "HDOP"   "output"

$class
function (x)  .Primitive("class")

attr(,"class")
[1] "frbs"
> # Plot membership functions
> plotMF(fis_imp)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_fis", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_var_bounds")
> ### * get_var_bounds
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_var_bounds
> ### Title: Fuzzy subset range
> ### Aliases: get_var_bounds
> 
> ### ** Examples
> 
> get_var_bounds()
                      left_bounds right_bounds ID
speed_high                      3            6  1
speed_low                       2            4  2
speed_zero                      0            2  3
HE_small                       20           45  4
HE_large                       25           60  5
PD_short                       10           40  6
PD_long                        20           50  7
HDOP_good                       3            5  8
HDOP_bad                        4            6  9
alpha_low                      85          100 10
alpha_high                     90          120 11
beta_low                       85          100 12
beta_high                      90          120 13
delta_dist_neg                 -5            5 14
delta_dist_pos                 -5           10 15
HI_small                       10           20 16
HI_large                       15           30 17
HI_180                        150          200 18
connectivity_direct             0            1 19
connectivity_indirect           0            1 20
dist_err_small                  5           15 21
dist_err_large                 10           25 22
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_var_bounds", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mm")
> ### * mm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mm
> ### Title: Map Matching
> ### Aliases: mm
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(traj)
> ##D matched_traj <- mm(traj, plot = TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("set_var_bounds")
> ### * set_var_bounds
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: set_var_bounds
> ### Title: Set bounds of fuzzy subsets
> ### Aliases: set_var_bounds
> 
> ### ** Examples
> 
> set_var_bounds("speed_high", c(4, 7))
> get_var_bounds()
                      left_bounds right_bounds ID
speed_high                      4            7  1
speed_low                       2            4  2
speed_zero                      0            2  3
HE_small                       20           45  4
HE_large                       25           60  5
PD_short                       10           40  6
PD_long                        20           50  7
HDOP_good                       3            5  8
HDOP_bad                        4            6  9
alpha_low                      85          100 10
alpha_high                     90          120 11
beta_low                       85          100 12
beta_high                      90          120 13
delta_dist_neg                 -5            5 14
delta_dist_pos                 -5           10 15
HI_small                       10           20 16
HI_large                       15           30 17
HI_180                        150          200 18
connectivity_direct             0            1 19
connectivity_indirect           0            1 20
dist_err_small                  5           15 21
dist_err_large                 10           25 22
> update_mf()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("set_var_bounds", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("update_mf")
> ### * update_mf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: update_mf
> ### Title: Update Membership Functions
> ### Aliases: update_mf
> 
> ### ** Examples
> 
> update_mf()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("update_mf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.045 0.031 1.079 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
