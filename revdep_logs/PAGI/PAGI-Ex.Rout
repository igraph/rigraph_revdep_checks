
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "PAGI"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "PAGI-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('PAGI')
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CalGIF")
> ### * CalGIF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalGIF
> ### Title: Calculate the global influence factor (GIF)
> ### Aliases: CalGIF
> ### Keywords: file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D ###calculate the global influence factor (GIF) by using the random walk with restart (RWR) algorithm###
> ##D #example 1
> ##D #get example data
> ##D dataset<-getdataset()
> ##D class.labels<-getclass.labels()
> ##D 
> ##D #calculate the global influence factor (GIF)
> ##D GIFscore<-CalGIF(dataset,class.labels)
> ##D #print the top ten results to screen
> ##D GIFscore[rev(order(GIFscore))][1:10]
> ##D 
> ##D #Each element is the GIF score and whose name correspond to gene symbol in the gene expression data. 
> ##D #If the genes in gene expression data are not included in the global gene-gene network, their GIF 
> ##D #scores will be zero.
> ##D 
> ##D #example 2
> ##D #get example data
> ##D dataset<-read.table(paste(system.file(package="PAGI"),"/localdata/dataset.txt",sep=""),
> ##D       header=T,sep="\t","\"")
> ##D class.labels<-as.character(read.table(paste(system.file(package="PAGI"),
> ##D       "/localdata/class.labels.txt",sep=""),quote="\"", stringsAsFactors=FALSE)[1,])
> ##D 
> ##D #calculate the global influence factor (GIF)
> ##D GIFscore<-CalGIF(dataset,class.labels)
> ##D #print the top ten results to screen
> ##D GIFscore[rev(order(GIFscore))][1:10]
> ##D 
> ##D #Each element is the GIF score and whose name correspond to gene symbol in the gene expression data. 
> ##D #If the genes in gene expression data are not included in the global gene-gene network, their
> ##D # GIF scores will be zero.
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalGIF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("PAGI.Main")
> ### * PAGI.Main
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: PAGI.Main
> ### Title: A novel pathway identification approach based on global
> ###   influence from both the internal effect of pathways and crosstalk
> ###   between pathways
> ### Aliases: PAGI.Main
> ### Keywords: file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D ##########identify dysregulated pathways by using the function PAGI.Main###########
> ##D #example 1
> ##D #get example data
> ##D dataset<-getdataset()
> ##D class.labels<-getclass.labels()
> ##D 
> ##D #identify dysregulated pathways
> ##D result<-PAGI.Main(dataset,class.labels,nperm = 100,p.val.threshold = -1,FDR.threshold = 0.01,
> ##D gs.size.threshold.min = 25, gs.size.threshold.max = 500 )
> ##D 
> ##D #print the summary results of pathways to screen
> ##D result[[1]][1:10,]
> ##D 
> ##D #The result is a dataframe. The rows of the dataframe are ranked by the values of False 
> ##D #discovery rate (FDR). Each row of the result (dataframe) is a pathway. It columns include 
> ##D #"Pathway Name", "SIZE", "PathwayID", "Pathway Score",  "NOM p-val", "FDR q-val", "Tag 
> ##D #percentage", "Gene percentage", "Signal strength". They correspond to pathway names, 
> ##D #the number of genes which were mapped to the pathway from gene expression profiles, pathway ID,
> ##D #the scores of pathway, the nominal p-values of the pathways, the FDR values, the percent of
> ##D #gene set before running enrichment peak, the percent of gene list before running enrichment peak,
> ##D #enrichment signal strength.
> ##D 
> ##D #print the detail results of pathways to screen
> ##D result[[2]][1:5]
> ##D 
> ##D #The result is a list. Each element of the list is a dataframe whcih present the detail results of
> ##D #genes in the pathway with FDR.threshold< 0.01. Each rows of the dataframe represents a gene.
> ##D #Its columns include "Gene number in the (sorted) pathway", "gene symbol from the gene express data",
> ##D #"location of the gene in the sorted gene list", "the T-score of gene between two biological states",
> ##D #"global influence impactor", "if the gene contribute to the score of pathway".
> ##D 
> ##D #write the summary results of pathways to tab delimited file. 
> ##D write.table(result[[1]], file = "SUMMARY RESULTS.txt", quote=F, row.names=F, sep = "\t")
> ##D 
> ##D #write the detail results of genes for each pathway with FDR.threshold< 0.01 to tab delimited file. 
> ##D for(i in 1:length(result[[2]])){
> ##D gene.report<-result[[2]][[i]]
> ##D filename <- paste(names(result[[2]][i]),".txt", sep="", collapse="")
> ##D write.table(gene.report, file = filename, quote=F, row.names=F, sep = "\t")
> ##D }
> ##D 
> ##D #example 2
> ##D #get example data
> ##D dataset<-read.table(paste(system.file(package="PAGI"),"/localdata/dataset.txt",sep=""),
> ##D header=T,sep="\t","\"")
> ##D class.labels<-as.character(read.table(paste(system.file(package="PAGI"),
> ##D "/localdata/class.labels.txt",sep=""),quote="\"", stringsAsFactors=FALSE)[1,])
> ##D 
> ##D #identify dysregulated pathways
> ##D result<-PAGI.Main(dataset,class.labels,nperm = 100,p.val.threshold = -1,FDR.threshold = 0.01,
> ##D gs.size.threshold.min = 25, gs.size.threshold.max = 500 )
> ##D 
> ##D #print the summary results of pathways to screen
> ##D result[[1]][1:10,]
> ##D 
> ##D #The result is a dataframe. The rows of the dataframe are ranked by the values of False 
> ##D #discovery rate (FDR). Each row of the result (dataframe) is a pathway. It columns include 
> ##D #"Pathway Name", "SIZE", "PathwayID", "Pathway Score",  "NOM p-val", "FDR q-val", "Tag 
> ##D #percentage", "Gene percentage", "Signal strength". They correspond to pathway names, 
> ##D #the number of genes which were mapped to the pathway from gene expression profiles, pathway ID,
> ##D #the scores of pathway, the nominal p-values of the pathways, the FDR values, the percent of
> ##D #gene set before running enrichment peak, the percent of gene list before running enrichment peak,
> ##D #enrichment signal strength.
> ##D 
> ##D #print the detail results of pathways to screen
> ##D result[[2]][1:5]
> ##D 
> ##D #The result is a list. Each element of the list is a dataframe whcih present the detail results of
> ##D #genes in the pathway with FDR.threshold< 0.01. Each rows of the dataframe represents a gene.
> ##D #Its columns include "Gene number in the (sorted) pathway", "gene symbol from the gene express data",
> ##D #"location of the gene in the sorted gene list", "the T-score of gene between two biological states",
> ##D #"global influence impactor", "if the gene contribute to the score of pathway".
> ##D 
> ##D #write the summary results of pathways to tab delimited file. 
> ##D write.table(result[[1]], file = "SUMMARY RESULTS.txt", quote=F, row.names=F, sep = "\t")
> ##D 
> ##D #write the detail results of genes for each pathway with FDR.threshold< 0.01 to tab delimited file. 
> ##D for(i in 1:length(result[[2]])){
> ##D gene.report<-result[[2]][[i]]
> ##D filename <- paste(names(result[[2]][i]),".txt", sep="", collapse="")
> ##D write.table(gene.report, file = filename, quote=F, row.names=F, sep = "\t")
> ##D }
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("PAGI.Main", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getclass.labels")
> ### * getclass.labels
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getclass.labels
> ### Title: Get the labels of example dataset
> ### Aliases: getclass.labels
> ### Keywords: file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D #obtain the labels of the example dataset
> ##D class.labels<-getclass.labels()
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getclass.labels", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getdataset")
> ### * getdataset
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getdataset
> ### Title: Get the example dataset
> ### Aliases: getdataset
> ### Keywords: file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D #obtain the example data
> ##D dataset<-getdataset()
> ##D head(dataset)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getdataset", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.129 0.007 0.137 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
