
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "TunePareto"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "TunePareto-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('TunePareto')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("TunePareto-package")
> ### * TunePareto-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: TunePareto-package
> ### Title: Multi-objective parameter tuning for classifiers
> ### Aliases: TunePareto-package TunePareto
> ### Keywords: package multi-objective parameter tuning
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("TunePareto-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("allCombinations")
> ### * allCombinations
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: allCombinations
> ### Title: Build a list of all possible combinations of parameter values
> ### Aliases: allCombinations
> ### Keywords: parameter combinations
> 
> ### ** Examples
> 
> 
> library(class)
> # Combine only valid combinations of 'k' and 'l'
> # for the k-NN classifier:
> comb <- c(allCombinations(list(k=1,l=0)),
+           allCombinations(list(k=3,l=0:2)),
+           allCombinations(list(k=5,l=0:4)),
+           allCombinations(list(k=7,l=0:6)))
> print(comb)
[[1]]
[[1]]$k
[1] 1

[[1]]$l
[1] 0


[[2]]
[[2]]$k
[1] 3

[[2]]$l
[1] 0


[[3]]
[[3]]$k
[1] 3

[[3]]$l
[1] 1


[[4]]
[[4]]$k
[1] 3

[[4]]$l
[1] 2


[[5]]
[[5]]$k
[1] 5

[[5]]$l
[1] 0


[[6]]
[[6]]$k
[1] 5

[[6]]$l
[1] 1


[[7]]
[[7]]$k
[1] 5

[[7]]$l
[1] 2


[[8]]
[[8]]$k
[1] 5

[[8]]$l
[1] 3


[[9]]
[[9]]$k
[1] 5

[[9]]$l
[1] 4


[[10]]
[[10]]$k
[1] 7

[[10]]$l
[1] 0


[[11]]
[[11]]$k
[1] 7

[[11]]$l
[1] 1


[[12]]
[[12]]$k
[1] 7

[[12]]$l
[1] 2


[[13]]
[[13]]$k
[1] 7

[[13]]$l
[1] 3


[[14]]
[[14]]$k
[1] 7

[[14]]$l
[1] 4


[[15]]
[[15]]$k
[1] 7

[[15]]$l
[1] 5


[[16]]
[[16]]$k
[1] 7

[[16]]$l
[1] 6


> 
> print(tunePareto(data = iris[, -ncol(iris)], 
+                  labels = iris[, ncol(iris)],
+                  classifier = tunePareto.knn(),
+                  parameterCombinations = comb,
+                  objectiveFunctions = list(cvError(10, 10),
+                                            reclassError())))
Testing 16 parameter combinations...
Evaluating parameter set: k = 1, l = 0 
Evaluating parameter set: k = 3, l = 0 
Evaluating parameter set: k = 3, l = 1 
Evaluating parameter set: k = 3, l = 2 
Evaluating parameter set: k = 5, l = 0 
Evaluating parameter set: k = 5, l = 1 
Evaluating parameter set: k = 5, l = 2 
Evaluating parameter set: k = 5, l = 3 
Evaluating parameter set: k = 5, l = 4 
Evaluating parameter set: k = 7, l = 0 
Evaluating parameter set: k = 7, l = 1 
Evaluating parameter set: k = 7, l = 2 
Evaluating parameter set: k = 7, l = 3 
Evaluating parameter set: k = 7, l = 4 
Evaluating parameter set: k = 7, l = 5 
Evaluating parameter set: k = 7, l = 6 
Calculating Pareto-optimal combinations...
Pareto-optimal parameter sets:
             CV.Error Reclass.Error
k = 1, l = 0     0.04    0.00000000
k = 7, l = 1     0.03    0.02666667
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("allCombinations", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:class’

> nameEx("createObjective")
> ### * createObjective
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: createObjective
> ### Title: Create a new objective function
> ### Aliases: createObjective
> ### Keywords: objective function multi-objective optimization MOO
> 
> ### ** Examples
> 
> 
> # create new objective minimizing the number of support vectors
> # for a support vector machine
> 
> reclassSupportVectors <- function (saveModel = FALSE) 
+ {
+     createObjective(precalculationFunction = reclassification, 
+         precalculationParams = NULL, objectiveFunction = 
+         function(result, saveModel) 
+         {
+ 	        if(result$model$classifier$name != "svm")
+ 		        stop("This objective function can only be applied 
+ 		              to classifiers of type tunePareto.svm()")
+ 
+       		res <- result$model$model$tot.nSV
+ 
+ 		      if (saveModel) 
+ 		      # return a list containing the objective value as well as the model
+ 		      {
+ 		         return(list(additionalData = result$model, fitness = res))
+ 		      }
+ 		      else 
+ 		      # only return the objective value
+ 		        return(res)
+         }, 
+         objectiveFunctionParams = list(saveModel = saveModel), 
+         direction = "minimize", 
+         name = "Reclass.SupportVectors")
+ }
> 
> # tune error vs. number of support vectors on the 'iris' data set
> r <- tunePareto(data = iris[, -ncol(iris)], 
+                 labels = iris[, ncol(iris)],
+                 classifier = tunePareto.svm(),
+                 cost=c(0.001,0.005,0.01,0.05,0.1,0.5,1,5,10,50),
+                 objectiveFunctions=list(reclassError(), reclassSupportVectors()))
Loading required package: e1071
Testing 10 parameter combinations...
Evaluating parameter set: cost = 0.001 
Evaluating parameter set: cost = 0.005 
Evaluating parameter set: cost = 0.01 
Evaluating parameter set: cost = 0.05 
Evaluating parameter set: cost = 0.1 
Evaluating parameter set: cost = 0.5 
Evaluating parameter set: cost = 1 
Evaluating parameter set: cost = 5 
Evaluating parameter set: cost = 10 
Evaluating parameter set: cost = 50 
Calculating Pareto-optimal combinations...
> 
> print(r)
Pareto-optimal parameter sets:
          Reclass.Error Reclass.SupportVectors
cost = 50    0.01333333                     29
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("createObjective", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:e1071’

> nameEx("generateCVRuns")
> ### * generateCVRuns
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: generateCVRuns
> ### Title: Generate cross-validation partitions
> ### Aliases: generateCVRuns
> ### Keywords: cross-validation
> 
> ### ** Examples
> 
> 
> # precalculate the cross-validation partitions
> foldList <- generateCVRuns(labels = iris[, ncol(iris)],
+                            ntimes = 10,
+                            nfold = 10,
+                            stratified=TRUE)
> 
>  # build a list of objective functions
> objectiveFunctions <- list(cvError(foldList=foldList),
+                            cvSensitivity(foldList=foldList,caseClass="setosa"))
> 
> # pass them to tunePareto
> print(tunePareto(data = iris[, -ncol(iris)], 
+                  labels = iris[, ncol(iris)],
+                  classifier = tunePareto.knn(),
+                  k = c(3,5,7,9),
+                  objectiveFunctions = objectiveFunctions))
Loading required package: class
Testing 4 parameter combinations...
Evaluating parameter set: k = 3 
Evaluating parameter set: k = 5 
Evaluating parameter set: k = 7 
Evaluating parameter set: k = 9 
Calculating Pareto-optimal combinations...
Pareto-optimal parameter sets:
        CV.Error CV.Sensitivity
k = 9 0.02933333              1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("generateCVRuns", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:class’

> nameEx("mergeTuneParetoResults")
> ### * mergeTuneParetoResults
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mergeTuneParetoResults
> ### Title: Calculate optimal solutions from several calls of tunePareto
> ### Aliases: mergeTuneParetoResults
> ### Keywords: merge results
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mergeTuneParetoResults", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotDominationGraph")
> ### * plotDominationGraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotDominationGraph
> ### Title: Visualize the Pareto fronts of parameter configuration scores
> ### Aliases: plotDominationGraph
> ### Keywords: Pareto front domination graph objective function
> 
> ### ** Examples
> 
> # call tunePareto using a k-NN classifier 
> # with different 'k' and 'l' on the 'iris' data set
> x <- tunePareto(data = iris[, -ncol(iris)], 
+                 labels = iris[, ncol(iris)],
+                 classifier = tunePareto.knn(),
+                 k = c(5,7,9),
+                 l = c(1,2,3),
+                 objectiveFunctions=list(cvError(10, 10),
+                                         cvSpecificity(10, 10, caseClass="setosa")))
Loading required package: class
Testing 9 parameter combinations...
Evaluating parameter set: k = 5, l = 1 
Evaluating parameter set: k = 5, l = 2 
Evaluating parameter set: k = 5, l = 3 
Evaluating parameter set: k = 7, l = 1 
Evaluating parameter set: k = 7, l = 2 
Evaluating parameter set: k = 7, l = 3 
Evaluating parameter set: k = 9, l = 1 
Evaluating parameter set: k = 9, l = 2 
Evaluating parameter set: k = 9, l = 3 
Calculating Pareto-optimal combinations...
> 
> # plot the graph                 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotDominationGraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:class’

> nameEx("plotObjectivePairs")
> ### * plotObjectivePairs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotObjectivePairs
> ### Title: Plot a matrix of Pareto front panels
> ### Aliases: plotObjectivePairs
> ### Keywords: multi-objective optimization MOO Pareto front
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotObjectivePairs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotParetoFronts2D")
> ### * plotParetoFronts2D
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotParetoFronts2D
> ### Title: A classical 2-dimensional plot of Pareto fronts
> ### Aliases: plotParetoFronts2D
> ### Keywords: multi-objective optimization MOO Pareto front
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotParetoFronts2D", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("precalculation")
> ### * precalculation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: precalculation
> ### Title: Predefined precalculation functions for objectives
> ### Aliases: precalculation reclassification crossValidation
> ### Keywords: objective function multi-objective optimization MOO
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("precalculation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predefinedClassifiers")
> ### * predefinedClassifiers
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predefinedClassifiers
> ### Title: TunePareto wrappers for certain classifiers
> ### Aliases: predefinedClassifiers tunePareto.knn tunePareto.svm
> ###   tunePareto.tree tunePareto.randomForest tunePareto.NaiveBayes
> ### Keywords: TuneParetoClassifier, knn svm tree randomForest NaiveBayes
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predefinedClassifiers", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predefinedObjectiveFunctions")
> ### * predefinedObjectiveFunctions
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predefinedObjectiveFunctions
> ### Title: Predefined objective functions for parameter tuning
> ### Aliases: predefinedObjectiveFunctions reclassAccuracy reclassError
> ###   reclassWeightedError reclassSensitivity reclassRecall
> ###   reclassTruePositive reclassSpecificity reclassTrueNegative
> ###   reclassFallout reclassFalsePositive reclassMiss reclassFalseNegative
> ###   reclassPrecision reclassPPV reclassNPV reclassConfusion cvAccuracy
> ###   cvError cvErrorVariance cvWeightedError cvSensitivity cvRecall
> ###   cvTruePositive cvSpecificity cvTrueNegative cvFallout cvFalsePositive
> ###   cvMiss cvFalseNegative cvPrecision cvPPV cvNPV cvConfusion
> ### Keywords: objective function multi-objective optimization MOO
> 
> ### ** Examples
> 
> 
> # build a list of objective functions
> objectiveFunctions <- list(cvError(10, 10),
+                            reclassSpecificity(caseClass="setosa"), 
+                            reclassSensitivity(caseClass="setosa"))
> 
> # pass them to tunePareto
> print(tunePareto(data = iris[, -ncol(iris)], 
+                  labels = iris[, ncol(iris)],
+                  classifier = tunePareto.knn(),
+                  k = c(3,5,7,9),
+                  objectiveFunctions = objectiveFunctions))
Loading required package: class
Testing 4 parameter combinations...
Evaluating parameter set: k = 3 
Evaluating parameter set: k = 5 
Evaluating parameter set: k = 7 
Evaluating parameter set: k = 9 
Calculating Pareto-optimal combinations...
Pareto-optimal parameter sets:
        CV.Error Reclass.Specificity Reclass.Sensitivity
k = 7 0.03266667                   1                   1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predefinedObjectiveFunctions", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:class’

> nameEx("predict.TuneParetoModel")
> ### * predict.TuneParetoModel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict.TuneParetoModel
> ### Title: Prediction method for TuneParetoClassifier objects
> ### Aliases: predict.TuneParetoModel
> ### Keywords: prediction
> 
> ### ** Examples
> 
> # train an SVM classifier
> cl <- tunePareto.svm()
Loading required package: e1071
> tr <- trainTuneParetoClassifier(cl, 
+                                 iris[,-ncol(iris)], 
+                                 iris[,ncol(iris)], 
+                                 cost=0.001)
> 
> # re-apply the classifier to predict the training data
> print(iris[,ncol(iris)])
  [1] setosa     setosa     setosa     setosa     setosa     setosa    
  [7] setosa     setosa     setosa     setosa     setosa     setosa    
 [13] setosa     setosa     setosa     setosa     setosa     setosa    
 [19] setosa     setosa     setosa     setosa     setosa     setosa    
 [25] setosa     setosa     setosa     setosa     setosa     setosa    
 [31] setosa     setosa     setosa     setosa     setosa     setosa    
 [37] setosa     setosa     setosa     setosa     setosa     setosa    
 [43] setosa     setosa     setosa     setosa     setosa     setosa    
 [49] setosa     setosa     versicolor versicolor versicolor versicolor
 [55] versicolor versicolor versicolor versicolor versicolor versicolor
 [61] versicolor versicolor versicolor versicolor versicolor versicolor
 [67] versicolor versicolor versicolor versicolor versicolor versicolor
 [73] versicolor versicolor versicolor versicolor versicolor versicolor
 [79] versicolor versicolor versicolor versicolor versicolor versicolor
 [85] versicolor versicolor versicolor versicolor versicolor versicolor
 [91] versicolor versicolor versicolor versicolor versicolor versicolor
 [97] versicolor versicolor versicolor versicolor virginica  virginica 
[103] virginica  virginica  virginica  virginica  virginica  virginica 
[109] virginica  virginica  virginica  virginica  virginica  virginica 
[115] virginica  virginica  virginica  virginica  virginica  virginica 
[121] virginica  virginica  virginica  virginica  virginica  virginica 
[127] virginica  virginica  virginica  virginica  virginica  virginica 
[133] virginica  virginica  virginica  virginica  virginica  virginica 
[139] virginica  virginica  virginica  virginica  virginica  virginica 
[145] virginica  virginica  virginica  virginica  virginica  virginica 
Levels: setosa versicolor virginica
> print(predict(tr, iris[,-ncol(iris)]))
         1          2          3          4          5          6          7 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
         8          9         10         11         12         13         14 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        15         16         17         18         19         20         21 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        22         23         24         25         26         27         28 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        29         30         31         32         33         34         35 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        36         37         38         39         40         41         42 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        43         44         45         46         47         48         49 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        50         51         52         53         54         55         56 
    setosa  virginica versicolor  virginica versicolor versicolor versicolor 
        57         58         59         60         61         62         63 
 virginica versicolor versicolor versicolor versicolor versicolor versicolor 
        64         65         66         67         68         69         70 
versicolor versicolor versicolor versicolor versicolor versicolor versicolor 
        71         72         73         74         75         76         77 
 virginica versicolor versicolor versicolor versicolor versicolor versicolor 
        78         79         80         81         82         83         84 
 virginica versicolor versicolor versicolor versicolor versicolor versicolor 
        85         86         87         88         89         90         91 
versicolor versicolor  virginica versicolor versicolor versicolor versicolor 
        92         93         94         95         96         97         98 
versicolor versicolor versicolor versicolor versicolor versicolor versicolor 
        99        100        101        102        103        104        105 
versicolor versicolor  virginica versicolor  virginica  virginica  virginica 
       106        107        108        109        110        111        112 
 virginica versicolor  virginica  virginica  virginica  virginica  virginica 
       113        114        115        116        117        118        119 
 virginica versicolor  virginica  virginica  virginica  virginica  virginica 
       120        121        122        123        124        125        126 
versicolor  virginica versicolor  virginica  virginica  virginica  virginica 
       127        128        129        130        131        132        133 
 virginica  virginica  virginica  virginica  virginica  virginica  virginica 
       134        135        136        137        138        139        140 
versicolor versicolor  virginica  virginica  virginica versicolor  virginica 
       141        142        143        144        145        146        147 
 virginica  virginica versicolor  virginica  virginica  virginica  virginica 
       148        149        150 
 virginica  virginica  virginica 
Levels: setosa versicolor virginica
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict.TuneParetoModel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:e1071’

> nameEx("rankByDesirability")
> ### * rankByDesirability
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rankByDesirability
> ### Title: Rank results according to their desirabilities
> ### Aliases: rankByDesirability
> ### Keywords: desirability function desirability index
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rankByDesirability", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("recalculateParetoSet")
> ### * recalculateParetoSet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: recalculateParetoSet
> ### Title: Recalculate Pareto-optimal solutions
> ### Aliases: recalculateParetoSet
> ### Keywords: subset of objectives
> 
> ### ** Examples
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("recalculateParetoSet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("trainTuneParetoClassifier")
> ### * trainTuneParetoClassifier
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: trainTuneParetoClassifier
> ### Title: Train a TunePareto classifier
> ### Aliases: trainTuneParetoClassifier
> ### Keywords: training classifier training
> 
> ### ** Examples
> 
> 
> # train an SVM classifier
> cl <- tunePareto.svm()
Loading required package: e1071
> tr <- trainTuneParetoClassifier(cl, 
+                                 iris[,-ncol(iris)], 
+                                 iris[,ncol(iris)], 
+                                 cost=0.001)
> 
> # re-apply the classifier to predict the training data
> print(iris[,ncol(iris)])
  [1] setosa     setosa     setosa     setosa     setosa     setosa    
  [7] setosa     setosa     setosa     setosa     setosa     setosa    
 [13] setosa     setosa     setosa     setosa     setosa     setosa    
 [19] setosa     setosa     setosa     setosa     setosa     setosa    
 [25] setosa     setosa     setosa     setosa     setosa     setosa    
 [31] setosa     setosa     setosa     setosa     setosa     setosa    
 [37] setosa     setosa     setosa     setosa     setosa     setosa    
 [43] setosa     setosa     setosa     setosa     setosa     setosa    
 [49] setosa     setosa     versicolor versicolor versicolor versicolor
 [55] versicolor versicolor versicolor versicolor versicolor versicolor
 [61] versicolor versicolor versicolor versicolor versicolor versicolor
 [67] versicolor versicolor versicolor versicolor versicolor versicolor
 [73] versicolor versicolor versicolor versicolor versicolor versicolor
 [79] versicolor versicolor versicolor versicolor versicolor versicolor
 [85] versicolor versicolor versicolor versicolor versicolor versicolor
 [91] versicolor versicolor versicolor versicolor versicolor versicolor
 [97] versicolor versicolor versicolor versicolor virginica  virginica 
[103] virginica  virginica  virginica  virginica  virginica  virginica 
[109] virginica  virginica  virginica  virginica  virginica  virginica 
[115] virginica  virginica  virginica  virginica  virginica  virginica 
[121] virginica  virginica  virginica  virginica  virginica  virginica 
[127] virginica  virginica  virginica  virginica  virginica  virginica 
[133] virginica  virginica  virginica  virginica  virginica  virginica 
[139] virginica  virginica  virginica  virginica  virginica  virginica 
[145] virginica  virginica  virginica  virginica  virginica  virginica 
Levels: setosa versicolor virginica
> print(predict(tr, iris[,-ncol(iris)]))
         1          2          3          4          5          6          7 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
         8          9         10         11         12         13         14 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        15         16         17         18         19         20         21 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        22         23         24         25         26         27         28 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        29         30         31         32         33         34         35 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        36         37         38         39         40         41         42 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        43         44         45         46         47         48         49 
    setosa     setosa     setosa     setosa     setosa     setosa     setosa 
        50         51         52         53         54         55         56 
    setosa  virginica versicolor  virginica versicolor versicolor versicolor 
        57         58         59         60         61         62         63 
 virginica versicolor versicolor versicolor versicolor versicolor versicolor 
        64         65         66         67         68         69         70 
versicolor versicolor versicolor versicolor versicolor versicolor versicolor 
        71         72         73         74         75         76         77 
 virginica versicolor versicolor versicolor versicolor versicolor versicolor 
        78         79         80         81         82         83         84 
 virginica versicolor versicolor versicolor versicolor versicolor versicolor 
        85         86         87         88         89         90         91 
versicolor versicolor  virginica versicolor versicolor versicolor versicolor 
        92         93         94         95         96         97         98 
versicolor versicolor versicolor versicolor versicolor versicolor versicolor 
        99        100        101        102        103        104        105 
versicolor versicolor  virginica versicolor  virginica  virginica  virginica 
       106        107        108        109        110        111        112 
 virginica versicolor  virginica  virginica  virginica  virginica  virginica 
       113        114        115        116        117        118        119 
 virginica versicolor  virginica  virginica  virginica  virginica  virginica 
       120        121        122        123        124        125        126 
versicolor  virginica versicolor  virginica  virginica  virginica  virginica 
       127        128        129        130        131        132        133 
 virginica  virginica  virginica  virginica  virginica  virginica  virginica 
       134        135        136        137        138        139        140 
versicolor versicolor  virginica  virginica  virginica versicolor  virginica 
       141        142        143        144        145        146        147 
 virginica  virginica versicolor  virginica  virginica  virginica  virginica 
       148        149        150 
 virginica  virginica  virginica 
Levels: setosa versicolor virginica
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("trainTuneParetoClassifier", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:e1071’

> nameEx("tunePareto")
> ### * tunePareto
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tunePareto
> ### Title: Generic function for multi-objective parameter tuning of
> ###   classifiers
> ### Aliases: tunePareto
> ### Keywords: parameter tuning multi-objective optimization MOO parallel
> ###   multi-core
> 
> ### ** Examples
> 
> ## End(No test)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tunePareto", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tuneParetoClassifier")
> ### * tuneParetoClassifier
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tuneParetoClassifier
> ### Title: Create a classifier object
> ### Aliases: tuneParetoClassifier
> ### Keywords: TuneParetoClassifier
> 
> ### ** Examples
> 
>   # equivalent to tunePareto.svm()
>   cl <- tuneParetoClassifier(name = "svm",
+                              classifier = svm, 
+                              predictor = predict, 
+                              classifierParamNames = c("kernel", "degree", "gamma",
+                                                       "coef0", "cost", "nu",
+                                                       "class.weights", "cachesize", 
+                                                       "tolerance", "epsilon",
+                                                       "subset", "na.action"),
+                               useFormula = FALSE,
+                               trainDataName = "x",
+                               trainLabelName = "y",
+                               testDataName = "newdata",
+                               modelName = "object",
+                               requiredPackages="e1071")
Loading required package: e1071
>   
>   # call TunePareto with the classifier
>   print(tunePareto(classifier = cl,
+                    data = iris[, -ncol(iris)], 
+                    labels = iris[, ncol(iris)],
+                    cost = c(0.001,0.01,0.1,1,10), 
+                    objectiveFunctions=
+                      list(cvError(10, 10),
+                           cvSpecificity(10, 10, 
+                             caseClass="setosa"))))                           
Testing 5 parameter combinations...
Evaluating parameter set: cost = 0.001 
Evaluating parameter set: cost = 0.01 
Evaluating parameter set: cost = 0.1 
Evaluating parameter set: cost = 1 
Evaluating parameter set: cost = 10 
Calculating Pareto-optimal combinations...
Pareto-optimal parameter sets:
            CV.Error CV.Specificity
cost = 10 0.03866667              1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tuneParetoClassifier", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.291 0.052 5.462 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
