
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ReliabilityTheory"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "ReliabilityTheory-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('ReliabilityTheory')
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("computeSystemSignature")
> ### * computeSystemSignature
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: computeSystemSignature
> ### Title: Compute the signature of a system
> ### Aliases: computeSystemSignature computeNetworkSignature
> ### Keywords: system signature
> 
> ### ** Examples
> 
> # Find the signature of two component series system (which is just s=(1, 0))
> computeSystemSignature(graph.formula(s -- 1 -- 2 -- t))
[1] 1 0
> 
> # Find the signature of two component parallel system (which is just s=(0, 1))
> computeSystemSignature(graph.formula(s -- 1:2 -- t))
[1] 0 1
> 
> # Find the signature of the five component 'bridge' system (which
> # is s=(0, 0.2, 0.6, 0.2, 0))
> computeSystemSignature(graph.formula(s -- 1 -- 2 -- t, s -- 3 -- 4 -- t, 1:2 -- 5 -- 3:4))
[1] 0.0 0.2 0.6 0.2 0.0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("computeSystemSignature", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("computeSystemSurvSignature")
> ### * computeSystemSurvSignature
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: computeSystemSurvivalSignature
> ### Title: Compute the survival signature of a system
> ### Aliases: computeSystemSurvivalSignature
> ### Keywords: system survival signature
> 
> ### ** Examples
> 
> ## EXAMPLE 1
> ## Figure 1 in Coolen and Coolen-Maturi (2012)
> 
> # First, define the structure, ensuring that each physically separate component
> # is separately numbered
> fig1 <- graph.formula(s -- 1 -- 2:3 -- 4 -- 5:6 -- t, 2 -- 5, 3 -- 6)
> 
> # Second, create a vertex attribute specifying the type of each of those
> # numbered component (leaving s,t with no type)
> V(fig1)$compType <- NA # This just creates the attribute compType
> V(fig1)$compType[match(c("1","2","5"), V(fig1)$name)] <- "Type 1"
> V(fig1)$compType[match(c("3","4","6"), V(fig1)$name)] <- "Type 2"
> V(fig1)$compType[match(c("s","t"), V(fig1)$name)] <- NA
> 
> # Third, compute the survival signature (getting fractions rather than decimals)
> computeSystemSurvivalSignature(fig1, frac=TRUE)
   Type 1 Type 2 Probability
1       0      0           0
2       0      1           0
3       0      2           0
4       0      3           0
5       1      0           0
6       1      1           0
7       1      2         1/9
8       1      3         1/3
9       2      0           0
10      2      1           0
11      2      2         4/9
12      2      3         2/3
13      3      0           1
14      3      1           1
15      3      2           1
16      3      3           1
> 
> 
> 
> ## EXAMPLE 2
> ## Figure 3 in Coolen et al (2013)
> 
> # First, define the structure, ensuring that each physically separate component
> # is separately numbered
> fig3 <- graph.formula(s -- 1:4 -- 2:5 -- 3:6 -- t, s -- 7:8, 8 -- 9, 7:9 -- t)
> 
> # Second, create a vertex attribute specifying the type of each of those
> # numbered component (leaving s,t with no type)
> V(fig3)$compType <- NA # This just creates the attribute compType
> V(fig3)$compType[match(c("1"), V(fig3)$name)] <- "Type 1"
> V(fig3)$compType[match(c("2","3","4","7"), V(fig3)$name)] <- "Type 2"
> V(fig3)$compType[match(c("5","6","8","9"), V(fig3)$name)] <- "Type 3"
> V(fig3)$compType[match(c("s","t"), V(fig3)$name)] <- NA
>   
> # Third, compute the survival signature (getting fractions rather than decimals)
> computeSystemSurvivalSignature(fig3, frac=TRUE)
   Type 1 Type 2 Type 3 Probability
1       0      0      0           0
2       0      0      1           0
3       0      0      2         1/6
4       0      0      3         1/2
5       0      0      4           1
6       0      1      0         1/4
7       0      1      1         1/4
8       0      1      2        5/12
9       0      1      3         3/4
10      0      1      4           1
11      0      2      0         1/2
12      0      2      1        7/12
13      0      2      2         3/4
14      0      2      3       11/12
15      0      2      4           1
16      0      3      0           1
17      0      3      1           1
18      0      3      2           1
19      0      3      3           1
20      0      3      4           1
21      0      4      0           1
22      0      4      1           1
23      0      4      2           1
24      0      4      3           1
25      0      4      4           1
26      1      0      0           0
27      1      0      1           0
28      1      0      2         1/3
29      1      0      3           1
30      1      0      4           1
31      1      1      0         1/4
32      1      1      1         3/8
33      1      1      2         2/3
34      1      1      3           1
35      1      1      4           1
36      1      2      0         2/3
37      1      2      1         3/4
38      1      2      2         8/9
39      1      2      3           1
40      1      2      4           1
41      1      3      0           1
42      1      3      1           1
43      1      3      2           1
44      1      3      3           1
45      1      3      4           1
46      1      4      0           1
47      1      4      1           1
48      1      4      2           1
49      1      4      3           1
50      1      4      4           1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("computeSystemSurvSignature", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("expectedSystemLifetimeExp")
> ### * expectedSystemLifetimeExp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: expectedSystemLifetimeExp
> ### Title: Compute the expected lifetime of a given system
> ### Aliases: expectedSystemLifetimeExp expectedNetworkLifetimeExp
> ###   expectedSignatureLifetimeExp
> ### Keywords: system expected lifetime signature
> 
> ### ** Examples
> 
> # Find the expected lifetime of two component series system
> expectedSystemLifetimeExp(graph.formula(s -- 1 -- 2 -- t))
[1] 0.5
> 
> # Find the expected lifetime of two component series system using it's signature directly
> expectedSignatureLifetimeExp(c(1,0))
[1] 0.5
> 
> # Find the expected lifetime of two component parallel system
> expectedSystemLifetimeExp(graph.formula(s -- 1:2 -- t))
[1] 1.5
> 
> # Find the expected lifetime of two component parallel system using it's signature directly
> expectedSignatureLifetimeExp(c(0,1))
[1] 1.5
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("expectedSystemLifetimeExp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("maskedInferenceEXCHCustom")
> ### * maskedInferenceEXCHCustom
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: maskedInferenceEXCHCustom
> ### Title: Inference for Masked Exchangeable System Lifetimes, Custom
> ###   Distribution
> ### Aliases: maskedInferenceEXCHCustom
> ### Keywords: masked system lifetime model bayesian inference data
> ###   augmentation signature
> 
> ### ** Examples
> 
> # Please inspect the source of this package, file MaskedLifetimeInference_Exponential.R
> # for example usage (see details section)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("maskedInferenceEXCHCustom", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("maskedInferenceEXCHExponential")
> ### * maskedInferenceEXCHExponential
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: maskedInferenceEXCHExponential
> ### Title: Inference for Masked Exchangeable System Lifetimes, Exponential
> ###   Components
> ### Aliases: maskedInferenceEXCHExponential
> ### Keywords: masked system lifetime model Exponential exchangeable
> ###   bayesian inference data augmentation signature
> 
> ### ** Examples
> 
> # Some masked system lifetime data for an exchangeable collection of systems with
> # Exponential component lifetime, rate drawn from the population distribution
> # Gamma(shape=9, scale=0.5)
> t <- c(0.2265, 0.0795, 0.1178, 0.2463, 0.1053, 0.0982, 0.0349, 0.0363, 
+ 0.1546, 0.1357, 0.1239, 0.0354, 0.0124, 0.1003, 0.0827, 0.2446, 
+ 0.1214, 0.1272, 0.5438, 0.2738, 0.0378, 0.2293, 0.1706, 0.0146, 
+ 0.1506, 0.3665, 0.046, 0.1196, 0.2724, 0.2593, 0.0438, 0.1493, 
+ 0.0697, 0.1774, 0.1157, 0.0996, 0.2815, 0.1411, 0.0921, 0.2088, 
+ 0.1164, 0.149, 0.048, 0.1019, 0.2349, 0.2211, 0.0475, 0.0721, 
+ 0.0371, 0.611, 0.1959, 0.0666, 0.0956, 0.1416, 0.2126, 0.0104, 
+ 0.088, 0.0159, 0.078, 0.1747, 0.1921, 0.3558, 0.4956, 0.0436, 
+ 0.2292, 0.1159, 0.1201, 0.1299, 0.043, 0.0584, 0.0347, 0.2084, 
+ 0.1334, 0.1491, 0.0384, 0.0589, 0.2962, 0.1023, 0.0506, 0.0501, 
+ 0.1859, 0.0714, 0.1424, 0.0027, 0.2812, 0.0318, 0.4147, 0.1088, 
+ 0.2894, 0.0734, 0.1405, 0.0367, 0.0323, 0.517, 0.1034, 0.026, 
+ 0.0485, 0.0512, 0.0116, 0.1629)
> 
> # Load the signatures of order 4 simply connected coherent systems -- the data
> # above correspond to simulations from system number 3
> data(sccsO4)
> 
> # Perform inference on the rate parameter:
> ## Not run: 
> ##D samps <- maskedInferenceEXCHExponential(t, sccsO4[[3]]$signature, 
> ##D 2000, priorMu_Mu=1, priorSigma_Mu=0.5, priorMu_Sigma=1, priorSigma_Sigma=0.7)
> ## End(Not run)
> 
> # Or perform inference on rate parameter and topology jointly, taking as candidate
> # set all possible simply connected coherent systems of order 4:
> ## Not run: 
> ##D samps <- maskedInferenceEXCHExponential(t, sccsO4, 2000, priorMu_Mu=1,
> ##D priorSigma_Mu=0.5, priorMu_Sigma=1, priorSigma_Sigma=0.7)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("maskedInferenceEXCHExponential", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("maskedInferenceIIDCustom")
> ### * maskedInferenceIIDCustom
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: maskedInferenceIIDCustom
> ### Title: Inference for Masked iid System Lifetimes, Custom Distribution
> ### Aliases: maskedInferenceIIDCustom
> ### Keywords: masked system lifetime model bayesian inference data
> ###   augmentation signature
> 
> ### ** Examples
> 
> # Please inspect the source of this package, file MaskedLifetimeInference_Exponential.R
> # for example usage (see details section)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("maskedInferenceIIDCustom", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("maskedInferenceIIDExponential")
> ### * maskedInferenceIIDExponential
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: maskedInferenceIIDExponential
> ### Title: Inference for Masked iid System Lifetimes, Exponential
> ###   Components
> ### Aliases: maskedInferenceIIDExponential
> ### Keywords: masked system lifetime model Exponential iid bayesian
> ###   inference data augmentation signature
> 
> ### ** Examples
> 
> # Some masked system lifetime data for a system with Exponential component
> # lifetime, rate=3.14
> t <- c(0.2696, 0.3613, 0.0256, 0.1287, 0.2305, 0.1565, 0.2484, 0.7482, 
+ 0.1748, 0.1805, 0.1985, 0.0799, 0.2843, 0.2392, 0.2151, 0.1177, 
+ 0.1278, 0.4189, 0.4374, 0.0931, 0.2846, 0.0357, 0.1809, 0.2077, 
+ 0.5211, 0.4935, 0.1464, 0.0297, 0.5429, 0.1294, 0.7089, 0.5534, 
+ 0.1183, 0.2628, 0.0481, 0.0518, 0.0533, 0.3595, 0.0767, 0.2606, 
+ 0.1005, 0.227, 0.01, 0.0947, 0.1248, 0.2288, 0.1422, 0.233, 0.1428, 
+ 0.2043)
> 
> # Load the signatures of order 4 simply connected coherent systems -- the data
> # above correspond to simulations from system number 3
> data(sccsO4)
> 
> # Perform inference on the rate parameter:
> ## Not run: 
> ##D samps <- maskedInferenceIIDExponential(t, sccsO4[[3]]$signature, 2000,
> ##D priorShape=9, priorScale=0.5)
> ## End(Not run)
> 
> # Or perform inference on rate parameter and topology jointly, taking as candidate
> # set all possible simply connected coherent systems of order 4:
> ## Not run: 
> ##D samps <- maskedInferenceIIDExponential(t, sccsO4, 2000, priorShape=9,
> ##D priorScale=0.5)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("maskedInferenceIIDExponential", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simulateSystem")
> ### * simulateSystem
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simulateSystem
> ### Title: Simulate Masked Lifetime Data for a System
> ### Aliases: simulateSystem
> ### Keywords: simulate masked lifetime data system signature
> 
> ### ** Examples
> 
> # Simulate 20 masked lifetimes of a two component series system with Exponential(2)
> # component lifetimes
> # Using igraph object ...
> simulateSystem(graph.formula(s -- 1 -- 2 -- t), 20, rexp, rate=2)
 [1] 0.07352300 0.38101493 0.52727158 0.51762197 0.16846674 0.29423986
 [7] 0.14706019 0.05303631 0.02971958 0.58665605 0.49840648 0.01863426
[13] 0.10175518 0.15087047 0.36260715 0.11751373 0.51412345 0.27732070
[19] 0.15064150 0.25708715
> 
> # ... and using signature
> simulateSystem(c(1,0), 20, rexp, rate=2)
 [1] 0.20751474 0.23179251 0.21556607 0.56841571 0.40668412 0.89238270
 [7] 0.14279549 0.02602772 0.17593525 0.40726790 0.19309678 0.02963060
[13] 0.40208546 0.61689575 0.67282201 0.22372595 0.13041412 0.13186913
[19] 0.10530345 0.06628570
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simulateSystem", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("systemGraphToGenerator")
> ### * systemGraphToGenerator
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: systemGraphToGenerator
> ### Title: Construct a Continuous-time Markov Chain Generator
> ### Aliases: systemGraphToGenerator
> ### Keywords: generator matrix system signature
> 
> ### ** Examples
> 
> # Get the generator representing a repairable 5 component 'bridge' system with
> # failure rate 1 and repair rate 365.
> data(sccsO5)
> G <- systemGraphToGenerator(sccsO5[[18]]$graph, 1, 365)
Error in check_version(graph) : 
  This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
Calls: systemGraphToGenerator -> V -> update_vs_ref -> check_version
Execution halted
