
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "flare"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "flare-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('flare')
Loading required package: lattice
Loading required package: MASS
Loading required package: Matrix
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("eyedata")
> ### * eyedata
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: eyedata
> ### Title: The Bardet-Biedl syndrome Gene expression data from Scheetz et
> ###   al. (2006)
> ### Aliases: eyedata
> 
> ### ** Examples
> 
> data(eyedata)
> image(x)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("eyedata", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict.slim")
> ### * predict.slim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict.slim
> ### Title: Prediction for an object with S3 class '"slim"'
> ### Aliases: predict.slim
> 
> ### ** Examples
> 
> ## load library
> library(flare)
> ## generate data
> set.seed(123)
> n = 100
> d = 200
> d1 = 10
> rho0 = 0.3
> lambda = c(3:1)*sqrt(log(d)/n)
> Sigma = matrix(0,nrow=d,ncol=d)
> Sigma[1:d1,1:d1] = rho0
> diag(Sigma) = 1
> mu = rep(0,d)
> X = mvrnorm(n=2*n,mu=mu,Sigma=Sigma)
> X.fit = X[1:n,]
> X.pred = X[(n+1):(2*n),]
> eps = rt(n=n,df=n-1)
> beta = c(rep(sqrt(1/3),3),rep(0,d-3))
> Y.fit = X.fit%*%beta+eps
> 
> ## Regression with "dantzig".
> out=slim(X=X.fit,Y=Y.fit,lambda=lambda,method = "lq",q=1)
Sparse Linear Regression with L1 Regularization.
Lad Lasso with screening.

slim options summary: 
3 lambdas used:
[1] 0.691 0.460 0.230
Method = lq 
q = 1  loss, LAD Lasso
Degree of freedom: 0 -----> 7 
Runtime: 0.1816969 secs 
> 
> ## Display results
> Y=predict(out,X.pred)

 Values of predicted responses: 
   index             1           2           3 
   lambda       0.6905      0.4604      0.2302 
    Y 1         0.0131     0.02144       0.674 
    Y 2         0.0131    -0.01321     -0.9785 
    Y 3         0.0131     0.04225      0.5439 
    Y 4         0.0131    -0.01376     -0.2439 
    Y 5         0.0131      0.0236      0.6105 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict.slim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("slim")
> ### * slim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: slim
> ### Title: Sparse Linear Regression using Nonsmooth Loss Functions and L1
> ###   Regularization
> ### Aliases: slim
> 
> ### ** Examples
> 
> ## load library
> library(flare)
> ## generate data
> n = 50
> d = 100
> X = matrix(rnorm(n*d), n, d)
> beta = c(3,2,0,1.5,rep(0,d-4))
> eps = rnorm(n)
> Y = X%*%beta + eps
> nlamb = 5
> ratio = 0.3
> 
> ## Regression with "dantzig", general "lq" and "lasso" respectively
> out1 = slim(X=X,Y=Y,nlambda=nlamb,lambda.min.ratio=ratio,method="dantzig")
Sparse Linear Regression with L1 Regularization.
Dantzig selector with screening.

slim options summary: 
5 lambdas used:
[1] 2.110 1.560 1.160 0.855 0.633
Method = dantzig 
Degree of freedom: 0 -----> 4 
Runtime: 0.003334999 secs 
> out2 = slim(X=X,Y=Y,nlambda=nlamb,lambda.min.ratio=ratio,method="lq",q=1)
Sparse Linear Regression with L1 Regularization.
Lad Lasso with screening.

slim options summary: 
5 lambdas used:
[1] 0.521 0.455 0.398 0.347 0.303
Method = lq 
q = 1  loss, LAD Lasso
Degree of freedom: 1 -----> 4 
Runtime: 0.7511749 secs 
> out3 = slim(X=X,Y=Y,nlambda=nlamb,lambda.min.ratio=ratio,method="lq",q=1.5)
Sparse Linear Regression with L1 Regularization.
LQ norm regrelarized regression (q = 1.5 )  with screening.

slim options summary: 
5 lambdas used:
[1] 0.579 0.493 0.419 0.357 0.303
Method = lq 
q = 1.5 loss
Degree of freedom: 1 -----> 5 
Runtime: 1.017978 secs 
> out4 = slim(X=X,Y=Y,nlambda=nlamb,lambda.min.ratio=ratio,method="lq",q=2)
Sparse Linear Regression with L1 Regularization.
Square root Lasso with screening.

slim options summary: 
5 lambdas used:
[1] 0.641 0.532 0.441 0.366 0.303
Method = lq 
q = 2 loss, SQRT Lasso
Degree of freedom: 0 -----> 5 
Runtime: 0.03495002 secs 
> out5 = slim(X=X,Y=Y,nlambda=nlamb,lambda.min.ratio=ratio,method="lasso")
Sparse Linear Regression with L1 Regularization.
Lasso with screening.

slim options summary: 
5 lambdas used:
[1] 2.110 1.300 0.800 0.493 0.303
Method = lasso 
Degree of freedom: 0 -----> 5 
Runtime: 0.001165152 secs 
> 
> ## Display results
> print(out4)

slim options summary: 
5 lambdas used:
[1] 0.641 0.532 0.441 0.366 0.303
Method = lq 
q = 2 loss, SQRT Lasso
Degree of freedom: 0 -----> 5 
Runtime: 0.03495002 secs 
> plot(out4)
> coef(out4)

 Values of estimated coefficients: 
 index               1           2           3 
 lambda         0.6413      0.5319      0.4412 
 intercept      0.4217      0.3298      0.1175 
 beta 1              0      0.7343       1.699 
 beta 2              0      0.1544      0.8866 
 beta 3              0           0           0 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("slim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sugm")
> ### * sugm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sugm
> ### Title: High-deimensional Sparse Undirected Graphical Models.
> ### Aliases: sugm
> 
> ### ** Examples
> 
> 
> ## load package required
> library(flare)
> 
> ## generating data
> n = 50
> d = 50
> D = sugm.generator(n=n,d=d,graph="band",g=1)
Generating data from the multivariate normal distribution with the band graph structure...
done.
> plot(D)
> 
> ## sparse precision matrix estimation with method "clime"
> out1 = sugm(D$data, method = "clime")
High-deimensional Sparse Undirected Graphical Models.
The Constrained L1 Minimization for Sparse Precision Matrix Estimation.
> plot(out1)
> sugm.plot(out1$path[[4]])
> 
> ## sparse precision matrix estimation with method "tiger"
> out2 = sugm(D$data, method = "tiger")
High-deimensional Sparse Undirected Graphical Models.
Tuning-Insensitive Graph Estimation and Regression.
> plot(out2)
> sugm.plot(out2$path[[5]])
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sugm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sugm.generator")
> ### * sugm.generator
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sugm.generator
> ### Title: Data generator for sparse undirected graph estimation.
> ### Aliases: sugm.generator
> 
> ### ** Examples
> 
> ## load package required
> library(flare)
> 
> ## band graph with bandwidth 3
> L = sugm.generator(graph = "band", g = 3)
Generating data from the multivariate normal distribution with the band graph structure...
done.
> plot(L)
> 
> ## random sparse graph
> L = sugm.generator(vis = TRUE)
Generating data from the multivariate normal distribution with the random graph structure...
done.
> 
> ## random dense graph
> L = sugm.generator(prob = 0.5, vis = TRUE)
Generating data from the multivariate normal distribution with the random graph structure...
done.
> 
> ## hub graph with 6 hubs
> L = sugm.generator(graph = "hub", g = 6, vis = TRUE)
Generating data from the multivariate normal distribution with the hub graph structure...
done.
> 
> ## cluster graph with 8 clusters
> L = sugm.generator(graph = "cluster", g = 8, vis = TRUE)
Generating data from the multivariate normal distribution with the cluster graph structure...
done.
> 
> ## scale-free graphs
> L = sugm.generator(graph="scale-free", vis = TRUE)
Generating data from the multivariate normal distribution with the scale-free graph structure...
done.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sugm.generator", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sugm.plot")
> ### * sugm.plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sugm.plot
> ### Title: Graph visualization for an object with S3 class '"sugm"'
> ### Aliases: sugm.plot
> 
> ### ** Examples
> 
> ## load package required
> library(flare)
> 
> ## visualize the hub graph
> L = sugm.generator(graph = "hub")
Generating data from the multivariate normal distribution with the hub graph structure...
done.
> sugm.plot(L$theta)
> 
> ## visualize the band graph
> L = sugm.generator(graph = "band",g=5)
Generating data from the multivariate normal distribution with the band graph structure...
done.
> sugm.plot(L$theta)
> 
> ## visualize the cluster graph
> L = sugm.generator(graph = "cluster")
Generating data from the multivariate normal distribution with the cluster graph structure...
done.
> sugm.plot(L$theta)
> 
> #show working directory
> getwd()
[1] "/Users/gaborcsardi/works/igraph/revdep_check/flare.Rcheck"
> #plot 5 graphs and save the plots as eps files in the working directory  
> sugm.plot(L$theta, epsflag = TRUE, cur.num = 5)
pdf 
  2 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sugm.plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sugm.roc")
> ### * sugm.roc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sugm.roc
> ### Title: Draw ROC Curve for an object with S3 class '"sugm"'
> ### Aliases: sugm.roc
> 
> ### ** Examples
> 
> ## load package required
> library(flare)
> 
> #generate data
> L = sugm.generator(d = 30, graph = "random", prob = 0.1)
Generating data from the multivariate normal distribution with the random graph structure...
done.
> out1 = sugm(L$data, lambda=10^(seq(log10(.4), log10(0.03), length.out=20)))
High-deimensional Sparse Undirected Graphical Models.
Tuning-Insensitive Graph Estimation and Regression.
> 
> #draw ROC curve
> Z1 = sugm.roc(out1$path,L$theta)
Computing F1 scores, false positive rates and true positive rates....done.
> 
> #Maximum F1 score
> max(Z1$F1)
[1] 0.9826303
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sugm.roc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sugm.select")
> ### * sugm.select
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sugm.select
> ### Title: Model selection for high-dimensional undirected graphical models
> ### Aliases: sugm.select
> 
> ### ** Examples
> 
> ## load package required
> library(flare)
> 
> #generate data
> L = sugm.generator(d = 10, graph="hub")
Generating data from the multivariate normal distribution with the hub graph structure...
done.
> out1 = sugm(L$data)
High-deimensional Sparse Undirected Graphical Models.
Tuning-Insensitive Graph Estimation and Regression.
> 
> #model selection using stars
> out1.select2 = sugm.select(out1, criterion = "stars", stars.thresh = 0.05)
Conducting Subsampling....in progress:5% Conducting Subsampling....in progress:10% Conducting Subsampling....in progress:15% Conducting Subsampling....in progress:20% Conducting Subsampling....in progress:25% Conducting Subsampling....in progress:30% Conducting Subsampling....in progress:35% Conducting Subsampling....in progress:40% Conducting Subsampling....in progress:45% Conducting Subsampling....in progress:50% Conducting Subsampling....in progress:55% Conducting Subsampling....in progress:60% Conducting Subsampling....in progress:65% Conducting Subsampling....in progress:70% Conducting Subsampling....in progress:75% Conducting Subsampling....in progress:80% Conducting Subsampling....in progress:85% Conducting Subsampling....in progress:90% Conducting Subsampling....in progress:95% Conducting Subsampling....in progress:100% 
Conducting Subsampling....done.  
> plot(out1.select2)
> 
> #model selection using cross validation
> #out1.select3 = sugm.select(out1, criterion = "cv")
> #plot(out1.select3)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sugm.select", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  17.303 0.084 17.413 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
