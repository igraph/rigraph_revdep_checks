
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "FisHiCal"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "FisHiCal-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('FisHiCal')
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: RcppArmadillo
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("calibrate")
> ### * calibrate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calibrate
> ### Title: Hi-C calibration
> ### Aliases: calibrate
> 
> ### ** Examples
> 
>  data(match) 
>  data(hic)
>  npoints = 10 # number of points to fit
>  
>  # prepareCalib computes threshold to fit 
>  res = prepareCalib(match, npoints, useMax = FALSE)
>  calib = res$calib
>  calib$f # calibration function
function (m, params) 
{
    a = params[[1]]
    b = params[[2]]
    threshold = params[[3]]
    m = exp((log(m) - b)/a)
    m[m == Inf] = 0
    m[m > threshold] = 0
    return(m)
}
<environment: 0x7fac816dde40>
>  calib$params # the parametrs for f
[[1]]
[1] -2

[[2]]
[1] 10

[[3]]
[1] 22.79646

>  # note that calib could be refined by the user
>  
>  # now calibrate the hic matrix
>  calibHiC = calibrate(hic, calib)
>  plot(match$distances, calibHiC[upper.tri(calibHiC)],
+  xlab = "distances", ylab = "calibrated distances")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calibrate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lsmacof")
> ### * lsmacof
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lsmacof
> ### Title: 3D reconstruction from Hi-C distances
> ### Aliases: lsmacof
> 
> ### ** Examples
> 
>  data(calibHiC)
>  data(match)
>  data(conf)
>  predConf = lsmacof(calibHiC, max(match$distances))
>  
>  # superimpose
>  partialPS<-function(m1, m2)
+  {
+     # translate to origin
+     tm1<-scale(m1, scale = FALSE)
+     tm2<-scale(m2, scale = FALSE)
+     A<-svd(t(tm2)%*%tm1)
+     v<-A$u
+     w<-A$v
+     # update v a det(R) is positive
+     k = ncol(m1)
+     d = sign(det(t(w)%*%t(v)))
+     v[,k] = v[,k]*-1*d
+     R<- w%*%t(v)
+     return(list(m1=tm1%*%R,m2=tm2))
+   }
> 
>   res = partialPS(predConf, conf) 
>   if (require(rgl))
+   {
+     plot3d(res$m2, type = "l", axes = FALSE, box = FALSE, xlab = "", ylab = "", zlab = "")
+     lines3d(res$m1, col = "red")
+   }
Loading required package: rgl
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lsmacof", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rgl’

> nameEx("match")
> ### * match
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: match
> ### Title: in-silico FISH distances and matching Hi-C frequencies with 5%
> ###   noise
> ### Aliases: match
> ### Keywords: datasets datasets
> 
> ### ** Examples
> 
> data(match)
> plot(match$frequencies ~ match$distances, xlab = "distances", ylab = "frequencies")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("match", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotInc")
> ### * plotInc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotInc
> ### Title: Plot a spatial inconsistency
> ### Aliases: plotInc
> 
> ### ** Examples
> 
>   data(spatialInc)
>   plotInc(1, spatialInc) # no plot since no spatial incosistency was detected
>   plotInc(167, spatialInc) 
Error in check_version(graph) : 
  This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
Calls: plotInc ... as.igraph.vs -> inherits -> V -> update_vs_ref -> check_version
Execution halted
