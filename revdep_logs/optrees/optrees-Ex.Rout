
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "optrees"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "optrees-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('optrees')
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("checkGraph")
> ### * checkGraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: checkGraph
> ### Title: Checks if the graph contains at least one tree or one
> ###   arborescence
> ### Aliases: checkGraph
> 
> ### ** Examples
> 
> # Graph
> nodes <- 1:4
> arcs <- matrix(c(1,2,2, 1,3,15, 2,3,1, 2,4,9, 3,4,1),
+                byrow = TRUE, ncol = 3)
> # Check graph
> checkGraph(nodes, arcs)
[1] TRUE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("checkGraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("findMinCut")
> ### * findMinCut
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: findMinCut
> ### Title: Finds the minimum cut of a given graph
> ### Aliases: findMinCut
> 
> ### ** Examples
> 
> # Graph
> nodes <- 1:6
> arcs <- matrix(c(1,2,1, 1,3,7, 2,3,1, 2,4,3, 2,5,2, 3,5,4, 4,5,1, 4,6,6,
+                 5,6,2), byrow = TRUE, ncol = 3)
> # Find minimum cut
> findMinCut(nodes, arcs, source.node = 2, sink.node = 6)
$s.cut
[1] 2 3 1 5

$t.cut
[1] 4 6

$max.flow
[1] 6

$cut.set
     ept1 ept2 weight
[1,]    2    4      3
[2,]    5    4      1
[3,]    5    6      2

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("findMinCut", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getComponents")
> ### * getComponents
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getComponents
> ### Title: Connected components of a graph
> ### Aliases: getComponents
> 
> ### ** Examples
> 
> # Graph
> nodes <- 1:4
> arcs <- matrix(c(1,2,1, 1,6,1, 3,4,1, 4,5,1), ncol = 3, byrow = TRUE)
> # Components
> getComponents(nodes, arcs)
$component
$component[[1]]
[1] 1 2 6

$component[[2]]
[1] 3 4 5


$components.arcs
     ept1 ept2 weight component
[1,]    1    2      1         1
[2,]    1    6      1         1
[3,]    3    4      1         2
[4,]    4    5      1         2

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getComponents", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getMinimumArborescence")
> ### * getMinimumArborescence
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getMinimumArborescence
> ### Title: Computes a minimum cost arborescence
> ### Aliases: getMinimumArborescence
> 
> ### ** Examples
> 
> # Graph
> nodes <- 1:4
> arcs <- matrix(c(1,2,2, 1,3,3, 1,4,4, 2,3,3, 2,4,4, 3,2,3,
+                  3,4,1, 4,2,1, 4,3,2),byrow = TRUE, ncol = 3)
> # Minimum cost arborescence
> getMinimumArborescence(nodes, arcs)

 Minimum cost spanning arborescence 
 Algorithm: Edmonds 
 Stages:  2 | Time:  0.005 
 ------------------------------
      head     tail    weight 
         1        3         3
         3        4         1
         4        2         1
 ------------------------------
                   Total = 5 

Error in repGraph(nodes, arcs, tree = msa$tree.arcs, directed = TRUE,  : 
  could not find function "plot.igraph"
Calls: getMinimumArborescence -> repGraph
Execution halted
