
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "c3net"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "c3net-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('c3net')
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("c3")
> ### * c3
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: c3
> ### Title: C3NET second step: Selecting maximum valued elements
> ### Aliases: c3
> ### Keywords: misc
> 
> ### ** Examples
> 
> data(expdata)
> 
> expdata <- copula(expdata)
> 
> mim <- makemim(expdata)
> 
> Ic <- mean(mim[upper.tri(mim)])  #Example cut-off for the first step of C3NET
> 
> # Ic <- 2 can be set for the example.
> 
> mim[mim < Ic] <-0  #nonsignificant values eliminated wrt C3NET step 1.
> 
> net <- c3(mim)  # regulatory network inferred (non zero elements stand for links of
> 		 #the predicted network)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("c3", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("c3net")
> ### * c3net
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: c3net
> ### Title: All in one function to infer network with C3NET
> ### Aliases: c3net
> ### Keywords: misc
> 
> ### ** Examples
> 
> data(expdata)
> data(truenet)
> 
> net <- c3net(expdata, network=TRUE)
Loading required package: tcltk
XIO:  fatal IO error 35 (Resource temporarily unavailable) on X server "/private/tmp/com.apple.launchd.rULzlZIqm8/org.macosforge.xquartz:0"
      after 95 requests (95 known processed) with 0 events remaining.
