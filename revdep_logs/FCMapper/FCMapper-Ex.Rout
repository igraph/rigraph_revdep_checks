
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "FCMapper"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "FCMapper-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('FCMapper')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("changes.scenario")
> ### * changes.scenario
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: changes.scenario
> ### Title: Scenario with fixed values
> ### Aliases: changes.scenario
> 
> ### ** Examples
> 
> 
> matrix = matrix(nrow=7,ncol=7)
> matrix[1,] = c(0,-0.5,0,0,1,0,1)
> matrix[2,] = c(1,0,1,0.2,0,0,0.6)
> matrix[3,] = c(0,1,0,0,0,0,0)
> matrix[4,] = c(0.6,0,0,1,0,0,0.1)
> matrix[5,] = c(0,0.5,0,0,1,0,-0.6) 
> matrix[6,] = c(0,0,-1,0,0,0,0)
> matrix[7,] = c(0,0,0,-0.5,0,0,1)
> concept.names = c("A","B","C","D","E","F","G")
> 
> changes.scenario(matrix,concept.names,iter=25,set.concepts=c("B","G"),set.values=c(0.5,0))
  Concept Equilibrium_value
1       A         0.7134793
2       B         0.5000000
3       C         0.5000000
4       D         0.6872380
5       E         0.8229442
6       F         0.5000000
7       G         0.0000000
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("changes.scenario", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("check.matrix")
> ### * check.matrix
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: check.matrix
> ### Title: Matrix validation
> ### Aliases: check.matrix
> 
> ### ** Examples
> 
> 
> #Is not square and contains values outside of -1 and 1: 
> matrix = matrix(nrow=7,ncol=7)
> matrix[1,] = c(0,-0.5,0,0,1,0,1)
> matrix[2,] = c(1,0,1,0.2,0,0,0.6)
> matrix[3,] = c(0,1,0,0,0,2,0)
> matrix[4,] = c(0.6,0,0,1,0,0,0.1)
> matrix[5,] = c(-5,0.5,0,0,1,0,-0.6) 
> matrix[6,] = c(0,0,-1,0,0,0,0)
> 
> #Check
> check.matrix(matrix)
[1] "Matrix is square."
[1] "Warning: The following entries are greater than 1: 38"
[1] "Warning: The following entries are less than 1: 5"
[1] "The diagonal is not equal to 0 (ie, there is a self-loop). Consider whether this is appropriate."
> 
> #Matrix without issues:
> matrix2 = matrix(nrow=7,ncol=7)
> matrix2[1,] = c(0,-0.5,0,0,1,0,1)
> matrix2[2,] = c(1,0,1,0.2,0,0,0.6)
> matrix2[3,] = c(0,1,0,0,0,0,0)
> matrix2[4,] = c(0.6,0,0,1,0,0,0.1)
> matrix2[5,] = c(0,0.5,0,0,1,0,-0.6) 
> matrix2[6,] = c(0,0,-1,0,0,0,0)
> matrix2[7,] = c(0,0,0,-0.5,0,0,1)
> 
> #Check
> check.matrix(matrix2)
[1] "Matrix is square."
[1] "All values of the matrix are within -1 and 1."
[1] "The diagonal is not equal to 0 (ie, there is a self-loop). Consider whether this is appropriate."
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("check.matrix", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("combine.maps")
> ### * combine.maps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: combine.maps
> ### Title: Map aggregator
> ### Aliases: combine.maps
> 
> ### ** Examples
> 
> #Matrix 1
> matrix = matrix(nrow=7,ncol=7)
> matrix[1,] = c(0,-0.5,0,0,1,0,1)
> matrix[2,] = c(1,0,1,0.2,0,0,0.6)
> matrix[3,] = c(0,1,0,0,0,0,0)
> matrix[4,] = c(0.6,0,0,1,0,0,0.1)
> matrix[5,] = c(0,0.5,0,0,1,0,-0.6) 
> matrix[6,] = c(0,0,-1,0,0,0,0)
> matrix[7,] = c(0,0,0,-0.5,0,0,1)
> concept.names = c("A","B","C","D","E","F","G")
> 
> #Matrix 2
> matrix2 = matrix(nrow=6,ncol=6)
> matrix2[1,] = c(0,1,0,1,0,0)
> matrix2[2,] = c(-1,1,0,-1,0,1)
> matrix2[3,] = c(0,0,1,0,0,1)
> matrix2[4,] = c(-1,0,0,0,0,0)
> matrix2[5,] = c(0,0.5,0,0,1,0) 
> matrix2[6,] = c(1,0,0,-1,0,0)
> concept.names2 = c("E","F","G","H","I","J")
> 
> #Aggregate
> combine.maps(matrix1=matrix,matrix2=matrix2,concept.names1=
+ concept.names,concept.names2=concept.names2)
    A    B  C    D  E   F    G  H I J
A 0.0 -0.5  0  0.0  1 0.0  1.0  0 0 0
B 1.0  0.0  1  0.2  0 0.0  0.6  0 0 0
C 0.0  1.0  0  0.0  0 0.0  0.0  0 0 0
D 0.6  0.0  0  1.0  0 0.0  0.1  0 0 0
E 0.0  0.5  0  0.0  1 1.0 -0.6  1 0 0
F 0.0  0.0 -1  0.0 -1 1.0  0.0 -1 0 1
G 0.0  0.0  0 -0.5  0 0.0  1.0  0 0 1
H 0.0  0.0  0  0.0 -1 0.0  0.0  0 0 0
I 0.0  0.0  0  0.0  0 0.5  0.0  0 1 0
J 0.0  0.0  0  0.0  1 0.0  0.0 -1 0 0
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("combine.maps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("comp.maps")
> ### * comp.maps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: comp.maps
> ### Title: Map comparison
> ### Aliases: comp.maps
> 
> ### ** Examples
> 
>   concept.names1 = c("A","B","C","D","E","F","G")
>   concept.names2 = c("C","D","E","F","G","H")
>   
>   comp.maps(concept.names1,concept.names2)
         S2 Jaccard
1 0.3846154   0.625
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("comp.maps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("comp.scenarios")
> ### * comp.scenarios
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: comp.scenarios
> ### Title: Scenario comparison
> ### Aliases: comp.scenarios
> 
> ### ** Examples
> 
> matrix = matrix(nrow=7,ncol=7)
> matrix[1,] = c(0,-0.5,0,0,1,0,1)
> matrix[2,] = c(1,0,1,0.2,0,0,0.6)
> matrix[3,] = c(0,1,0,0,0,0,0)
> matrix[4,] = c(0.6,0,0,1,0,0,0.1)
> matrix[5,] = c(0,0.5,0,0,1,0,-0.6) 
> matrix[6,] = c(0,0,-1,0,0,0,0)
> matrix[7,] = c(0,0,0,-0.5,0,0,1)
> concept.names = c("A","B","C","D","E","F","G")
> 
> scenario1 = nochanges.scenario(matrix,iter=25,concept.names)
> 
> scenario2 = changes.scenario(matrix,concept.names,iter=25,set.concepts=c("B"),set.values=c(0.5))
> 
> comp.scenarios(scenario1,scenario2)
  Concept Scenario_1 Scenario_2   Difference Percent_change
1       A  0.7282237  0.6984918 -0.029731820     -4.0827869
2       B  0.6419987  0.5000000 -0.141998692    -22.1182214
3       C  0.5354401  0.5000000 -0.035440143     -6.6188804
4       D  0.5727168  0.5668774 -0.005839450     -1.0196051
5       E  0.8254426  0.8203710 -0.005071666     -0.6144177
6       F  0.5000000  0.5000000  0.000000000      0.0000000
7       G  0.8163443  0.7955105 -0.020833764     -2.5520806
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("comp.scenarios", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concept.indices")
> ### * concept.indices
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concept.indices
> ### Title: Concept indices
> ### Aliases: concept.indices
> 
> ### ** Examples
> 
> matrix = matrix(nrow=7,ncol=7)
> matrix[1,] = c(0,-0.5,0,0,1,0,1)
> matrix[2,] = c(1,0,1,0.2,0,0,0.6)
> matrix[3,] = c(0,1,0,0,0,0,0)
> matrix[4,] = c(0.6,0,0,1,0,0,0.1)
> matrix[5,] = c(0,0.5,0,0,1,0,-0.6) 
> matrix[6,] = c(0,0,-1,0,0,0,0)
> matrix[7,] = c(0,0,0,-0.5,0,0,1)
> concept.names = c("A","B","C","D","E","F","G")
> 
> concept.indices(matrix,concept.names)
  Concept Outdegree Indegree Centrality Transmitter Receiver Ordinary
1       A       2.5      1.6        4.1           0        0        1
2       B       2.8      2.0        4.8           0        0        1
3       C       1.0      2.0        3.0           0        0        1
4       D       1.7      1.7        3.4           0        0        1
5       E       2.1      2.0        4.1           0        0        1
6       F       1.0      0.0        1.0           1        0        0
7       G       1.5      3.3        4.8           0        0        1
  No connection
1             0
2             0
3             0
4             0
5             0
6             0
7             0
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concept.indices", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("graph.fcm")
> ### * graph.fcm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: graph.fcm
> ### Title: Fuzzy cognitive map graph
> ### Aliases: graph.fcm
> 
> ### ** Examples
> 
> 
> matrix = matrix(nrow=7,ncol=7)
> matrix[1,] = c(0,-0.5,0,0,1,0,1)
> matrix[2,] = c(1,0,1,0.2,0,0,0.6)
> matrix[3,] = c(0,1,0,0,0,0,0)
> matrix[4,] = c(0.6,0,0,1,0,0,0.1)
> matrix[5,] = c(0,0.5,0,0,1,0,-0.6) 
> matrix[6,] = c(0,0,-1,0,0,0,0)
> matrix[7,] = c(0,0,0,-0.5,0,0,1)
> concept.names = c("A","B","C","D","E","F","G")
> 
> results = nochanges.scenario(matrix,iter=25,concept.names)
> 
> graph.fcm(matrix,concept.sizes=results$Equilibrium_value,concept.names)
Loading required package: tcltk
Error in .Call("R_igraph_layout_kamada_kawai", graph, coords, maxiter,  : 
  At structural_properties.c:4215 : Weight vector must be non-negative, Invalid value
Calls: graph.fcm ... params -> ret -> v -> layout_with_kk -> .Call -> <Anonymous>
Execution halted
