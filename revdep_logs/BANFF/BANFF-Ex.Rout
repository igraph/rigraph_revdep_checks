
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "BANFF"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "BANFF-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('BANFF')
Loading required package: foreach
Loading required package: doParallel
Loading required package: iterators
Loading required package: parallel
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("DPM.HODC")
> ### * DPM.HODC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DPM.HODC
> ### Title: Hierarchical Ordered Density Clustering (HODC) for Dirichlet
> ###   Process Mixture Model Fitting
> ### Aliases: DPM.HODC
> 
> ### ** Examples
> 
> ###random make the density
> rstat=c(rnorm(50,mean=1),rnorm(50,mean=2),rnorm(100,mean=4)
+ ,rnorm(100,mean=8))
> ###transformed into pvalue
> pvalue=pnorm(-rstat)
> DPMHODC=DPM.HODC(v=5,pvalue)


iter:  1 


iter:  2 


iter:  3 


iter:  4 


iter:  5 


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DPM.HODC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("EM.HODC")
> ### * EM.HODC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: EM.HODC
> ### Title: Hierarchical Ordered Density Clustering (HODC) for Finite
> ###   Mixture Model Fitting
> ### Aliases: EM.HODC
> 
> ### ** Examples
> 
> rstat=c(rnorm(50,mean=1),rnorm(50,mean=2),rnorm(100,mean=4),rnorm(100,mean=8))
> pvalue=pnorm(-rstat)
> EMHODC=EM.HODC(pvalue)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("EM.HODC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Grid.Adjmatrix.Transfer")
> ### * Grid.Adjmatrix.Transfer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Grid.Adjmatrix.Transfer
> ### Title: Connector for Transferring Grid Coordinates into Adjacency
> ###   Matrix
> ### Aliases: Grid.Adjmatrix.Transfer
> 
> ### ** Examples
> 
> ###10 3-D coordinates
> x <- matrix(rnorm(3*10), nrow = 10)
> ###a 10x10 adjacency matrix returned for 'net'
> ###Distrance larger than 1 is considerded as connected
> net<-Grid.Adjmatrix.Transfer(grid=x, euclidean.dist=1)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Grid.Adjmatrix.Transfer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Networks.Fast")
> ### * Networks.Fast
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Networks.Fast
> ### Title: Bayesian Network Discovery using a Hybrid Fast Algorithm
> ### Aliases: Networks.Fast
> 
> ### ** Examples
> 
> ####Gene Network discovery
> ##Generating Scale free Gene Network
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> g <- barabasi.game(50, power=1, zero.appeal=1.5,directed = FALSE)
> net=as(get.adjacency(g,attr=NULL),"matrix")
> ##Random assign selected genes and make the signal intension as gaussian mixture
> newz=rep(c(1,0,0,1,0),10)
> Simnorm=function(n){
+ weight = c(0.4, 0.6)
+ mu = c(8,6)
+ sigma = c(1,0.5)
+ z = sample(c(1,2),size=n, prob=weight,replace=TRUE)
+ r = rnorm(n,mean=mu[z],sd=sigma[z])
+ return(r)
+ }
> testcov<-0
> for(i in 1:50){
+  if(newz[i]==0){
+    testcov[i]<-rnorm(1,mean=0,sd=1)
+  }else{
+   testcov[i]<-Simnorm(1)
+  }
+ }
> pvalue=pnorm(-testcov)
> total1=Networks.Fast(pvalue,net,iter=5,nburns=2,
+ v=20,algorithms="DPM",DPparallel=FALSE,
+ piall=c(0.8, 0.85, 0.9, 0.95),rhoall=c(1, 2, 5, 10, 15)
+ )
[1] "NOW_Transferring p-values to testing statistics"
[1] "NOW_Getting initials by Kmeans"
[1] "NOW_Generating_Zi for likelihood comparison"
[1] "NOW_Comparing the likelihood to select the best set"
[1] "Iteration Begins~"










































> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Networks.Fast", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("Networks.STD")
> ### * Networks.STD
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Networks.STD
> ### Title: Bayesian Network Discovery using a Standard MCMC Algorithm
> ### Aliases: Networks.STD
> 
> ### ** Examples
> 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> ###Creating the network of 10X10 image
> g <- graph.lattice(length=10,dim=2)
> net=as(get.adjacency(g,attr=NULL),"matrix")##this is the input of argument 'net'
> ##Assign the signal elements with signal intention 
> ##as normal distribution N(1,0.2). While noise is set as N(0,0.2)
> newz=rep(0,100)
> for (i in 3:7)
+ {
+  newz[(i*10+3):(i*10+7)]=1
+ }
> testcov<-0
> for(i in 1:100){
+  if(newz[i]==0){
+    testcov[i]<-rnorm(1,mean=0,sd=0.2)
+ 
+  }else{
+   testcov[i]<-rnorm(1,mean=1,sd=0.2)
+ 
+  }
+ }
> ##The profile of the image
> image(matrix(testcov,10,10),col=gray(seq(0,1,length=255)))
> ##Transform the signals into pvalue form and begin identification
> pvalue=pnorm(-testcov)
> total=Networks.STD(pvalue,net,iter=3,nburns=1,
+ piall=c(0.8, 0.85, 0.9, 0.95),rhoall=c(0.5,1,5,10,15))
Iter: 1 
Iter: 2 
Iter: 3 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Networks.STD", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("Plot.Subnetwork")
> ### * Plot.Subnetwork
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Plot.Subnetwork
> ### Title: Plotting the Network Feature Selected
> ### Aliases: Plot.Subnetwork
> 
> ### ** Examples
> 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> g=barabasi.game(10,power=0.5)
> net=as(get.adjacency(g),"matrix")
> trace=matrix(c(rep(1,5),rep(0,5)),nrow=1)
> Plot.Subnetwork(net,trace)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Plot.Subnetwork", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("SummaryAccuracy")
> ### * SummaryAccuracy
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SummaryAccuracy
> ### Title: Summary of the Accuracy of Node and Network selection
> ### Aliases: SummaryAccuracy
> 
> ### ** Examples
> 
> ####Gene Network discovery
> ##Generating Scale free Gene Network
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> library(BANFF)
> g <- barabasi.game(50, power=1, zero.appeal=1.5,directed = FALSE)
> net=as(get.adjacency(g,attr=NULL),"matrix")
> ##Random assign selected genes and make the signal intension as gaussian mixture
> newz=rep(c(1,0,0,1,0),10)
> Simnorm=function(n){
+ weight = c(0.4, 0.6)
+ mu = c(8,6)
+ sigma = c(1,0.5)
+ z = sample(c(1,2),size=n, prob=weight,replace=TRUE)
+ r = rnorm(n,mean=mu[z],sd=sigma[z])
+ return(r)
+ }
> testcov<-0
> for(i in 1:50){
+  if(newz[i]==0){
+    testcov[i]<-rnorm(1,mean=0,sd=1)
+  }else{
+   testcov[i]<-Simnorm(1)
+  }
+ }
> pvalue=pnorm(-testcov)
> total1=Networks.Fast(pvalue,net,iter=5,nburns=2,
+ v=20,algorithms="DPM",
+ piall=c(0.8, 0.85, 0.9, 0.95),rhoall=c(1, 2, 5, 10, 15))
[1] "NOW_Transferring p-values to testing statistics"
[1] "NOW_Getting initials by Kmeans"
[1] "NOW_Generating_Zi for likelihood comparison"
[1] "NOW_Comparing the likelihood to select the best set"
[1] "Iteration Begins~"










































> ####checking accuracy
> ###checking accuracy of nodes
> SummaryAccuracy(Trace=total1$trace,No.Sets=1,Type.Accuracy="Node",
+ True.Node=newz,Type.Net.Accuracy="Sample")
[1] 0.7166667
[1] 0.02222222
NULL
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SummaryAccuracy", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("plot.Networks.Fast")
> ### * plot.Networks.Fast
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.Networks.Fast
> ### Title: Plotting Bayesian Network Discovery using a Hybrid Fast
> ###   Algorithm
> ### Aliases: plot.Networks.Fast
> 
> ### ** Examples
> 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> ####Gene Network discovery
> ##Generating Scale free Gene Network
> library(igraph)
> g <- barabasi.game(50, power=1, zero.appeal=1.5,directed = FALSE)
> net=as(get.adjacency(g,attr=NULL),"matrix")
> ##Random assign selected genes and make the signal intension as gaussian mixture
> newz=rep(c(1,0,0,1,0),10)
> Simnorm=function(n){
+ weight = c(0.4, 0.6)
+ mu = c(8,6)
+ sigma = c(1,0.5)
+ z = sample(c(1,2),size=n, prob=weight,replace=TRUE)
+ r = rnorm(n,mean=mu[z],sd=sigma[z])
+ return(r)
+ }
> testcov<-0
> for(i in 1:50){
+  if(newz[i]==0){
+    testcov[i]<-rnorm(1,mean=0,sd=1)
+  }else{
+   testcov[i]<-Simnorm(1)
+  }
+ }
> pvalue=pnorm(-testcov)
> total1=Networks.Fast(pvalue,net,iter=5,nburns=2,
+ v=20,algorithms="DPM",DPparallel=FALSE,
+ piall=c(0.8, 0.85, 0.9, 0.95),rhoall=c(1, 2, 5, 10, 15)
+ )
[1] "NOW_Transferring p-values to testing statistics"
[1] "NOW_Getting initials by Kmeans"
[1] "NOW_Generating_Zi for likelihood comparison"
[1] "NOW_Comparing the likelihood to select the best set"
[1] "Iteration Begins~"










































> 
> ######Plotting the object of class "Networks.Fast"
> plot(total1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.Networks.Fast", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("plot.Networks.STD")
> ### * plot.Networks.STD
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.Networks.STD
> ### Title: Plotting Bayesian Network Discovery using a Standard MCMC
> ###   Algorithm
> ### Aliases: plot.Networks.STD
> 
> ### ** Examples
> 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> ###Creating the network of 10X10 image
> g <- graph.lattice(length=10,dim=2)
> net=as(get.adjacency(g,attr=NULL),"matrix")##this is the input of argument 'net'
> ##Assign the signal elements with signal intention 
> ##as normal distribution N(1,0.2). While noise is set as N(0,0.2)
> newz=rep(0,100)
> for (i in 3:7)
+ {
+  newz[(i*10+3):(i*10+7)]=1
+ }
> testcov<-0
> for(i in 1:100){
+  if(newz[i]==0){
+    testcov[i]<-rnorm(1,mean=0,sd=0.2)
+ 
+  }else{
+   testcov[i]<-rnorm(1,mean=1,sd=0.2)
+ 
+  }
+ }
> ##The profile of the image
> image(matrix(testcov,10,10),col=gray(seq(0,1,length=255)))
> ##Transform the signals into pvalue form and begin identification
> pvalue=pnorm(-testcov)
> total=Networks.STD(pvalue,net,iter=3,nburns=1,
+ piall=c(0.8, 0.85, 0.9, 0.95),rhoall=c(0.5,1,5,10,15))
Iter: 1 
Iter: 2 
Iter: 3 
> 
> ######plot the object of class "Networks.STD"
> plot(total)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.Networks.STD", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("summary.Networks.Fast")
> ### * summary.Networks.Fast
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.Networks.Fast
> ### Title: Summarizing Bayesian Network Discovery using a Hybrid Fast
> ###   Algorithm
> ### Aliases: summary.Networks.Fast
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> ####Gene Network discovery
> ##Generating Scale free Gene Network
> library(igraph)
> g <- barabasi.game(50, power=1, zero.appeal=1.5,directed = FALSE)
> net=as(get.adjacency(g,attr=NULL),"matrix")
> ##Random assign selected genes and make the signal intension as gaussian mixture
> newz=rep(c(1,0,0,1,0),10)
> Simnorm=function(n){
+ weight = c(0.4, 0.6)
+ mu = c(8,6)
+ sigma = c(1,0.5)
+ z = sample(c(1,2),size=n, prob=weight,replace=TRUE)
+ r = rnorm(n,mean=mu[z],sd=sigma[z])
+ return(r)
+ }
> testcov<-0
> for(i in 1:50){
+  if(newz[i]==0){
+    testcov[i]<-rnorm(1,mean=0,sd=1)
+  }else{
+   testcov[i]<-Simnorm(1)
+  }
+ }
> pvalue=pnorm(-testcov)
> total1=Networks.Fast(pvalue,net,iter=5,nburns=2,
+ v=20,algorithms="DPM",DPparallel=FALSE,
+ piall=c(0.8, 0.85, 0.9, 0.95),rhoall=c(1, 2, 5, 10, 15)
+ )
[1] "NOW_Transferring p-values to testing statistics"
[1] "NOW_Getting initials by Kmeans"
[1] "NOW_Generating_Zi for likelihood comparison"
[1] "NOW_Comparing the likelihood to select the best set"
[1] "Iteration Begins~"










































> 
> ######summary the object of class "Networks.Fast"
> summary(total1)
i.  Convergence results: 
                                   
     Stationarity start     p-value
     test         iteration        
var1 passed       1         0.943  
                             
     Halfwidth Mean Halfwidth
     test                    
var1 failed    103  16.8     

ii.  Hyper-Parameter Selection: 
pi0= 0.9 rho0= 1 rho1= 2 

iii.  Classification Table: 
classification
 0  1 
36 14 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.Networks.Fast", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("summary.Networks.STD")
> ### * summary.Networks.STD
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.Networks.STD
> ### Title: Summarizing Bayesian Network Discovery using a Standard MCMC
> ###   Algorithm
> ### Aliases: summary.Networks.STD
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> ###Creating the network of 10X10 image
> g <- graph.lattice(length=10,dim=2)
> net=as(get.adjacency(g,attr=NULL),"matrix")##this is the input of argument 'net'
> ##Assign the signal elements with signal intention 
> ##as normal distribution N(1,0.2). While noise is set as N(0,0.2)
> newz=rep(0,100)
> for (i in 3:7)
+ {
+  newz[(i*10+3):(i*10+7)]=1
+ }
> testcov<-0
> for(i in 1:100){
+  if(newz[i]==0){
+    testcov[i]<-rnorm(1,mean=0,sd=0.2)
+ 
+  }else{
+   testcov[i]<-rnorm(1,mean=1,sd=0.2)
+ 
+  }
+ }
> ##The profile of the image
> image(matrix(testcov,10,10),col=gray(seq(0,1,length=255)))
> ##Transform the signals into pvalue form and begin identification
> pvalue=pnorm(-testcov)
> total=Networks.STD(pvalue,net,iter=3,nburns=1,
+ piall=c(0.8, 0.85, 0.9, 0.95),rhoall=c(0.5,1,5,10,15))
Iter: 1 
Iter: 2 
Iter: 3 
> 
> ######summary the object of class "Networks.STD"
> summary(total)
i.  Convergence results: 
                                   
     Stationarity start     p-value
     test         iteration        
var1 failed       NA        NA     
                             
     Halfwidth Mean Halfwidth
     test                    
var1 <NA>      NA   NA       

ii.  Hyper-Parameter Selection: 
pi0= 0.85 rho0= 0.5 rho1= 1 

iii.  Classification Table: 
classification
 0  1 
75 25 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.Networks.STD", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  27.895 0.885 28.867 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
