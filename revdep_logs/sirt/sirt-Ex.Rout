
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "sirt"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "sirt-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('sirt')
Loading required package: TAM
Loading required package: CDM
Loading required package: mvtnorm
**********************************
** CDM 4.3-0 (2015-06-05)       **
** Cognitive Diagnostic Models  **
**********************************

Loading required package: MASS
::...........................::
:: TAM 1.7-1 (2015-06-05)    ::
:: Test Analysis Modules     ::
::...........................::

|-----------------------------------------------------------------|
| sirt 1.7-0 (2015-06-05)                                         |
| Supplementary Item Response Theory                              |
| Maintainer: Alexander Robitzsch <a.robitzsch at bifie.at>       |
| https://sites.google.com/site/alexanderrobitzsch/software       |
|-----------------------------------------------------------------|

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("IRT.mle")
> ### * IRT.mle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: IRT.mle
> ### Title: Person Parameter Estimation
> ### Aliases: IRT.mle
> ### Keywords: Person parameters
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: Generalized partial credit model
> ##D #############################################################################
> ##D 
> ##D data(data.ratings1)
> ##D dat <- data.ratings1
> ##D 
> ##D # estimate model
> ##D mod1 <- rm.facets( dat[ , paste0( "k",1:5) ], rater=dat$rater, 
> ##D              pid=dat$idstud  , maxiter=15)
> ##D # extract dataset and item parameters
> ##D data <- mod1$procdata$dat2.NA
> ##D a <- mod1$ipars.dat2$a
> ##D b <- mod1$ipars.dat2$b
> ##D theta0 <- mod1$person$EAP
> ##D # define item response function for item ii
> ##D calc.pcm <- function( theta , a , b , ii ){
> ##D     K <- ncol(b)
> ##D     N <- length(theta)
> ##D     matrK <- matrix( 0:K , nrow=N , ncol=K+1 , byrow=TRUE)
> ##D     eta <- a[ii] * theta * matrK - matrix( c(0,b[ii,]), nrow=N, ncol=K+1, byrow=TRUE)
> ##D     eta <- exp(eta)
> ##D     probs <- eta / rowSums(eta, na.rm=TRUE)    
> ##D     return(probs)
> ##D             }
> ##D arg.list <- list("a"=a , "b"=b )
> ##D 
> ##D # MLE
> ##D abil1 <- IRT.mle( data, irffct=calc.pcm, theta=theta0, arg.list=arg.list )
> ##D str(abil1)
> ##D # WLE
> ##D abil2 <- IRT.mle( data, irffct=calc.pcm, theta=theta0, arg.list=arg.list, type="WLE")
> ##D str(abil2)
> ##D # MAP with prior distribution N(.2, 1.3)
> ##D abil3 <- IRT.mle( data, irffct=calc.pcm, theta=theta0, arg.list=arg.list, 
> ##D               type="MAP", mu=.2, sigma=1.3 )
> ##D str(abil3)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Rasch model
> ##D #############################################################################
> ##D 
> ##D data(data.read)
> ##D dat <- data.read
> ##D I <- ncol(dat)
> ##D 
> ##D # estimate Rasch model
> ##D mod1 <- rasch.mml2( dat )
> ##D summary(mod1)
> ##D 
> ##D # define item response function
> ##D irffct <- function( theta, b , ii){
> ##D     eta <- exp( theta - b[ii] )
> ##D     probs <- eta / ( 1 + eta )
> ##D     probs <- cbind( 1 - probs , probs )
> ##D     return(probs)
> ##D         }
> ##D # initial person parameters and item parameters
> ##D theta0 <- mod1$person$EAP
> ##D arg.list <- list( "b" = mod1$item$b  )
> ##D 
> ##D # estimate WLE
> ##D source.all(pfsirt)
> ##D abil <- IRT.mle( data = dat , irffct=irffct , arg.list=arg.list , 
> ##D             theta=theta0, type="WLE")
> ##D # compare with wle.rasch function
> ##D theta <- wle.rasch( dat , b= mod1$item$b )
> ##D cbind( abil[,1] , theta$theta , abil[,2] , theta$se.theta )
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: Ramsay quotient model
> ##D #############################################################################
> ##D 
> ##D data(data.read)
> ##D dat <- data.read
> ##D I <- ncol(dat)
> ##D 
> ##D # estimate Ramsay model
> ##D mod1 <- rasch.mml2( dat , irtmodel ="ramsay.qm" )
> ##D summary(mod1)
> ##D # define item response function
> ##D irffct <- function( theta, b , K , ii){
> ##D     eta <- exp( theta / b[ii] )
> ##D     probs <- eta / ( K[ii] + eta )
> ##D     probs <- cbind( 1 - probs , probs )
> ##D     return(probs)
> ##D         }
> ##D # initial person parameters and item parameters
> ##D theta0 <- exp( mod1$person$EAP )
> ##D arg.list <- list( "b" = mod1$item2$b , "K"=mod1$item2$K )
> ##D # estimate MLE
> ##D res <- IRT.mle( data = dat , irffct=irffct , arg.list=arg.list , theta=theta0 ,
> ##D             maxval=20 , maxiter=50)
> ## End(Not run)	
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("IRT.mle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("R2conquest")
> ### * R2conquest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: R2conquest
> ### Title: Running ConQuest From Within R
> ### Aliases: R2conquest rasch.conquest summary.R2conquest
> ###   summary.rasch.conquest read.show read.show.term read.show.regression
> ###   read.pv read.multidimpv read.pimap
> ### Keywords: ConQuest summary
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # define ConQuest path
> ##D path.conquest <- "C:/Conquest/"
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 1: Dichotomous data (data.pisaMath)
> ##D #############################################################################
> ##D library(sirt)
> ##D data(data.pisaMath)
> ##D dat <- data.pisaMath$data
> ##D 
> ##D # select items
> ##D items <- colnames(dat)[ which( substring( colnames(dat) , 1 , 1)=="M" ) ]
> ##D 
> ##D #***
> ##D # Model 11: Rasch model
> ##D mod11 <- R2conquest(dat=dat[,items] , path.conquest=path.conquest , 
> ##D              pid=dat$idstud , name="mod11")
> ##D summary(mod11)
> ##D # read show file
> ##D shw11 <- read.show( "mod11.shw" )
> ##D # read person-item map
> ##D pi11 <- read.pimap(showfile="mod11.shw")
> ##D 
> ##D #***
> ##D # Model 12: Rasch model with fixed item difficulties (from Model 1)
> ##D mod12 <- R2conquest(dat=dat[,items] , path.conquest=path.conquest , 
> ##D              pid=dat$idstud , constraints = mod11$item[ , c("item","itemdiff")] ,
> ##D              name="mod12")
> ##D summary(mod12)
> ##D 
> ##D #***
> ##D # Model 13: Latent regression model with predictors female, hisei and migra
> ##D mod13a <- R2conquest(dat=dat[,items] , path.conquest=path.conquest , 
> ##D              pid=dat$idstud , X = dat[ , c("female" , "hisei" , "migra") ] ,
> ##D              name="mod13a")
> ##D summary(mod13a)
> ##D 
> ##D # latent regression with a subset of predictors
> ##D mod13b <- R2conquest(dat=dat[,items] , path.conquest=path.conquest , 
> ##D              pid=dat$idstud , X = dat[ , c("female" , "hisei" , "migra") ] ,
> ##D              regression= "hisei migra" , name="mod13b")
> ##D 
> ##D #***
> ##D # Model 14: Differential item functioning (female)
> ##D mod14 <- R2conquest(dat=dat[,items] , path.conquest=path.conquest , 
> ##D              pid=dat$idstud , X = dat[ , c("female") , drop=FALSE] ,
> ##D              model="item+female+item*female" ,  regression="" ,  name="mod14")
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Polytomous data (data.Students)
> ##D #############################################################################
> ##D library(CDM)
> ##D data(data.Students)
> ##D dat <- data.Students
> ##D 
> ##D # select items
> ##D items <- grep.vec( "act" , colnames(dat) )$x
> ##D 
> ##D #***
> ##D # Model 21: Partial credit model
> ##D mod21 <- R2conquest(dat=dat[,items] , path.conquest=path.conquest , 
> ##D               model="item+item*step" ,  name="mod21")
> ##D 
> ##D #***
> ##D # Model 22: Rating scale model
> ##D mod22 <- R2conquest(dat=dat[,items] , path.conquest=path.conquest , 
> ##D               model="item+step" , name="mod22")
> ##D 
> ##D #***
> ##D # Model 23: Multidimensional model
> ##D items <- grep.vec( c("act" , "sc" ) , colnames(dat) ,  "OR" )$x
> ##D qmatrix <- matrix( 0 , nrow=length(items) , 2 )
> ##D qmatrix[1:5,1] <- 1
> ##D qmatrix[6:9,2] <- 1
> ##D mod23 <- R2conquest(dat=dat[,items] , path.conquest=path.conquest , 
> ##D             model="item+item*step" , qmatrix=qmatrix , name="mod23")
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: Multi facet models (data.ratings1)
> ##D #############################################################################
> ##D library(sirt)
> ##D data(data.ratings1)
> ##D dat <- data.ratings1
> ##D 
> ##D items <- paste0("k",1:5)
> ##D 
> ##D # use numeric rater ID's
> ##D raters <- as.numeric( substring( paste( dat$rater ) , 3 ) )
> ##D 
> ##D #***
> ##D # Model 31: Rater model 'item+item*step+rater'
> ##D mod31 <- R2conquest(dat=dat[,items] , path.conquest=path.conquest , 
> ##D               itemcodes= 0:3 , model="item+item*step+rater" , 
> ##D               pid=dat$idstud , X=data.frame("rater"=raters)  , 
> ##D               regression="" , name="mod31")
> ##D 
> ##D #***
> ##D # Model 32: Rater model 'item+item*step+rater+item*rater'
> ##D mod32 <- R2conquest(dat=dat[,items] , path.conquest=path.conquest , 
> ##D               model="item+item*step+rater+item*rater" , 
> ##D               pid=dat$idstud , X=data.frame("rater"=raters)  , 
> ##D               regression="" , name="mod32")      
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("R2conquest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("R2noharm")
> ### * R2noharm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: R2noharm
> ### Title: Estimation of a NOHARM Analysis from within R
> ### Aliases: R2noharm summary.R2noharm
> ### Keywords: NOHARM summary
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: Data data.noharm18 with 18 items
> ##D #############################################################################
> ##D 
> ##D # load data
> ##D data( data.noharm18 )
> ##D dat <- data.noharm18
> ##D I <- ncol(dat) # number of items
> ##D 
> ##D # locate noharm.path
> ##D noharm.path <- "c:/NOHARM"
> ##D 
> ##D #****************************************
> ##D # Model 1: 1-dimensional Rasch model (1-PL model)
> ##D 
> ##D # estimate one factor variance
> ##D P.pattern <- matrix( 1 , ncol=1 , nrow=1 )
> ##D P.init <- P.pattern
> ##D # fix all entries in the loading matrix to 1
> ##D F.pattern <- matrix( 0 , nrow=I , ncol=1 )
> ##D F.init <- 1 + 0*F.pattern       # 
> ##D # estimate model
> ##D mod <- R2noharm( dat = dat , model.type="CFA" ,  
> ##D            F.pattern = F.pattern , F.init = F.init , P.pattern = P.pattern ,
> ##D            P.init = P.init , writename = "ex1__1dim_1pl" , 
> ##D 	   noharm.path = noharm.path , dec ="," )
> ##D # summary
> ##D summary(mod , logfile="ex1__1dim_1pl__SUMMARY")
> ##D # jackknife
> ##D jmod <- R2noharm.jackknife( mod , jackunits = 20 )
> ##D summary(jmod, logfile="ex1__1dim_1pl__JACKKNIFE")
> ##D # compute factor scores (EAPs)
> ##D emod <- R2noharm.EAP(mod)
> ##D 
> ##D #*****-----
> ##D # Model 1b: Include student weights in estimation
> ##D N <- nrow(dat)
> ##D weights <- runif( N , 1 , 5 )
> ##D mod1b <- R2noharm( dat = dat , model.type="CFA" ,  weights=weights ,  
> ##D             F.pattern = F.pattern , F.init = F.init , P.pattern = P.pattern ,
> ##D             P.init = P.init , writename = "ex1__1dim_1pl_w" , 
> ##D             noharm.path = noharm.path , dec ="," )
> ##D summary(mod1b)
> ##D 
> ##D #****************************************
> ##D # Model 2: 1-dimensional 2PL Model
> ##D 
> ##D # set trait variance equal to 1
> ##D P.pattern <- matrix( 0 , ncol=1 , nrow=1 )
> ##D P.init <- 1+0*P.pattern
> ##D # loading matrix
> ##D F.pattern <- matrix( 1 , nrow=I , ncol=1 )
> ##D F.init <- 1 + 0*F.pattern       
> ##D 
> ##D mod <- R2noharm( dat = dat , model.type="CFA" ,  
> ##D             F.pattern = F.pattern , F.init = F.init , P.pattern = P.pattern ,
> ##D             P.init = P.init , writename = "ex2__1dim_2pl" , 
> ##D             noharm.path = noharm.path , dec = "," )
> ##D 
> ##D summary(mod)
> ##D jmod <- R2noharm.jackknife( mod , jackunits = 20 )
> ##D summary(jmod)
> ##D 
> ##D #****************************************
> ##D # Model 3: 1-dimensional 3PL Model with fixed guessing parameters
> ##D 
> ##D # set trait variance equal to 1
> ##D P.pattern <- matrix( 0 , ncol=1 , nrow=1 )
> ##D P.init <- 1+0*P.pattern
> ##D # loading matrix
> ##D F.pattern <- matrix( 1 , nrow=I , ncol=1 )
> ##D F.init <- 1 + 0*F.pattern       # 
> ##D # fix guessing parameters equal to .2 (for all items)
> ##D guesses <- rep( .1 , I )
> ##D 
> ##D mod <- R2noharm( dat = dat , model.type="CFA" ,  
> ##D           F.pattern = F.pattern , F.init = F.init , P.pattern = P.pattern ,
> ##D           P.init = P.init , guesses = guesses , 
> ##D           writename = "ex3__1dim_3pl" , noharm.path = noharm.path , dec=","  )
> ##D summary(mod)
> ##D jmod <- R2noharm.jackknife( mod , jackunits = 20 )
> ##D summary(jmod)
> ##D 
> ##D #****************************************
> ##D # Model 4: 3-dimensional Rasch model
> ##D 
> ##D # estimate one factor variance
> ##D P.pattern <- matrix( 1 , ncol=3 , nrow=3 )
> ##D P.init <- .8*P.pattern
> ##D diag(P.init) <- 1
> ##D # fix all entries in the loading matrix to 1
> ##D F.init <- F.pattern <- matrix( 0 , nrow=I , ncol=3 )
> ##D F.init[1:6,1] <- 1
> ##D F.init[7:12,2] <- 1
> ##D F.init[13:18,3] <- 1
> ##D 
> ##D mod <- R2noharm( dat = dat , model.type="CFA" ,  
> ##D           F.pattern = F.pattern , F.init = F.init , P.pattern = P.pattern ,
> ##D           P.init = P.init , writename = "ex4__3dim_1pl" , 
> ##D           noharm.path = noharm.path  , dec ="," )
> ##D # write output from R console in a file
> ##D summary(mod , logfile="ex4__3dim_1pl__SUMMARY.Rout")
> ##D 
> ##D jmod <- R2noharm.jackknife( mod , jackunits = 20 )
> ##D summary(jmod)
> ##D 
> ##D # extract factor scores
> ##D emod <- R2noharm.EAP(mod)
> ##D 
> ##D #****************************************
> ##D # Model 5: 3-dimensional 2PL model
> ##D 
> ##D # estimate one factor variance
> ##D P.pattern <- matrix( 1 , ncol=3 , nrow=3 )
> ##D P.init <- .8*P.pattern
> ##D diag(P.init) <- 0
> ##D # fix all entries in the loading matrix to 1
> ##D F.pattern <- matrix( 0 , nrow=I , ncol=3 )
> ##D F.pattern[1:6,1] <- 1
> ##D F.pattern[7:12,2] <- 1
> ##D F.pattern[13:18,3] <- 1
> ##D F.init <- F.pattern
> ##D 
> ##D mod <- R2noharm( dat = dat , model.type="CFA" ,  
> ##D           F.pattern = F.pattern , F.init = F.init , P.pattern = P.pattern ,
> ##D           P.init = P.init , writename = "ex5__3dim_2pl" , 
> ##D           noharm.path = noharm.path  , dec = "," )
> ##D summary(mod)
> ##D # use 50 jackknife units with 4 persons within a unit
> ##D jmod <- R2noharm.jackknife( mod , jackunits = seq( 1:50 , each = 4 ) )
> ##D summary(jmod)
> ##D 
> ##D #****************************************
> ##D # Model 6: Exploratory Factor Analysis with 3 factors
> ##D 
> ##D mod <- R2noharm( dat = dat , model.type="EFA" ,  dimensions = 3 , 
> ##D            writename = "ex6__3dim_efa", noharm.path = noharm.path ,dec = ",")
> ##D summary(mod)
> ##D 
> ##D jmod <- R2noharm.jackknife( mod , jackunits = 20 )
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: NOHARM manual Example A
> ##D #############################################################################
> ##D 
> ##D # See NOHARM manual: http://noharm.niagararesearch.ca/nh4man/nhman.html
> ##D # The following text and data is copied from this manual.
> ##D #
> ##D # In the first example, we demonstrate how to prepare the input for a 2-dimensional 
> ##D # model using exploratory analysis. Data from a 9 item test were collected from 
> ##D # 200 students and the 9x9 product-moment matrix of the responses was computed.
> ##D # 
> ##D # Our hypothesis is for a 2-dimensional model with no guessing, 
> ##D # i.e., all guesses are equal to zero. However, because we are unsure of any 
> ##D # particular pattern for matrix F, we wish to prescribe an exploratory analysis, i.e., 
> ##D # set EX = 1. Also, we will content ourselves with letting the program supply all 
> ##D # initial values.
> ##D # 
> ##D # We would like both the sample product-moment matrix and the residual matrix to 
> ##D # be included in the output. 
> ##D 
> ##D # scan product-moment matrix copied from the NOHARM manual
> ##D pm <- scan()
> ##D      0.8967               
> ##D      0.2278 0.2356        
> ##D      0.6857 0.2061 0.7459 
> ##D      0.8146 0.2310 0.6873 0.8905
> ##D      0.4505 0.1147 0.3729 0.4443 0.5000 
> ##D      0.7860 0.2080 0.6542 0.7791 0.4624 0.8723 
> ##D      0.2614 0.0612 0.2140 0.2554 0.1914 0.2800 0.2907
> ##D      0.7549 0.1878 0.6236 0.7465 0.4505 0.7590 0.2756 0.8442
> ##D      0.6191 0.1588 0.5131 0.6116 0.3845 0.6302 0.2454 0.6129 0.6879
> ##D 
> ##D ex2 <- R2noharm( pm= pm , n =200 , model.type="EFA" , dimensions=2 ,
> ##D          noharm.path=noharm.path , writename="ex2_noharmExA" , dec=",")
> ##D summary(ex2)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: NOHARM manual Example B
> ##D #############################################################################
> ##D 
> ##D # See NOHARM manual: http://noharm.niagararesearch.ca/nh4man/nhman.html
> ##D # The following text and data is copied from this manual.
> ##D 
> ##D # Suppose we have the product-moment matrix of data from 125 students on 9 items. 
> ##D # Our hypothesis is for 2 dimensions with simple structure. In this case, 
> ##D # items 1 to 5 have coefficients of theta which are to be estimated for one 
> ##D # latent trait but are to be fixed at zero for the other one. 
> ##D # For the latent trait for which items 1 to 5 have zero coefficients, 
> ##D # items 6 to 9 have coefficients which are to be estimated. For the other 
> ##D # latent trait, items 6 to 9 will have zero coefficients. 
> ##D # We also wish to estimate the correlation between the latent traits, 
> ##D # so we prescribe P as a 2x2 correlation matrix.
> ##D # 
> ##D # Our hypothesis prescribes that there was no guessing involved, i.e., 
> ##D # all guesses are equal to zero. For demonstration purposes, 
> ##D # let us not have the program print out the sample product-moment matrix. 
> ##D # Also let us not supply any starting values but, rather, use the defaults 
> ##D # supplied by the program.
> ##D 
> ##D pm <- scan()
> ##D     0.930 
> ##D     0.762 0.797
> ##D     0.541 0.496 0.560
> ##D     0.352 0.321 0.261 0.366
> ##D     0.205 0.181 0.149 0.110 0.214 
> ##D     0.858 0.747 0.521 0.336 0.203 0.918 
> ##D     0.773 0.667 0.465 0.308 0.184 0.775 0.820 
> ##D     0.547 0.474 0.347 0.233 0.132 0.563 0.524 0.579
> ##D     0.329 0.290 0.190 0.140 0.087 0.333 0.308 0.252 0.348
> ##D 
> ##D I <- 9	# number of items
> ##D # define loading matrix
> ##D F.pattern <- matrix(0,I,2)
> ##D F.pattern[1:5,1] <- 1
> ##D F.pattern[6:9,2] <- 1
> ##D F.init <- F.pattern
> ##D # define covariance matrix
> ##D P.pattern <- matrix(1,2,2)
> ##D diag(P.pattern) <- 0
> ##D P.init <- 1+P.pattern
> ##D 
> ##D ex3 <- R2noharm( pm=pm , n=125, , model.type="CFA" ,  
> ##D            F.pattern = F.pattern , F.init = F.init , P.pattern = P.pattern ,
> ##D            P.init = P.init , writename = "ex3_noharmExB" , 
> ##D            noharm.path = noharm.path , dec ="," )
> ##D summary(ex3)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 4: NOHARM manual Example C
> ##D #############################################################################
> ##D 
> ##D data(data.noharmExC)
> ##D # See NOHARM manual: http://noharm.niagararesearch.ca/nh4man/nhman.html
> ##D # The following text and data is copied from this manual.
> ##D 
> ##D # In this example, suppose that from 300 respondents we have item 
> ##D # responses scored dichotomously, 1 or 0, for 8 items.
> ##D # 
> ##D # Our hypothesis is for a unidimensional model where all eight items 
> ##D # have coefficients of theta which are to be estimated. 
> ##D # Suppose that since the items were multiple choice with 5 options each, 
> ##D # we set the fixed guesses all to 0.2 (not necessarily good reasoning!)
> ##D # 
> ##D # Let's supply initial values for the coefficients of theta (F matrix) 
> ##D # as .75 for items 1 to 4 and .6 for items 5 to 8.
> ##D 
> ##D I <- 8
> ##D guesses <- rep(.2,I)
> ##D F.pattern <- matrix(1,I,1)
> ##D F.init <- F.pattern
> ##D F.init[1:4,1] <- .75
> ##D F.init[5:8,1] <- .6
> ##D P.pattern <- matrix(0,1,1)
> ##D P.init <- 1 + 0 * P.pattern
> ##D 
> ##D ex4 <- R2noharm( dat=data.noharmExC , , model.type="CFA" ,  
> ##D            guesses=guesses , F.pattern = F.pattern , F.init = F.init , 
> ##D            P.pattern = P.pattern, P.init = P.init , writename = "ex3_noharmExC" , 
> ##D            noharm.path = noharm.path , dec ="," )
> ##D summary(ex4)
> ##D 
> ##D # modify F pattern matrix
> ##D # f11 = f51 (since both have equal pattern values of 2),
> ##D # f21 = f61 (since both have equal pattern values of 3),
> ##D # f31 = f71 (since both have equal pattern values of 4),
> ##D # f41 = f81 (since both have equal pattern values of 5).
> ##D F.pattern[ c(1,5) ] <- 2
> ##D F.pattern[ c(2,6) ] <- 3
> ##D F.pattern[ c(3,7) ] <- 4
> ##D F.pattern[ c(4,8) ] <- 5
> ##D F.init <- .5+0*F.init 
> ##D 
> ##D ex4a <- R2noharm( dat=data.noharmExC , , model.type="CFA" ,  
> ##D            guesses=guesses , F.pattern = F.pattern , F.init = F.init , 
> ##D            P.pattern = P.pattern, P.init = P.init , writename = "ex3_noharmExC1" , 
> ##D            noharm.path = noharm.path , dec ="," )
> ##D summary(ex4a)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("R2noharm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("automatic.recode")
> ### * automatic.recode
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: automatic.recode
> ### Title: Automatic Method of Finding Keys in a Dataset with Raw Item
> ###   Responses
> ### Aliases: automatic.recode
> ### Keywords: R utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: data.raw1
> ##D #############################################################################
> ##D data(data.raw1)
> ##D 
> ##D # recode data.raw1 and exclude keys 8 and 9 (missing codes) and
> ##D # start with initially setting all categories larger than 50 ##D 
> ##D res1 <- automatic.recode( data.raw1 , exclude=c(8,9) , pstart.min=.50 )
> ##D # inspect calculated keys
> ##D res1$item.stat
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: data.timssAusTwn from TAM package
> ##D #############################################################################
> ##D 
> ##D library(TAM)
> ##D data(data.timssAusTwn,package="TAM")
> ##D raw.resp <- data.timssAusTwn[,1:11]
> ##D res2 <- automatic.recode( data=raw.resp )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("automatic.recode", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("brm.sim")
> ### * brm.sim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: brm-Methods
> ### Title: Functions for the Beta Item Response Model
> ### Aliases: brm.sim brm.irf
> ### Keywords: Beta item response model
> 
> ### ** Examples
> 
> #############################################################################
> # SIMULATED EXAMPLE 1: Simulated data beta response model
> #############################################################################
> 	
> #*** (1) Simulation of the beta response model
> # Table 3 (p. 65) of Noel and Dauvier (2007)
> delta <- c( -.942 , -.649 , -.603 , -.398 , -.379 , .523 , .649 , .781 , .907 )
> tau <- c( .382 , .166 , 1.799 , .615 , 2.092, 1.988 , 1.899 , 1.439 , 1.057 )           
> K <- 5		# number of categories for discretization
> N <- 500        # number of persons
> I <- length(delta) # number of items
> 
> set.seed(865)
> theta <- rnorm( N )
> dat <- brm.sim( theta=theta , delta=delta , tau=tau , K=K)
> psych::describe(dat)
   vars   n mean   sd median trimmed  mad min max range  skew kurtosis   se
I1    1 500 2.85 1.33      3    3.05 1.48   0   4     4 -0.86    -0.54 0.06
I2    2 500 2.55 1.46      3    2.68 1.48   0   4     4 -0.54    -1.10 0.07
I3    3 500 2.58 1.31      3    2.71 1.48   0   4     4 -0.50    -0.95 0.06
I4    4 500 2.41 1.43      3    2.52 1.48   0   4     4 -0.35    -1.26 0.06
I5    5 500 2.45 1.31      3    2.56 1.48   0   4     4 -0.38    -1.00 0.06
I6    6 500 1.49 1.31      1    1.38 1.48   0   4     4  0.44    -0.99 0.06
I7    7 500 1.31 1.25      1    1.19 1.48   0   4     4  0.56    -0.77 0.06
I8    8 500 1.26 1.29      1    1.11 1.48   0   4     4  0.64    -0.79 0.06
I9    9 500 1.25 1.35      1    1.08 1.48   0   4     4  0.72    -0.79 0.06
> 
> #*** (2) some preliminaries for estimation of the model in mirt
> #*** define a mirt function
> library(mirt)
Loading required package: stats4
Loading required package: lattice
> Theta <- matrix( seq( -4 , 4, len=21) , ncol=1 )
> 
> # compute item response function
> ii <- 1     # item ii=1
> b1 <- brm.irf( Theta=Theta , delta=delta[ii] , tau=tau[ii] ,  ncat=K )
> # plot item response functions
> matplot( Theta[,1] , b1 , type="l" )
> 
> #*** defining the beta item response function for estimation in mirt
> par <- c( 0 , 1 ,  1)
> names(par) <- c( "delta" , "tau" ,"thdim")
> est <- c( TRUE , TRUE , FALSE )
> names(est) <- names(par)
> brm.icc <- function( par , Theta , ncat ){
+      delta <- par[1]
+      tau <- par[2] 
+      thdim <- par[3]
+      probs <- brm.irf( Theta=Theta , delta=delta , tau=tau ,  ncat=ncat ,
+             thdim=thdim)     
+      return(probs)
+             }
> name <- "brm"
> # create item response function
> brm.itemfct <- mirt::createItem(name, par=par, est=est, P=brm.icc)
> #*** define model in mirt
> mirtmodel <- mirt::mirt.model("
+            F1 = 1-9
+             " )
> itemtype <- rep("brm" , I )
> customItems <- list("brm"= brm.itemfct)
> 
> # define parameters to be estimated
> mod1.pars <- mirt::mirt(dat, mirtmodel , itemtype=itemtype , 
+                    customItems=customItems, pars = "values")                
> 
> ## Not run: 
> ##D                    
> ##D #*** (3) estimate beta item response model in mirt
> ##D mod1 <- mirt::mirt(dat,mirtmodel , itemtype=itemtype , customItems=customItems, 
> ##D                pars = mod1.pars , verbose=TRUE  )
> ##D # model summaries
> ##D print(mod1)                
> ##D summary(mod1)
> ##D coef(mod1)
> ##D # estimated coefficients and comparison with simulated data
> ##D cbind( mirt.wrapper.coef( mod1 )$coef , delta , tau )
> ##D mirt.wrapper.itemplot(mod1 ,ask=TRUE)	
> ##D 
> ##D #---------------------------
> ##D # estimate beta item response model in TAM
> ##D library(TAM)
> ##D 
> ##D # define the skill space: standard normal distribution
> ##D TP <- 21                   # number of theta points
> ##D theta.k <- diag(TP)
> ##D theta.vec <-  seq( -6 ,6 , len=TP)
> ##D d1 <- dnorm(theta.vec)
> ##D d1 <- d1 / sum(d1)
> ##D delta.designmatrix <- matrix( log(d1) , ncol=1 )
> ##D delta.fixed <- cbind( 1 , 1 , 1 )
> ##D 
> ##D # define design matrix E
> ##D E <- array(0 , dim=c(I,K,TP,2*I + 1) )
> ##D dimnames(E)[[1]] <- items <- colnames(dat)
> ##D dimnames(E)[[4]] <- c( paste0( rep( items , each=2 ) , 
> ##D         rep( c("_a","_b" ) , I) ) , "one" )
> ##D for (ii in 1:I){
> ##D     for (kk in 1:K){
> ##D       for (tt in 1:TP){
> ##D         qk <- (2*(kk-1)+1)/(2*K)
> ##D         gammap <- exp( theta.vec[tt] / 2 )
> ##D         E[ii , kk , tt , 2*(ii-1) + 1 ] <- gammap * log( qk )
> ##D         E[ii , kk , tt , 2*(ii-1) + 2 ] <- 1 / gammap * log( 1 - qk )
> ##D         E[ii , kk , tt , 2*I+1 ] <- - log(qk) - log( 1 - qk )
> ##D                     }
> ##D             }
> ##D         }
> ##D gammaslope.fixed <- cbind( 2*I+1 , 1 )
> ##D gammaslope <- exp( rep(0,2*I+1) )
> ##D 
> ##D # estimate model in TAM
> ##D mod2 <- TAM::tam.mml.3pl(resp= dat , E=E ,control= list(maxiter=100) , 
> ##D               skillspace="discrete" , delta.designmatrix=delta.designmatrix ,
> ##D               delta.fixed=delta.fixed , theta.k=theta.k , gammaslope = gammaslope, 
> ##D               gammaslope.fixed = gammaslope.fixed , notA=TRUE )
> ##D summary(mod2)         
> ##D 
> ##D # extract original tau and delta parameters
> ##D m1 <- matrix( mod2$gammaslope[1:(2*I) ] , ncol=2 , byrow=TRUE ) 
> ##D m1 <- as.data.frame(m1)
> ##D colnames(m1) <- c("a" ,"b")
> ##D m1$delta.TAM <- log( m1$b / m1$a) 
> ##D m1$tau.TAM <- log( m1$a * m1$b ) 
> ##D 
> ##D # compare estimated parameter
> ##D m2 <- cbind( mirt.wrapper.coef( mod1 )$coef , delta , tau )[,-1]
> ##D colnames(m2) <- c(  "delta.mirt", "tau.mirt", "thdim" ,"delta.true" ,"tau.true"   )
> ##D m2 <- cbind(m1,m2)
> ##D round( m2 , 3 )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("brm.sim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:mirt’, ‘package:lattice’, ‘package:stats4’

> nameEx("btm")
> ### * btm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: btm
> ### Title: Extended Bradley-Terry Model
> ### Aliases: btm summary.btm
> ### Keywords: Bradley-Terry model summary
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Bradley-Terry model | data.pw01
> #############################################################################
> 
> data(data.pw01)
> 
> dat <- data.pw01
> dat <- dat[ , c("home_team" , "away_team" , "result") ]
> 
> # recode results according to needed input
> dat$result[ dat$result == 0 ] <- 1/2   # code for ties
> dat$result[ dat$result == 2 ] <- 0     # code for victory of away team
> 
> #********************
> # Model 1: Estimation with ties and home advantage
> mod1 <- btm( dat)
**** Iteration 1 | Maximum parameter change = 0.681655
**** Iteration 2 | Maximum parameter change = 0.4248783
**** Iteration 3 | Maximum parameter change = 0.0773308
**** Iteration 4 | Maximum parameter change = 0.0537994
**** Iteration 5 | Maximum parameter change = 0.0171961
**** Iteration 6 | Maximum parameter change = 0.0090383
**** Iteration 7 | Maximum parameter change = 0.0036217
**** Iteration 8 | Maximum parameter change = 0.0016795
**** Iteration 9 | Maximum parameter change = 0.0007221
**** Iteration 10 | Maximum parameter change = 0.0003231
**** Iteration 11 | Maximum parameter change = 0.0001416
**** Iteration 12 | Maximum parameter change = 6.28e-05
> summary(mod1)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:23:58 
Time difference of 0.02429199 secs
Computation time: 0.02429199 

Call:
btm(data = dat)

Bradley-Terry Model with Ties and Home Advantage Parameters
------------------------------------------------------------
Number of iterations = 12 
Number of individuals =  18 
Number of pairwise comparisons =  306 
------------------------------------------------------------
Ties and Home advantage parameters
  parlabel   par     est     se
1     Ties delta -0.2769 0.1379
2     Home   eta  0.8326 0.1549
------------------------------------------------------------
Summary of individual effects parameters
  M  median     SD     min    max
1 0 -0.0937 1.0852 -2.6069 2.3127
------------------------------------------------------------
MLE reliability (separation reliability)
MLE Rel = 0.8113
Separation index = 2.3019
------------------------------------------------------------
Individual effects parameters
                individual id Ntot N1 ND N0   score propscore   theta se.theta
1           1.FC Magdeburg  1   34 26  4  4 27.8059    0.8178  2.3127   0.5639
2              VfB Leipzig 15   34 23  6  5 25.8412    0.7600  1.7947   0.5143
3               VFC Plauen 13   34 18  9  7 22.4029    0.6589  1.0351   0.4676
4              FSV Zwickau  8   34 17  8  9 20.9294    0.6156  0.7413   0.4568
5           Dynamo Dresden  4   34 16  8 10 19.9471    0.5867  0.5516   0.4517
6          FSV Hoyerswerda  7   34 12 12 10 17.9824    0.5289  0.1809   0.4461
7           VfL Halle 1896 17   34 15  5 14 17.4912    0.5144  0.0893   0.4456
8              Stahl Riesa 12   34 12 11 11 17.4912    0.5144  0.0893   0.4456
9          FV Dresden-Nord  9   34 10 13 11 16.5088    0.4856 -0.0937   0.4455
10      Energie Cottbus II  6   34 12  9 13 16.5088    0.4856 -0.0937   0.4455
11           Hallescher FC 10   34 12  8 14 16.0176    0.4711 -0.1854   0.4460
12          SV 1919 Grimma 11   34 11  8 15 15.0353    0.4422 -0.3695   0.4480
13              VfB Zittau 16   34 12  5 17 14.5441    0.4278 -0.4622   0.4495
14 Eintracht Sondershausen  5   34 10  7 17 13.5618    0.3989 -0.6498   0.4536
15            VfB Chemnitz 14   34 11  5 18 13.5618    0.3989 -0.6498   0.4536
16           Anhalt Dessau  2   34 10  6 18 13.0706    0.3844 -0.7450   0.4562
17   Bischofswerdaer FV 08  3   34  7 10 17 12.0882    0.3555 -0.9388   0.4628
18       Wacker Nordhausen 18   34  3  4 27  5.2118    0.1533 -2.6069   0.5989
   outfit  infit
1  1.0377 1.2482
2  1.1634 1.1847
3  1.1335 1.1258
4  0.9228 0.9394
5  0.9767 0.9905
6  1.2987 1.2768
7  0.9122 0.9493
8  1.2570 1.1260
9  1.1873 0.9429
10 0.8650 0.9274
11 1.0970 1.0997
12 0.7787 0.8411
13 0.8813 0.9085
14 1.1917 1.3216
15 1.0225 1.1567
16 1.4545 1.2814
17 0.8903 0.9779
18 1.4477 1.2218
> 
> ## Not run: 
> ##D #********************
> ##D # Model 2: Estimation with ties, no epsilon adjustment
> ##D mod2 <- btm( dat , eps=0 , fix.eta=0)
> ##D summary(mod2)
> ##D 
> ##D #********************
> ##D # Model 3: Some fixed abilities
> ##D fix.theta <- c("Anhalt Dessau" = -1 )
> ##D mod3 <- btm( dat , eps=0, fix.theta=fix.theta)
> ##D summary(mod3)
> ##D 
> ##D #********************
> ##D # Model 4: Ignoring ties, no home advantage effect
> ##D mod4 <- btm( dat , ignore.ties=TRUE , fix.eta = 0)
> ##D summary(mod4)
> ##D 
> ##D #********************
> ##D # Model 5: Ignoring ties, no home advantage effect (JML approach -> eps=0)
> ##D mod5 <- btm( dat , ignore.ties=TRUE , fix.eta = 0 , eps=0)
> ##D summary(mod5)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Venice chess data 
> ##D #############################################################################
> ##D 
> ##D # See http://www.rasch.org/rmt/rmt113o.htm
> ##D # Linacre, J. M. (1997). Paired Comparisons with Standard Rasch Software.
> ##D # Rasch Measurement Transactions, 11:3, 584-585.
> ##D 
> ##D # dataset with chess games -> "D" denotes a draw (tie)
> ##D chessdata <- scan( what="character")
> ##D     1D.0..1...1....1.....1......D.......D........1.........1.......... Browne
> ##D     0.1.D..0...1....1.....1......D.......1........D.........1......... Mariotti
> ##D     .D0..0..1...D....D.....1......1.......1........1.........D........ Tatai
> ##D     ...1D1...D...D....1.....D......D.......D........1.........0....... Hort
> ##D     ......010D....D....D.....1......D.......1........1.........D...... Kavalek
> ##D     ..........00DDD.....D.....D......D.......1........D.........1..... Damjanovic
> ##D     ...............00D0DD......D......1.......1........1.........0.... Gligoric
> ##D     .....................000D0DD.......D.......1........D.........1... Radulov
> ##D     ............................DD0DDD0D........0........0.........1.. Bobotsov
> ##D     ....................................D00D00001.........1.........1. Cosulich
> ##D     .............................................0D000D0D10..........1 Westerinen
> ##D     .......................................................00D1D010000 Zichichi 
> ##D 
> ##D L <- length(chessdata) / 2
> ##D games <- matrix( chessdata , nrow=L , ncol=2 , byrow=TRUE )
> ##D G <- nchar(games[1,1])
> ##D # create matrix with results
> ##D results <- matrix( NA , nrow=G , ncol=3 )
> ##D for (gg in 1:G){
> ##D     games.gg <- substring( games[,1] , gg , gg )
> ##D     ind.gg <- which( games.gg != "." )
> ##D     results[gg , 1:2 ] <- games[ ind.gg , 2]
> ##D     results[gg, 3 ] <- games.gg[ ind.gg[1] ]
> ##D             }
> ##D results <- as.data.frame(results)            
> ##D results[,3] <- paste(results[,3] )
> ##D results[ results[,3] == "D" , 3] <- 1/2
> ##D results[,3] <- as.numeric( results[,3] )
> ##D 
> ##D # fit model ignoring draws
> ##D mod1 <- btm( results , ignore.ties=TRUE , fix.eta = 0 , eps=0 )
> ##D summary(mod1)
> ##D 
> ##D # fit model with draws
> ##D mod2 <- btm( results , fix.eta = 0 , eps=0 )
> ##D summary(mod2)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("btm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("categorize")
> ### * categorize
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: categorize
> ### Title: Categorize and Decategorize Variables in a Data Frame
> ### Aliases: categorize decategorize
> ### Keywords: Utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D library(mice)	
> ##D library(miceadds)
> ##D 	
> ##D #############################################################################
> ##D # EXAMPLE 1: Categorize questionnaire data
> ##D #############################################################################	
> ##D 	
> ##D data(data.smallscale , package="miceadds")
> ##D dat <- data.smallscale
> ##D 
> ##D # (0) select dataset
> ##D dat <- dat[ , 9:20 ]
> ##D summary(dat)
> ##D categorical <- colnames(dat)
> ##D categorical <- colnames(dat)[2:6]
> ##D 
> ##D # (1) categorize data
> ##D res <- categorize( dat , categorical=categorical )
> ##D 
> ##D # (2) multiple imputation using the mice package
> ##D dat2 <- res$data
> ##D VV <- ncol(dat2)
> ##D impMethod <- rep( "sample" , VV )    # define random sampling imputation method
> ##D names(impMethod) <- colnames(dat2)
> ##D imp <- mice::mice( as.matrix(dat2) , impMethod = impMethod , maxit=1 , m=1 )
> ##D dat3 <- mice::complete(imp,action=1)
> ##D 
> ##D # (3) decategorize dataset
> ##D dat3a <- decategorize( dat3 , categ_design = res$categ_design )
> ##D 	
> ##D #############################################################################
> ##D # EXAMPLE 2: Categorize ordinal and continuous data
> ##D #############################################################################
> ##D 
> ##D data(data.ma01,package="miceadds")
> ##D dat <- data.ma01
> ##D summary(dat[,-c(1:2)] )
> ##D 
> ##D # define variables to be categorized
> ##D categorical <- c("books" , "paredu" )
> ##D # define quantiles
> ##D quant <-  c(6,5,11)
> ##D names(quant) <- c("math" , "read" , "hisei")
> ##D 
> ##D # categorize data
> ##D res <- categorize( dat , categorical = categorical , quant=quant)
> ##D str(res)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("categorize", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("class.accuracy.rasch")
> ### * class.accuracy.rasch
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: class.accuracy.rasch
> ### Title: Classification Accuracy in the Rasch Model
> ### Aliases: class.accuracy.rasch
> ### Keywords: Classification accuracy
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Reading dataset
> #############################################################################
> data( data.read , package="sirt")
> dat <- data.read
> 
> # estimate the Rasch model
> mod <- rasch.mml2( dat )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:23:58 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:23:58 
   Deviance = 3942.478 | Deviance change = 13.465952
    Maximum b parameter change =  0.054894  
...........................................................
Iteration 3     2015-06-13 13:23:58 
   Deviance = 3940.2892 | Deviance change = 2.188817
    Maximum b parameter change =  0.042995  
...........................................................
Iteration 4     2015-06-13 13:23:58 
   Deviance = 3939.4559 | Deviance change = 0.833271
    Maximum b parameter change =  0.022889  
...........................................................
Iteration 5     2015-06-13 13:23:58 
   Deviance = 3939.0706 | Deviance change = 0.38535
    Maximum b parameter change =  0.015712  
...........................................................
Iteration 6     2015-06-13 13:23:58 
   Deviance = 3938.8854 | Deviance change = 0.185235
    Maximum b parameter change =  0.010687  
...........................................................
Iteration 7     2015-06-13 13:23:58 
   Deviance = 3938.7952 | Deviance change = 0.090117
    Maximum b parameter change =  0.007515  
...........................................................
Iteration 8     2015-06-13 13:23:58 
   Deviance = 3938.7511 | Deviance change = 0.044171
    Maximum b parameter change =  0.005289  
...........................................................
Iteration 9     2015-06-13 13:23:58 
   Deviance = 3938.7293 | Deviance change = 0.021762
    Maximum b parameter change =  0.003736  
...........................................................
Iteration 10     2015-06-13 13:23:58 
   Deviance = 3938.7186 | Deviance change = 0.010757
    Maximum b parameter change =  0.00264  
...........................................................
Iteration 11     2015-06-13 13:23:58 
   Deviance = 3938.7132 | Deviance change = 0.005327
    Maximum b parameter change =  0.001867  
...........................................................
Iteration 12     2015-06-13 13:23:58 
   Deviance = 3938.7106 | Deviance change = 0.002639
    Maximum b parameter change =  0.001321  
...........................................................
Iteration 13     2015-06-13 13:23:58 
   Deviance = 3938.7093 | Deviance change = 0.001306
    Maximum b parameter change =  0.000934  
...........................................................
Iteration 14     2015-06-13 13:23:58 
   Deviance = 3938.7086 | Deviance change = 0.000645
    Maximum b parameter change =  0.000661  
...........................................................
Iteration 15     2015-06-13 13:23:58 
   Deviance = 3938.7083 | Deviance change = 0.000317
    Maximum b parameter change =  0.000468  
...........................................................
Iteration 16     2015-06-13 13:23:59 
   Deviance = 3938.7082 | Deviance change = 0.000155
    Maximum b parameter change =  0.000331  
...........................................................
Iteration 17     2015-06-13 13:23:59 
   Deviance = 3938.7081 | Deviance change = 7.5e-05
    Maximum b parameter change =  0.000234  
...........................................................
Iteration 18     2015-06-13 13:23:59 
   Deviance = 3938.7081 | Deviance change = 3.5e-05
    Maximum b parameter change =  0.000166  
...........................................................
Iteration 19     2015-06-13 13:23:59 
   Deviance = 3938.708 | Deviance change = 1.6e-05
    Maximum b parameter change =  0.000117  
...........................................................
Iteration 20     2015-06-13 13:23:59 
   Deviance = 3938.708 | Deviance change = 7e-06
    Maximum b parameter change =  8.3e-05  
------------------------------------------------------------
Start: 2015-06-13 13:23:58 
End: 2015-06-13 13:23:59 
Time difference of 0.1304839 secs
Difference: 0.1304839 
------------------------------------------------------------
> 
> # estimate classification accuracy (3 levels)
> cutscores <- c( -1 , .3 )	# cut scores at theta=-1 and theta=.3
> class.accuracy.rasch( cutscores=cutscores , b=mod$item$b , 
+            meantheta=0 ,  sdtheta=mod$sd.trait ,
+            theta.l=seq(-4,4,len=200 ) , n.sims=3000)
Cut Scores 
[1] -1.0  0.3
WLE Reliability = 0.555 
WLE Reliability = 0.558 

WLE reliability (by simulation) = 0.671 
WLE consistency (correlation between two parallel forms) = 0.649 

Classification accuracy and consistency
           agree0 agree1 kappa consistency
analytical   0.68  0.990 0.492          NA
simulated    0.70  0.997 0.489       0.599

Probability classification table 
            Est_Class1 Est_Class2 Est_Class3
True_Class1      0.136      0.041      0.001
True_Class2      0.081      0.249      0.093
True_Class3      0.009      0.095      0.294
>   ##   Cut Scores 
>   ##   [1] -1.0  0.3
>   ##   
>   ##   WLE reliability (by simulation) = 0.671 
>   ##   WLE consistency (correlation between two parallel forms) = 0.649 
>   ##   
>   ##   Classification accuracy and consistency
>   ##              agree0 agree1 kappa consistency
>   ##   analytical   0.68  0.990 0.492          NA
>   ##   simulated    0.70  0.997 0.489       0.599
>   ##   
>   ##   Probability classification table 
>   ##               Est_Class1 Est_Class2 Est_Class3
>   ##   True_Class1      0.136      0.041      0.001
>   ##   True_Class2      0.081      0.249      0.093
>   ##   True_Class3      0.009      0.095      0.294
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("class.accuracy.rasch", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("conf.detect")
> ### * conf.detect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: conf.detect
> ### Title: Confirmatory DETECT and polyDETECT Analysis
> ### Aliases: conf.detect
> ### Keywords: DETECT
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: TIMSS mathematics data set (dichotomous data)
> #############################################################################
> data(data.timss)
> 
> # extract data
> dat <- data.timss$data
> dat <- dat[ , substring( colnames(dat),1,1) == "M" ]
> # extract item informations
> iteminfo <- data.timss$item
> # estimate Rasch model
> mod1 <- rasch.mml2( dat )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:23:59 
   Deviance = 9259.8165
    Maximum b parameter change =  0.423396  
...........................................................
Iteration 2     2015-06-13 13:23:59 
   Deviance = 9197.4187 | Deviance change = 62.397842
    Maximum b parameter change =  0.053734  
...........................................................
Iteration 3     2015-06-13 13:23:59 
   Deviance = 9192.0086 | Deviance change = 5.410045
    Maximum b parameter change =  0.022015  
...........................................................
Iteration 4     2015-06-13 13:23:59 
   Deviance = 9189.2609 | Deviance change = 2.747767
    Maximum b parameter change =  0.017821  
...........................................................
Iteration 5     2015-06-13 13:23:59 
   Deviance = 9188.2909 | Deviance change = 0.970003
    Maximum b parameter change =  0.015151  
...........................................................
Iteration 6     2015-06-13 13:23:59 
   Deviance = 9188.2102 | Deviance change = 0.080634
    Maximum b parameter change =  0.003872  
...........................................................
Iteration 7     2015-06-13 13:23:59 
   Deviance = 9188.2027 | Deviance change = 0.007508
    Maximum b parameter change =  0.001621  
...........................................................
Iteration 8     2015-06-13 13:23:59 
   Deviance = 9188.2015 | Deviance change = 0.001225
    Maximum b parameter change =  0.000733  
...........................................................
Iteration 9     2015-06-13 13:23:59 
   Deviance = 9188.2009 | Deviance change = 0.000554
    Maximum b parameter change =  0.000466  
...........................................................
Iteration 10     2015-06-13 13:23:59 
   Deviance = 9188.2006 | Deviance change = 0.00038
    Maximum b parameter change =  0.000348  
...........................................................
Iteration 11     2015-06-13 13:23:59 
   Deviance = 9188.2003 | Deviance change = 0.000277
    Maximum b parameter change =  0.000284  
...........................................................
Iteration 12     2015-06-13 13:23:59 
   Deviance = 9188.2001 | Deviance change = 0.000203
    Maximum b parameter change =  0.000241  
...........................................................
Iteration 13     2015-06-13 13:23:59 
   Deviance = 9188.1999 | Deviance change = 0.000149
    Maximum b parameter change =  0.000206  
...........................................................
Iteration 14     2015-06-13 13:23:59 
   Deviance = 9188.1998 | Deviance change = 0.000109
    Maximum b parameter change =  0.000177  
...........................................................
Iteration 15     2015-06-13 13:23:59 
   Deviance = 9188.1997 | Deviance change = 8e-05
    Maximum b parameter change =  0.000151  
...........................................................
Iteration 16     2015-06-13 13:23:59 
   Deviance = 9188.1997 | Deviance change = 5.9e-05
    Maximum b parameter change =  0.00013  
...........................................................
Iteration 17     2015-06-13 13:23:59 
   Deviance = 9188.1996 | Deviance change = 4.3e-05
    Maximum b parameter change =  0.000111  
...........................................................
Iteration 18     2015-06-13 13:23:59 
   Deviance = 9188.1996 | Deviance change = 3.1e-05
    Maximum b parameter change =  9.5e-05  
------------------------------------------------------------
Start: 2015-06-13 13:23:59 
End: 2015-06-13 13:23:59 
Time difference of 0.156045 secs
Difference: 0.156045 
------------------------------------------------------------
> # estimate WLEs
> wle1 <- wle.rasch( dat , b = mod1$item$b )$theta
WLE Reliability = 0.843 
> 
> # DETECT for content domains
> detect1 <- conf.detect( data = dat , score = wle1 ,
+                     itemcluster = iteminfo$Content.Domain )
-----------------------------------------------------------
Confirmatory DETECT Analysis 
Conditioning on 1 Score
Bandwidth Scale: 1.1 
Pairwise Estimation of Conditional Covariances
...........................................................
Nonparametric ICC estimation 
 5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 
55% 60% 65% 70% 75% 80% 85% 90% 95% 
...........................................................
Nonparametric Estimation of conditional covariances 
 5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 
55% 60% 65% 70% 75% 80% 85% 90% 95% 
-----------------------------------------------------------
       unweighted weighted
DETECT      0.316    0.316
ASSI        0.273    0.273
RATIO       0.355    0.355
>   ##          unweighted weighted
>   ##   DETECT      0.316    0.316
>   ##   ASSI        0.273    0.273
>   ##   RATIO       0.355    0.355
> 
> ## Not run: 
> ##D # DETECT cognitive domains
> ##D detect2 <- conf.detect( data = dat , score = wle1 ,
> ##D                     itemcluster = iteminfo$Cognitive.Domain )
> ##D   ##          unweighted weighted
> ##D   ##   DETECT      0.251    0.251
> ##D   ##   ASSI        0.227    0.227
> ##D   ##   RATIO       0.282    0.282
> ##D 
> ##D # DETECT for item format 
> ##D detect3 <- conf.detect( data = dat , score = wle1 ,
> ##D                     itemcluster = iteminfo$Format )
> ##D   ##          unweighted weighted
> ##D   ##   DETECT      0.056    0.056
> ##D   ##   ASSI        0.060    0.060
> ##D   ##   RATIO       0.062    0.062
> ##D 
> ##D # DETECT for item blocks
> ##D detect4 <- conf.detect( data = dat , score = wle1 ,
> ##D                     itemcluster = iteminfo$Block )
> ##D   ##          unweighted weighted
> ##D   ##   DETECT      0.301    0.301
> ##D   ##   ASSI        0.193    0.193
> ##D   ##   RATIO       0.339    0.339 
> ## End(Not run)
> 
> # Exploratory DETECT: Application of a cluster analysis employing the Ward method
> detect5 <- expl.detect( data = dat , score = wle1  , 
+                 nclusters = 10 , N.est = nrow(dat)  )
Pairwise Estimation of Conditional Covariances
...........................................................
Nonparametric ICC estimation 
 5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 
55% 60% 65% 70% 75% 80% 85% 90% 95% 
...........................................................
Nonparametric Estimation of conditional covariances 
 5% 10% 15% 20% 25% 30% 35% 40% 45% 50% 
55% 60% 65% 70% 75% 80% 85% 90% 95% 
The "ward" method has been renamed to "ward.D"; note new "ward.D2"


DETECT (unweighted)

Optimal Cluster Size is  8  (Maximum of DETECT Index)

  N.Cluster N.items N.est N.val        size.cluster DETECT.est ASSI.est
1         2      25   345     0                21-4     -0.085   -0.113
2         3      25   345     0              8-13-4      0.488    0.380
3         4      25   345     0            4-13-4-4      0.522    0.393
4         5      25   345     0           4-6-4-7-4      0.691    0.567
5         6      25   345     0         4-6-4-5-4-2      0.735    0.593
6         7      25   345     0       4-3-4-5-3-4-2      0.754    0.640
7         8      25   345     0     4-3-4-3-3-2-4-2      0.761    0.653
8         9      25   345     0   2-2-3-4-3-3-2-4-2      0.747    0.627
9        10      25   345     0 2-2-3-4-2-3-2-4-2-1      0.746    0.627
  RATIO.est
1    -0.096
2     0.549
3     0.587
4     0.777
5     0.827
6     0.847
7     0.856
8     0.839
9     0.839
> # Plot cluster solution
> pl <- plot( detect5$clusterfit , main = "Cluster solution" )
> rect.hclust(detect5$clusterfit, k=4, border="red")
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 2: Big 5 data set (polytomous data)
> ##D #############################################################################
> ##D 
> ##D # attach Big5 Dataset
> ##D data(data.big5)
> ##D 
> ##D # select 6 items of each dimension
> ##D dat <- data.big5
> ##D dat <- dat[, 1:30]
> ##D 
> ##D # estimate person score by simply using a transformed sum score
> ##D score <- qnorm( ( rowMeans( dat )+.5 )  / ( 30 + 1 ) )
> ##D 
> ##D # extract item cluster (Big 5 dimensions)
> ##D itemcluster <- substring( colnames(dat) , 1 , 1 )
> ##D 
> ##D # DETECT Item cluster
> ##D detect1 <- conf.detect( data = dat , score = score , itemcluster = itemcluster )
> ##D   ##        unweighted weighted
> ##D   ## DETECT      1.256    1.256
> ##D   ## ASSI        0.384    0.384
> ##D   ## RATIO       0.597    0.597
> ##D 
> ##D # Exploratory DETECT
> ##D detect5 <- expl.detect( data = dat , score = score  , 
> ##D                      nclusters = 9 , N.est = nrow(dat)  )
> ##D   ## DETECT (unweighted)
> ##D   ## Optimal Cluster Size is  6  (Maximum of DETECT Index)
> ##D   ##   N.Cluster N.items N.est N.val      size.cluster DETECT.est ASSI.est RATIO.est
> ##D   ## 1         2      30   500     0              6-24      1.073    0.246     0.510
> ##D   ## 2         3      30   500     0           6-10-14      1.578    0.457     0.750
> ##D   ## 3         4      30   500     0         6-10-11-3      1.532    0.444     0.729
> ##D   ## 4         5      30   500     0        6-8-11-2-3      1.591    0.462     0.757
> ##D   ## 5         6      30   500     0       6-8-6-2-5-3      1.610    0.499     0.766
> ##D   ## 6         7      30   500     0     6-3-6-2-5-5-3      1.557    0.476     0.740
> ##D   ## 7         8      30   500     0   6-3-3-2-3-5-5-3      1.540    0.462     0.732
> ##D   ## 8         9      30   500     0 6-3-3-2-3-5-3-3-2      1.522    0.444     0.724
> ##D 
> ##D # Plot Cluster solution
> ##D pl <- plot( detect5$clusterfit , main = "Cluster solution" )
> ##D rect.hclust(detect5$clusterfit, k=6, border="red")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("conf.detect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.big5")
> ### * data.big5
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.big5
> ### Title: Dataset Big 5 from 'qgraph' Package
> ### Aliases: data.big5 data.big5.qgraph
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # list of needed packages for the following examples
> ##D packages <- scan(what="character")
> ##D      sirt   TAM   eRm   CDM   mirt  ltm   mokken  psychotools  psychomix
> ##D      psych
> ##D      
> ##D # install packages     
> ##D if (FALSE){  # default is FALSE
> ##D    install.packages(packages)
> ##D    	  }
> ##D # load packages
> ##D for (pack in packages){ 
> ##D     library(pack, character.only=TRUE) 
> ##D         }
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 1: Unidimensional models openness scale
> ##D #############################################################################
> ##D 
> ##D data(data.big5)	
> ##D # extract first 10 openness items
> ##D items <- which( substring( colnames(data.big5) , 1 , 1 ) == "O"  )[1:10]
> ##D dat <- data.big5[ , items ]
> ##D I <- ncol(dat)
> ##D summary(dat)
> ##D   ##   > colnames(dat)
> ##D   ##    [1] "O3"  "O8"  "O13" "O18" "O23" "O28" "O33" "O38" "O43" "O48"
> ##D # descriptive statistics
> ##D psych::describe(dat)
> ##D         
> ##D #****************
> ##D # Model 1: Partial credit model
> ##D #****************
> ##D 
> ##D #-- M1a: rm.facets (in sirt)
> ##D m1a <- sirt::rm.facets( dat )
> ##D summary(m1a)
> ##D 
> ##D #-- M1b: tam.mml (in TAM)
> ##D m1b <- TAM::tam.mml( resp=dat )
> ##D summary(m1b)
> ##D 
> ##D #-- M1c: gdm (in CDM)
> ##D theta.k <- seq(-6,6,len=21)
> ##D m1c <- CDM::gdm( dat , irtmodel="1PL" ,theta.k=theta.k , skillspace="normal")
> ##D summary(m1c)
> ##D # compare results with loglinear skillspace
> ##D m1c2 <- CDM::gdm( dat , irtmodel="1PL" ,theta.k=theta.k , skillspace="loglinear")
> ##D summary(m1c2)
> ##D 
> ##D #-- M1d: PCM (in eRm)
> ##D m1d <- eRm::PCM( dat )
> ##D summary(m1d)
> ##D 
> ##D #-- M1e: gpcm (in ltm)
> ##D m1e <- ltm::gpcm( dat , constraint = "1PL" , control=list(verbose=TRUE))
> ##D summary(m1e)
> ##D 
> ##D #-- M1f: mirt (in mirt)
> ##D m1f <- mirt::mirt( dat , model=1 , itemtype="1PL" , verbose=TRUE)
> ##D summary(m1f)
> ##D coef(m1f)
> ##D 
> ##D #-- M1g: PCModel.fit (in psychotools)
> ##D mod1g <- psychotools::PCModel.fit(dat)
> ##D summary(mod1g)
> ##D plot(mod1g)
> ##D 
> ##D #****************
> ##D # Model 2: Generalized partial credit model
> ##D #****************
> ##D 
> ##D #-- M2a: rm.facets (in sirt)
> ##D m2a <- sirt::rm.facets( dat , est.a.item=TRUE)
> ##D summary(m2a)
> ##D # Note that in rm.facets the mean of item discriminations is fixed to 1
> ##D 
> ##D #-- M2b: tam.mml.2pl (in TAM)
> ##D m2b <- TAM::tam.mml.2pl( resp=dat , irtmodel="GPCM")
> ##D summary(m2b)
> ##D 
> ##D #-- M2c: gdm (in CDM)
> ##D m2c <- CDM::gdm( dat , irtmodel="2PL" ,theta.k=seq(-6,6,len=21) ,
> ##D                    skillspace="normal" , standardized.latent=TRUE)
> ##D summary(m2c)
> ##D 
> ##D #-- M2d: gpcm (in ltm)
> ##D m2d <- ltm::gpcm( dat , control=list(verbose=TRUE))
> ##D summary(m2d)
> ##D 
> ##D #-- M2e: mirt (in mirt)
> ##D m2e <- mirt::mirt( dat , model=1 ,  itemtype="GPCM" , verbose=TRUE)
> ##D summary(m2e)
> ##D coef(m2e)
> ##D 
> ##D #****************
> ##D # Model 3: Nonparametric item response model
> ##D #****************
> ##D 
> ##D #-- M3a: ISOP and ADISOP model - isop.poly (in sirt)
> ##D m3a <- sirt::isop.poly( dat )
> ##D summary(m3a)
> ##D plot(m3a)
> ##D 
> ##D #-- M3b: Mokken scale analysis (in mokken) 
> ##D # Scalability coefficients
> ##D mokken::coefH(dat)
> ##D # Assumption of monotonicity
> ##D monotonicity.list <- mokken::check.monotonicity(dat)
> ##D summary(monotonicity.list)
> ##D plot(monotonicity.list)
> ##D # Assumption of non-intersecting ISRFs using method restscore
> ##D restscore.list <- mokken::check.restscore(dat)
> ##D summary(restscore.list)
> ##D plot(restscore.list) 
> ##D 
> ##D #****************
> ##D # Model 4: Graded response model
> ##D #****************
> ##D 
> ##D #-- M4a: mirt (in mirt)
> ##D m4a <- mirt::mirt( dat , model=1 ,  itemtype="graded" , verbose=TRUE)
> ##D print(m4a)
> ##D mirt.wrapper.coef(m4a)
> ##D 
> ##D #----  M4b: WLSMV estimation with cfa (in lavaan)
> ##D lavmodel <- "F =~ O3__O48
> ##D              F ~~ 1*F  
> ##D                 "
> ##D # transform lavaan syntax with lavaanify.IRT
> ##D lavmodel <- TAM::lavaanify.IRT( lavmodel , items=colnames(dat) )$lavaan.syntax
> ##D mod4b <- lavaan::cfa( data= as.data.frame(dat) , model=lavmodel, std.lv = TRUE, 
> ##D                  ordered=colnames(dat) ,  parameterization="theta")
> ##D summary(mod4b , standardized=TRUE , fit.measures=TRUE , rsquare=TRUE)
> ##D coef(mod4b)
> ##D 
> ##D #****************
> ##D # Model 5: Normally distributed residuals
> ##D #****************
> ##D 
> ##D #----  M5a: cfa (in lavaan)
> ##D lavmodel <- "F =~ O3__O48
> ##D              F ~~ 1*F  
> ##D              F ~ 0*1
> ##D              O3__O48 ~ 1
> ##D                 "                               
> ##D lavmodel <- TAM::lavaanify.IRT( lavmodel , items=colnames(dat) )$lavaan.syntax
> ##D mod5a <- lavaan::cfa( data= as.data.frame(dat) , model=lavmodel, std.lv = TRUE ,
> ##D                  estimator="MLR" )
> ##D summary(mod5a , standardized=TRUE , fit.measures=TRUE , rsquare=TRUE)
> ##D 
> ##D #----  M5b: mirt (in mirt)
> ##D 
> ##D # create user defined function
> ##D name <- 'normal'
> ##D par <- c("d" = 1 , "a1" = 0.8 , "vy" = 1)
> ##D est <- c(TRUE, TRUE,FALSE)
> ##D P.normal <- function(par,Theta,ncat){
> ##D      d <- par[1]
> ##D      a1 <- par[2]
> ##D      vy <- par[3]     
> ##D      psi <- vy - a1^2     
> ##D      # expected values given Theta
> ##D      mui <- a1*Theta[,1] + d
> ##D      TP <- nrow(Theta)
> ##D      probs <- matrix( NA , nrow=TP, ncol= ncat )
> ##D      eps <- .01
> ##D      for (cc in 1:ncat){
> ##D         probs[,cc] <- dnorm( cc , mean = mui   , sd = sqrt( abs( psi + eps) ) )
> ##D                     }
> ##D      psum <- matrix( rep(rowSums( probs ),each=ncat)  , nrow=TP , ncol=ncat , byrow=TRUE)    
> ##D      probs <- probs / psum
> ##D      return(probs)                    
> ##D }
> ##D 
> ##D # create item response function
> ##D normal <- mirt::createItem(name, par=par, est=est, P=P.normal)
> ##D customItems <- list("normal"=normal) 
> ##D itemtype <- rep( "normal",I)
> ##D # define parameters to be estimated
> ##D mod5b.pars <- mirt::mirt(dat, 1, itemtype=itemtype , 
> ##D                    customItems=customItems , pars = "values")                
> ##D ind <- which( mod5b.pars$name == "vy")
> ##D vy <- apply( dat , 2 , var , na.rm=TRUE ) 
> ##D mod5b.pars[ ind , "value" ] <- vy
> ##D ind <- which( mod5b.pars$name == "a1")
> ##D mod5b.pars[ ind , "value" ] <- .5* sqrt(vy)
> ##D ind <- which( mod5b.pars$name == "d")
> ##D mod5b.pars[ ind , "value" ] <- colMeans( dat , na.rm=TRUE )
> ##D                                                        
> ##D # estimate model
> ##D mod5b <- mirt::mirt(dat, 1, itemtype=itemtype , customItems=customItems ,  
> ##D                  pars = mod5b.pars , verbose=TRUE    )
> ##D sirt::mirt.wrapper.coef(mod5b)$coef
> ##D 
> ##D # some item plots
> ##D     par(ask=TRUE)
> ##D plot(mod5b, type = 'trace', layout = c(1,1))
> ##D     par(ask=FALSE)
> ##D # Alternatively:
> ##D sirt::mirt.wrapper.itemplot(mod5b) 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.big5", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.bs")
> ### * data.bs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.bs
> ### Title: Datasets from Borg and Staufenbiel (2007)
> ### Aliases: data.bs data.bs07a
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 07a: Dataset Gefechtsangst
> ##D #############################################################################
> ##D 
> ##D data(data.bs07a)
> ##D dat <- data.bs07a
> ##D items <- grep( "GF" , colnames(dat)  , value=TRUE )
> ##D 
> ##D #************************
> ##D # Model 1: Rasch model
> ##D mod1 <- TAM::tam.mml(dat[,items] )
> ##D summary(mod1)
> ##D IRT.WrightMap(mod1)
> ##D 
> ##D #************************
> ##D # Model 2: 2PL model
> ##D mod2 <- TAM::tam.mml.2pl(dat[,items] )
> ##D summary(mod2)
> ##D 
> ##D #************************
> ##D # Model 3: Latent class analysis (LCA) with two classes
> ##D tammodel <- "
> ##D ANALYSIS:
> ##D   TYPE=LCA;
> ##D   NCLASSES(2)
> ##D   NSTARTS(5,10)
> ##D LAVAAN MODEL:
> ##D   F =~ GF1__GF9
> ##D   "  
> ##D mod3 <- TAM::tamaan( tammodel , dat )
> ##D summary(mod3)
> ##D 
> ##D #************************
> ##D # Model 4: LCA with three classes
> ##D tammodel <- "
> ##D ANALYSIS:
> ##D   TYPE=LCA;
> ##D   NCLASSES(3)
> ##D   NSTARTS(5,10)
> ##D LAVAAN MODEL:
> ##D   F =~ GF1__GF9
> ##D   "  
> ##D mod4 <- TAM::tamaan( tammodel , dat )
> ##D summary(mod4)
> ##D 
> ##D #************************
> ##D # Model 5: Located latent class model (LOCLCA) with two classes
> ##D tammodel <- "
> ##D ANALYSIS:
> ##D   TYPE=LOCLCA;
> ##D   NCLASSES(2)
> ##D   NSTARTS(5,10)
> ##D LAVAAN MODEL:
> ##D   F =~ GF1__GF9 
> ##D   "  
> ##D mod5 <- TAM::tamaan( tammodel , dat )
> ##D summary(mod5)
> ##D 
> ##D #************************
> ##D # Model 6: Located latent class model with three classes
> ##D tammodel <- "
> ##D ANALYSIS:
> ##D   TYPE=LOCLCA;
> ##D   NCLASSES(3)
> ##D   NSTARTS(5,10)
> ##D LAVAAN MODEL:
> ##D   F =~ GF1__GF9 
> ##D   "  
> ##D mod6 <- TAM::tamaan( tammodel , dat )
> ##D summary(mod6)
> ##D 
> ##D #************************
> ##D # Model 7: Probabilistic Guttman model
> ##D mod7 <- sirt::prob.guttman( dat[,items] )
> ##D summary(mod7)
> ##D 
> ##D #-- model comparison
> ##D IRT.compareModels( mod1, mod2 , mod3 , mod4 , mod5 , mod6 , mod7 )
> ## End(Not run)	
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.bs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.eid")
> ### * data.eid
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.eid
> ### Title: Examples with Datasets from Eid and Schmidt (2014)
> ### Aliases: data.eid
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D # The "dataset" data.eid is just a placeholder.
> ##D site <- paste0( "http://www.hogrefe.de/fileadmin/redakteure/hogrefe_de/" ,
> ##D         "Psychlehrbuchplus/Testtheorie_und_Testkonstruktion/R-Analysen/" )
> ##D 
> ##D library(foreign)
> ##D #---- load some IRT packages in R
> ##D library(TAM)        # package (a)
> ##D library(mirt)       # package (b)
> ##D library(sirt)       # package (c)
> ##D library(eRm)        # package (d)
> ##D library(ltm)        # package (e)
> ##D library(psychomix)  # package (f)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLES Ch. 4: Unidimensional IRT models | dichotomous data
> ##D #############################################################################
> ##D 
> ##D # link to dataset
> ##D linkname <- paste0( site , "ids_new.sav")
> ##D # load data
> ##D data0 <- foreign::read.spss( linkname , to.data.frame=TRUE , use.value.labels=FALSE)
> ##D # extract items
> ##D dat <- data0[,2:11]
> ##D 
> ##D #*********************************************************
> ##D # Model 1: Rasch model
> ##D #*********************************************************
> ##D 
> ##D #-----------
> ##D #-- 1a: estimation with TAM package
> ##D 
> ##D # estimation with tam.mml
> ##D mod1a <- TAM::tam.mml(dat)
> ##D summary(mod1a)
> ##D 
> ##D # person parameters in TAM
> ##D pp1a <- TAM::tam.wle(mod1a)
> ##D 
> ##D # plot item response functions
> ##D plot(mod1a,export=FALSE,ask=TRUE)
> ##D 
> ##D # Infit and outfit in TAM
> ##D itemf1a <- TAM::tam.fit(mod1a)
> ##D itemf1a
> ##D 
> ##D # model fit
> ##D modf1a <- TAM::tam.modelfit(mod1a)
> ##D summary(modf1a)
> ##D 
> ##D #-----------
> ##D #-- 1b: estimation with mirt package
> ##D 
> ##D # estimation with mirt
> ##D mod1b <- mirt::mirt( dat , 1 , itemtype="Rasch")
> ##D summary(mod1b)
> ##D print(mod1b)
> ##D 
> ##D # person parameters
> ##D pp1b <- mirt::fscores(mod1b , method="WLE")
> ##D 
> ##D # extract coefficients
> ##D sirt::mirt.wrapper.coef(mod1b)
> ##D 
> ##D # plot item response functions
> ##D plot(mod1b, type="trace" )
> ##D par(mfrow=c(1,1))
> ##D 
> ##D # item fit
> ##D itemf1b <- mirt::itemfit(mod1b)
> ##D itemf1b
> ##D 
> ##D # model fit
> ##D modf1b <- mirt::M2(mod1b)
> ##D modf1b
> ##D 
> ##D #-----------
> ##D #-- 1c: estimation with sirt package
> ##D 
> ##D # estimation with rasch.mml2
> ##D mod1c <- rasch.mml2(dat)
> ##D summary(mod1c)
> ##D 
> ##D # person parameters (EAP)
> ##D pp1c <- mod1c$person
> ##D 
> ##D # plot item response functions
> ##D plot(mod1c , ask=TRUE )
> ##D 
> ##D # model fit
> ##D modf1c <- sirt::modelfit.sirt(mod1c)
> ##D summary(modf1c)
> ##D 
> ##D #-----------
> ##D #-- 1d: estimation with eRm package
> ##D 
> ##D # estimation with RM
> ##D mod1d <- eRm::RM(dat)
> ##D summary(mod1d)
> ##D 
> ##D # estimation person parameters
> ##D pp1d <- eRm::person.parameter(mod1d)
> ##D summary(pp1d)
> ##D 
> ##D # plot item response functions
> ##D eRm::plotICC(mod1d)
> ##D 
> ##D # person-item map
> ##D eRm::plotPImap(mod1d)
> ##D 
> ##D # item fit
> ##D itemf1d <- eRm::itemfit(pp1d)
> ##D 
> ##D # person fit
> ##D persf1d <- eRm::personfit(pp1d)
> ##D 
> ##D #-----------
> ##D #-- 1e: estimation with ltm package
> ##D 
> ##D # estimation with rasch
> ##D mod1e <- ltm::rasch(dat)
> ##D summary(mod1e)
> ##D 
> ##D # estimation person parameters
> ##D pp1e <- ltm::factor.scores(mod1e)
> ##D 
> ##D # plot item response functions
> ##D plot(mod1e)
> ##D 
> ##D # item fit
> ##D itemf1e <- ltm::item.fit(mod1e)
> ##D 
> ##D # person fit
> ##D persf1e <- ltm::person.fit(mod1e)
> ##D 
> ##D # goodness of fit with Bootstrap
> ##D modf1e <- ltm::GoF.rasch(mod1e,B=20)    # use more bootstrap samples
> ##D modf1e
> ##D 
> ##D #*********************************************************
> ##D # Model 2: 2PL model
> ##D #*********************************************************
> ##D 
> ##D #-----------
> ##D #-- 2a: estimation with TAM package
> ##D 
> ##D # estimation
> ##D mod2a <- TAM::tam.mml.2pl(dat)
> ##D summary(mod2a)
> ##D 
> ##D # model fit
> ##D modf2a <- TAM::tam.modelfit(mod2a)
> ##D summary(modf2a)
> ##D 
> ##D # item response functions
> ##D plot(mod2a , export=FALSE , ask=TRUE)
> ##D 
> ##D # model comparison
> ##D anova(mod1a,mod2a)
> ##D 
> ##D #-----------
> ##D #-- 2b: estimation with mirt package
> ##D 
> ##D # estimation
> ##D mod2b <- mirt::mirt(dat,1,itemtype="2PL")
> ##D summary(mod2b)
> ##D print(mod2b)
> ##D sirt::mirt.wrapper.coef(mod2b)
> ##D 
> ##D # model fit
> ##D modf2b <- mirt::M2(mod2b)
> ##D modf2b
> ##D 
> ##D #-----------
> ##D #-- 2c: estimation with sirt package
> ##D 
> ##D I <- ncol(dat)
> ##D # estimation
> ##D mod2c <- sirt::rasch.mml2(dat,est.a=1:I)
> ##D summary(mod2c)
> ##D 
> ##D # model fit
> ##D modf2c <- sirt::modelfit.sirt(mod2c)
> ##D summary(modf2c)
> ##D 
> ##D #-----------
> ##D #-- 2e: estimation with ltm package
> ##D 
> ##D # estimation
> ##D mod2e <- ltm::ltm(dat ~ z1 )
> ##D summary(mod2e)
> ##D 
> ##D # item response functions
> ##D plot(mod2e)
> ##D 
> ##D #*********************************************************
> ##D # Model 3: Mixture Rasch model
> ##D #*********************************************************
> ##D 
> ##D #-----------
> ##D #-- 3a: estimation with TAM package
> ##D 
> ##D # avoid "_" in column names if the "__" operator is used in 
> ##D # the tamaan syntax
> ##D dat1 <- dat
> ##D colnames(dat1) <- gsub("_" , "" , colnames(dat1) )
> ##D # define tamaan model
> ##D tammodel <- "
> ##D ANALYSIS:
> ##D   TYPE=MIXTURE ;
> ##D   NCLASSES(2);
> ##D   NSTARTS(20,25);   # 20 random starts with 25 initial iterations each
> ##D LAVAAN MODEL:
> ##D   F =~ Freude1__Freude2
> ##D   F ~~ F
> ##D ITEM TYPE:
> ##D   ALL(Rasch);
> ##D     "    
> ##D mod3a <- TAM::tamaan( tammodel , resp=dat1 )
> ##D summary(mod3a)
> ##D # extract item parameters
> ##D ipars <- mod2$itempartable_MIXTURE[ 1:10 , ]
> ##D plot( 1:10 , ipars[,3] , type="o" , ylim= range( ipars[,3:4] ) , pch=16 ,
> ##D         xlab="Item" , ylab="Item difficulty")
> ##D lines( 1:10 , ipars[,4] , type="l", col=2 , lty=2)
> ##D points( 1:10 , ipars[,4] ,  col=2 , pch=2)
> ##D 
> ##D #-----------
> ##D #-- 3f: estimation with psychomix package
> ##D 
> ##D # estimation
> ##D mod3f <- psychomix::raschmix( as.matrix(dat) , k=2 , scores="meanvar")
> ##D summary(mod3f)
> ##D # plot class-specific item difficulties
> ##D plot(mod3f)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLES Ch. 5: Unidimensional IRT models | polytomous data
> ##D #############################################################################
> ##D 
> ##D # link to dataset
> ##D linkname <- paste0( site , "Daten-kapitel-5-sex.sav")
> ##D # load data
> ##D data0 <- foreign::read.spss( linkname , to.data.frame=TRUE , use.value.labels=FALSE)
> ##D # extract items
> ##D dat <- data0[,2:7]
> ##D 
> ##D #*********************************************************
> ##D # Model 1: Partial credit model
> ##D #*********************************************************
> ##D 
> ##D #-----------
> ##D #-- 1a: estimation with TAM package
> ##D 
> ##D # estimation with tam.mml
> ##D mod1a <- TAM::tam.mml(dat)
> ##D summary(mod1a)
> ##D 
> ##D # person parameters in TAM
> ##D pp1a <- tam.wle(mod1a)
> ##D 
> ##D # plot item response functions
> ##D plot(mod1a,export=FALSE,ask=TRUE)
> ##D 
> ##D # Infit and outfit in TAM
> ##D itemf1a <- TAM::tam.fit(mod1a)
> ##D itemf1a
> ##D 
> ##D # model fit
> ##D modf1a <- TAM::tam.modelfit(mod1a)
> ##D summary(modf1a)
> ##D 
> ##D #-----------
> ##D #-- 1b: estimation with mirt package
> ##D 
> ##D # estimation with tam.mml
> ##D mod1b <- mirt::mirt( dat , 1 , itemtype="Rasch")
> ##D summary(mod1b)
> ##D print(mod1b)
> ##D sirt::mirt.wrapper.coef(mod1b)
> ##D 
> ##D # plot item response functions
> ##D plot(mod1b, type="trace" )
> ##D par(mfrow=c(1,1))
> ##D 
> ##D # item fit
> ##D itemf1b <- mirt::itemfit(mod1b)
> ##D itemf1b
> ##D 
> ##D #-----------
> ##D #-- 1c: estimation with sirt package
> ##D 
> ##D # estimation with rm.facets
> ##D mod1c <- sirt::rm.facets(dat)
> ##D summary(mod1c)
> ##D summary(mod1a)
> ##D 
> ##D #-----------
> ##D #-- 1d: estimation with eRm package
> ##D 
> ##D # estimation
> ##D mod1d <- eRm::PCM(dat)
> ##D summary(mod1d)
> ##D 
> ##D # plot item response functions
> ##D eRm::plotICC(mod1d)
> ##D 
> ##D # person-item map
> ##D eRm::plotPImap(mod1d)
> ##D 
> ##D # item fit
> ##D itemf1d <- eRm::itemfit(pp1d)
> ##D 
> ##D #-----------
> ##D #-- 1e: estimation with ltm package
> ##D 
> ##D # estimation
> ##D mod1e <- ltm::gpcm(dat, constraint="1PL")
> ##D summary(mod1e)
> ##D # plot item response functions
> ##D plot(mod1e)
> ##D 
> ##D #*********************************************************
> ##D # Model 2: Generalized partial credit model
> ##D #*********************************************************
> ##D 
> ##D #-----------
> ##D #-- 2a: estimation with TAM package
> ##D 
> ##D # estimation with tam.mml
> ##D mod2a <- TAM::tam.mml.2pl(dat, irtmodel="GPCM")
> ##D summary(mod2a)
> ##D 
> ##D # model fit
> ##D modf2a <- TAM::tam.modelfit(mod2a)
> ##D summary(modf2a)
> ##D 
> ##D #-----------
> ##D #-- 2b: estimation with mirt package
> ##D 
> ##D # estimation
> ##D mod2b <- mirt::mirt( dat , 1 , itemtype="gpcm")
> ##D summary(mod2b)
> ##D print(mod2b)
> ##D sirt::mirt.wrapper.coef(mod2b)
> ##D 
> ##D #-----------
> ##D #-- 2c: estimation with sirt package
> ##D 
> ##D # estimation with rm.facets
> ##D mod2c <- sirt::rm.facets(dat , est.a.item=TRUE)
> ##D summary(mod2c)
> ##D 
> ##D #-----------
> ##D #-- 2e: estimation with ltm package
> ##D 
> ##D # estimation
> ##D mod2e <- ltm::gpcm(dat)
> ##D summary(mod2e)
> ##D plot(mod2e)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.eid", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.g308")
> ### * data.g308
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.g308
> ### Title: C-Test Datasets
> ### Aliases: data.g308
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: Dataset G308 from Schroeders et al. (2014)
> ##D #############################################################################	
> ##D 	
> ##D data(data.g308)
> ##D dat <- data.g308
> ##D 
> ##D library(TAM)
> ##D library(sirt)
> ##D library(combinat)
> ##D 
> ##D # define testlets
> ##D testlet <- c(1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6)
> ##D 
> ##D #****************************************
> ##D #*** Model 1: Rasch model
> ##D mod1 <- TAM::tam.mml(resp = dat[,-1], pid = dat[,1],
> ##D        control = list(maxiter = 300 , snodes = 1500))
> ##D summary(mod1)
> ##D     
> ##D #****************************************
> ##D #*** Model 2: Rasch testlet model
> ##D 
> ##D # testlets are dimensions, assign items to Q-matrix
> ##D TT <- length(unique(testlet))
> ##D Q <- matrix(0, nrow = ncol(dat)-1 , ncol = TT + 1)
> ##D Q[,1] <- 1 # First dimension constitutes g-factor
> ##D for (tt in 1:TT){Q[testlet == tt, tt+1] <- 1}
> ##D 
> ##D # In a testlet model, all dimensions are uncorrelated among
> ##D # each other, that is, all pairwise correlations are set to 0,
> ##D # which can be accomplished with the "variance.fixed" command
> ##D variance.fixed <- cbind(t( combinat::combn(TT+1,2)), 0)
> ##D mod2 <- TAM::tam.mml(resp = dat[,-1], pid = dat[,1], Q = Q,
> ##D             variance.fixed = variance.fixed,
> ##D             control = list(snodes = 1500 , maxiter = 300))
> ##D summary(mod2)
> ##D 
> ##D #****************************************
> ##D #*** Model 3: Partial credit model
> ##D 
> ##D scores <- list()
> ##D testlet.names <- NULL
> ##D dat.pcm <- NULL
> ##D for (tt in 1:max(testlet) ){
> ##D    scores[[tt]] <- rowSums (dat[,-1][, testlet == tt, drop = FALSE])
> ##D    dat.pcm <- c(dat.pcm, list(c(scores[[tt]])))
> ##D    testlet.names <- append(testlet.names, paste0("testlet",tt) )
> ##D    }
> ##D dat.pcm <- as.data.frame(dat.pcm)
> ##D colnames(dat.pcm) <- testlet.names
> ##D mod3 <- TAM::tam.mml(resp = dat.pcm, control = list(snodes=1500, maxiter=300) )
> ##D summary(mod3)
> ##D 
> ##D #****************************************
> ##D #*** Model 4: Copula model
> ##D 
> ##D mod4 <- sirt::rasch.copula2 (dat = dat[,-1], itemcluster = testlet)
> ##D summary(mod4)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.g308", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.long")
> ### * data.long
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.long
> ### Title: Longitudinal Dataset
> ### Aliases: data.long
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(data.long)
> ##D dat <- data.long
> ##D dat <- dat[,-1]
> ##D I <- ncol(dat)
> ##D 
> ##D #*************************************************
> ##D # Model 1: 2-dimensional Rasch model
> ##D #*************************************************
> ##D # define Q-matrix
> ##D Q <- matrix(0,I,2)
> ##D Q[1:6,1] <- 1
> ##D Q[7:12,2] <- 1
> ##D rownames(Q) <- colnames(dat)
> ##D colnames(Q) <- c("T1","T2")
> ##D 
> ##D # vector with same items
> ##D itemnr <- as.numeric( substring( colnames(dat) ,2,2) )
> ##D # fix mean at T2 to zero
> ##D mu.fixed <- cbind( 2,0 )
> ##D 
> ##D #--- M1a: rasch.mml2 (in sirt)
> ##D mod1a <- sirt::rasch.mml2(dat, Q=Q , est.b=itemnr , mu.fixed=mu.fixed)
> ##D summary(mod1a)
> ##D 
> ##D #--- M1b: smirt (in sirt)
> ##D mod1b <- sirt::smirt(dat, Qmatrix=Q , irtmodel="comp" , est.b= itemnr , 
> ##D                   mu.fixed=mu.fixed )
> ##D 
> ##D #--- M1c: tam.mml (in TAM)
> ##D 
> ##D # assume equal item difficulty of I3T1 and I3T2, I4T1 and I4T2, ...
> ##D # create draft design matrix and modify it
> ##D A <- TAM::designMatrices(resp=dat)$A
> ##D dimnames(A)[[1]] <- colnames(dat)
> ##D   ##   > str(A)
> ##D   ##    num [1:12, 1:2, 1:12] 0 0 0 0 0 0 0 0 0 0 ...
> ##D   ##    - attr(*, "dimnames")=List of 3
> ##D   ##     ..$ : chr [1:12] "Item01" "Item02" "Item03" "Item04" ...
> ##D   ##     ..$ : chr [1:2] "Category0" "Category1"
> ##D   ##     ..$ : chr [1:12] "I1T1" "I2T1" "I3T1" "I4T1" ...
> ##D A1 <- A[  ,  , c(1:6 , 11:12 ) ]
> ##D A1[7,2,3] <- -1     # difficulty(I3T1) = difficulty(I3T2)
> ##D A1[8,2,4] <- -1     # I4T1 = I4T2
> ##D A1[9,2,5] <- A1[10,2,6] <- -1
> ##D dimnames(A1)[[3]] <- substring( dimnames(A1)[[3]],1,2)
> ##D   ##   > A1[,2,]
> ##D   ##        I1 I2 I3 I4 I5 I6 I7 I8
> ##D   ##   I1T1 -1  0  0  0  0  0  0  0
> ##D   ##   I2T1  0 -1  0  0  0  0  0  0
> ##D   ##   I3T1  0  0 -1  0  0  0  0  0
> ##D   ##   I4T1  0  0  0 -1  0  0  0  0
> ##D   ##   I5T1  0  0  0  0 -1  0  0  0
> ##D   ##   I6T1  0  0  0  0  0 -1  0  0
> ##D   ##   I3T2  0  0 -1  0  0  0  0  0
> ##D   ##   I4T2  0  0  0 -1  0  0  0  0
> ##D   ##   I5T2  0  0  0  0 -1  0  0  0
> ##D   ##   I6T2  0  0  0  0  0 -1  0  0
> ##D   ##   I7T2  0  0  0  0  0  0 -1  0
> ##D   ##   I8T2  0  0  0  0  0  0  0 -1
> ##D 
> ##D # estimate model
> ##D # set intercept of second dimension (T2) to zero
> ##D beta.fixed <- cbind( 1 , 2 , 0 )
> ##D mod1c <- TAM::tam.mml( resp=dat , Q=Q , A=A1 , beta.fixed=beta.fixed)
> ##D summary(mod1c)
> ##D 
> ##D #*************************************************
> ##D # Model 2: 2-dimensional 2PL model
> ##D #*************************************************
> ##D 
> ##D # set variance at T2 to 1
> ##D variance.fixed <- cbind(2,2,1)
> ##D 
> ##D # M2a: rasch.mml2 (in sirt)
> ##D mod2a <- sirt::rasch.mml2(dat, Q=Q , est.b=itemnr , est.a=itemnr , mu.fixed=mu.fixed,
> ##D              variance.fixed=variance.fixed , mmliter=100)
> ##D summary(mod2a)
> ##D 
> ##D #*************************************************
> ##D # Model 3: Concurrent calibration by assuming invariant item parameters
> ##D #*************************************************
> ##D 
> ##D library(mirt)   # use mirt for concurrent calibration
> ##D data(data.long)
> ##D dat <- data.long[,-1]
> ##D I <- ncol(dat)
> ##D 
> ##D # create user defined function for between item dimensionality 4PL model
> ##D name <- "4PLbw"
> ##D par <- c("low"=0,"upp"=1,"a"=1,"d"=0 ,"dimItem"=1)
> ##D est <- c(TRUE, TRUE,TRUE,TRUE,FALSE)
> ##D # item response function
> ##D irf <- function(par,Theta,ncat){    
> ##D      low <- par[1]
> ##D      upp <- par[2]
> ##D      a <- par[3]
> ##D      d <- par[4]
> ##D      dimItem <- par[5]
> ##D      P1 <- low + ( upp - low ) * plogis( a*Theta[,dimItem] + d )
> ##D      cbind(1-P1, P1)
> ##D }
> ##D 
> ##D # create item response function
> ##D fourPLbetw <- mirt::createItem(name, par=par, est=est, P=irf)
> ##D head(dat)
> ##D 
> ##D # create mirt model (use variable names in mirt.model)
> ##D mirtsyn <- "
> ##D      T1 = I1T1,I2T1,I3T1,I4T1,I5T1,I6T1
> ##D      T2 = I3T2,I4T2,I5T2,I6T2,I7T2,I8T2
> ##D      COV = T1*T2,,T2*T2
> ##D      MEAN = T1
> ##D      CONSTRAIN = (I3T1,I3T2,d),(I4T1,I4T2,d),(I5T1,I5T2,d),(I6T1,I6T2,d),
> ##D                  (I3T1,I3T2,a),(I4T1,I4T2,a),(I5T1,I5T2,a),(I6T1,I6T2,a)     
> ##D         "
> ##D # create mirt model
> ##D mirtmodel <- mirt::mirt.model( mirtsyn , itemnames=colnames(dat) )        
> ##D # define parameters to be estimated
> ##D mod3.pars <- mirt::mirt(dat, mirtmodel$model, rep( "4PLbw",I) , 
> ##D                    customItems=list("4PLbw"=fourPLbetw), pars = "values")                
> ##D # select dimensions
> ##D ind <- intersect( grep("T2",mod3.pars$item) , which( mod3.pars$name == "dimItem" ) )
> ##D mod3.pars[ind,"value"] <- 2
> ##D # set item parameters low and upp to non-estimated
> ##D ind <- which( mod3.pars$name %in% c("low","upp") ) 
> ##D mod3.pars[ind,"est"] <- FALSE
> ##D 
> ##D # estimate 2PL model
> ##D mod3 <- mirt::mirt(dat, mirtmodel$model, itemtype=rep( "4PLbw",I) , 
> ##D                 customItems=list("4PLbw"=fourPLbetw), pars = mod3.pars , verbose=TRUE , 
> ##D                 technical = list(NCYCLES=50)  )
> ##D mirt.wrapper.coef(mod3)
> ##D 
> ##D #****** estimate model in lavaan
> ##D library(lavaan)
> ##D 
> ##D # specify syntax
> ##D lavmodel <- "
> ##D              #**** T1
> ##D              F1 =~ a1*I1T1+a2*I2T1+a3*I3T1+a4*I4T1+a5*I5T1+a6*I6T1
> ##D              I1T1 | b1*t1 ; I2T1 | b2*t1 ; I3T1 | b3*t1 ; I4T1 | b4*t1
> ##D              I5T1 | b5*t1 ; I6T1 | b6*t1
> ##D              F1 ~~ 1*F1
> ##D              #**** T2
> ##D              F2 =~ a3*I3T2+a4*I4T2+a5*I5T2+a6*I6T2+a7*I7T2+a8*I8T2             
> ##D              I3T2 | b3*t1 ; I4T2 | b4*t1 ; I5T2 | b5*t1 ; I6T2 | b6*t1
> ##D              I7T2 | b7*t1 ; I8T2 | b8*t1 
> ##D              F2 ~~ NA*F2
> ##D              F2 ~ 1 
> ##D              #*** covariance
> ##D              F1 ~~ F2                          
> ##D                 "                       
> ##D # estimate model using theta parameterization                        
> ##D mod3lav <- lavaan::cfa( data=dat , model=lavmodel,
> ##D             std.lv = TRUE , ordered=colnames(dat) , parameterization="theta")
> ##D summary(mod3lav , standardized=TRUE , fit.measures=TRUE , rsquare=TRUE)
> ##D 
> ##D #*************************************************
> ##D # Model 4: Linking with items of different item slope groups
> ##D #*************************************************
> ##D 
> ##D data(data.long)
> ##D dat <- data.long
> ##D # dataset for T1
> ##D dat1 <- dat[ , grep( "T1" , colnames(dat) ) ]
> ##D colnames(dat1) <- gsub("T1","" , colnames(dat1) )
> ##D # dataset for T2
> ##D dat2 <- dat[ , grep( "T2" , colnames(dat) ) ]
> ##D colnames(dat2) <- gsub("T2","" , colnames(dat2) )
> ##D 
> ##D # 2PL model with slope groups T1
> ##D mod1 <- rasch.mml2( dat1 , est.a = c( rep(1,2) , rep(2,4) ) ) 
> ##D summary(mod1)
> ##D 
> ##D # 2PL model with slope groups T2
> ##D mod2 <- rasch.mml2( dat2 , est.a = c( rep(1,4) , rep(2,2) ) ) 
> ##D summary(mod2)
> ##D 
> ##D #------- Link 1: Haberman Linking
> ##D # collect item parameters
> ##D dfr1 <- data.frame( "study1" , mod1$item$item , mod1$item$a , mod1$item$b )
> ##D dfr2 <- data.frame( "study2" , mod2$item$item , mod2$item$a , mod2$item$b )
> ##D colnames(dfr2) <- colnames(dfr1) <- c("study" , "item" , "a" , "b" )
> ##D itempars <- rbind( dfr1 , dfr2 )
> ##D # Linking
> ##D link1 <- linking.haberman(itempars=itempars)
> ##D 
> ##D #------- Link 2: Invariance alignment method
> ##D # create objects for invariance.alignment
> ##D nu <- rbind( c(mod1$item$thresh,NA,NA) , c(NA,NA,mod2$item$thresh) )
> ##D lambda <- rbind( c(mod1$item$a,NA,NA) , c(NA,NA,mod2$item$a ) )
> ##D colnames(lambda) <- colnames(nu) <- paste0("I",1:8)
> ##D rownames(lambda) <- rownames(nu) <- c("T1" , "T2")
> ##D # Linking
> ##D link2a <- invariance.alignment( lambda , nu )
> ##D summary(link2a)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.long", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.mcdonald")
> ### * data.mcdonald
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.mcdonald
> ### Title: Some Datasets from McDonald's _Test Theory_ Book
> ### Aliases: data.mcdonald.act15 data.mcdonald.LSAT6 data.mcdonald.rape
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: LSAT6 data	| Chapter 12 McDonald (1999)
> ##D #############################################################################	
> ##D data(data.mcdonald.act15)
> ##D 
> ##D #************
> ##D # Model 1: 2-parameter normal ogive model
> ##D 
> ##D #++ NOHARM estimation
> ##D I <- ncol(dat)
> ##D # covariance structure
> ##D P.pattern <- matrix( 0 , ncol=1 , nrow=1 )
> ##D P.init <- 1+0*P.pattern
> ##D # fix all entries in the loading matrix to 1
> ##D F.pattern <- matrix( 1 , nrow=I , ncol=1 )
> ##D F.init <- F.pattern        
> ##D # estimate model
> ##D mod1a <- sirt::R2noharm( dat = dat , model.type="CFA" , F.pattern = F.pattern , 
> ##D              F.init = F.init , P.pattern = P.pattern , P.init = P.init ,
> ##D              writename = "LSAT6__1dim_2pno" , noharm.path = noharm.path , dec ="," )            
> ##D summary(mod1a , logfile="LSAT6__1dim_2pno__SUMMARY")
> ##D 
> ##D #++ pairwise marginal maximum likelihood estimation using the probit link
> ##D mod1b <- sirt::rasch.pml3( dat , est.a=1:I , est.sigma=FALSE)
> ##D 
> ##D #************
> ##D # Model 2: 1-parameter normal ogive model
> ##D 
> ##D #++ NOHARM estimation
> ##D # covariance structure
> ##D P.pattern <- matrix( 0 , ncol=1 , nrow=1 )
> ##D P.init <- 1+0*P.pattern
> ##D # fix all entries in the loading matrix to 1
> ##D F.pattern <- matrix( 2 , nrow=I , ncol=1 )
> ##D F.init <- 1+0*F.pattern       
> ##D # estimate model
> ##D mod2a <- sirt::R2noharm( dat = dat , model.type="CFA" , F.pattern = F.pattern ,
> ##D                 F.init = F.init , P.pattern = P.pattern , P.init = P.init , 
> ##D                 writename = "LSAT6__1dim_1pno" , noharm.path = noharm.path , dec ="," )            
> ##D summary(mod2a , logfile="LSAT6__1dim_1pno__SUMMARY")
> ##D 
> ##D # PMML estimation
> ##D mod2b <- sirt::rasch.pml3( dat , est.a=rep(1,I) , est.sigma=FALSE )
> ##D summary(mod2b)
> ##D 
> ##D #************
> ##D # Model 3: 3-parameter normal ogive model with fixed guessing parameters
> ##D 
> ##D #++ NOHARM estimation
> ##D # covariance structure
> ##D P.pattern <- matrix( 0 , ncol=1 , nrow=1 )
> ##D P.init <- 1+0*P.pattern
> ##D # fix all entries in the loading matrix to 1
> ##D F.pattern <- matrix( 1 , nrow=I , ncol=1 )
> ##D F.init <- 1+0*F.pattern      
> ##D # estimate model
> ##D mod <- sirt::R2noharm( dat = dat , model.type="CFA" ,  guesses=rep(.2,I) , 
> ##D             F.pattern = F.pattern , F.init = F.init , P.pattern = P.pattern ,
> ##D             P.init = P.init , writename = "LSAT6__1dim_3pno" , 
> ##D             noharm.path = noharm.path , dec ="," )            
> ##D summary(mod , logfile="LSAT6__1dim_3pno__SUMMARY")
> ##D 
> ##D #++ logistic link function employed in smirt function 
> ##D mod1d <- sirt::smirt(dat, Qmatrix=F.pattern, est.a= matrix(1:I,I,1), c.init=rep(.2,I))
> ##D summary(mod1d)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: ACT15 data	| Chapter 6 McDonald (1999)
> ##D #############################################################################	
> ##D data(data.mcdonald.act15)
> ##D pm <- data.mcdonald.act15
> ##D 
> ##D #************
> ##D # Model 1: 2-dimensional exploratory factor analysis
> ##D mod1 <- sirt::R2noharm( pm=pm , n=1000, model.type="EFA" , dimensions=2 , 
> ##D              writename = "ACT15__efa_2dim" , noharm.path = noharm.path , dec ="," )            
> ##D summary(mod1)
> ##D 
> ##D #************
> ##D # Model 2: 2-dimensional independent clusters basis solution
> ##D P.pattern <- matrix(1,2,2)
> ##D diag(P.pattern) <- 0
> ##D P.init <- 1+0*P.pattern
> ##D F.pattern <- matrix(0,15,2)
> ##D F.pattern[ c(1:5,11:15),1] <- 1
> ##D F.pattern[ c(6:10,11:15),2] <- 1
> ##D F.init <- F.pattern
> ##D 
> ##D # estimate model
> ##D mod2 <- sirt::R2noharm( pm=pm , n=1000 ,  model.type="CFA" , F.pattern = F.pattern , 
> ##D             F.init = F.init , P.pattern = P.pattern ,P.init = P.init , 
> ##D             writename = "ACT15_indep_clusters" , noharm.path = noharm.path , dec ="," )       
> ##D summary(mod2)
> ##D 
> ##D #************
> ##D # Model 3: Hierarchical model
> ##D 
> ##D P.pattern <- matrix(0,3,3)
> ##D P.init <- P.pattern
> ##D diag(P.init) <- 1
> ##D F.pattern <- matrix(0,15,3)
> ##D F.pattern[,1] <- 1	# all items load on g factor
> ##D F.pattern[ c(1:5,11:15),2] <- 1   # Items 1-5 and 11-15 load on first nested factor
> ##D F.pattern[ c(6:10,11:15),3] <- 1  # Items 6-10 and 11-15 load on second nested factor
> ##D F.init <- F.pattern
> ##D 
> ##D # estimate model
> ##D mod3 <- sirt::R2noharm( pm=pm , n=1000 ,  model.type="CFA" , F.pattern = F.pattern , 
> ##D            F.init = F.init , P.pattern = P.pattern , P.init = P.init , 
> ##D            writename = "ACT15_hierarch_model" , noharm.path = noharm.path , dec ="," )       
> ##D summary(mod3)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: Rape myth scale | Chapter 15 McDonald (1999)
> ##D #############################################################################   
> ##D data(data.mcdonald.rape)
> ##D lambda <- data.mcdonald.rape$lambda
> ##D nu <- data.mcdonald.rape$nu
> ##D 
> ##D # obtain multiplier for factor loadings (Formula 15.5)
> ##D k <- sum( lambda[1,] * lambda[2,] ) / sum( lambda[2,]^2 )
> ##D   ##   [1] 1.263243
> ##D 
> ##D # additive parameter (Formula 15.7)
> ##D c <- sum( lambda[2,]*(nu[1,]-nu[2,]) ) / sum( lambda[2,]^2 )
> ##D   ##   [1] 1.247697
> ##D 
> ##D # SD in the female group
> ##D 1/k
> ##D   ##   [1] 0.7916132
> ##D 
> ##D # M in the female group
> ##D - c/k
> ##D   ##   [1] -0.9876932
> ##D 
> ##D # Burt's coefficient of factorial congruence (Formula 15.10a)
> ##D sum( lambda[1,] * lambda[2,] ) / sqrt( sum( lambda[1,]^2 ) * sum( lambda[2,]^2 ) )
> ##D   ##   [1] 0.9727831
> ##D 
> ##D # congruence for mean parameters
> ##D sum(  (nu[1,]-nu[2,]) * lambda[2,] ) / sqrt( sum( (nu[1,]-nu[2,])^2 ) * sum( lambda[2,]^2 ) )
> ##D   ##   [1] 0.968176
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.mcdonald", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.mixed1")
> ### * data.mixed1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.mixed1
> ### Title: Dataset with Mixed Dichotomous and Polytomous Item Responses
> ### Aliases: data.mixed1
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(data.mixed1)
> apply( data.mixed1 , 2 , max )
I01 I02 I03 I04 I05 I06 I07 I08 I09 I10 I11 I12 I13 I14 I15 I16 I17 I18 I19 I20 
  1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 
I21 I22 I23 I24 I25 I26 I27 I28 I29 I30 I31 I32 I33 I34 I35 I36 I37 
  4   4   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 
>   ##   I01 I02 I03 I04 I05 I06 I07 I08 I09 I10 I11 I12 I13 I14 I15 I16 
>   ##     1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1 
>   ##   I17 I18 I19 I20 I21 I22 I23 I24 I25 I26 I27 I28 I29 I30 I31 I32 
>   ##     1   1   1   1   4   4   1   1   1   1   1   1   1   1   1   1 
>   ##   I33 I34 I35 I36 I37 
>   ##     1   1   1   1   1 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.mixed1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.pirlsmissing")
> ### * data.pirlsmissing
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.pirlsmissing
> ### Title: Dataset from PIRLS Study with Missing Responses
> ### Aliases: data.pirlsmissing
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(data.pirlsmissing)
> # inspect missing rates
> round( colMeans( data.pirlsmissing==9 ) , 3 )
  idstud  country  studwgt  R31G01M  R31G02C  R31G03M  R31G04C  R31G05M 
   0.000    0.000    0.000    0.009    0.076    0.012    0.203    0.018 
 R31G06M  R31G07M R31G08CZ R31G08CA R31G08CB  R31G09M  R31G10C  R31G11M 
   0.010    0.020    0.189    0.225    0.252    0.019    0.126    0.023 
 R31G12C R31G13CZ R31G13CA R31G13CB R31G13CC  R31G14M  R31P01M  R31P02C 
   0.202    0.170    0.198    0.220    0.223    0.074    0.013    0.039 
 R31P03C  R31P04M  R31P05C  R31P06C  R31P07C  R31P08M  R31P09C  R31P10M 
   0.056    0.012    0.075    0.043    0.074    0.024    0.062    0.025 
 R31P11M  R31P12M  R31P13M  R31P14C  R31P15C  R31P16C 
   0.027    0.030    0.030    0.126    0.130    0.127 
>   ##    idstud  country  studwgt  R31G01M  R31G02C  R31G03M  R31G04C  R31G05M 
>   ##     0.000    0.000    0.000    0.009    0.076    0.012    0.203    0.018 
>   ##   R31G06M  R31G07M R31G08CZ R31G08CA R31G08CB  R31G09M  R31G10C  R31G11M 
>   ##     0.010    0.020    0.189    0.225    0.252    0.019    0.126    0.023 
>   ##   R31G12C R31G13CZ R31G13CA R31G13CB R31G13CC  R31G14M  R31P01M  R31P02C 
>   ##     0.202    0.170    0.198    0.220    0.223    0.074    0.013    0.039 
>   ##   R31P03C  R31P04M  R31P05C  R31P06C  R31P07C  R31P08M  R31P09C  R31P10M 
>   ##     0.056    0.012    0.075    0.043    0.074    0.024    0.062    0.025 
>   ##   R31P11M  R31P12M  R31P13M  R31P14C  R31P15C  R31P16C 
>   ##     0.027    0.030    0.030    0.126    0.130    0.127 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.pirlsmissing", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.read")
> ### * data.read
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.read
> ### Title: Dataset Reading
> ### Aliases: data.read
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(data.read)
> ##D dat <- data.read
> ##D I <- ncol(dat)
> ##D 
> ##D # list of needed packages for the following examples
> ##D packages <- scan(what="character")
> ##D      eRm  ltm  TAM mRm  CDM  mirt psychotools  IsingFit  igraph  qgraph  pcalg 
> ##D      poLCA  randomLCA psychomix MplusAutomation lavaan
> ##D      
> ##D # install packages     
> ##D if (FALSE){  # default is FALSE
> ##D    install.packages(packages)
> ##D    	  }
> ##D # load packages
> ##D for (pack in packages){ 
> ##D     library(pack, character.only=TRUE) 
> ##D         }
> ##D 
> ##D #*****************************************************
> ##D # Model 1: Rasch model
> ##D #*****************************************************
> ##D 
> ##D #----  M1a: rasch.mml2 (in sirt)
> ##D mod1a <- sirt::rasch.mml2(dat)
> ##D summary(mod1a)
> ##D 
> ##D #----  M1b: smirt (in sirt)
> ##D Qmatrix <- matrix(1,nrow=I , ncol=1)
> ##D mod1b <- sirt::smirt(dat,Qmatrix=Qmatrix)
> ##D summary(mod1b)
> ##D 
> ##D #----  M1c: gdm (in CDM)
> ##D theta.k <- seq(-6,6,len=21)
> ##D mod1c <- CDM::gdm(dat,theta.k=theta.k,irtmodel="1PL", skillspace="normal")
> ##D summary(mod1c)
> ##D 
> ##D #----  M1d: tam.mml (in TAM)
> ##D mod1d <- TAM::tam.mml( resp=dat )
> ##D summary(mod1d)
> ##D 
> ##D #----  M1e: RM (in eRm) 
> ##D mod1e <- eRm::RM( dat )
> ##D   # eRm uses Conditional Maximum Likelihood (CML) as the estimation method.
> ##D summary(mod1e)
> ##D eRm::plotPImap(mod1e)
> ##D 
> ##D #----  M1f: mrm (in mRm)
> ##D mod1f <- mRm::mrm( dat , cl=1)   # CML estimation
> ##D mod1f$beta  # item parameters
> ##D 
> ##D #----  M1g: mirt (in mirt)
> ##D mod1g <- mirt::mirt( dat , model=1 , itemtype="Rasch" , verbose=TRUE )
> ##D print(mod1g)
> ##D summary(mod1g)
> ##D coef(mod1g)
> ##D     # arrange coefficients in nicer layout
> ##D mirt.wrapper.coef(mod1g)$coef  
> ##D 
> ##D #----  M1h: rasch (in ltm)
> ##D mod1h <- ltm::rasch( dat  , control=list(verbose=TRUE ) )
> ##D summary(mod1h)
> ##D coef(mod1h)
> ##D 
> ##D #----  M1i: RaschModel.fit (in psychotools)
> ##D mod1i <- psychotools::RaschModel.fit(dat)  # CML estimation
> ##D summary(mod1i)
> ##D plot(mod1i)
> ##D 
> ##D #----  M1j: noharm.sirt (in sirt)
> ##D Fpatt <- matrix( 0 , I , 1 )
> ##D Fval <- 1 + 0*Fpatt
> ##D Ppatt <- Pval <- matrix(1,1,1)
> ##D mod1j <- sirt::noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval )
> ##D summary(mod1j)
> ##D   #   Normal-ogive model, multiply item discriminations with constant D=1.7. 
> ##D   #   The same holds for other examples with noharm.sirt and R2noharm.
> ##D plot(mod1j) 
> ##D 
> ##D #----  M1k: rasch.pml3 (in sirt)
> ##D mod1k <- sirt::rasch.pml3( dat=dat)
> ##D   #         pairwise marginal maximum likelihood estimation
> ##D summary(mod1k)
> ##D 
> ##D #----  M1l: running Mplus (using MplusAutomation package)
> ##D mplus_path <- "c:/Mplus7/Mplus.exe"    # locate Mplus executable
> ##D   # specify Mplus object
> ##D mplusmod <- MplusAutomation::mplusObject(
> ##D     TITLE = "1PL in Mplus ;" , 
> ##D     VARIABLE = paste0( "CATEGORICAL ARE " , paste0(colnames(dat),collapse=" ") ) , 
> ##D     MODEL = "
> ##D        ! fix all item loadings to 1
> ##D        F1 BY A1@1 A2@1 A3@1 A4@1 ;
> ##D        F1 BY B1@1 B2@1 B3@1 B4@1 ;
> ##D        F1 BY C1@1 C2@1 C3@1 C4@1 ;
> ##D        ! estimate variance
> ##D        F1 ;
> ##D             ",
> ##D     ANALYSIS = "ESTIMATOR=MLR;" , 
> ##D     OUTPUT = "stand;" ,
> ##D     usevariables = colnames(dat)  ,  rdata = dat )
> ##D   # write Mplus syntax
> ##D filename <- "mod1u"   # specify file name
> ##D   # create Mplus syntaxes
> ##D res2 <- MplusAutomation::mplusModeler(object = mplusmod , dataout = paste0(filename,".dat") , 
> ##D                modelout= paste0(filename,".inp"), run = 0 )         
> ##D   # run Mplus model
> ##D MplusAutomation::runModels( filefilter = paste0(filename,".inp"), Mplus_command = mplus_path)
> ##D   # alternatively, the system() command can also be used
> ##D   # get results
> ##D mod1l <- MplusAutomation::readModels(target = getwd() , filefilter = filename )
> ##D mod1l$summaries    # summaries
> ##D mod1l$parameters$unstandardized   # parameter estimates
> ##D 
> ##D #*****************************************************
> ##D # Model 2: 2PL model
> ##D #*****************************************************
> ##D 
> ##D #----  M2a: rasch.mml2 (in sirt)
> ##D mod2a <- sirt::rasch.mml2(dat , est.a=1:I)
> ##D summary(mod2a)
> ##D 
> ##D #----  M2b: smirt (in sirt)
> ##D mod2b <- sirt::smirt(dat,Qmatrix=Qmatrix,est.a="2PL")
> ##D summary(mod2b)
> ##D 
> ##D #----  M2c: gdm (in CDM)
> ##D mod2c <- CDM::gdm(dat,theta.k=theta.k,irtmodel="2PL", skillspace="normal")
> ##D summary(mod2c)
> ##D 
> ##D #----  M2d: tam.mml (in TAM)
> ##D mod2d <- TAM::tam.mml.2pl( resp=dat )
> ##D summary(mod2d)
> ##D 
> ##D #----  M2e: mirt (in mirt)
> ##D mod2e <- mirt::mirt( dat , model=1 , itemtype="2PL" )
> ##D print(mod2e)
> ##D summary(mod2e)
> ##D mirt.wrapper.coef(mod1g)$coef
> ##D 
> ##D #----  M2f: ltm (in ltm)
> ##D mod2f <- ltm::ltm( dat ~ z1 , control=list(verbose=TRUE ) )
> ##D summary(mod2f)
> ##D coef(mod2f)
> ##D plot(mod2f)
> ##D 
> ##D #----  M2g: R2noharm (in NOHARM, running from within R using sirt package)
> ##D   # define noharm.path where 'NoharmCL.exe' is located
> ##D noharm.path <- "c:/NOHARM"
> ##D   # covariance matrix
> ##D P.pattern <- matrix( 1 , ncol=1 , nrow=1 )
> ##D P.init <- P.pattern
> ##D P.init[1,1] <- 1
> ##D   # loading matrix
> ##D F.pattern <- matrix(1,I,1)
> ##D F.init <- F.pattern
> ##D   # estimate model
> ##D mod2g <- sirt::R2noharm( dat = dat , model.type="CFA" , F.pattern = F.pattern , 
> ##D              F.init = F.init , P.pattern = P.pattern , P.init = P.init , 
> ##D              writename = "ex2g" , noharm.path = noharm.path  , dec ="," )
> ##D summary(mod2g)
> ##D 
> ##D #----  M2h: noharm.sirt (in sirt)
> ##D mod2h <- sirt::noharm.sirt( dat=dat , Ppatt=P.pattern,Fpatt=F.pattern , 
> ##D               Fval=F.init , Pval=P.init )
> ##D summary(mod2h)
> ##D plot(mod2h)
> ##D 
> ##D #----  M2i: rasch.pml2 (in sirt)
> ##D mod2i <- sirt::rasch.pml2(dat, est.a=1:I)
> ##D summary(mod2i)
> ##D 
> ##D #----  M2j: WLSMV estimation with cfa (in lavaan)
> ##D lavmodel <- "F =~ A1+A2+A3+A4+B1+B2+B3+B4+
> ##D                         C1+C2+C3+C4"
> ##D mod2j <- lavaan::cfa( data=dat , model=lavmodel, std.lv = TRUE, ordered=colnames(dat))
> ##D summary(mod2j , standardized=TRUE , fit.measures=TRUE , rsquare=TRUE)
> ##D 
> ##D #*****************************************************
> ##D # Model 3: 3PL model (note that results can be quite unstable!)
> ##D #*****************************************************
> ##D 
> ##D #----  M3a: rasch.mml2 (in sirt)
> ##D mod3a <- sirt::rasch.mml2(dat , est.a=1:I, est.c=1:I)
> ##D summary(mod3a)
> ##D 
> ##D #----  M3b: smirt (in sirt)
> ##D mod3b <- sirt::smirt(dat,Qmatrix=Qmatrix,est.a="2PL" , est.c=1:I)
> ##D summary(mod3b)
> ##D 
> ##D #----  M3c: mirt (in mirt)
> ##D mod3c <- mirt::mirt( dat , model=1 , itemtype="3PL" , verbose=TRUE)
> ##D summary(mod3c)
> ##D coef(mod3c)
> ##D   # stabilize parameter estimating using informative priors for guessing parameters
> ##D mirtmodel <- mirt::mirt.model("
> ##D             F = 1-12
> ##D             PRIOR = (1-12, g, norm, -1.38, 0.25)
> ##D             ")
> ##D   # a prior N(-1.38,.25) is specified for transformed guessing parameters: qlogis(g)
> ##D   # simulate values from this prior for illustration
> ##D N <- 100000
> ##D logit.g <- rnorm(N, mean=-1.38 , sd=sqrt(.5) )
> ##D plot( density(logit.g) )  # transformed qlogis(g)
> ##D plot( density(plogis(logit.g)) )  # g parameters
> ##D   # estimate 3PL with priors
> ##D mod3c1 <- mirt::mirt(dat, mirtmodel, itemtype = "3PL",verbose=TRUE)
> ##D coef(mod3c1)
> ##D   # In addition, set upper bounds for g parameters of .35
> ##D mirt.pars <- mirt::mirt( dat , mirtmodel , itemtype = "3PL" ,  pars="values")
> ##D ind <- which( mirt.pars$name == "g" )
> ##D mirt.pars[ ind , "value" ] <- plogis(-1.38)
> ##D mirt.pars[ ind , "ubound" ] <- .35
> ##D   # prior distribution for slopes
> ##D ind <- which( mirt.pars$name == "a1" )
> ##D mirt.pars[ ind , "prior_1" ] <- 1.3
> ##D mirt.pars[ ind , "prior_2" ] <- 2
> ##D mod3c2 <- mirt::mirt(dat, mirtmodel, itemtype = "3PL",
> ##D                 pars=mirt.pars,verbose=TRUE , technical=list(NCYCLES=100) )
> ##D coef(mod3c2)
> ##D mirt.wrapper.coef(mod3c2)
> ##D 
> ##D #----  M3d: ltm (in ltm)
> ##D mod3d <- ltm::tpm( dat , control=list(verbose=TRUE ) , max.guessing=.3)
> ##D summary(mod3d)
> ##D coef(mod3d) # => numerical instabilities
> ##D 
> ##D #*****************************************************
> ##D # Model 4: 3-dimensional Rasch model
> ##D #*****************************************************
> ##D 
> ##D # define Q-matrix
> ##D Q <- matrix( 0 , nrow=12 , ncol=3 )
> ##D Q[ cbind(1:12 , rep(1:3,each=4) ) ] <- 1
> ##D rownames(Q) <- colnames(dat)
> ##D colnames(Q) <- c("A","B","C")
> ##D 
> ##D # define nodes
> ##D theta.k <- seq(-6,6,len=13 )
> ##D 
> ##D #----  M4a: smirt (in sirt)
> ##D mod4a <- sirt::smirt(dat,Qmatrix=Q,irtmodel="comp" , theta.k=theta.k , maxiter=30)
> ##D summary(mod4a)
> ##D 
> ##D #----  M4b: rasch.mml2 (in sirt)
> ##D mod4b <- sirt::rasch.mml2(dat,Q=Q,theta.k=theta.k , mmliter=30)
> ##D summary(mod4b)
> ##D 
> ##D #----  M4c: gdm (in CDM)
> ##D mod4c <- CDM::gdm( dat , irtmodel="1PL" , theta.k=theta.k , skillspace="normal" , 
> ##D             Qmatrix=Q , maxiter=30 , centered.latent=TRUE )
> ##D summary(mod4c)
> ##D 
> ##D #----  M4d: tam.mml (in TAM)
> ##D mod4d <- TAM::tam.mml( resp=dat , Q=Q , control=list(nodes=theta.k , maxiter=30) )
> ##D summary(mod4d)
> ##D 
> ##D #----  M4e: R2noharm (in NOHARM, running from within R using sirt package)
> ##D noharm.path <- "c:/NOHARM"
> ##D   # covariance matrix
> ##D P.pattern <- matrix( 1 , ncol=3 , nrow=3 )
> ##D P.init <- 0.8+0*P.pattern
> ##D diag(P.init) <- 1
> ##D   # loading matrix
> ##D F.pattern <- 0*Q
> ##D F.init <- Q
> ##D   # estimate model
> ##D mod4e <- sirt::R2noharm( dat = dat , model.type="CFA" , F.pattern = F.pattern , 
> ##D     F.init = F.init , P.pattern = P.pattern , P.init = P.init , 
> ##D     writename = "ex4e" , noharm.path = noharm.path  , dec ="," )
> ##D summary(mod4e)
> ##D 
> ##D #----  M4f: mirt (in mirt)
> ##D cmodel <- mirt::mirt.model("
> ##D      F1 = 1-4
> ##D      F2 = 5-8 
> ##D      F3 = 9-12
> ##D      # equal item slopes correspond to the Rasch model
> ##D      CONSTRAIN = (1-4, a1), (5-8, a2) , (9-12,a3)
> ##D      COV = F1*F2, F1*F3 , F2*F3 
> ##D      " )
> ##D mod4f <- mirt::mirt(dat, cmodel , verbose=TRUE)
> ##D summary(mod4f)
> ##D 
> ##D #*****************************************************
> ##D # Model 5: 3-dimensional 2PL model
> ##D #*****************************************************
> ##D 
> ##D #----  M5a: smirt (in sirt)
> ##D mod5a <- sirt::smirt(dat,Qmatrix=Q,irtmodel="comp" , est.a="2PL" , theta.k=theta.k , 
> ##D                  maxiter=30)
> ##D summary(mod5a)
> ##D 
> ##D #----  M5b: rasch.mml2 (in sirt)
> ##D mod5b <- sirt::rasch.mml2(dat,Q=Q,theta.k=theta.k ,est.a=1:12, mmliter=30)
> ##D summary(mod5b)
> ##D 
> ##D #----  M5c: gdm (in CDM)
> ##D mod5c <- CDM::gdm( dat , irtmodel="2PL" , theta.k=theta.k , skillspace="loglinear" , 
> ##D             Qmatrix=Q , maxiter=30 , centered.latent=TRUE ,
> ##D             standardized.latent=TRUE)
> ##D summary(mod5c)
> ##D 
> ##D #----  M5d: tam.mml (in TAM)
> ##D mod5d <- TAM::tam.mml.2pl( resp=dat , Q=Q , control=list(nodes=theta.k , maxiter=30) )
> ##D summary(mod5d)
> ##D 
> ##D #----  M5e: R2noharm (in NOHARM, running from within R using sirt package)
> ##D noharm.path <- "c:/NOHARM"
> ##D   # covariance matrix
> ##D P.pattern <- matrix( 1 , ncol=3 , nrow=3 )
> ##D diag(P.pattern) <- 0
> ##D P.init <- 0.8+0*P.pattern
> ##D diag(P.init) <- 1
> ##D   # loading matrix
> ##D F.pattern <- Q
> ##D F.init <- Q
> ##D   # estimate model
> ##D mod5e <- sirt::R2noharm( dat = dat , model.type="CFA" , F.pattern = F.pattern , 
> ##D     F.init = F.init , P.pattern = P.pattern , P.init = P.init , 
> ##D     writename = "ex5e" , noharm.path = noharm.path  , dec ="," )
> ##D summary(mod5e)
> ##D 
> ##D #----  M5f: mirt (in mirt)
> ##D cmodel <- mirt::mirt.model("
> ##D    F1 = 1-4
> ##D    F2 = 5-8
> ##D    F3 = 9-12
> ##D    COV = F1*F2, F1*F3 , F2*F3 
> ##D    "  )
> ##D mod5f <- mirt::mirt(dat, cmodel , verbose=TRUE)
> ##D summary(mod5f)
> ##D 
> ##D #*****************************************************
> ##D # Model 6: Network models (Graphical models)
> ##D #*****************************************************
> ##D 
> ##D #----  M6a: Ising model using the IsingFit package (undirected graph)
> ##D #        - fit Ising model using the "OR rule" (AND=FALSE)
> ##D mod6a <- IsingFit::IsingFit(x=dat, family="binomial" , AND=FALSE)
> ##D summary(mod6a)
> ##D ##           Network Density:                 0.29 
> ##D ##    Gamma:                  0.25 
> ##D ##    Rule used:              Or-rule 
> ##D # plot results
> ##D qgraph(mod6a$weiadj,fade = FALSE)
> ##D 
> ##D #**-- graph estimation using pcalg package
> ##D 
> ##D # some packages from Bioconductor must be downloaded at first (if not yet done)
> ##D if (FALSE){  # set 'if (TRUE)' if packages should be downloaded 
> ##D      source("http://bioconductor.org/biocLite.R")
> ##D      biocLite("RBGL")
> ##D      biocLite("Rgraphviz")
> ##D 	}
> ##D 
> ##D #----  M6b: graph estimation based on Pearson correlations
> ##D V <- colnames(dat)
> ##D n <- nrow(dat)
> ##D mod6b <- pcalg::pc(suffStat = list(C = cor(dat), n = n ),
> ##D              indepTest = gaussCItest, ## indep.test: partial correlations
> ##D              alpha=0.05, labels = V, verbose = TRUE)
> ##D plot(mod6b)
> ##D # plot in qgraph package
> ##D qgraph::qgraph(mod6b , label.color= rep( c( "red" , "blue","darkgreen" ) , each=4 ) ,
> ##D          edge.color="black")
> ##D summary(mod6b)
> ##D 
> ##D #----  M6c: graph estimation based on tetrachoric correlations
> ##D mod6c <- pcalg::pc(suffStat = list(C = tetrachoric2(dat)$rho, n = n ),
> ##D              indepTest = gaussCItest, alpha=0.05, labels = V, verbose = TRUE)
> ##D plot(mod6c)
> ##D summary(mod6c)
> ##D 
> ##D #----  M6d: Statistical implicative analysis (in sirt)
> ##D mod6d <- sirt::sia.sirt(dat , significance=.85 )
> ##D   # plot results with igraph and qgraph package
> ##D plot( mod6d$igraph.obj  , vertex.shape="rectangle" , vertex.size=30 )
> ##D qgraph::qgraph( mod6d$adj.matrix )
> ##D 
> ##D #*****************************************************
> ##D # Model 7: Latent class analysis with 3 classes
> ##D #*****************************************************
> ##D 
> ##D #----  M7a: randomLCA (in randomLCA)
> ##D   #        - use two trials of starting values
> ##D mod7a <- randomLCA::randomLCA(dat,nclass=3, notrials=2, verbose=TRUE)
> ##D summary(mod7a)
> ##D plot(mod7a,type="l" , xlab="Item")
> ##D 
> ##D #----  M7b: rasch.mirtlc (in sirt)
> ##D mod7b <- sirt::rasch.mirtlc( dat , Nclasses = 3 ,seed= -30 ,  nstarts=2 )   
> ##D summary(mod7b)
> ##D matplot( t(mod7b$pjk) , type="l" , xlab="Item" )
> ##D 
> ##D #----  M7c: poLCA (in poLCA)
> ##D   #   define formula for outcomes
> ##D f7c <- paste0( "cbind(" , paste0(colnames(dat),collapse=",") , ") ~ 1 " )
> ##D dat1 <- as.data.frame( dat + 1 ) # poLCA needs integer values from 1,2,..
> ##D mod7c <- poLCA::poLCA( as.formula(f7c),dat1,nclass=3 , verbose=TRUE)
> ##D plot(mod7c)
> ##D 
> ##D #----  M7d: gom.em (in sirt) 
> ##D   #    - the latent class model is a special grade of membership model
> ##D mod7d <- sirt::gom.em( dat , K=3 , problevels=c(0,1) ,  model="GOM"  )            
> ##D summary(mod7d)
> ##D 
> ##D #---- - M7e: mirt (in mirt)
> ##D   # define three latent classes
> ##D Theta <- diag(3)
> ##D   # define mirt model
> ##D I <- ncol(dat)  # I = 12
> ##D mirtmodel <- mirt::mirt.model("
> ##D         C1 = 1-12
> ##D         C2 = 1-12 
> ##D         C3 = 1-12
> ##D         ")
> ##D   # get initial parameter values
> ##D mod.pars <- mirt::mirt(dat, model=mirtmodel ,  pars = "values")   
> ##D   # modify parameters: only slopes refer to item-class probabilities
> ##D set.seed(9976)
> ##D   # set starting values for class specific item probabilities
> ##D mod.pars[ mod.pars$name == "d" ,"value" ]  <- 0
> ##D mod.pars[ mod.pars$name == "d" ,"est" ]  <- FALSE
> ##D b1 <- qnorm( colMeans( dat ) )
> ##D mod.pars[ mod.pars$name == "a1" ,"value" ]  <- b1
> ##D   # random starting values for other classes
> ##D mod.pars[ mod.pars$name %in% c("a2","a3") ,"value" ]  <- b1+runif( 12*2 , -1 ,1 )
> ##D mod.pars
> ##D   #** define prior for latent class analysis
> ##D lca_prior <- function(Theta,Etable){
> ##D   # number of latent Theta classes
> ##D   TP <- nrow(Theta)
> ##D   # prior in initial iteration
> ##D   if ( is.null(Etable) ){ prior <- rep( 1/TP , TP ) }    
> ##D   # process Etable (this is correct for datasets without missing data)
> ##D   if ( ! is.null(Etable) ){  
> ##D     # sum over correct and incorrect expected responses 
> ##D     prior <- ( rowSums(Etable[ , seq(1,2*I,2)]) + rowSums(Etable[,seq(2,2*I,2)]) )/I
> ##D                  }
> ##D   prior <- prior / sum(prior)  
> ##D   return(prior)
> ##D }
> ##D   #** estimate model
> ##D mod7e <- mirt::mirt(dat, mirtmodel , pars = mod.pars , verbose=TRUE , 
> ##D             technical = list( customTheta=Theta , customPriorFun = lca_prior) )
> ##D   # compare estimated results
> ##D print(mod7e)
> ##D summary(mod7b)
> ##D   # The number of estimated parameters is incorrect because mirt does not correctly count
> ##D   # estimated parameters from the user customized  prior distribution.
> ##D mod7e@nest <- as.integer(sum(mod.pars$est) + 2)  # two additional class probabilities
> ##D   # extract log-likelihood
> ##D mod7e@logLik
> ##D   # compute AIC and BIC
> ##D ( AIC <- -2*mod7e@logLik+2*mod7e@nest )
> ##D ( BIC <- -2*mod7e@logLik+log(mod7e@Data$N)*mod7e@nest )
> ##D   # RMSEA and SRMSR fit statistic
> ##D mirt::M2(mod7e)     # TLI and CFI does not make sense in this example            
> ##D   #** extract item parameters
> ##D mirt.wrapper.coef(mod7e)
> ##D   #** extract class-specific item-probabilities
> ##D probs <- apply( coef1[ , c("a1","a2","a3") ] , 2 , plogis )
> ##D matplot( probs , type="l" , xlab="Item" , main="mirt::mirt")
> ##D   #** inspect estimated distribution
> ##D mod7e@Theta
> ##D mod7e@Prior[[1]]
> ##D 
> ##D #*****************************************************
> ##D # Model 8: Mixed Rasch model with two classes
> ##D #*****************************************************
> ##D 
> ##D #----  M8a: raschmix (in psychomix)
> ##D mod8a <- psychomix::raschmix(data= as.matrix(dat) , k = 2, scores = "saturated")
> ##D summary(mod8a)
> ##D 
> ##D #----  M8b: mrm (in mRm)
> ##D mod8b <- mRm::mrm(data.matrix=dat, cl=2)
> ##D mod8b$conv.to.bound
> ##D plot(mod8b)
> ##D print(mod8b)
> ##D 
> ##D #----  M8c: mirt (in mirt)
> ##D   #* define theta grid
> ##D theta.k <- seq( -5 , 5 , len=9 )
> ##D TP <- length(theta.k)
> ##D Theta <- matrix( 0 , nrow=2*TP , ncol=4)
> ##D Theta[1:TP,1:2] <- cbind(theta.k , 1 )
> ##D Theta[1:TP + TP,3:4] <- cbind(theta.k , 1 )
> ##D Theta
> ##D   # define model
> ##D I <- ncol(dat)  # I = 12
> ##D mirtmodel <- mirt::mirt.model("
> ##D         F1a = 1-12  # slope Class 1
> ##D         F1b = 1-12  # difficulty Class 1
> ##D         F2a = 1-12  # slope Class 2
> ##D         F2b = 1-12  # difficulty Class 2
> ##D         CONSTRAIN = (1-12,a1),(1-12,a3)
> ##D         ")
> ##D   # get initial parameter values
> ##D mod.pars <- mirt::mirt(dat, model=mirtmodel ,  pars = "values")   
> ##D   # set starting values for class specific item probabilities
> ##D mod.pars[ mod.pars$name == "d" ,"value" ]  <- 0
> ##D mod.pars[ mod.pars$name == "d" ,"est" ]  <- FALSE
> ##D mod.pars[ mod.pars$name == "a1" ,"value" ]  <- 1
> ##D mod.pars[ mod.pars$name == "a3" ,"value" ]  <- 1
> ##D   # initial values difficulties
> ##D b1 <-  qlogis( colMeans(dat) )
> ##D mod.pars[ mod.pars$name == "a2" ,"value" ]  <- b1
> ##D mod.pars[ mod.pars$name == "a4" ,"value" ]  <- b1 + runif(I , -1 , 1)
> ##D   #* define prior for mixed Rasch analysis
> ##D mixed_prior <- function(Theta,Etable){
> ##D   NC <- 2   # number of theta classes
> ##D   TP <- nrow(Theta) / NC
> ##D   prior1 <- dnorm( Theta[1:TP,1] )
> ##D   prior1 <- prior1 / sum(prior1) 
> ##D   if ( is.null(Etable) ){   prior <- c( prior1 , prior1 ) }
> ##D   if ( ! is.null(Etable) ){  
> ##D     prior <- ( rowSums( Etable[ , seq(1,2*I,2)] ) + 
> ##D                    rowSums( Etable[,seq(2,2*I,2)]) )/I
> ##D     a1 <- aggregate( prior , list( rep(1:NC , each=TP) ) , sum )
> ##D     a1[,2] <- a1[,2] / sum( a1[,2])
> ##D     # print some information during estimation
> ##D     cat( paste0( " Class proportions: " , 
> ##D               paste0( round(a1[,2] , 3 ) , collapse= " " ) ) , "\n")
> ##D     a1 <- rep( a1[,2] , each=TP )
> ##D     # specify mixture of two normal distributions
> ##D     prior <- a1*c(prior1,prior1)
> ##D          }  
> ##D   prior <- prior / sum(prior)  
> ##D   return(prior)
> ##D      }
> ##D   #* estimate model
> ##D mod8c <- mirt::mirt(dat, mirtmodel , pars=mod.pars , verbose=TRUE ,
> ##D         technical = list(  customTheta=Theta , customPriorFun = mixed_prior ) )
> ##D   # Like in Model 7e, the number of estimated parameters must be included.
> ##D mod8c@nest <- as.integer(sum(mod.pars$est) + 1)  
> ##D       # two class proportions and therefore one probability is freely estimated.
> ##D   #* extract item parameters
> ##D mirt.wrapper.coef(mod8c)
> ##D   #* estimated distribution
> ##D mod8c@Theta
> ##D mod8c@Prior
> ##D 
> ##D #----  M8d: tamaan (in TAM)
> ##D 
> ##D tammodel <- "
> ##D ANALYSIS:
> ##D   TYPE=MIXTURE ;
> ##D   NCLASSES(2);
> ##D   NSTARTS(7,20);
> ##D LAVAAN MODEL:
> ##D   F =~ A1__C4
> ##D   F ~~ F
> ##D ITEM TYPE:
> ##D   ALL(Rasch);
> ##D     "    
> ##D mod8d <- TAM::tamaan( tammodel , resp=dat )
> ##D summary(mod8d)
> ##D # plot item parameters
> ##D I <- 12
> ##D ipars <- mod8d$itempartable_MIXTURE[ 1:I , ]
> ##D plot( 1:I , ipars[,3] , type="o" , ylim= range( ipars[,3:4] ) , pch=16 ,
> ##D         xlab="Item" , ylab="Item difficulty")
> ##D lines( 1:I , ipars[,4] , type="l", col=2 , lty=2)
> ##D points( 1:I , ipars[,4] ,  col=2 , pch=2)
> ##D 
> ##D #*****************************************************
> ##D # Model 9: Mixed 2PL model with two classes
> ##D #*****************************************************
> ##D 
> ##D #----  M9a: tamaan (in TAM)
> ##D 
> ##D tammodel <- "
> ##D ANALYSIS:
> ##D   TYPE=MIXTURE ;
> ##D   NCLASSES(2);
> ##D   NSTARTS(10,30);
> ##D LAVAAN MODEL:
> ##D   F =~ A1__C4
> ##D   F ~~ F
> ##D ITEM TYPE:
> ##D   ALL(2PL);
> ##D     "       
> ##D mod9a <- TAM::tamaan( tammodel , resp=dat )
> ##D summary(mod9a)
> ##D 
> ##D #*****************************************************
> ##D # Model 10: Rasch testlet model
> ##D #*****************************************************
> ##D 
> ##D #----  M10a: tam.fa (in TAM)
> ##D dims <- substring( colnames(dat),1,1 )  # define dimensions
> ##D mod10a <- TAM::tam.fa( resp=dat , irtmodel="bifactor1" , dims=dims ,
> ##D                 control=list(maxiter=60) )
> ##D summary(mod10a)
> ##D 
> ##D #----  M10b: mirt (in mirt)
> ##D cmodel <- mirt::mirt.model("
> ##D         G = 1-12 
> ##D         A = 1-4
> ##D         B = 5-8
> ##D         C = 9-12
> ##D         CONSTRAIN = (1-12,a1), (1-4, a2), (5-8, a3) , (9-12,a4)    
> ##D       ")
> ##D mod10b <- mirt::mirt(dat, model=cmodel , verbose=TRUE)
> ##D summary(mod10b)
> ##D coef(mod10b)
> ##D mod10b@logLik   # equivalent is slot( mod10b , "logLik")
> ##D 
> ##D #alternatively, using a dimensional reduction approach (faster and better accuracy)
> ##D cmodel <- mirt::mirt.model("
> ##D       G = 1-12
> ##D       CONSTRAIN = (1-12,a1), (1-4, a2), (5-8, a3) , (9-12,a4)
> ##D      ")
> ##D item_bundles <- rep(c(1,2,3), each = 4)
> ##D mod10b1 <- mirt::bfactor(dat, model=item_bundles, model2=cmodel , verbose=TRUE)
> ##D coef(mod10b1)
> ##D 
> ##D #----  M10c: smirt (in sirt)
> ##D   # define Q-matrix
> ##D Qmatrix <- matrix(0,12,4)
> ##D Qmatrix[,1] <- 1
> ##D Qmatrix[ cbind( 1:12 , match( dims , unique(dims)) +1 ) ]  <- 1
> ##D   # uncorrelated factors
> ##D variance.fixed <- cbind( c(1,1,1,2,2,3) , c(2,3,4,3,4,4) , 0 )
> ##D   # estimate model
> ##D mod10c <- sirt::smirt( dat , Qmatrix=Qmatrix , irtmodel="comp" ,
> ##D               variance.fixed=variance.fixed , qmcnodes=1000 , maxiter=60)
> ##D summary(mod10c)
> ##D 
> ##D #*****************************************************
> ##D # Model 11: Bifactor model
> ##D #*****************************************************
> ##D 
> ##D #----  M11a: tam.fa (in TAM)
> ##D dims <- substring( colnames(dat),1,1 )  # define dimensions
> ##D mod11a <- TAM::tam.fa( resp=dat , irtmodel="bifactor2" , dims=dims ,
> ##D                  control=list(maxiter=60) )
> ##D summary(mod11a)
> ##D 
> ##D #----  M11b: bfactor (in mirt)
> ##D dims1 <- match( dims , unique(dims) )
> ##D mod11b <- mirt::bfactor(dat, model=dims1 , verbose=TRUE)
> ##D summary(mod11b)
> ##D coef(mod11b)
> ##D mod11b@logLik
> ##D 
> ##D #----  M11c: smirt (in sirt)
> ##D   # define Q-matrix
> ##D Qmatrix <- matrix(0,12,4)
> ##D Qmatrix[,1] <- 1
> ##D Qmatrix[ cbind( 1:12 , match( dims , unique(dims)) +1 ) ]  <- 1
> ##D   # uncorrelated factors
> ##D variance.fixed <- cbind( c(1,1,1,2,2,3) , c(2,3,4,3,4,4) , 0 )
> ##D   # estimate model
> ##D mod11c <- sirt::smirt( dat , Qmatrix=Qmatrix , irtmodel="comp" , est.a="2PL" ,  
> ##D                 variance.fixed=variance.fixed , qmcnodes=1000 , maxiter=60)
> ##D summary(mod11c)
> ##D 
> ##D #*****************************************************
> ##D # Model 12: Located latent class model: Rasch model with three theta classes
> ##D #*****************************************************
> ##D 
> ##D # use 10th item as the reference item
> ##D ref.item <- 10
> ##D # ability grid
> ##D theta.k <- seq(-4,4,len=9)
> ##D 
> ##D #----  M12a: rasch.mirtlc (in sirt)
> ##D mod12a <- sirt::rasch.mirtlc(dat , Nclasses=3, modeltype="MLC1" , ref.item=ref.item )
> ##D summary(mod12a)
> ##D 
> ##D #----  M12b: gdm (in CDM)
> ##D theta.k <- seq(-1 , 1 , len=3)      # initial matrix
> ##D b.constraint <- matrix( c(10,1,0) , nrow=1,ncol=3)
> ##D   # estimate model
> ##D mod12b <- CDM::gdm( dat , theta.k = theta.k , skillspace="est" , irtmodel="1PL",
> ##D               b.constraint=b.constraint , maxiter=200)
> ##D summary(mod12b)
> ##D 
> ##D #----  M12c: mirt (in mirt)
> ##D items <- colnames(dat)
> ##D   # define three latent classes
> ##D Theta <- diag(3)
> ##D   # define mirt model
> ##D I <- ncol(dat)  # I = 12
> ##D mirtmodel <- mirt::mirt.model("
> ##D         C1 = 1-12
> ##D         C2 = 1-12 
> ##D         C3 = 1-12
> ##D         CONSTRAIN = (1-12,a1),(1-12,a2),(1-12,a3)
> ##D         ")
> ##D   # get parameters
> ##D mod.pars <- mirt(dat, model=mirtmodel ,  pars = "values")   
> ##D  # set starting values for class specific item probabilities
> ##D mod.pars[ mod.pars$name == "d" ,"value" ]  <- qlogis( colMeans(dat,na.rm=TRUE) )
> ##D   # set item difficulty of reference item to zero
> ##D ind <- which( ( paste(mod.pars$item) == items[ref.item] ) & 
> ##D                ( ( paste(mod.pars$name) == "d" ) ) )                        
> ##D mod.pars[ ind ,"value" ]  <- 0
> ##D mod.pars[ ind ,"est" ]  <- FALSE
> ##D   # initial values for a1, a2 and a3
> ##D mod.pars[ mod.pars$name %in% c("a1","a2","a3") ,"value" ]  <- c(-1,0,1)
> ##D mod.pars
> ##D   #* define prior for latent class analysis
> ##D lca_prior <- function(Theta,Etable){
> ##D   # number of latent Theta classes
> ##D   TP <- nrow(Theta)
> ##D   # prior in initial iteration
> ##D   if ( is.null(Etable) ){
> ##D     prior <- rep( 1/TP , TP )
> ##D               }    
> ##D   # process Etable (this is correct for datasets without missing data)
> ##D   if ( ! is.null(Etable) ){  
> ##D     # sum over correct and incorrect expected responses 
> ##D     prior <- ( rowSums( Etable[ , seq(1,2*I,2)] ) + rowSums( Etable[ , seq(2,2*I,2)] ) )/I
> ##D             }
> ##D   prior <- prior / sum(prior)  
> ##D   return(prior)
> ##D    }
> ##D  #* estimate model
> ##D mod12c <- mirt(dat, mirtmodel , technical = list(
> ##D             customTheta=Theta , customPriorFun = lca_prior) ,
> ##D             pars = mod.pars , verbose=TRUE )
> ##D   # estimated parameters from the user customized  prior distribution.
> ##D mod12c@nest <- as.integer(sum(mod.pars$est) + 2)            
> ##D   #* extract item parameters
> ##D coef1 <- mirt.wrapper.coef(mod12c)
> ##D   #* inspect estimated distribution
> ##D mod12c@Theta
> ##D coef1$coef[1,c("a1","a2","a3")]
> ##D mod12c@Prior[[1]]
> ##D 
> ##D #*****************************************************
> ##D # Model 13: Multidimensional model with discrete traits
> ##D #*****************************************************
> ##D # define Q-Matrix
> ##D Q <- matrix( 0 , nrow=12,ncol=3)
> ##D Q[1:4,1] <- 1
> ##D Q[5:8,2] <- 1
> ##D Q[9:12,3] <- 1
> ##D # define discrete theta distribution with 3 dimensions
> ##D Theta <- scan(what="character",nlines=1)
> ##D   000 100 010 001 110 101 011 111
> ##D Theta <- as.numeric( unlist( lapply( Theta , strsplit , split="")   ) )
> ##D Theta <- matrix(Theta , 8 , 3 , byrow=TRUE )
> ##D Theta
> ##D 
> ##D #----  Model 13a: din (in CDM)
> ##D mod13a <- CDM::din( dat , q.matrix=Q , rule="DINA")
> ##D summary(mod13a)
> ##D # compare used Theta distributions
> ##D cbind( Theta , mod13a$attribute.patt.splitted)
> ##D 
> ##D #----  Model 13b: gdm (in CDM)
> ##D mod13b <- CDM::gdm( dat , Qmatrix=Q , theta.k=Theta , skillspace="full")
> ##D summary(mod13b)
> ##D 
> ##D #----  Model 13c: mirt (in mirt)
> ##D   # define mirt model
> ##D I <- ncol(dat)  # I = 12
> ##D mirtmodel <- mirt::mirt.model("
> ##D         F1 = 1-4
> ##D         F2 = 5-8
> ##D         F3 = 9-12
> ##D         ")
> ##D   # get parameters
> ##D mod.pars <- mirt(dat, model=mirtmodel ,  pars = "values")   
> ##D # starting values d parameters (transformed guessing parameters)
> ##D ind <- which(  mod.pars$name == "d"  )
> ##D mod.pars[ind,"value"] <- qlogis(.2)
> ##D # starting values transformed slipping parameters
> ##D ind <- which( ( mod.pars$name %in% paste0("a",1:3)  ) &  ( mod.pars$est ) )
> ##D mod.pars[ind,"value"] <- qlogis(.8) - qlogis(.2)
> ##D mod.pars
> ##D 
> ##D   #* define prior for latent class analysis
> ##D lca_prior <- function(Theta,Etable){
> ##D   TP <- nrow(Theta)
> ##D   if ( is.null(Etable) ){
> ##D     prior <- rep( 1/TP , TP )
> ##D               }    
> ##D   if ( ! is.null(Etable) ){  
> ##D     prior <- ( rowSums( Etable[ , seq(1,2*I,2)] ) + rowSums( Etable[ , seq(2,2*I,2)] ) )/I
> ##D             }
> ##D   prior <- prior / sum(prior)  
> ##D   return(prior)
> ##D }
> ##D  #* estimate model
> ##D mod13c <- mirt(dat, mirtmodel , technical = list(
> ##D             customTheta=Theta , customPriorFun = lca_prior) ,
> ##D             pars = mod.pars , verbose=TRUE )
> ##D   # estimated parameters from the user customized  prior distribution.
> ##D mod13c@nest <- as.integer(sum(mod.pars$est) + 2)            
> ##D   #* extract item parameters
> ##D coef13c <- mirt.wrapper.coef(mod13c)$coef
> ##D   #* inspect estimated distribution
> ##D mod13c@Theta
> ##D mod13c@Prior[[1]]
> ##D 
> ##D  #-* comparisons of estimated  parameters
> ##D # extract guessing and slipping parameters from din
> ##D dfr <- coef(mod13a)[ , c("guess","slip") ]
> ##D colnames(dfr) <- paste0("din.",c("guess","slip") )
> ##D # estimated parameters from gdm
> ##D dfr$gdm.guess <- plogis(mod13b$item$b)
> ##D dfr$gdm.slip <- 1 - plogis( rowSums(mod13b$item[,c("b.Cat1","a.F1","a.F2","a.F3")] ) )
> ##D # estimated parameters from mirt
> ##D dfr$mirt.guess <- plogis( coef13c$d )
> ##D dfr$mirt.slip <- 1 - plogis( rowSums(coef13c[,c("d","a1","a2","a3")]) )
> ##D # comparison
> ##D round(dfr[, c(1,3,5,2,4,6)],3)
> ##D   ##      din.guess gdm.guess mirt.guess din.slip gdm.slip mirt.slip
> ##D   ##   A1     0.691     0.684      0.686    0.000    0.000     0.000
> ##D   ##   A2     0.491     0.489      0.489    0.031    0.038     0.036
> ##D   ##   A3     0.302     0.300      0.300    0.184    0.193     0.190
> ##D   ##   A4     0.244     0.239      0.240    0.337    0.340     0.339
> ##D   ##   B1     0.568     0.579      0.577    0.163    0.148     0.151
> ##D   ##   B2     0.329     0.344      0.340    0.344    0.326     0.329
> ##D   ##   B3     0.817     0.827      0.825    0.014    0.007     0.009
> ##D   ##   B4     0.431     0.463      0.456    0.104    0.089     0.092
> ##D   ##   C1     0.188     0.191      0.189    0.013    0.013     0.013
> ##D   ##   C2     0.050     0.050      0.050    0.239    0.238     0.239
> ##D   ##   C3     0.000     0.002      0.001    0.065    0.065     0.065
> ##D   ##   C4     0.000     0.004      0.000    0.212    0.212     0.212
> ##D 
> ##D # estimated class sizes
> ##D dfr <- data.frame( "Theta" = Theta , "din"=mod13a$attribute.patt$class.prob ,
> ##D                    "gdm"=mod13b$pi.k , "mirt" = mod13c@Prior[[1]])
> ##D # comparison
> ##D round(dfr,3)
> ##D   ##     Theta.1 Theta.2 Theta.3   din   gdm  mirt
> ##D   ##   1       0       0       0 0.039 0.041 0.040
> ##D   ##   2       1       0       0 0.008 0.009 0.009
> ##D   ##   3       0       1       0 0.009 0.007 0.008
> ##D   ##   4       0       0       1 0.394 0.417 0.412
> ##D   ##   5       1       1       0 0.011 0.011 0.011
> ##D   ##   6       1       0       1 0.017 0.042 0.037
> ##D   ##   7       0       1       1 0.042 0.008 0.016
> ##D   ##   8       1       1       1 0.480 0.465 0.467   
> ##D 
> ##D #*****************************************************
> ##D # Model 14: DINA model with two skills
> ##D #*****************************************************
> ##D 
> ##D # define some simple Q-Matrix (does not really make in this application)
> ##D Q <- matrix( 0 , nrow=12,ncol=2)
> ##D Q[1:4,1] <- 1
> ##D Q[5:8,2] <- 1
> ##D Q[9:12,1:2] <- 1
> ##D # define discrete theta distribution with 3 dimensions
> ##D Theta <- scan(what="character",nlines=1)
> ##D   00 10 01 11
> ##D Theta <- as.numeric( unlist( lapply( Theta , strsplit , split="")   ) )
> ##D Theta <- matrix(Theta , 4 , 2 , byrow=TRUE )
> ##D Theta
> ##D 
> ##D #----  Model 14a: din (in CDM)
> ##D mod14a <- CDM::din( dat , q.matrix=Q , rule="DINA")
> ##D summary(mod14a)
> ##D # compare used Theta distributions
> ##D cbind( Theta , mod14a$attribute.patt.splitted)
> ##D 
> ##D #----  Model 14b: mirt (in mirt)
> ##D   # define mirt model
> ##D I <- ncol(dat)  # I = 12
> ##D mirtmodel <- mirt::mirt.model("
> ##D         F1 = 1-4
> ##D         F2 = 5-8
> ##D         (F1*F2) = 9-12
> ##D         ")    
> ##D #-> constructions like (F1*F2*F3) are also allowed in mirt.model
> ##D   # get parameters
> ##D mod.pars <- mirt(dat, model=mirtmodel ,  pars = "values")   
> ##D # starting values d parameters (transformed guessing parameters)
> ##D ind <- which(  mod.pars$name == "d"  )
> ##D mod.pars[ind,"value"] <- qlogis(.2)
> ##D # starting values transformed slipping parameters
> ##D ind <- which( ( mod.pars$name %in% paste0("a",1:3)  ) &  ( mod.pars$est ) )
> ##D mod.pars[ind,"value"] <- qlogis(.8) - qlogis(.2)
> ##D mod.pars
> ##D  #* use above defined prior lca_prior
> ##D  # lca_prior <- function(prior,Etable) ...
> ##D  #* estimate model
> ##D mod14b <- mirt(dat, mirtmodel , technical = list(
> ##D             customTheta=Theta , customPriorFun = lca_prior) ,
> ##D             pars = mod.pars , verbose=TRUE )
> ##D   # estimated parameters from the user customized  prior distribution.
> ##D mod14b@nest <- as.integer(sum(mod.pars$est) + 2)            
> ##D   #* extract item parameters
> ##D coef14b <- mirt.wrapper.coef(mod14b)$coef
> ##D 
> ##D  #-* comparisons of estimated  parameters
> ##D # extract guessing and slipping parameters from din
> ##D dfr <- coef(mod14a)[ , c("guess","slip") ]
> ##D colnames(dfr) <- paste0("din.",c("guess","slip") )
> ##D # estimated parameters from mirt
> ##D dfr$mirt.guess <- plogis( coef14b$d )
> ##D dfr$mirt.slip <- 1 - plogis( rowSums(coef14b[,c("d","a1","a2","a3")]) )
> ##D # comparison
> ##D round(dfr[, c(1,3,2,4)],3)
> ##D   ##      din.guess mirt.guess din.slip mirt.slip
> ##D   ##   A1     0.674      0.671    0.030     0.030
> ##D   ##   A2     0.423      0.420    0.049     0.050
> ##D   ##   A3     0.258      0.255    0.224     0.225
> ##D   ##   A4     0.245      0.243    0.394     0.395
> ##D   ##   B1     0.534      0.543    0.166     0.164
> ##D   ##   B2     0.338      0.347    0.382     0.380
> ##D   ##   B3     0.796      0.802    0.016     0.015
> ##D   ##   B4     0.421      0.436    0.142     0.140
> ##D   ##   C1     0.850      0.851    0.000     0.000
> ##D   ##   C2     0.480      0.480    0.097     0.097
> ##D   ##   C3     0.746      0.746    0.026     0.026
> ##D   ##   C4     0.575      0.577    0.136     0.137
> ##D 
> ##D # estimated class sizes
> ##D dfr <- data.frame( "Theta" = Theta , "din"=mod13a$attribute.patt$class.prob ,
> ##D                     "mirt" = mod14b@Prior[[1]])
> ##D # comparison
> ##D round(dfr,3)
> ##D   ##     Theta.1 Theta.2   din  mirt
> ##D   ##   1       0       0 0.357 0.369
> ##D   ##   2       1       0 0.044 0.049
> ##D   ##   3       0       1 0.047 0.031
> ##D   ##   4       1       1 0.553 0.551  
> ##D   
> ##D #*****************************************************
> ##D # Model 15: Rasch model with non-normal distribution
> ##D #*****************************************************
> ##D 
> ##D # A non-normal theta distributed is specified by log-linear smoothing
> ##D # the distribution as described in
> ##D # Xu, X., & von Davier, M. (2008). Fitting the structured general diagnostic model 
> ##D # to NAEP data. ETS Research Report ETS RR-08-27. Princeton, ETS. 
> ##D 
> ##D # define theta grid
> ##D theta.k <- matrix( seq(-4,4,len=15) , ncol=1 )
> ##D # define design matrix for smoothing (up to cubic moments)
> ##D delta.designmatrix <- cbind( 1 , theta.k , theta.k^2 , theta.k^3 )
> ##D # constrain item difficulty of fifth item (item B1) to zero
> ##D b.constraint <- matrix( c(5,1,0) , ncol=3 )
> ##D 
> ##D #----  Model 15a: gdm (in CDM)
> ##D mod15a <- CDM::gdm( dat , irtmodel="1PL" , theta.k=theta.k , 
> ##D                b.constraint=b.constraint  )
> ##D summary(mod15a)
> ##D  # plot estimated distribution
> ##D barplot( mod15a$pi.k[,1] , space=0 , names.arg = round(theta.k[,1],2) ,
> ##D            main="Estimated Skewed Distribution (gdm function)")
> ##D 
> ##D #----  Model 15b: mirt (in mirt)
> ##D  # define mirt model
> ##D mirtmodel <- mirt::mirt.model("
> ##D     F = 1-12
> ##D     ")   
> ##D  # get parameters
> ##D mod.pars <- mirt(dat, model=mirtmodel , pars = "values" , itemtype="Rasch")
> ##D   # fix variance (just for correct counting of parameters)
> ##D mod.pars[ mod.pars$name=="COV_11" , "est"] <- FALSE
> ##D   # fix item difficulty
> ##D ind <- which( ( mod.pars$item == "B1" ) & ( mod.pars$name == "d" ) )
> ##D mod.pars[ ind , "value"] <- 0
> ##D mod.pars[ ind , "est"] <- FALSE
> ##D 
> ##D  # define prior
> ##D loglinear_prior <- function(Theta,Etable){
> ##D     TP <- nrow(Theta)
> ##D     if ( is.null(Etable) ){
> ##D     prior <- rep( 1/TP , TP )
> ##D            }
> ##D     # process Etable (this is correct for datasets without missing data)
> ##D     if ( ! is.null(Etable) ){
> ##D           # sum over correct and incorrect expected responses
> ##D        prior <- ( rowSums( Etable[ , seq(1,2*I,2)] ) + rowSums( Etable[ , seq(2,2*I,2)] ) )/I
> ##D        # smooth prior using the above design matrix and a log-linear model
> ##D        # see Xu & von Davier (2008).
> ##D        y <- log( prior + 1E-15 )
> ##D        lm1 <- lm( y ~ 0 + delta.designmatrix , weights = prior )
> ##D        prior <- exp(fitted(lm1))   # smoothed prior
> ##D            }
> ##D     prior <- prior / sum(prior)
> ##D     return(prior)
> ##D }
> ##D 
> ##D #* estimate model
> ##D mod15b <- mirt(dat, mirtmodel , technical = list(
> ##D                 customTheta= theta.k , customPriorFun = loglinear_prior ) ,
> ##D                 pars = mod.pars , verbose=TRUE )                                              
> ##D # estimated parameters from the user customized prior distribution.
> ##D mod15b@nest <- as.integer(sum(mod.pars$est) + 3)
> ##D #* extract item parameters
> ##D coef1 <- mirt.wrapper.coef(mod15b)$coef
> ##D 
> ##D #** compare estimated item parameters
> ##D dfr <- data.frame( "gdm"=mod15a$item$b.Cat1 , "mirt"=coef1$d )
> ##D rownames(dfr) <- colnames(dat)
> ##D round(t(dfr),4)
> ##D   ##            A1     A2      A3      A4 B1      B2     B3     B4     C1    C2     C3    C4
> ##D   ##   gdm  0.9818 0.1538 -0.7837 -1.3197  0 -1.0902 1.6088 -0.170 1.9778 0.006 1.1859 0.135
> ##D   ##   mirt 0.9829 0.1548 -0.7826 -1.3186  0 -1.0892 1.6099 -0.169 1.9790 0.007 1.1870 0.136
> ##D # compare estimated theta distribution
> ##D dfr <- data.frame( "gdm"=mod15a$pi.k , "mirt"= mod15b@Prior[[1]] )
> ##D round(t(dfr),4)
> ##D   ##        1 2     3     4      5      6      7      8      9     10     11     12     13
> ##D   ##   gdm  0 0 1e-04 9e-04 0.0056 0.0231 0.0652 0.1299 0.1881 0.2038 0.1702 0.1129 0.0612
> ##D   ##   mirt 0 0 1e-04 9e-04 0.0056 0.0232 0.0653 0.1300 0.1881 0.2038 0.1702 0.1128 0.0611
> ##D   ##            14    15
> ##D   ##   gdm  0.0279 0.011
> ##D   ##   mirt 0.0278 0.011
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.read", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.reck")
> ### * data.reck
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.reck
> ### Title: Datasets from Reckase' Book _Multidimensional Item Response
> ###   Theory_
> ### Aliases: data.reck data.reck21 data.reck61DAT1 data.reck61DAT2
> ###   data.reck73C1a data.reck73C1b data.reck75C2 data.reck78ExA
> ###   data.reck79ExB
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D #############################################################################
> ##D # EXAMPLE 1: data.reck21 dataset, Table 2.1, p. 45	
> ##D #############################################################################
> ##D data(data.reck21)
> ##D 
> ##D dat <- data.reck21$dat      # extract dataset
> ##D 
> ##D # items with zero guessing parameters
> ##D guess0 <- c( 1 , 2 , 3 , 9 ,11 ,27 ,30 ,35 ,45 ,49 ,50 )
> ##D I <- ncol(dat)
> ##D 
> ##D #***
> ##D # Model 1: 3PL estimation using rasch.mml2
> ##D est.c <- est.a <- 1:I
> ##D est.c[ guess0 ] <- 0
> ##D mod1 <- sirt::rasch.mml2( dat , est.a=est.a , est.c=est.c , mmliter= 300 )
> ##D summary(mod1)
> ##D 
> ##D #***
> ##D # Model 2: 3PL estimation using smirt
> ##D Q <- matrix(1,I,1)
> ##D mod2 <- sirt::smirt( dat , Qmatrix=Q , est.a= "2PL"  , est.c=est.c , increment.factor=1.01)
> ##D summary(mod2)
> ##D 
> ##D #***
> ##D # Model 3: estimation in mirt package
> ##D library(mirt)
> ##D itemtype <- rep("3PL" , I )
> ##D itemtype[ guess0 ] <- "2PL"
> ##D mod3 <- mirt::mirt(dat, 1, itemtype = itemtype , verbose=TRUE)
> ##D summary(mod3)
> ##D 
> ##D c3 <- unlist( coef(mod3) )[ 1:(4*I) ]
> ##D c3 <- matrix( c3 , I , 4 , byrow=TRUE )
> ##D # compare estimates of rasch.mml2, smirt and true parameters
> ##D round( cbind( mod1$item$c , mod2$item$c ,c3[,3]  ,data.reck21$pars$c ) , 2 )
> ##D round( cbind( mod1$item$a , mod2$item$a.Dim1 ,c3[,1], data.reck21$pars$a ) , 2 )
> ##D round( cbind( mod1$item$b , mod2$item$b.Dim1 / mod2$item$a.Dim1 , - c3[,2] / c3[,1] , 
> ##D             data.reck21$pars$b ) , 2 )
> ##D             
> ##D #############################################################################
> ##D # EXAMPLE 2: data.reck61 dataset, Table 6.1, p. 153	
> ##D #############################################################################            
> ##D 
> ##D data(data.reck61DAT1)
> ##D dat <- data.reck61DAT1$data
> ##D 
> ##D #***
> ##D # Model 1: Exploratory factor analysis
> ##D 
> ##D #-- Model 1a: tam.fa in TAM
> ##D library(TAM)
> ##D mod1a <- TAM::tam.fa( dat , irtmodel="efa" , nfactors=3 )
> ##D # varimax rotation
> ##D varimax(mod1a$B.stand)
> ##D 
> ##D # Model 1b: EFA in NOHARM (Promax rotation)
> ##D mod1b <- sirt::R2noharm( dat = dat , model.type="EFA" ,  dimensions = 3 , 
> ##D               writename = "reck61__3dim_efa", noharm.path = "c:/NOHARM" ,dec = ",")
> ##D summary(mod1b)
> ##D 
> ##D # Model 1c: EFA with noharm.sirt
> ##D mod1c <- sirt::noharm.sirt( dat=dat , dimensions=3  )
> ##D summary(mod1c)
> ##D plot(mod1c)
> ##D 
> ##D # Model 1d: EFA with 2 dimensions in noharm.sirt
> ##D mod1d <- sirt::noharm.sirt( dat=dat , dimensions=2  )
> ##D summary(mod1d)
> ##D plot(mod1d , efa.load.min=.2)   # plot loadings of at least .20
> ##D 
> ##D #***
> ##D # Model 2: Confirmatory factor analysis
> ##D 
> ##D #-- Model 2a: tam.fa in TAM
> ##D dims <- c( rep(1,10) , rep(3,10) , rep(2,10)  )
> ##D Qmatrix <- matrix( 0 , nrow=30 , ncol=3 )
> ##D Qmatrix[ cbind( 1:30 , dims) ] <- 1
> ##D mod2a <- TAM::tam.mml.2pl( dat ,Q=Qmatrix , 
> ##D             control=list( snodes=1000, QMC=TRUE , maxiter=200) )
> ##D summary(mod2a)
> ##D 
> ##D #-- Model 2b: smirt in sirt
> ##D mod2b <- sirt::smirt( dat ,Qmatrix =Qmatrix , est.a="2PL" , maxiter=20 , qmcnodes=1000 )
> ##D summary(mod2b)
> ##D 
> ##D #-- Model 2c: rasch.mml2 in sirt
> ##D mod2c <- sirt::rasch.mml2( dat ,Qmatrix =Qmatrix , est.a= 1:30 , 
> ##D                 mmliter =200 , theta.k = seq(-5,5,len=11) )
> ##D summary(mod2c)
> ##D 
> ##D #-- Model 2d: mirt in mirt
> ##D cmodel <- mirt::mirt.model("
> ##D      F1 = 1-10
> ##D      F2 = 21-30
> ##D      F3 = 11-20
> ##D      COV = F1*F2, F1*F3 , F2*F3 " )
> ##D mod2d <- mirt::mirt(dat, cmodel , verbose=TRUE)
> ##D summary(mod2d)
> ##D coef(mod2d)
> ##D 
> ##D #-- Model 2e: CFA in NOHARM
> ##D # specify covariance pattern
> ##D P.pattern <- matrix( 1 , ncol=3 , nrow=3 )
> ##D P.init <- .4*P.pattern
> ##D diag(P.pattern) <- 0
> ##D diag(P.init) <- 1
> ##D # fix all entries in the loading matrix to 1
> ##D F.pattern <- matrix( 0 , nrow=30 , ncol=3 )
> ##D F.pattern[1:10,1] <- 1
> ##D F.pattern[21:30,2] <- 1
> ##D F.pattern[11:20,3] <- 1
> ##D F.init <- F.pattern
> ##D # estimate model
> ##D mod2e <- sirt::R2noharm( dat = dat , model.type="CFA" , P.pattern=P.pattern, 
> ##D             P.init=P.init , F.pattern=F.pattern, F.init=F.init ,
> ##D             writename = "reck61__3dim_cfa", noharm.path = "c:/NOHARM" ,dec = ",")
> ##D summary(mod2e)
> ##D 
> ##D #-- Model 2f: CFA with noharm.sirt
> ##D mod2f <- sirt::noharm.sirt( dat = dat , Fval=F.init , Fpatt = F.pattern ,
> ##D                  Pval=P.init , Ppatt = P.pattern )                      
> ##D summary(mod2f)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: DETECT analysis data.reck78ExA and data.reck79ExB
> ##D ############################################################################# 
> ##D 
> ##D data(data.reck78ExA)
> ##D data(data.reck79ExB)
> ##D 
> ##D #************************
> ##D # Example A
> ##D dat <- data.reck78ExA$data
> ##D #- estimate person score
> ##D score <- qnorm( ( rowMeans( dat )+.5 )  / ( ncol(dat) + 1 ) )
> ##D #- extract item cluster
> ##D itemcluster <- substring( colnames(dat) , 1 , 1 )
> ##D #- confirmatory DETECT Item cluster
> ##D detectA <- sirt::conf.detect( data = dat , score = score , itemcluster = itemcluster )
> ##D   ##          unweighted weighted
> ##D   ##   DETECT      0.571    0.571
> ##D   ##   ASSI        0.523    0.523
> ##D   ##   RATIO       0.757    0.757
> ##D 
> ##D #- exploratory DETECT analysis
> ##D detect_explA <- sirt::expl.detect(data=dat, score, nclusters=10, N.est = nrow(dat)/2  )
> ##D   ##  Optimal Cluster Size is  5  (Maximum of DETECT Index)
> ##D   ##     N.Cluster N.items N.est N.val         size.cluster DETECT.est ASSI.est
> ##D   ##   1         2      50  1250  1250                31-19      0.531    0.404
> ##D   ##   2         3      50  1250  1250             10-19-21      0.554    0.407
> ##D   ##   3         4      50  1250  1250           10-19-14-7      0.630    0.509
> ##D   ##   4         5      50  1250  1250         10-19-3-7-11      0.653    0.546
> ##D   ##   5         6      50  1250  1250       10-12-7-3-7-11      0.593    0.458
> ##D   ##   6         7      50  1250  1250      10-12-7-3-7-9-2      0.604    0.474
> ##D   ##   7         8      50  1250  1250    10-12-7-3-3-9-4-2      0.608    0.481
> ##D   ##   8         9      50  1250  1250  10-12-7-3-3-5-4-2-4      0.617    0.494
> ##D   ##   9        10      50  1250  1250 10-5-7-7-3-3-5-4-2-4      0.592    0.460
> ##D 
> ##D # cluster membership
> ##D cluster_membership <- detect_explA$itemcluster$cluster3
> ##D # Cluster 1:
> ##D colnames(dat)[ cluster_membership == 1 ]
> ##D   ##   [1] "A01" "A02" "A03" "A04" "A05" "A06" "A07" "A08" "A09" "A10"
> ##D # Cluster 2:
> ##D colnames(dat)[ cluster_membership == 2 ]
> ##D   ##    [1] "B11" "B12" "B13" "B14" "B15" "B16" "B17" "B18" "B19" "B20" "B21" "B22"
> ##D   ##   [13] "B23" "B25" "B26" "B27" "B28" "B29" "B30"
> ##D # Cluster 3:
> ##D colnames(dat)[ cluster_membership == 3 ]
> ##D   ##    [1] "B24" "C31" "C32" "C33" "C34" "C35" "C36" "C37" "C38" "C39" "C40" "C41"
> ##D   ##   [13] "C42" "C43" "C44" "C45" "C46" "C47" "C48" "C49" "C50"
> ##D 
> ##D #************************
> ##D # Example B
> ##D dat <- data.reck79ExB$data
> ##D #- estimate person score
> ##D score <- qnorm( ( rowMeans( dat )+.5 )  / ( ncol(dat) + 1 ) )
> ##D #- extract item cluster
> ##D itemcluster <- substring( colnames(dat) , 1 , 1 )
> ##D #- confirmatory DETECT Item cluster
> ##D detectB <- sirt::conf.detect( data = dat , score = score , itemcluster = itemcluster )
> ##D   ##          unweighted weighted
> ##D   ##   DETECT      0.715    0.715
> ##D   ##   ASSI        0.624    0.624
> ##D   ##   RATIO       0.855    0.855
> ##D 
> ##D #- exploratory DETECT analysis
> ##D detect_explB <- sirt::expl.detect(data=dat, score, nclusters=10, N.est = nrow(dat)/2  )
> ##D   ##   Optimal Cluster Size is  4  (Maximum of DETECT Index)
> ##D   ##   
> ##D   ##     N.Cluster N.items N.est N.val         size.cluster DETECT.est ASSI.est
> ##D   ##   1         2      50  1250  1250                30-20      0.665    0.546
> ##D   ##   2         3      50  1250  1250             10-20-20      0.686    0.585
> ##D   ##   3         4      50  1250  1250           10-20-8-12      0.728    0.644
> ##D   ##   4         5      50  1250  1250         10-6-14-8-12      0.654    0.553
> ##D   ##   5         6      50  1250  1250       10-6-14-3-12-5      0.659    0.561
> ##D   ##   6         7      50  1250  1250      10-6-14-3-7-5-5      0.664    0.576
> ##D   ##   7         8      50  1250  1250     10-6-7-7-3-7-5-5      0.616    0.518
> ##D   ##   8         9      50  1250  1250   10-6-7-7-3-5-5-5-2      0.612    0.512
> ##D   ##   9        10      50  1250  1250 10-6-7-7-3-5-3-5-2-2      0.613    0.512
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.reck", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.si")
> ### * data.si
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.sirt
> ### Title: Some Example Datasets for the 'sirt' Package
> ### Aliases: data.sirt data.si01 data.si02 data.si03 data.si04 data.si05
> ###   data.si06
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D #############################################################################
> ##D # EXAMPLE 1: Nested logit model multiple choice dataset data.si06
> ##D #############################################################################
> ##D 
> ##D data(data.si06)
> ##D dat <- data.si06
> ##D 
> ##D #** estimate 2PL nested logit model
> ##D library(mirt)
> ##D mod1 <- mirt::mirt( dat , model=1 , itemtype="2PLNRM" , key=rep(0,ncol(dat) ) ,
> ##D             verbose=TRUE  )
> ##D summary(mod1)
> ##D cmod1 <- mirt.wrapper.coef(mod1)$coef
> ##D cmod1[,-1] <- round( cmod1[,-1] , 3)
> ##D 
> ##D #** normalize item parameters according Suh and Bolt (2010)
> ##D cmod2 <- cmod1
> ##D 
> ##D # slope parameters
> ##D ind <-  grep("ak",colnames(cmod2))
> ##D h1 <- cmod2[ ,ind ]
> ##D cmod2[,ind] <- t( apply( h1 , 1 , FUN = function(ll){ ll - mean(ll) } ) )
> ##D # item intercepts
> ##D ind <-  paste0( "d" , 0:9 )
> ##D ind <- which( colnames(cmod2) %in% ind )
> ##D h1 <- cmod2[ ,ind ]
> ##D cmod2[,ind] <- t( apply( h1 , 1 , FUN = function(ll){ ll - mean(ll) } ) )
> ##D cmod2[,-1] <- round( cmod2[,-1] , 3)	
> ## End(Not run)	
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.si", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("data.wide2long")
> ### * data.wide2long
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: data.wide2long
> ### Title: Converting a Data Frame from Wide Format in a Long Format
> ### Aliases: data.wide2long
> ### Keywords: R utilities
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: data.pisaRead
> ##D #############################################################################
> ##D library(lme4)
> ##D 
> ##D data(data.pisaRead) 
> ##D dat <- data.pisaRead$data 
> ##D Q <- data.pisaRead$item   # item predictors
> ##D 
> ##D # define items
> ##D items <- colnames(dat)[ substring( colnames(dat) , 1 , 1 ) == "R" ]
> ##D dat1 <- dat[ , c( "idstud" , items ) ]
> ##D # matrix with person predictors
> ##D X <- dat[ , c("idschool" , "hisei" , "female" , "migra") ]
> ##D 
> ##D # create dataset in long format
> ##D dat.long <- data.wide2long( dat=dat1 , id="idstud" , X=X , Q=Q )
> ##D 
> ##D #***
> ##D # Model 1: Rasch model
> ##D mod1 <- lme4::glmer( resp ~ 0 + ( 1 | idstud ) + as.factor(item) , data = dat.long ,
> ##D             family="binomial" , verbose=TRUE)
> ##D summary(mod1)
> ##D 
> ##D #***
> ##D # Model 2: Rasch model and inclusion of person predictors
> ##D mod2 <- lme4::glmer( resp ~ 0 + ( 1 | idstud ) + as.factor(item) + female + hisei + migra,
> ##D            data = dat.long , family="binomial" , verbose=TRUE)
> ##D summary(mod2)
> ##D 
> ##D #***
> ##D # Model 3: LLTM
> ##D mod3 <- lme4::glmer(resp ~ (1|idstud) + as.factor(ItemFormat) + as.factor(TextType), 
> ##D             data = dat.long , family="binomial" , verbose=TRUE)
> ##D summary(mod3)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: Rasch model in lme4
> ##D #############################################################################
> ##D 
> ##D set.seed(765)
> ##D N <- 1000  # number of persons
> ##D I <- 10    # number of items
> ##D b <- seq(-2,2,length=I)
> ##D dat <- sirt::sim.raschtype( rnorm(N,sd=1.2) , b=b )
> ##D dat.long <- data.wide2long( dat=dat )
> ##D #***
> ##D # estimate Rasch model with lmer
> ##D library(lme4)
> ##D mod1 <- lme4::glmer( resp ~ 0 + as.factor( item ) + ( 1 | id_index) , data = dat.long ,
> ##D              verbose=TRUE , family="binomial")
> ##D summary(mod1)
> ##D   ##   Random effects:
> ##D   ##    Groups   Name        Variance Std.Dev.
> ##D   ##    id_index (Intercept) 1.454    1.206   
> ##D   ##   Number of obs: 10000, groups: id_index, 1000
> ##D   ##   
> ##D   ##   Fixed effects:
> ##D   ##                        Estimate Std. Error z value Pr(>|z|)    
> ##D   ##   as.factor(item)I0001  2.16365    0.10541  20.527  < 2e-16 ***
> ##D   ##   as.factor(item)I0002  1.66437    0.09400  17.706  < 2e-16 ***
> ##D   ##   as.factor(item)I0003  1.21816    0.08700  14.002  < 2e-16 ***
> ##D   ##   as.factor(item)I0004  0.68611    0.08184   8.383  < 2e-16 ***
> ##D   ##   [...]
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("data.wide2long", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dif.logistic.regression")
> ### * dif.logistic.regression
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dif.logistic.regression
> ### Title: Differential Item Functioning using Logistic Regression Analysis
> ### Aliases: dif.logistic.regression
> ### Keywords: Differential item functioning (DIF)
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Mathematics data | Gender DIF
> #############################################################################
> 
> data( data.math )
> dat <- data.math$data
> items <- grep( "M" , colnames(dat))
> 
> # estimate item parameters and WLEs
> mod <- rasch.mml2( dat[,items] )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:00 
   Deviance = 22824.0701
    Maximum b parameter change =  0.399325  
...........................................................
Iteration 2     2015-06-13 13:24:00 
   Deviance = 22739.2107 | Deviance change = 84.859487
    Maximum b parameter change =  0.035202  
...........................................................
Iteration 3     2015-06-13 13:24:00 
   Deviance = 22732.4692 | Deviance change = 6.741466
    Maximum b parameter change =  0.014859  
...........................................................
Iteration 4     2015-06-13 13:24:00 
   Deviance = 22729.9994 | Deviance change = 2.46974
    Maximum b parameter change =  0.012792  
...........................................................
Iteration 5     2015-06-13 13:24:00 
   Deviance = 22729.872 | Deviance change = 0.127489
    Maximum b parameter change =  0.00265  
...........................................................
Iteration 6     2015-06-13 13:24:00 
   Deviance = 22729.8669 | Deviance change = 0.005023
    Maximum b parameter change =  0.000473  
...........................................................
Iteration 7     2015-06-13 13:24:00 
   Deviance = 22729.8666 | Deviance change = 0.000283
    Maximum b parameter change =  0.000184  
...........................................................
Iteration 8     2015-06-13 13:24:00 
   Deviance = 22729.8666 | Deviance change = 9.6e-05
    Maximum b parameter change =  0.000115  
...........................................................
Iteration 9     2015-06-13 13:24:00 
   Deviance = 22729.8665 | Deviance change = 7.2e-05
    Maximum b parameter change =  9.3e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:00 
End: 2015-06-13 13:24:00 
Time difference of 0.1486042 secs
Difference: 0.1486042 
------------------------------------------------------------
> wle <- wle.rasch( dat[,items] , b=mod$item$b )$theta
WLE Reliability = 0.865 
> 
> # assess DIF by logistic regression
> mod1 <- dif.logistic.regression( dat=dat[,items] , score=wle , group=dat$female)
Items 1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  
16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  


DIF SD = 0.196 
> 
> # calculate DIF variance
> dif1 <- dif.variance( dif=mod1$uniformDIF , se.dif = mod1$se.uniformDIF )
> dif1$unweighted.DIFSD
[1] 0.1963958
>   ## > dif1$unweighted.DIFSD
>   ## [1] 0.1963958
> 
> # calculate stratified DIF variance
> # stratification based on domains
> dif2 <- dif.strata.variance( dif=mod1$uniformDIF , se.dif = mod1$se.uniformDIF ,
+               itemcluster = data.math$item$domain )
>   ## $unweighted.DIFSD
>   ## [1] 0.1455916
> 
> ## Not run: 
> ##D #****
> ##D # Likelihood ratio test and graphical model test in eRm package
> ##D library(eRm)
> ##D # estimate Rasch model
> ##D res <- eRm::RM( dat[,items] )
> ##D summary(res)
> ##D # LR-test with respect to female
> ##D lrres <- eRm::LRtest(res, splitcr = dat$female)
> ##D summary(lrres)
> ##D # graphical model test
> ##D eRm::plotGOF(lrres) 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dif.logistic.regression", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dirichlet.mle")
> ### * dirichlet.mle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dirichlet.mle
> ### Title: Maximum Likelihood Estimation of the Dirichlet Distribution
> ### Aliases: dirichlet.mle
> ### Keywords: Dirichlet distribution
> 
> ### ** Examples
> 
> #############################################################################
> # SIMULATED EXAMPLE 1: Simulate and estimate Dirichlet distribution
> #############################################################################	
> 	
> # (1) simulate data
> set.seed(789)
> N <- 200
> probs <- c(.5 , .3 , .2 )
> alpha0 <- .5
> alpha <- alpha0*probs
> alpha <- matrix( alpha , nrow=N , ncol=length(alpha) , byrow=TRUE  )
> x <- dirichlet.simul( alpha )
> 
> # (2) estimate Dirichlet parameters
> dirichlet.mle(x)
$alpha
[1] 0.2856458 0.1818179 0.1451133

$alpha0
[1] 0.612577

$xsi
[1] 0.4663019 0.2968082 0.2368899

>   ##   $alpha
>   ##   [1] 0.24507708 0.14470944 0.09590745
>   ##   $alpha0
>   ##   [1] 0.485694
>   ##   $xsi
>   ##   [1] 0.5045916 0.2979437 0.1974648
> 
> ## Not run: 
> ##D   
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: Fitting Dirichlet distribution with frequency weights
> ##D #############################################################################
> ##D 
> ##D # define observed data
> ##D x <- scan( nlines=1)
> ##D     1 0   0 1   .5 .5
> ##D x <- matrix( x , nrow=3 , ncol=2 , byrow=TRUE)    
> ##D 
> ##D # transform observations x into (0,1)
> ##D eps <- .01
> ##D x <- ( x + eps ) / ( 1 + 2 * eps )
> ##D 
> ##D # compare results with likelihood fitting package maxLik
> ##D library(maxLik)
> ##D # define likelihood function
> ##D dirichlet.ll <- function(param) {
> ##D     ll <- sum( weights * log( ddirichlet( x , param ) ) )
> ##D     ll
> ##D }
> ##D 
> ##D #*** weights 10-10-1
> ##D weights <- c(10, 10 , 1 )
> ##D mod1a <- dirichlet.mle( x , weights= weights )
> ##D mod1a
> ##D # estimation in maxLik
> ##D mod1b <- maxLik::maxLik(loglik, start=c(.5,.5)) 
> ##D print( mod1b )
> ##D coef( mod1b )
> ##D 
> ##D #*** weights 10-10-10
> ##D weights <- c(10, 10 , 10 )
> ##D mod2a <- dirichlet.mle( x , weights= weights )
> ##D mod2a
> ##D # estimation in maxLik
> ##D mod2b <- maxLik::maxLik(loglik, start=c(.5,.5)) 
> ##D print( mod2b )
> ##D coef( mod2b )
> ##D 
> ##D #*** weights 30-10-2
> ##D weights <- c(30, 10 , 2 )
> ##D mod3a <- dirichlet.mle( x , weights= weights )
> ##D mod3a
> ##D # estimation in maxLik
> ##D mod3b <- maxLik::maxLik(loglik, start=c(.25,.25)) 
> ##D print( mod3b )
> ##D coef( mod3b )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dirichlet.mle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dirichlet.simul")
> ### * dirichlet.simul
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dirichlet.simul
> ### Title: Simulation of a Dirichlet Distributed Vectors
> ### Aliases: dirichlet.simul
> ### Keywords: Dirichlet distribution
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Simulation with two components
> #############################################################################
> 
> set.seed(789)
> N <- 2000
> probs <- c(.7 , .3)	# define (extremal) class probabilities
> 
> #*** alpha0 = .2  -> nearly crisp latent classes
> alpha0 <- .2
> alpha <- alpha0*probs
> alpha <- matrix( alpha , nrow=N , ncol=length(alpha) , byrow=TRUE  )
> x <- dirichlet.simul( alpha )
> htitle <- expression(paste( alpha[0], "=.2, ", p[1] , "=.7"   ) )
> hist( x[,1] , breaks = seq(0,1,len=20) , main=htitle)
> 
> #*** alpha0 = 3 -> strong deviation from crisp membership
> alpha0 <- 3
> alpha <- alpha0*probs
> alpha <- matrix( alpha , nrow=N , ncol=length(alpha) , byrow=TRUE  )
> x <- dirichlet.simul( alpha )
> htitle <- expression(paste( alpha[0], "=3, ", p[1] , "=.7"   ) )
> hist( x[,1] , breaks = seq(0,1,len=20) , main=htitle)
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 2: Simulation with three components
> ##D #############################################################################
> ##D 
> ##D set.seed(986)
> ##D N <- 2000
> ##D probs <- c( .5 , .35 , .15 )
> ##D 
> ##D #*** alpha0 = .2
> ##D alpha0 <- .2
> ##D alpha <- alpha0*probs
> ##D alpha <- matrix( alpha , nrow=N , ncol=length(alpha) , byrow=TRUE  )
> ##D x <- dirichlet.simul( alpha )
> ##D htitle <- expression(paste( alpha[0], "=.2, ", p[1] , "=.7"   ) )
> ##D library(ade4)
> ##D ade4::triangle.plot(x, label=NULL , clabel = 1)
> ##D 
> ##D #*** alpha0 = 3
> ##D alpha0 <- 3
> ##D alpha <- alpha0*probs
> ##D alpha <- matrix( alpha , nrow=N , ncol=length(alpha) , byrow=TRUE  )
> ##D x <- dirichlet.simul( alpha )
> ##D htitle <- expression(paste( alpha[0], "=3, ", p[1] , "=.7"   ) )
> ##D ade4::triangle.plot(x, label=NULL , clabel = 1)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dirichlet.simul", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("eigenvalues.manymatrices")
> ### * eigenvalues.manymatrices
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: eigenvalues.manymatrices
> ### Title: Computation of Eigenvalues of Many Symmetric Matrices
> ### Aliases: eigenvalues.manymatrices
> ### Keywords: Eigenvalues
> 
> ### ** Examples
> 
> # define matrices
> Sigma <- diag(1,3)
> Sigma[ lower.tri(Sigma) ] <- Sigma[ upper.tri(Sigma) ] <- c(.4,.6,.8 )
> Sigma1 <- Sigma
> 
> Sigma <- diag(1,3)
> Sigma[ lower.tri(Sigma) ] <- Sigma[ upper.tri(Sigma) ] <- c(.2,.1,.99 )
> Sigma2 <- Sigma
> 
> # collect matrices in a "super-matrix"
> Sigma.all <- rbind( matrix( Sigma1 , nrow=1 , byrow=TRUE) , 
+                 matrix( Sigma2 , nrow=1 , byrow=TRUE) )
> Sigma.all <- Sigma.all[ c(1,1,2,2,1 ) , ]
> 
> # eigenvalue decomposition
> m1 <- eigenvalues.manymatrices( Sigma.all )
> m1
$lambda
         [,1]      [,2]       [,3]
[1,] 2.214935 0.6226415 0.16242359
[2,] 2.214935 0.6226415 0.16242359
[3,] 2.033639 0.9615023 0.00485847
[4,] 2.033639 0.9615023 0.00485847
[5,] 2.214935 0.6226415 0.16242359

$U
          [,1]      [,2]      [,3]      [,4]        [,5]       [,6]        [,7]
[1,] 0.5057859 0.5843734 0.6345773 0.8241007 -0.54477502 -0.1551717 -0.25443455
[2,] 0.5057859 0.5843734 0.6345773 0.8241007 -0.54477502 -0.1551717 -0.25443455
[3,] 0.2019981 0.6975173 0.6875074 0.9765813 -0.09189033 -0.1945383 -0.07251858
[4,] 0.2019981 0.6975173 0.6875074 0.9765813 -0.09189033 -0.1945383 -0.07251858
[5,] 0.5057859 0.5843734 0.6345773 0.8241007 -0.54477502 -0.1551717 -0.25443455
           [,8]       [,9]
[1,] -0.6018285  0.7570109
[2,] -0.6018285  0.7570109
[3,]  0.7107033 -0.6997441
[4,]  0.7107033 -0.6997441
[5,] -0.6018285  0.7570109

$logdet
[1] -1.496109 -1.496109 -4.656463 -4.656463 -1.496109

$det
[1] 0.224000057 0.224000057 0.009500002 0.009500002 0.224000057

> 
> # eigenvalue decomposition for Sigma1
> s1 <- svd(Sigma1)
> s1
$d
[1] 2.2149347 0.6226418 0.1624235

$u
           [,1]       [,2]       [,3]
[1,] -0.5057852  0.8240377 -0.2552315
[2,] -0.5843738 -0.5449251 -0.6013018
[3,] -0.6345775 -0.1549789  0.7571611

$v
           [,1]       [,2]       [,3]
[1,] -0.5057852  0.8240377 -0.2552315
[2,] -0.5843738 -0.5449251 -0.6013018
[3,] -0.6345775 -0.1549789  0.7571611

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("eigenvalues.manymatrices", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("eigenvalues.sirt")
> ### * eigenvalues.sirt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: eigenvalues.sirt
> ### Title: First Eigenvalues of a Symmetric Matrix
> ### Aliases: eigenvalues.sirt
> ### Keywords: Eigenvalues
> 
> ### ** Examples
> 
> Sigma <- diag(1,3)
> Sigma[ lower.tri(Sigma) ] <- Sigma[ upper.tri(Sigma) ] <- c(.4,.6,.8 )
> eigenvalues.sirt(X=Sigma, D=2 )
$d
[1] 2.2149347 0.6226418

$u
          [,1]       [,2]
[1,] 0.5058145  0.8239906
[2,] 0.5843545 -0.5449593
[3,] 0.6345719 -0.1551090

> # compare with svd function
> svd(Sigma)
$d
[1] 2.2149347 0.6226418 0.1624235

$u
           [,1]       [,2]       [,3]
[1,] -0.5057852  0.8240377 -0.2552315
[2,] -0.5843738 -0.5449251 -0.6013018
[3,] -0.6345775 -0.1549789  0.7571611

$v
           [,1]       [,2]       [,3]
[1,] -0.5057852  0.8240377 -0.2552315
[2,] -0.5843738 -0.5449251 -0.6013018
[3,] -0.6345775 -0.1549789  0.7571611

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("eigenvalues.sirt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("equating.rasch")
> ### * equating.rasch
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: equating.rasch
> ### Title: Equating in the Generalized Logistic Rasch Model
> ### Aliases: equating.rasch
> ### Keywords: Equating Linking
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Linking item parameters of the PISA study
> #############################################################################
> 
> data(data.pisaPars)
> pars <- data.pisaPars
> 
> # linking the two studies with the Rasch model
> mod <- equating.rasch(x=pars[,c("item","study1")], y=pars[,c("item","study2")])
>   ##   Mean.Mean    Haebara Stocking.Lord
>   ## 1   0.08828 0.08896269    0.09292838
> 
> ## Not run: 
> ##D #*** linking using the plink package	
> ##D library(plink)	
> ##D I <- nrow(pars)
> ##D pm <- as.poly.mod(I)
> ##D # linking parameters
> ##D plink.pars1 <- list( "study1" = data.frame( 1 , pars$study1 , 0 ) ,
> ##D                      "study2" = data.frame( 1 , pars$study2 , 0 ) )
> ##D       # the parameters are arranged in the columns:
> ##D       # Discrimination, Difficulty, Guessing Parameter
> ##D # common items
> ##D common.items <- cbind("study1"=1:I,"study2"=1:I)
> ##D # number of categories per item
> ##D cats.item <- list( "study1"=rep(2,I), "study2"=rep(2,I))
> ##D # convert into plink object
> ##D x <- plink::as.irt.pars( plink.pars, common.items , cat= cats.item, 
> ##D           poly.mod=list(pm,pm))
> ##D # linking using plink: first group is reference group
> ##D out <- plink::plink(x, rescale="MS", base.grp=1, D=1.7)
> ##D # summary for linking
> ##D summary(out)
> ##D   ##   -------  group2/group1*  -------
> ##D   ##   Linking Constants
> ##D   ##   
> ##D   ##                        A         B
> ##D   ##   Mean/Mean     1.000000 -0.088280
> ##D   ##   Mean/Sigma    1.000000 -0.088280
> ##D   ##   Haebara       1.000000 -0.088515
> ##D   ##   Stocking-Lord 1.000000 -0.096610
> ##D # extract linked parameters
> ##D pars.out <- plink::link.pars(out)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("equating.rasch", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("equating.rasch.jackknife")
> ### * equating.rasch.jackknife
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: equating.rasch.jackknife
> ### Title: Jackknife Equating Error in Generalized Logistic Rasch Model
> ### Aliases: equating.rasch.jackknife
> ### Keywords: Equating Linking
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Linking errors PISA study
> #############################################################################
> 
> data(data.pisaPars)
> pars <- data.pisaPars
> 
> # Linking error: Jackknife unit is the testlet
> res1 <- equating.rasch.jackknife(pars[ , c("testlet" , "study1"  , "study2" , "item" ) ] )
Jackknife Equating Procedure (Stocking-Lord)
25 Items in 8 Units
1 2 3 4 5 6 7 8 
> res1$descriptives
  N.items N.units      shift        SD linkerror.jackknife SE.SD.jackknife
1      25       8 0.09292838 0.1487387          0.04491197      0.03466309
  se.linkerror.jackknife
1                     NA
>   ##   N.items N.units      shift        SD linkerror.jackknife SE.SD.jackknife
>   ## 1      25       8 0.09292838 0.1487387          0.04491197      0.03466309
> 
> # Linking error: Jackknife unit is the item
> res2 <- equating.rasch.jackknife(pars[ , c("item" , "study1"  , "study2" , "item" ) ] )
Jackknife Equating Procedure (Stocking-Lord)
25 Items in 25 Units
1 2 3 4 5 6 7 8 9 10 
11 12 13 14 15 16 17 18 19 20 
21 22 23 24 25 
> res2$descriptives
  N.items N.units      shift        SD linkerror.jackknife SE.SD.jackknife
1      25      25 0.09292838 0.1487387          0.02682839      0.02533327
  se.linkerror.jackknife
1                     NA
>   ##   N.items N.units      shift        SD linkerror.jackknife SE.SD.jackknife
>   ## 1      25      25 0.09292838 0.1487387          0.02682839      0.02533327
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("equating.rasch.jackknife", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("f1d.irt")
> ### * f1d.irt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: f1d.irt
> ### Title: Functional Unidimensional Item Response Model
> ### Aliases: f1d.irt
> ### Keywords: Functional unidimensional item response model
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset Mathematics data.math | Exploratory multidimensional model
> #############################################################################
> data(data.math)
> dat <- ( data.math$data )[ , -c(1,2) ] # select Mathematics items
> 
> #****
> # Model 1: Functional unidimensional model based on original data
> 
> #++ (1) estimate model with 3 factors
> mod1 <- f1d.irt( dat =dat , nfactors=3)
*** Estimate tetrachoric correlation
Iteration 1 | Approximation error = 0.34131 | Max. parameter change = 4.06682
Iteration 2 | Approximation error = 0.24492 | Max. parameter change = 1.4616
Iteration 3 | Approximation error = 0.24063 | Max. parameter change = 0.31506
Iteration 4 | Approximation error = 0.24047 | Max. parameter change = 0.06119
Iteration 5 | Approximation error = 0.24046 | Max. parameter change = 0.01184
Iteration 6 | Approximation error = 0.24046 | Max. parameter change = 0.00229
Iteration 7 | Approximation error = 0.24046 | Max. parameter change = 0.00044
Iteration 8 | Approximation error = 0.24046 | Max. parameter change = 9e-05
Iteration 9 | Approximation error = 0.24046 | Max. parameter change = 2e-05
Iteration 10 | Approximation error = 0.24046 | Max. parameter change = 0
> 
> #++ (2) plot results
>      par(mfrow=c(1,2))
> library(MASS)     
> # Intercepts
> plot( mod1$item$di0 , mod1$item$di.ast , pch=16 , main="Item Intercepts" ,
+         xlab= expression( paste( d[i] , " (Unidimensional Model)" )) ,
+         ylab= expression( paste( d[i] , " (Functional Unidimensional Model)" )))
> abline( lm(mod1$item$di.ast ~ mod1$item$di0) , col=2 , lty=2 )
> abline( MASS::rlm(mod1$item$di.ast ~ mod1$item$di0) , col=3 , lty=3 )
> # Discriminations
> plot( mod1$item$ai0 , mod1$item$ai.ast , pch=16 , main="Item Discriminations" ,
+         xlab= expression( paste( a[i] , " (Unidimensional Model)" )) ,
+         ylab= expression( paste( a[i] , " (Functional Unidimensional Model)" )))
> abline( lm(mod1$item$ai.ast ~ mod1$item$ai0) , col=2 , lty=2 )
> abline( MASS::rlm(mod1$item$ai.ast ~ mod1$item$ai0) , col=3 , lty=3 )
>      par(mfrow=c(1,1))
> 
> #++ (3) estimate bifactor model and Green-Yang reliability
> gy1 <- greenyang.reliability( mod1$tetra , nfactors = 3 )
Reliability Estimation Based on a Nonlinear SEM

Green & Yang (2009, Psychometrika). Reliability of summed item scores
  using structural equation modeling: An alternative to coefficient alpha

Omega_h for 1 factor is not meaningful, just omega_t
Warning in schmid(m, nfactors, fm, digits, rotate = rotate, n.obs = n.obs,  :
  Omega_h and Omega_asymptotic are not meaningful with one factor
----------------------------------------------------------------------

                                           coefficient dimensions estimate
Omega Total (1D)                               omega_1          1    0.873
Omega Total (3D)                               omega_t          3    0.895
Omega Hierarchical (3D)                        omega_h          3    0.534
Omega Hierarchical Asymptotic (3D)            omega_ha          3    0.597
Explained Common Variance (3D)                     ECV          3    0.622
Explained Variance (First Eigenvalue)          ExplVar         NA   33.932
Eigenvalue Ratio (1st to 2nd Eigenvalue) EigenvalRatio         NA    3.425


----------------------------------------------------------------------

Output from Hierarchical Factor Analysis (psych package)

3-dimensional model

Omega 
Call: omega(m = object.tetra$rho, nfactors = nfactors)
Alpha:                 0.93 
G.6:                   0.97 
Omega Hierarchical:    0.59 
Omega H asymptotic:    0.62 
Omega Total            0.95 

Schmid Leiman Factor loadings greater than  0.2 
       g   F1*   F2*   F3*   h2   u2   p2
MA1 0.25  0.30             0.15 0.85 0.40
MA2 0.33  0.38             0.25 0.75 0.43
MA3 0.43  0.38             0.34 0.66 0.55
MA4 0.41  0.39             0.33 0.67 0.52
MB1 0.46  0.53             0.49 0.51 0.43
MB2 0.39  0.51             0.43 0.57 0.36
MB3 0.50  0.43             0.46 0.54 0.54
MB4 0.51  0.49             0.54 0.46 0.49
MC1 0.42  0.39             0.33 0.67 0.53
MC2 0.42  0.47             0.40 0.60 0.44
MC3 0.42  0.42             0.35 0.65 0.49
MC4 0.45  0.47             0.43 0.57 0.48
MD1 0.46  0.59             0.56 0.44 0.37
MD2 0.42  0.56             0.52 0.48 0.34
MD3 0.47  0.52             0.49 0.51 0.45
MD4 0.43  0.41             0.38 0.62 0.50
ME1 0.46  0.34             0.35 0.65 0.60
ME2 0.46  0.36             0.36 0.64 0.59
MF1 0.45  0.30             0.33 0.67 0.62
MG1 0.66        0.70       0.93 0.07 0.48
MG2 0.67        0.65       0.87 0.13 0.52
MG3 0.68        0.68       0.92 0.08 0.50
MG4 0.68        0.67       0.92 0.08 0.50
MH1 0.36              0.68 0.62 0.38 0.21
MH2 0.39              0.64 0.57 0.43 0.27
MH3 0.40              0.69 0.64 0.36 0.25
MH4 0.37              0.65 0.57 0.43 0.25
MI1 0.22              0.38 0.21 0.79 0.23
MI2 0.33              0.40 0.29 0.71 0.38
MI3 0.33              0.43 0.31 0.69 0.35

With eigenvalues of:
  g F1* F2* F3* 
6.2 3.8 1.9 2.4 

general/max  1.64   max/min =   1.96
mean percent general =  0.44    with sd =  0.11 and cv of  0.26 
Explained Common Variance of the general factor =  0.43 

The degrees of freedom are 348  and the fit is  8.89 

The root mean square of the residuals is  0.07 
The df corrected root mean square of the residuals is  0.08

Compare this with the adequacy of just a general factor and no group factors
The degrees of freedom for just the general factor are 405  and the fit is  16.32 

The root mean square of the residuals is  0.17 
The df corrected root mean square of the residuals is  0.18 

Measures of factor score adequacy             
                                                 g  F1*  F2*  F3*
Correlation of scores with factors            0.80 0.81 0.80 0.87
Multiple R square of scores with factors      0.65 0.66 0.64 0.76
Minimum correlation of factor score estimates 0.29 0.33 0.29 0.53

 Total, General and Subset omega for each subset
                                                 g  F1*  F2*  F3*
Omega total for total scores and subscales    0.95 0.91 0.97 0.81
Omega general for total scores and subscales  0.59 0.45 0.49 0.23
Omega group for total scores and subscales    0.30 0.46 0.49 0.59


.............................................
1-dimensional model

Omega_h for 1 factor is not meaningful, just omega_t
Warning in schmid(m, nfactors, fm, digits, rotate = rotate, n.obs = n.obs,  :
  Omega_h and Omega_asymptotic are not meaningful with one factor
Omega 
Call: omega(m = object.tetra$rho, nfactors = 1)
Alpha:                 0.93 
G.6:                   0.97 
Omega Hierarchical:    0.92 
Omega H asymptotic:    0.98 
Omega Total            0.93 

Schmid Leiman Factor loadings greater than  0.2 
       g  F1*   h2   u2 p2
MA1 0.35      0.12 0.88  1
MA2 0.46      0.21 0.79  1
MA3 0.57      0.32 0.68  1
MA4 0.56      0.31 0.69  1
MB1 0.64      0.41 0.59  1
MB2 0.56      0.32 0.68  1
MB3 0.66      0.44 0.56  1
MB4 0.69      0.48 0.52  1
MC1 0.56      0.31 0.69  1
MC2 0.58      0.34 0.66  1
MC3 0.56      0.32 0.68  1
MC4 0.62      0.38 0.62  1
MD1 0.64      0.41 0.59  1
MD2 0.59      0.35 0.65  1
MD3 0.64      0.41 0.59  1
MD4 0.57      0.33 0.67  1
ME1 0.59      0.35 0.65  1
ME2 0.60      0.36 0.64  1
MF1 0.58      0.33 0.67  1
MG1 0.69      0.48 0.52  1
MG2 0.71      0.50 0.50  1
MG3 0.71      0.50 0.50  1
MG4 0.71      0.50 0.50  1
MH1 0.34      0.11 0.89  1
MH2 0.44      0.19 0.81  1
MH3 0.42      0.18 0.82  1
MH4 0.41      0.17 0.83  1
MI1 0.26      0.07 0.93  1
MI2 0.39      0.15 0.85  1
MI3 0.39      0.15 0.85  1

With eigenvalues of:
  g F1* 
9.5 0.0 

general/max  2.633388e+16   max/min =   1
mean percent general =  1    with sd =  0 and cv of  0 
Explained Common Variance of the general factor =  1 

The degrees of freedom are 405  and the fit is  15.76 

The root mean square of the residuals is  0.13 
The df corrected root mean square of the residuals is  0.13

Compare this with the adequacy of just a general factor and no group factors
The degrees of freedom for just the general factor are 405  and the fit is  15.76 

The root mean square of the residuals is  0.13 
The df corrected root mean square of the residuals is  0.13 

Measures of factor score adequacy             
                                                 g F1*
Correlation of scores with factors            0.97   0
Multiple R square of scores with factors      0.94   0
Minimum correlation of factor score estimates 0.88  -1

 Total, General and Subset omega for each subset
                                                 g  F1*
Omega total for total scores and subscales    0.93 0.92
Omega general for total scores and subscales  0.92 0.92
Omega group for total scores and subscales    0.00 0.00
> 
> ## Not run: 
> ##D #****
> ##D # Model 2: Functional unidimensional model based on estimated multidimensional
> ##D #          item response model
> ##D 
> ##D #++ (1) estimate 2-dimensional exploratory factor analysis with 'smirt'
> ##D I <- ncol(dat)
> ##D Q <- matrix( 1, I,2 )
> ##D Q[1,2] <- 0
> ##D variance.fixed <- cbind( 1,2,0 )
> ##D mod2a <- smirt( dat , Qmatrix=Q , irtmodel="comp" , est.a="2PL" , 
> ##D                 variance.fixed=variance.fixed , maxiter=50)
> ##D #++ (2) input estimated discriminations and intercepts for
> ##D #       functional unidimensional model
> ##D mod2b <- f1d.irt( A = mod2a$a , intercept = mod2a$b )
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Dataset Mathematics data.math | Confirmatory multidimensional model
> ##D #############################################################################
> ##D 
> ##D data(data.math)
> ##D library(TAM)
> ##D 
> ##D # dataset
> ##D dat <- data.math$data
> ##D dat <- dat[ , grep("M" , colnames(dat) ) ]
> ##D # extract item informations
> ##D iteminfo <- data.math$item
> ##D I <- ncol(dat)
> ##D # define Q-matrix
> ##D Q <- matrix( 0 , nrow=I , ncol=3 )
> ##D Q[ grep( "arith" , iteminfo$domain ) , 1 ] <- 1
> ##D Q[ grep( "Meas" , iteminfo$domain ) , 2 ] <- 1
> ##D Q[ grep( "geom" , iteminfo$domain ) , 3 ] <- 1
> ##D 
> ##D # fit three-dimensional model in TAM
> ##D mod1 <- TAM::tam.mml.2pl(  dat , Q=Q , control=list(maxiter=40 , snodes=1000) )
> ##D summary(mod1)
> ##D 
> ##D # specify functional unidimensional model
> ##D intercept <- mod1$xsi[ , c("xsi") ]
> ##D names(intercept) <- rownames(mod1$xsi)
> ##D fumod1 <- f1d.irt( A = mod1$B[,2,] , intercept=intercept , Sigma= mod1$variance)
> ##D fumod1$item
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("f1d.irt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("fit.isop")
> ### * fit.isop
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fit.isop
> ### Title: Fitting the ISOP and ADISOP Model for Frequency Tables
> ### Aliases: fit.isop fit.adisop
> ### Keywords: ISOP model ADISOP model
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset Reading
> #############################################################################
> 
> data(data.read)
> dat <- as.matrix( data.read)
> dat.resp <- 1 - is.na(dat) # response indicator matrix
> I <- ncol(dat)
> 
> #***
> # (1) Data preparation
> #     actually only freq.correct and wgt are needed
> #     but these matrices must be computed in advance.
> 
> # different scores of students
> stud.p <- rowMeans( dat , na.rm=TRUE )
> # different item p values
> item.p <- colMeans( dat , na.rm=TRUE )
> item.ps <- sort( item.p, index.return=TRUE)
> dat <- dat[ ,  item.ps$ix ]
> # define score groups students
> scores <- sort( unique( stud.p ) )
> SC <- length(scores)
> # create table
> freq.correct <- matrix( NA , SC , I )
> wgt <- freq.correct
> # percent correct
> a1 <- aggregate( dat == 1 , list( stud.p ) , mean , na.rm=TRUE )
> freq.correct <- a1[,-1]
> # weights
> a1 <- aggregate( dat.resp , list( stud.p ) , sum , na.rm=TRUE )
> wgt <- a1[,-1]
> 
> #***
> # (2) Fit ISOP model
> res.isop <- fit.isop( freq.correct , wgt )   

*******ISOP Model***********
Iteration 1 - Deviation = 11.66195 
Iteration 2 - Deviation = 0.00511 
Iteration 3 - Deviation = 0 
> # fitted frequency table
> res.isop$fX
           [,1]      [,2]      [,3]      [,4]       [,5]       [,6]       [,7]
 [1,] 0.0000000 0.0000000 0.0000000 0.0000000 0.00000000 0.00000000 0.00000000
 [2,] 0.0000000 0.0000000 0.0000000 0.0000000 0.08333333 0.08333333 0.08333333
 [3,] 0.0000000 0.0000000 0.2113246 0.2273148 0.22731481 0.22731481 0.22731481
 [4,] 0.1184730 0.1400556 0.2113246 0.2413223 0.25393519 0.25393519 0.25393519
 [5,] 0.1184730 0.1613954 0.2113246 0.2560423 0.26923077 0.26923077 0.38461538
 [6,] 0.2105263 0.2812500 0.2812500 0.3437500 0.42187500 0.42187500 0.46875000
 [7,] 0.2105263 0.2954545 0.3409091 0.5454545 0.57954545 0.57954545 0.57954545
 [8,] 0.3437500 0.4375000 0.4375000 0.6093750 0.60937500 0.62500000 0.68750000
 [9,] 0.3829787 0.4468085 0.4468085 0.7021277 0.72340426 0.84397163 0.84397163
[10,] 0.4655172 0.5517241 0.7413793 0.8448276 0.84482759 0.84482759 0.84482759
[11,] 0.7500000 0.7500000 0.9066667 0.9066667 0.90666667 0.91000000 0.91000000
[12,] 1.0000000 1.0000000 1.0000000 1.0000000 1.00000000 1.00000000 1.00000000
           [,8]      [,9]     [,10]     [,11]     [,12]
 [1,] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [2,] 0.2692101 0.3350000 0.3350000 0.3350000 0.3350000
 [3,] 0.2692101 0.4166667 0.4166667 0.4166667 0.4166667
 [4,] 0.2692101 0.5000000 0.5000000 0.5555556 0.5555556
 [5,] 0.4615385 0.5111111 0.6923077 0.8504664 0.8698838
 [6,] 0.4687500 0.5111111 0.8289474 0.8504664 0.8750000
 [7,] 0.5795455 0.6818182 0.8289474 0.8504664 0.9342105
 [8,] 0.6875000 0.8755541 0.8879879 0.8879879 0.9342105
 [9,] 0.8439716 0.8755541 0.9574468 0.9574468 1.0000000
[10,] 0.9482759 0.9655172 0.9655172 0.9827586 1.0000000
[11,] 0.9800000 0.9900000 0.9900000 1.0000000 1.0000000
[12,] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
> 
> #***
> # (3) Fit ADISOP model
> # use monotonely smoothed frequency table from ISOP model
> res.adisop <- fit.adisop( freq.correct=res.isop$fX , wgt )   

*******ADISOP Model*********
Iteration 1 - Deviation = 26.06146 
Iteration 2 - Deviation = 2.834643 
Iteration 3 - Deviation = 0.907515 
Iteration 4 - Deviation = 0.671414 
Iteration 5 - Deviation = 0.544655 
Iteration 6 - Deviation = 0.434723 
Iteration 7 - Deviation = 0.327391 
Iteration 8 - Deviation = 0.245112 
Iteration 9 - Deviation = 0.183402 
Iteration 10 - Deviation = 0.136568 
Iteration 11 - Deviation = 0.101365 
Iteration 12 - Deviation = 0.075072 
Iteration 13 - Deviation = 0.055677 
Iteration 14 - Deviation = 0.041362 
Iteration 15 - Deviation = 0.030723 
Iteration 16 - Deviation = 0.022754 
Iteration 17 - Deviation = 0.016832 
Iteration 18 - Deviation = 0.012442 
Iteration 19 - Deviation = 0.00919 
Iteration 20 - Deviation = 0.006783 
Iteration 21 - Deviation = 0.005004 
Iteration 22 - Deviation = 0.003689 
Iteration 23 - Deviation = 0.002718 
Iteration 24 - Deviation = 0.002002 
Iteration 25 - Deviation = 0.001473 
Iteration 26 - Deviation = 0.001084 
Iteration 27 - Deviation = 0.000797 
Iteration 28 - Deviation = 0.000586 
Iteration 29 - Deviation = 0.000431 
Iteration 30 - Deviation = 0.000316 
Iteration 31 - Deviation = 0.000232 
Iteration 32 - Deviation = 0.000171 
Iteration 33 - Deviation = 0.000125 
Iteration 34 - Deviation = 9.2e-05 
> # fitted frequency table
> res.adisop$fX
            [,1]       [,2]       [,3]       [,4]       [,5]       [,6]
 [1,] 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000
 [2,] 0.00000000 0.00000000 0.00000000 0.03853598 0.04153613 0.08333333
 [3,] 0.00000000 0.00000000 0.09557329 0.19699028 0.19699028 0.19699028
 [4,] 0.03853598 0.09557329 0.19699028 0.24132231 0.26160472 0.26160472
 [5,] 0.09557329 0.19699028 0.26160472 0.29567659 0.29567659 0.29567659
 [6,] 0.19699028 0.26160472 0.29567659 0.37111357 0.42142788 0.42187500
 [7,] 0.21052632 0.29567659 0.37111357 0.48099838 0.51499208 0.52886802
 [8,] 0.29567659 0.37111357 0.48099838 0.55453956 0.55453956 0.59436598
 [9,] 0.40135419 0.48099838 0.55453956 0.73930447 0.77746381 0.77746381
[10,] 0.51499208 0.55453956 0.74137931 0.84482759 0.85325986 0.85325986
[11,] 0.73930447 0.77746381 0.87932567 0.94004953 0.94004953 0.94004953
[12,] 0.94004953 0.97346568 0.99237702 0.99585612 1.00000000 1.00000000
            [,7]      [,8]       [,9]      [,10]      [,11]     [,12]
 [1,] 0.00000000 0.0000000 0.04153613 0.09557329 0.09557329 0.1969903
 [2,] 0.09557329 0.1969903 0.19699028 0.26160472 0.29567659 0.3691499
 [3,] 0.19699028 0.2616047 0.29567659 0.36914986 0.42142788 0.5288680
 [4,] 0.26160472 0.2956766 0.40135419 0.48099838 0.52886802 0.5943660
 [5,] 0.37111357 0.4666652 0.52886802 0.55453956 0.73930447 0.8390876
 [6,] 0.46666520 0.5288680 0.55453956 0.73930447 0.77746381 0.8532599
 [7,] 0.55453956 0.5943660 0.73930447 0.83908763 0.85325986 0.9342105
 [8,] 0.73930447 0.7774638 0.85325986 0.87932567 0.94004953 0.9734657
 [9,] 0.84397163 0.8532599 0.94004953 0.94004953 0.97346568 0.9958561
[10,] 0.87932567 0.9400495 0.97346568 0.97346568 0.99237702 1.0000000
[11,] 0.94004953 0.9800000 0.99585612 0.99585612 1.00000000 1.0000000
[12,] 1.00000000 1.0000000 1.00000000 1.00000000 1.00000000 1.0000000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fit.isop", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fuzcluster")
> ### * fuzcluster
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fuzcluster
> ### Title: Clustering for Continuous Fuzzy Data
> ### Aliases: fuzcluster summary.fuzcluster
> ### Keywords: Fuzzy data Clustering summary
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 1: 2 classes and 3 items
> ##D #############################################################################
> ##D 
> ##D #*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
> ##D # simulate data (2 classes and 3 items)
> ##D set.seed(876)
> ##D library(mvtnorm)
> ##D Ntot <- 1000  # number of subjects
> ##D # define SDs for simulating uncertainty
> ##D sd_uncertain <- c( .2 , 1 , 2 )
> ##D 
> ##D dat_m <- NULL   # data frame containing mean of membership function
> ##D dat_s <- NULL   # data frame containing SD of membership function
> ##D 
> ##D # *** Class 1
> ##D pi_class <- .6
> ##D Nclass <- Ntot * pi_class
> ##D mu <- c(3,1,0)
> ##D Sigma <- diag(3)
> ##D # simulate data
> ##D dat_m1 <- mvtnorm::rmvnorm( Nclass , mean=mu , sigma = Sigma )
> ##D dat_s1 <- matrix( runif( Nclass * 3 ) , nrow=Nclass )
> ##D for ( ii in 1:3){ dat_s1[,ii] <- dat_s1[,ii] * sd_uncertain[ii] }
> ##D dat_m <- rbind( dat_m , dat_m1 )
> ##D dat_s <- rbind( dat_s , dat_s1 )
> ##D 
> ##D # *** Class 2
> ##D pi_class <- .4
> ##D Nclass <- Ntot * pi_class
> ##D mu <- c(0,-2,0.4)
> ##D Sigma <- diag(c(0.5 , 2 , 2 ) )
> ##D # simulate data
> ##D dat_m1 <- mvtnorm::rmvnorm( Nclass , mean=mu , sigma = Sigma )
> ##D dat_s1 <- matrix( runif( Nclass * 3 ) , nrow=Nclass )
> ##D for ( ii in 1:3){ dat_s1[,ii] <- dat_s1[,ii] * sd_uncertain[ii] }
> ##D dat_m <- rbind( dat_m , dat_m1 )
> ##D dat_s <- rbind( dat_s , dat_s1 )
> ##D colnames(dat_s) <- colnames(dat_m) <- paste0("I" , 1:3 )
> ##D 
> ##D #*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
> ##D # estimation
> ##D 
> ##D #*** Model 1: Clustering with 8 random starts
> ##D res1 <- fuzcluster(K=2,dat_m , dat_s , nstarts = 8 , maxiter=25)
> ##D summary(res1)
> ##D   ##  Number of iterations = 22 (Seed = 5090 ) 
> ##D   ##  --------------------------------------------------- 
> ##D   ##  Class probabilities (2 Classes) 
> ##D   ##  [1] 0.4083 0.5917
> ##D   ##  
> ##D   ##  Means
> ##D   ##           I1      I2     I3
> ##D   ##  [1,] 0.0595 -1.9070 0.4011
> ##D   ##  [2,] 3.0682  1.0233 0.0359
> ##D   ##  
> ##D   ##  Standard deviations
> ##D   ##         [,1]   [,2]   [,3]
> ##D   ##  [1,] 0.7238 1.3712 1.2647
> ##D   ##  [2,] 0.9740 0.8500 0.7523
> ##D 
> ##D #*** Model 2: Clustering with one start with seed 4550
> ##D res2 <- fuzcluster(K=2,dat_m , dat_s , nstarts = 1 , seed= 5090 )
> ##D summary(res2)
> ##D 
> ##D #*** Model 3: Clustering for crisp data 
> ##D #             (assuming no uncertainty, i.e. dat_s = 0)
> ##D res3 <- fuzcluster(K=2,dat_m , dat_s=0*dat_s , nstarts = 30 , maxiter=25)
> ##D summary(res3)
> ##D   ##  Class probabilities (2 Classes) 
> ##D   ##  [1] 0.3645 0.6355
> ##D   ##  
> ##D   ##  Means
> ##D   ##           I1      I2      I3
> ##D   ##  [1,] 0.0463 -1.9221  0.4481
> ##D   ##  [2,] 3.0527  1.0241 -0.0008
> ##D   ##  
> ##D   ##  Standard deviations
> ##D   ##         [,1]   [,2]   [,3]
> ##D   ##  [1,] 0.7261 1.4541 1.4586
> ##D   ##  [2,] 0.9933 0.9592 0.9535
> ##D 
> ##D #*** Model 4: kmeans cluster analysis
> ##D res4 <- kmeans( dat_m , centers = 2 )
> ##D   ##   K-means clustering with 2 clusters of sizes 607, 393
> ##D   ##   Cluster means:
> ##D   ##             I1        I2          I3
> ##D   ##   1 3.01550780  1.035848 -0.01662275
> ##D   ##   2 0.03448309 -2.008209  0.48295067
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fuzcluster", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fuzdiscr")
> ### * fuzdiscr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fuzdiscr
> ### Title: Estimation of a Discrete Distribution for Fuzzy Data (Data in
> ###   Belief Function Framework)
> ### Aliases: fuzdiscr
> ### Keywords: Fuzzy data Belief function
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Binomial distribution Denoeux Example 4.3 (2013)
> #############################################################################
> 
> #*** define uncertain data
> X_alpha <- function( alpha ){
+     Q <- matrix( 0 , 6 , 2 )
+     Q[5:6,2] <- Q[1:3,1] <- 1
+     Q[4,] <- c( alpha , 1 - alpha )
+     return(Q)
+         }
> 
> # define data for alpha = 0.5
> X <- X_alpha( alpha=.5 )
>   ##   > X
>   ##        [,1] [,2]
>   ##   [1,]  1.0  0.0
>   ##   [2,]  1.0  0.0
>   ##   [3,]  1.0  0.0
>   ##   [4,]  0.5  0.5
>   ##   [5,]  0.0  1.0
>   ##   [6,]  0.0  1.0
> 
>   ## The fourth observation has equal plausibility for the first and the
>   ## second category.
> 
> # parameter estimate uncertain data
> fuzdiscr( X )
[1] 0.5999871 0.4000129
>   ##   > fuzdiscr( X )
>   ##   [1] 0.5999871 0.4000129
> 
> # parameter estimate pseudo likelihood
> colMeans( X )
[1] 0.5833333 0.4166667
>   ##   > colMeans( X )
>   ##   [1] 0.5833333 0.4166667
> ##-> Observations are weighted according to belief function values.
> 
> #*****
> # plot parameter estimates as function of alpha
> alpha <- seq( 0 , 1 , len=100 )
> res <- sapply( alpha , FUN = function(aa){
+              X <- X_alpha( alpha=aa ) 
+              c( fuzdiscr( X )[1] , colMeans( X )[1] )
+                     } )
> # plot
> plot( alpha , res[1,] , xlab = expression(alpha) , ylab=expression( theta[alpha] ) , type="l" ,
+         main="Comparison Belief Function and Pseudo-Likelihood (Example 1)")
> lines( alpha , res[2,] , lty=2 , col=2)
> legend( 0 , .67 , c("Belief Function" , "Pseudo-Likelihood" ) , col=c(1,2) , lty=c(1,2) )
> 
> #############################################################################
> # EXAMPLE 2: Binomial distribution (extends Example 1)
> #############################################################################
> 
> X_alpha <- function( alpha ){
+     Q <- matrix( 0 , 6 , 2 )
+     Q[6,2] <- Q[1:2,1] <- 1
+     Q[3:5,] <- matrix( c( alpha , 1 - alpha ) , 3 , 2 , byrow=TRUE)
+     return(Q)
+         }
> 
> X <- X_alpha( alpha=.5 )
> alpha <- seq( 0 , 1 , len=100 )
> res <- sapply( alpha , FUN = function(aa){
+            X <- X_alpha( alpha=aa ) 
+            c( fuzdiscr( X )[1] , colMeans( X )[1] )
+                     } )
> # plot                    
> plot( alpha , res[1,] , xlab = expression(alpha) , ylab=expression( theta[alpha] ) , type="l" ,
+         main="Comparison Belief Function and Pseudo-Likelihood (Example 2)")
> lines( alpha , res[2,] , lty=2 , col=2)
> legend( 0 , .67 , c("Belief Function" , "Pseudo-Likelihood" ) , col=c(1,2) , lty=c(1,2) )
> 
> #############################################################################
> # EXAMPLE 3: Multinomial distribution with three categories
> #############################################################################
> 
> # define uncertain data
> X <- matrix( c( 1,0,0 , 1,0,0 ,   0,1,0 , 0,0,1 , .7 , .2 , .1 ,
+          .4 , .6 , 0 ) , 6 , 3 , byrow=TRUE )
>   ##   > X
>   ##        [,1] [,2] [,3]
>   ##   [1,]  1.0  0.0  0.0
>   ##   [2,]  1.0  0.0  0.0
>   ##   [3,]  0.0  1.0  0.0
>   ##   [4,]  0.0  0.0  1.0
>   ##   [5,]  0.7  0.2  0.1
>   ##   [6,]  0.4  0.6  0.0
> 
> ##->  Only the first four observations are crisp.
> 
> #*** estimation for uncertain data
> fuzdiscr( X )
[1] 0.5772305 0.2499931 0.1727764
>   ##   > fuzdiscr( X )
>   ##   [1] 0.5772305 0.2499931 0.1727764
> 
> #*** estimation pseudo-likelihood
> colMeans(X)
[1] 0.5166667 0.3000000 0.1833333
>   ##   > colMeans(X)
>   ##   [1] 0.5166667 0.3000000 0.1833333
> 
> ##-> Obviously, the treatment uncertainty is different in belief function
> ##   and in pseudo-likelihood framework.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fuzdiscr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gom.em")
> ### * gom.em
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gom.em
> ### Title: Discrete (Rasch) Grade of Membership Model
> ### Aliases: gom.em summary.gom logLik.gom anova.gom IRT.irfprob.gom
> ###   IRT.likelihood.gom IRT.posterior.gom IRT.modelfit.gom
> ###   summary.IRT.modelfit.gom
> ### Keywords: Grade of membership model Rasch grade of membership model
> ###   summary
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: PISA data mathematics
> #############################################################################
> 
> data(data.pisaMath)
> dat <- data.pisaMath$data
> dat <- dat[ , grep("M" , colnames(dat)) ]
> 
> #***
> # Model 1: Discrete GOM with 3 classes and 5 probability levels
> problevels <- seq( 0 , 1 , len=5 )
> mod1 <- gom.em( dat , K=3 , problevels ,  model="GOM"  )            
...........................................................
Iteration 1     2015-06-13 13:24:04 
  M steps lambda parameter |----  4 Step(s) 
   Deviance = 8289.0897
    Maximum lambda parameter change = 0.334786
    Maximum distribution parameter change = 0
...........................................................
Iteration 2     2015-06-13 13:24:04 
  M steps lambda parameter |----  4 Step(s) 
   Deviance = 7531.7511 | Deviance change = 757.338571
    Maximum lambda parameter change = 0.085584
    Maximum distribution parameter change = 0
...........................................................
Iteration 3     2015-06-13 13:24:04 
  M steps lambda parameter |----  4 Step(s) 
   Deviance = 7489.6351 | Deviance change = 42.116045
    Maximum lambda parameter change = 0.039766
    Maximum distribution parameter change = 0
...........................................................
Iteration 4     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7476.2368 | Deviance change = 13.398316
    Maximum lambda parameter change = 0.034021
    Maximum distribution parameter change = 0
...........................................................
Iteration 5     2015-06-13 13:24:04 
  M steps lambda parameter |----  4 Step(s) 
   Deviance = 7468.1886 | Deviance change = 8.048181
    Maximum lambda parameter change = 0.030766
    Maximum distribution parameter change = 0
...........................................................
Iteration 6     2015-06-13 13:24:04 
  M steps lambda parameter |----  4 Step(s) 
   Deviance = 7461.8653 | Deviance change = 6.323276
    Maximum lambda parameter change = 0.026755
    Maximum distribution parameter change = 0
...........................................................
Iteration 7     2015-06-13 13:24:04 
  M steps lambda parameter |----  4 Step(s) 
   Deviance = 7456.6466 | Deviance change = 5.218715
    Maximum lambda parameter change = 0.022326
    Maximum distribution parameter change = 0
...........................................................
Iteration 8     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7452.5203 | Deviance change = 4.126286
    Maximum lambda parameter change = 0.018041
    Maximum distribution parameter change = 0
...........................................................
Iteration 9     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7449.5013 | Deviance change = 3.019054
    Maximum lambda parameter change = 0.014364
    Maximum distribution parameter change = 0
...........................................................
Iteration 10     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7447.2465 | Deviance change = 2.254726
    Maximum lambda parameter change = 0.011468
    Maximum distribution parameter change = 0
...........................................................
Iteration 11     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7445.6585 | Deviance change = 1.588042
    Maximum lambda parameter change = 0.009313
    Maximum distribution parameter change = 0
...........................................................
Iteration 12     2015-06-13 13:24:04 
  M steps lambda parameter |----  4 Step(s) 
   Deviance = 7444.3574 | Deviance change = 1.301111
    Maximum lambda parameter change = 0.007734
    Maximum distribution parameter change = 0
...........................................................
Iteration 13     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7443.3277 | Deviance change = 1.029667
    Maximum lambda parameter change = 0.007235
    Maximum distribution parameter change = 0
...........................................................
Iteration 14     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7442.4961 | Deviance change = 0.831646
    Maximum lambda parameter change = 0.006747
    Maximum distribution parameter change = 0
...........................................................
Iteration 15     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7441.6891 | Deviance change = 0.806984
    Maximum lambda parameter change = 0.006436
    Maximum distribution parameter change = 0
...........................................................
Iteration 16     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7441.0123 | Deviance change = 0.676737
    Maximum lambda parameter change = 0.006184
    Maximum distribution parameter change = 0
...........................................................
Iteration 17     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7440.3223 | Deviance change = 0.69002
    Maximum lambda parameter change = 0.005981
    Maximum distribution parameter change = 0
...........................................................
Iteration 18     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7439.7224 | Deviance change = 0.599891
    Maximum lambda parameter change = 0.005821
    Maximum distribution parameter change = 0
...........................................................
Iteration 19     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7439.0846 | Deviance change = 0.637781
    Maximum lambda parameter change = 0.005657
    Maximum distribution parameter change = 0
...........................................................
Iteration 20     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7438.5236 | Deviance change = 0.561057
    Maximum lambda parameter change = 0.005655
    Maximum distribution parameter change = 0
...........................................................
Iteration 21     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7437.8882 | Deviance change = 0.635437
    Maximum lambda parameter change = 0.005502
    Maximum distribution parameter change = 0
...........................................................
Iteration 22     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7437.3639 | Deviance change = 0.524214
    Maximum lambda parameter change = 0.005443
    Maximum distribution parameter change = 0
...........................................................
Iteration 23     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7436.7549 | Deviance change = 0.60908
    Maximum lambda parameter change = 0.005357
    Maximum distribution parameter change = 0
...........................................................
Iteration 24     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7436.2573 | Deviance change = 0.497514
    Maximum lambda parameter change = 0.005321
    Maximum distribution parameter change = 0
...........................................................
Iteration 25     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7435.6825 | Deviance change = 0.574802
    Maximum lambda parameter change = 0.005216
    Maximum distribution parameter change = 0
...........................................................
Iteration 26     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7435.2241 | Deviance change = 0.458454
    Maximum lambda parameter change = 0.005164
    Maximum distribution parameter change = 0
...........................................................
Iteration 27     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7434.6897 | Deviance change = 0.534423
    Maximum lambda parameter change = 0.005034
    Maximum distribution parameter change = 0
...........................................................
Iteration 28     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7434.2734 | Deviance change = 0.416305
    Maximum lambda parameter change = 0.004956
    Maximum distribution parameter change = 0
...........................................................
Iteration 29     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7433.7809 | Deviance change = 0.492462
    Maximum lambda parameter change = 0.004807
    Maximum distribution parameter change = 0
...........................................................
Iteration 30     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7433.4047 | Deviance change = 0.376157
    Maximum lambda parameter change = 0.004713
    Maximum distribution parameter change = 0
...........................................................
Iteration 31     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7432.9525 | Deviance change = 0.452212
    Maximum lambda parameter change = 0.004552
    Maximum distribution parameter change = 0
...........................................................
Iteration 32     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7432.614 | Deviance change = 0.338489
    Maximum lambda parameter change = 0.004452
    Maximum distribution parameter change = 0
...........................................................
Iteration 33     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7432.1994 | Deviance change = 0.414655
    Maximum lambda parameter change = 0.004284
    Maximum distribution parameter change = 0
...........................................................
Iteration 34     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7431.896 | Deviance change = 0.303385
    Maximum lambda parameter change = 0.004184
    Maximum distribution parameter change = 0
...........................................................
Iteration 35     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7431.5161 | Deviance change = 0.379872
    Maximum lambda parameter change = 0.004015
    Maximum distribution parameter change = 0
...........................................................
Iteration 36     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7431.2453 | Deviance change = 0.270873
    Maximum lambda parameter change = 0.003918
    Maximum distribution parameter change = 0
...........................................................
Iteration 37     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7430.8974 | Deviance change = 0.347837
    Maximum lambda parameter change = 0.003751
    Maximum distribution parameter change = 0
...........................................................
Iteration 38     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7430.6565 | Deviance change = 0.240948
    Maximum lambda parameter change = 0.00366
    Maximum distribution parameter change = 0
...........................................................
Iteration 39     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7430.338 | Deviance change = 0.318497
    Maximum lambda parameter change = 0.003496
    Maximum distribution parameter change = 0
...........................................................
Iteration 40     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7430.1244 | Deviance change = 0.213576
    Maximum lambda parameter change = 0.00341
    Maximum distribution parameter change = 0
...........................................................
Iteration 41     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7429.8326 | Deviance change = 0.291771
    Maximum lambda parameter change = 0.00325
    Maximum distribution parameter change = 0
...........................................................
Iteration 42     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7429.6439 | Deviance change = 0.188688
    Maximum lambda parameter change = 0.003171
    Maximum distribution parameter change = 0
...........................................................
Iteration 43     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7429.3764 | Deviance change = 0.267547
    Maximum lambda parameter change = 0.003015
    Maximum distribution parameter change = 0
...........................................................
Iteration 44     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7429.2102 | Deviance change = 0.166179
    Maximum lambda parameter change = 0.002943
    Maximum distribution parameter change = 0
...........................................................
Iteration 45     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7428.9645 | Deviance change = 0.245689
    Maximum lambda parameter change = 0.002791
    Maximum distribution parameter change = 0
...........................................................
Iteration 46     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7428.8186 | Deviance change = 0.145919
    Maximum lambda parameter change = 0.002725
    Maximum distribution parameter change = 0
...........................................................
Iteration 47     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7428.5926 | Deviance change = 0.226041
    Maximum lambda parameter change = 0.002579
    Maximum distribution parameter change = 0
...........................................................
Iteration 48     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7428.4648 | Deviance change = 0.12776
    Maximum lambda parameter change = 0.002519
    Maximum distribution parameter change = 0
...........................................................
Iteration 49     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7428.2564 | Deviance change = 0.208439
    Maximum lambda parameter change = 0.002377
    Maximum distribution parameter change = 0
...........................................................
Iteration 50     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7428.1448 | Deviance change = 0.111541
    Maximum lambda parameter change = 0.002324
    Maximum distribution parameter change = 0
...........................................................
Iteration 51     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7427.9521 | Deviance change = 0.192716
    Maximum lambda parameter change = 0.002187
    Maximum distribution parameter change = 0
...........................................................
Iteration 52     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7427.855 | Deviance change = 0.097106
    Maximum lambda parameter change = 0.00214
    Maximum distribution parameter change = 0
...........................................................
Iteration 53     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7427.6763 | Deviance change = 0.178718
    Maximum lambda parameter change = 0.002007
    Maximum distribution parameter change = 0
...........................................................
Iteration 54     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7427.592 | Deviance change = 0.08431
    Maximum lambda parameter change = 0.001967
    Maximum distribution parameter change = 0
...........................................................
Iteration 55     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7427.4257 | Deviance change = 0.166302
    Maximum lambda parameter change = 0.00184
    Maximum distribution parameter change = 0
...........................................................
Iteration 56     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7427.3527 | Deviance change = 0.073019
    Maximum lambda parameter change = 0.001806
    Maximum distribution parameter change = 0
...........................................................
Iteration 57     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7427.1973 | Deviance change = 0.155337
    Maximum lambda parameter change = 0.001684
    Maximum distribution parameter change = 0
...........................................................
Iteration 58     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7427.1342 | Deviance change = 0.063101
    Maximum lambda parameter change = 0.001656
    Maximum distribution parameter change = 0
...........................................................
Iteration 59     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7426.9885 | Deviance change = 0.145685
    Maximum lambda parameter change = 0.001539
    Maximum distribution parameter change = 0
...........................................................
Iteration 60     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7426.8908 | Deviance change = 0.097688
    Maximum lambda parameter change = 0.001485
    Maximum distribution parameter change = 0
...........................................................
Iteration 61     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7426.7971 | Deviance change = 0.093766
    Maximum lambda parameter change = 0.001425
    Maximum distribution parameter change = 0
...........................................................
Iteration 62     2015-06-13 13:24:04 
  M steps lambda parameter |---  3 Step(s) 
   Deviance = 7426.7071 | Deviance change = 0.089993
    Maximum lambda parameter change = 0.001365
    Maximum distribution parameter change = 0
...........................................................
Iteration 63     2015-06-13 13:24:04 
  M steps lambda parameter |--  2 Step(s) 
   Deviance = 7426.6206 | Deviance change = 0.086447
    Maximum lambda parameter change = 0.001304
    Maximum distribution parameter change = 0
...........................................................
Iteration 64     2015-06-13 13:24:04 
  M steps lambda parameter |--  2 Step(s) 
   Deviance = 7426.5478 | Deviance change = 0.072834
    Maximum lambda parameter change = 0.001261
    Maximum distribution parameter change = 0
...........................................................
Iteration 65     2015-06-13 13:24:04 
  M steps lambda parameter |-  1 Step(s) 
   Deviance = 7426.4807 | Deviance change = 0.067114
    Maximum lambda parameter change = 0.000997
    Maximum distribution parameter change = 0
*********************************
Item Parameters
      item   N     p lam.Cl1 lam.Cl2 lam.Cl3
1  M192Q01 565 0.457   0.127   0.320   0.831
2  M406Q01 565 0.441   0.113   0.139   0.906
3  M406Q02 565 0.281   0.003   0.001   0.714
4  M423Q01 565 0.740   0.532   0.847   0.848
5  M496Q01 565 0.554   0.002   0.795   0.899
6  M496Q02 565 0.715   0.235   0.998   0.941
7  M564Q01 565 0.515   0.305   0.358   0.798
8  M564Q02 565 0.526   0.304   0.415   0.789
9  M571Q01 565 0.547   0.181   0.487   0.892
10 M603Q01 565 0.556   0.193   0.545   0.876
11 M603Q02 565 0.474   0.087   0.414   0.838
> summary(mod1)
----------------------------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:04 
Time difference of 0.3045509 secs
Computation Time: 0.3045509 

  Function 'gom.em' 
   Discrete Grade of Membership Model

    565 Cases,  11 Items,  3 Classes , 15 Discrete Integration Points
----------------------------------------------------------------------------------
Number of iterations = 65 
Deviance =  7426.48  | Log Likelihood =  -3713.24 
Number of persons =  565 
Number of estimated parameters =  47 
  Number of estimated item parameters =  33 
  Number of estimated distribution parameters =  14 
AIC  =  7520.48  | penalty = 94    | AIC = -2*LL + 2*p  
AICc =  7529.21  | penalty = 102.73    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  7724.31  | penalty = 297.83    | BIC = -2*LL + log(n)*p  
CAIC =  7771.31  | penalty = 344.83   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

----------------------------------------------------------------------------------
Membership Function Descriptives 
                      Class1 Class2 Class3
p.Class                0.342  0.260  0.398
p.problevel0.class     0.438  0.582  0.432
p.problevel0.25.class  0.109  0.155  0.064
p.problevel0.5.class   0.230  0.059  0.201
p.problevel0.75.class  0.091  0.049  0.086
p.problevel1.class     0.132  0.155  0.217
M.problevel0.class     0.700  0.571  0.338
M.problevel0.25.class  0.550  0.478  0.440
M.problevel0.5.class   0.482  0.423  0.534
M.problevel0.75.class  0.290  0.444  0.724
M.problevel1.class     0.183  0.483  0.848
----------------------------------------------------------------------------------
Item Parameters 
      item   N     p lam.Cl1 lam.Cl2 lam.Cl3
1  M192Q01 565 0.457   0.127   0.320   0.831
2  M406Q01 565 0.441   0.113   0.139   0.906
3  M406Q02 565 0.281   0.003   0.001   0.714
4  M423Q01 565 0.740   0.532   0.847   0.848
5  M496Q01 565 0.554   0.002   0.795   0.899
6  M496Q02 565 0.715   0.235   0.998   0.941
7  M564Q01 565 0.515   0.305   0.358   0.798
8  M564Q02 565 0.526   0.304   0.415   0.789
9  M571Q01 565 0.547   0.181   0.487   0.892
10 M603Q01 565 0.556   0.193   0.545   0.876
11 M603Q02 565 0.474   0.087   0.414   0.838
> 
> ## Not run: 
> ##D #***
> ##D # Model 2: Discrete GOM with 4 classes and 5 probability levels
> ##D problevels <- seq( 0 , 1 , len=5 )
> ##D mod2 <- gom.em( dat , K=4 , problevels ,  model="GOM"  )            
> ##D summary(mod2)
> ##D 
> ##D # model comparison
> ##D smod1 <- IRT.modelfit(mod1)
> ##D smod2 <- IRT.modelfit(mod2)
> ##D IRT.compareModels(smod1,smod2)
> ##D 
> ##D #***
> ##D # Model 2a: Estimate discrete GOM with 4 classes and restricted space of probability levels
> ##D #  the 2nd, 4th and 6th class correspond to "intermediate stages"
> ##D problevels <- scan()
> ##D  1  0  0  0
> ##D .5 .5  0  0
> ##D  0  1  0  0
> ##D  0 .5 .5  0
> ##D  0  0  1  0
> ##D  0  0 .5 .5
> ##D  0  0  0  1
> ##D 
> ##D problevels <- matrix( problevels, ncol=4 , byrow=TRUE)
> ##D mod2a <- gom.em( dat , K=4 , problevels ,  model="GOM" )            
> ##D # probability distribution for latent classes
> ##D cbind( mod2a$theta.k , mod2a$pi.k )
> ##D   ##        [,1] [,2] [,3] [,4]       [,5]
> ##D   ##   [1,]  1.0  0.0  0.0  0.0 0.17214630
> ##D   ##   [2,]  0.5  0.5  0.0  0.0 0.04965676
> ##D   ##   [3,]  0.0  1.0  0.0  0.0 0.09336660
> ##D   ##   [4,]  0.0  0.5  0.5  0.0 0.06555719
> ##D   ##   [5,]  0.0  0.0  1.0  0.0 0.27523678
> ##D   ##   [6,]  0.0  0.0  0.5  0.5 0.08458620
> ##D   ##   [7,]  0.0  0.0  0.0  1.0 0.25945016
> ## End(Not run)
> 
> #***
> # Model 3: Rasch GOM
> mod3 <- gom.em( dat , model="GOMRasch" , maxiter=20 )            
...........................................................
Iteration 1     2015-06-13 13:24:04 
  M steps b parameter |---  3 Step(s) 
   Deviance = 7579.3742
    Maximum lambda parameter change = 0.063932
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.264233
...........................................................
Iteration 2     2015-06-13 13:24:04 
  M steps b parameter |--  2 Step(s) 
   Deviance = 7551.7148 | Deviance change = 27.659427
    Maximum lambda parameter change = 0.006278
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.025402
...........................................................
Iteration 3     2015-06-13 13:24:04 
  M steps b parameter |--  2 Step(s) 
   Deviance = 7548.0593 | Deviance change = 3.655566
    Maximum lambda parameter change = 0.003971
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.016032
...........................................................
Iteration 4     2015-06-13 13:24:04 
  M steps b parameter |--  2 Step(s) 
   Deviance = 7546.1199 | Deviance change = 1.93938
    Maximum lambda parameter change = 0.002599
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.01048
...........................................................
Iteration 5     2015-06-13 13:24:04 
  M steps b parameter |--  2 Step(s) 
   Deviance = 7544.9009 | Deviance change = 1.218943
    Maximum lambda parameter change = 0.001657
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.006677
...........................................................
Iteration 6     2015-06-13 13:24:04 
  M steps b parameter |--  2 Step(s) 
   Deviance = 7544.0131 | Deviance change = 0.887832
    Maximum lambda parameter change = 0.00105
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.004228
...........................................................
Iteration 7     2015-06-13 13:24:04 
  M steps b parameter |--  2 Step(s) 
   Deviance = 7543.2973 | Deviance change = 0.715842
    Maximum lambda parameter change = 0.000735
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.002944
...........................................................
Iteration 8     2015-06-13 13:24:04 
  M steps b parameter |--  2 Step(s) 
   Deviance = 7542.6847 | Deviance change = 0.61257
    Maximum lambda parameter change = 0.000558
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.002234
...........................................................
Iteration 9     2015-06-13 13:24:04 
  M steps b parameter |--  2 Step(s) 
   Deviance = 7542.1426 | Deviance change = 0.542083
    Maximum lambda parameter change = 0.000444
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.00178
...........................................................
Iteration 10     2015-06-13 13:24:04 
  M steps b parameter |--  2 Step(s) 
   Deviance = 7541.6533 | Deviance change = 0.489309
    Maximum lambda parameter change = 0.000368
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.001475
...........................................................
Iteration 11     2015-06-13 13:24:04 
  M steps b parameter |--  2 Step(s) 
   Deviance = 7541.2059 | Deviance change = 0.447354
    Maximum lambda parameter change = 0.000314
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.001257
...........................................................
Iteration 12     2015-06-13 13:24:04 
  M steps b parameter |-  1 Step(s) 
   Deviance = 7540.7932 | Deviance change = 0.41273
    Maximum lambda parameter change = 0.000219
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.00088
...........................................................
Iteration 13     2015-06-13 13:24:04 
  M steps b parameter |-  1 Step(s) 
   Deviance = 7540.41 | Deviance change = 0.38322
    Maximum lambda parameter change = 0.00018
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.000724
...........................................................
Iteration 14     2015-06-13 13:24:04 
  M steps b parameter |-  1 Step(s) 
   Deviance = 7540.0521 | Deviance change = 0.357848
    Maximum lambda parameter change = 0.000132
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.000533
...........................................................
Iteration 15     2015-06-13 13:24:04 
  M steps b parameter |-  1 Step(s) 
   Deviance = 7539.7162 | Deviance change = 0.335923
    Maximum lambda parameter change = 9.1e-05
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.000368
...........................................................
Iteration 16     2015-06-13 13:24:04 
  M steps b parameter |-  1 Step(s) 
   Deviance = 7539.3992 | Deviance change = 0.317003
    Maximum lambda parameter change = 6.1e-05
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.000248
...........................................................
Iteration 17     2015-06-13 13:24:04 
  M steps b parameter |-  1 Step(s) 
   Deviance = 7539.0987 | Deviance change = 0.30051
    Maximum lambda parameter change = 4.4e-05
    Maximum distribution parameter change = 0
    Maximum b parameter change = 0.00018
...........................................................
Iteration 18     2015-06-13 13:24:04 
  M steps b parameter |-  1 Step(s) 
   Deviance = 7538.8126 | Deviance change = 0.286078
    Maximum lambda parameter change = 2.4e-05
    Maximum distribution parameter change = 0
    Maximum b parameter change = 9.7e-05
...........................................................
Iteration 19     2015-06-13 13:24:04 
  M steps b parameter |-  1 Step(s) 
   Deviance = 7538.5392 | Deviance change = 0.273456
    Maximum lambda parameter change = 1.9e-05
    Maximum distribution parameter change = 0
    Maximum b parameter change = 7.7e-05
...........................................................
Iteration 20     2015-06-13 13:24:04 
  M steps b parameter |-  1 Step(s) 
   Deviance = 7538.2768 | Deviance change = 0.262369
    Maximum lambda parameter change = 1.2e-05
    Maximum distribution parameter change = 0
    Maximum b parameter change = 5e-05
*********************************
Item Parameters
      item   N     p      b lam.Cl1 lam.Cl2 lam.Cl3 lam.Cl4 lam.Cl5 lam.Cl6
1  M192Q01 565 0.457  0.244   0.005   0.011   0.022   0.043   0.084   0.158
2  M406Q01 565 0.441  0.335   0.005   0.010   0.020   0.039   0.077   0.146
3  M406Q02 565 0.281  1.274   0.002   0.004   0.008   0.016   0.032   0.063
4  M423Q01 565 0.740 -1.362   0.026   0.051   0.099   0.183   0.314   0.483
5  M496Q01 565 0.554 -0.284   0.009   0.018   0.036   0.071   0.135   0.241
6  M496Q02 565 0.715 -1.203   0.022   0.044   0.086   0.160   0.281   0.444
7  M564Q01 565 0.515 -0.072   0.007   0.015   0.029   0.058   0.112   0.205
8  M564Q02 565 0.526 -0.130   0.008   0.015   0.031   0.061   0.118   0.214
9  M571Q01 565 0.547 -0.239   0.008   0.017   0.034   0.068   0.130   0.233
10 M603Q01 565 0.556 -0.291   0.009   0.018   0.036   0.071   0.136   0.243
11 M603Q02 565 0.474  0.149   0.006   0.012   0.024   0.047   0.092   0.171
   lam.Cl7 lam.Cl8 lam.Cl9 lam.Cl10 lam.Cl11 lam.Cl12 lam.Cl13 lam.Cl14
1    0.277   0.439   0.616    0.766    0.870    0.932    0.965    0.983
2    0.259   0.417   0.594    0.749    0.859    0.926    0.962    0.981
3    0.120   0.219   0.364    0.539    0.705    0.830    0.909    0.953
4    0.656   0.796   0.889    0.942    0.971    0.986    0.993    0.996
5    0.394   0.570   0.731    0.847    0.919    0.959    0.979    0.990
6    0.620   0.769   0.872    0.933    0.966    0.983    0.992    0.996
7    0.345   0.518   0.687    0.818    0.902    0.949    0.975    0.987
8    0.358   0.532   0.699    0.826    0.907    0.952    0.976    0.988
9    0.383   0.560   0.722    0.841    0.915    0.957    0.978    0.989
10   0.396   0.572   0.732    0.848    0.919    0.959    0.979    0.990
11   0.297   0.463   0.638    0.782    0.880    0.937    0.968    0.984
   lam.Cl15
1     0.991
2     0.991
3     0.976
4     0.998
5     0.995
6     0.998
7     0.994
8     0.994
9     0.995
10    0.995
11    0.992
*********************************
Trait Distribution (Location, Variability)
 Means:  0 0.303 
 Standard deviations:  1.256 0.492 
 Correlation  0.134 
*********************************
EAP Reliability =  0.744 0.026 
> summary(mod3)
----------------------------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:05 
Time difference of 0.5895181 secs
Computation Time: 0.5895181 

  Function 'gom.em' 
   Rasch Grade of Membership Model

    565 Cases,  11 Items,  15 Classes , 225 Discrete Integration Points
----------------------------------------------------------------------------------
Number of iterations = 20 
Deviance =  7538.28  | Log Likelihood =  -3769.14 
Number of persons =  565 
Number of estimated parameters =  15 
  Number of estimated item parameters =  11 
  Number of estimated distribution parameters =  4 
AIC  =  7568.28  | penalty = 30    | AIC = -2*LL + 2*p  
AICc =  7569.15  | penalty = 30.87    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  7633.33  | penalty = 95.05    | BIC = -2*LL + log(n)*p  
CAIC =  7648.33  | penalty = 110.05   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

----------------------------------------------------------------------------------
Trait Distribution (Location, Variability)
 Means:  0 0.303 
 Standard deviations:  1.256 0.492 
 Correlation  0.134 
EAP Reliability =  0.744 0.026 
----------------------------------------------------------------------------------
Membership Function Descriptives 
                      Class1 Class2 Class3 Class4 Class5 Class6 Class7 Class8
p.Class                0.000  0.001  0.005  0.019  0.058  0.126  0.199  0.227
p.problevel0.class     1.000  0.999  0.993  0.973  0.922  0.833  0.739  0.700
p.problevel0.25.class  0.000  0.001  0.003  0.010  0.026  0.050  0.076  0.089
p.problevel0.5.class   0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000
p.problevel0.75.class  0.000  0.000  0.000  0.002  0.006  0.013  0.021  0.026
p.problevel1.class     0.000  0.001  0.004  0.016  0.047  0.104  0.164  0.186
M.problevel0.class     0.528  0.529  0.533  0.539  0.548  0.571  0.596  0.534
M.problevel0.25.class  0.034  0.057  0.076  0.133  0.226  0.352  0.448  0.500
M.problevel0.5.class   0.013  0.023    NaN    NaN    NaN    NaN    NaN    NaN
M.problevel0.75.class  0.009  0.017  0.036  0.075  0.144  0.244  0.380  0.527
M.problevel1.class     0.007  0.015  0.033  0.071  0.137  0.238  0.376  0.527
                      Class9 Class10 Class11 Class12 Class13 Class14 Class15
p.Class                0.189   0.114   0.051   0.016   0.004   0.001   0.000
p.problevel0.class     0.744   0.838   0.923   0.973   0.993   0.998   1.000
p.problevel0.25.class  0.082   0.059   0.033   0.014   0.004   0.001   0.000
p.problevel0.5.class   0.000   0.000   0.000   0.000   0.000   0.000   0.000
p.problevel0.75.class  0.022   0.014   0.006   0.002   0.000   0.000   0.000
p.problevel1.class     0.152   0.089   0.038   0.011   0.003   0.000   0.000
M.problevel0.class     0.496   0.459   0.477   0.512   0.526   0.527   0.528
M.problevel0.25.class  0.630   0.764   0.814   0.865   0.906   0.888   0.922
M.problevel0.5.class     NaN     NaN     NaN     NaN     NaN   0.976   0.985
M.problevel0.75.class  0.681   0.807   0.883   0.933   0.964   0.982   0.990
M.problevel1.class     0.686   0.813   0.888   0.937   0.967   0.984   0.992
----------------------------------------------------------------------------------
Item Parameters 
      item   N     p      b lam.Cl1 lam.Cl2 lam.Cl3 lam.Cl4 lam.Cl5 lam.Cl6
1  M192Q01 565 0.457  0.244   0.005   0.011   0.022   0.043   0.084   0.158
2  M406Q01 565 0.441  0.335   0.005   0.010   0.020   0.039   0.077   0.146
3  M406Q02 565 0.281  1.274   0.002   0.004   0.008   0.016   0.032   0.063
4  M423Q01 565 0.740 -1.362   0.026   0.051   0.099   0.183   0.314   0.483
5  M496Q01 565 0.554 -0.284   0.009   0.018   0.036   0.071   0.135   0.241
6  M496Q02 565 0.715 -1.203   0.022   0.044   0.086   0.160   0.281   0.444
7  M564Q01 565 0.515 -0.072   0.007   0.015   0.029   0.058   0.112   0.205
8  M564Q02 565 0.526 -0.130   0.008   0.015   0.031   0.061   0.118   0.214
9  M571Q01 565 0.547 -0.239   0.008   0.017   0.034   0.068   0.130   0.233
10 M603Q01 565 0.556 -0.291   0.009   0.018   0.036   0.071   0.136   0.243
11 M603Q02 565 0.474  0.149   0.006   0.012   0.024   0.047   0.092   0.171
   lam.Cl7 lam.Cl8 lam.Cl9 lam.Cl10 lam.Cl11 lam.Cl12 lam.Cl13 lam.Cl14
1    0.277   0.439   0.616    0.766    0.870    0.932    0.965    0.983
2    0.259   0.417   0.594    0.749    0.859    0.926    0.962    0.981
3    0.120   0.219   0.364    0.539    0.705    0.830    0.909    0.953
4    0.656   0.796   0.889    0.942    0.971    0.986    0.993    0.996
5    0.394   0.570   0.731    0.847    0.919    0.959    0.979    0.990
6    0.620   0.769   0.872    0.933    0.966    0.983    0.992    0.996
7    0.345   0.518   0.687    0.818    0.902    0.949    0.975    0.987
8    0.358   0.532   0.699    0.826    0.907    0.952    0.976    0.988
9    0.383   0.560   0.722    0.841    0.915    0.957    0.978    0.989
10   0.396   0.572   0.732    0.848    0.919    0.959    0.979    0.990
11   0.297   0.463   0.638    0.782    0.880    0.937    0.968    0.984
   lam.Cl15
1     0.991
2     0.991
3     0.976
4     0.998
5     0.995
6     0.998
7     0.994
8     0.994
9     0.995
10    0.995
11    0.992
> 
> #***
> # Model 4: 'Ordinary' Rasch model
> mod4 <- rasch.mml2( dat )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:05 
   Deviance = 7577.5196
    Maximum b parameter change =  0.223182  
...........................................................
Iteration 2     2015-06-13 13:24:05 
   Deviance = 7557.0066 | Deviance change = 20.513038
    Maximum b parameter change =  0.021701  
...........................................................
Iteration 3     2015-06-13 13:24:05 
   Deviance = 7552.6673 | Deviance change = 4.339342
    Maximum b parameter change =  0.015668  
...........................................................
Iteration 4     2015-06-13 13:24:05 
   Deviance = 7550.3311 | Deviance change = 2.336151
    Maximum b parameter change =  0.014095  
...........................................................
Iteration 5     2015-06-13 13:24:05 
   Deviance = 7549.7164 | Deviance change = 0.614702
    Maximum b parameter change =  0.010372  
...........................................................
Iteration 6     2015-06-13 13:24:05 
   Deviance = 7549.674 | Deviance change = 0.042428
    Maximum b parameter change =  0.003023  
...........................................................
Iteration 7     2015-06-13 13:24:05 
   Deviance = 7549.6642 | Deviance change = 0.009801
    Maximum b parameter change =  0.001873  
...........................................................
Iteration 8     2015-06-13 13:24:05 
   Deviance = 7549.6593 | Deviance change = 0.004862
    Maximum b parameter change =  0.001212  
...........................................................
Iteration 9     2015-06-13 13:24:05 
   Deviance = 7549.6566 | Deviance change = 0.002679
    Maximum b parameter change =  0.000885  
...........................................................
Iteration 10     2015-06-13 13:24:05 
   Deviance = 7549.6552 | Deviance change = 0.001487
    Maximum b parameter change =  0.000653  
...........................................................
Iteration 11     2015-06-13 13:24:05 
   Deviance = 7549.6543 | Deviance change = 0.000825
    Maximum b parameter change =  0.000486  
...........................................................
Iteration 12     2015-06-13 13:24:05 
   Deviance = 7549.6539 | Deviance change = 0.000458
    Maximum b parameter change =  0.000363  
...........................................................
Iteration 13     2015-06-13 13:24:05 
   Deviance = 7549.6536 | Deviance change = 0.000254
    Maximum b parameter change =  0.000271  
...........................................................
Iteration 14     2015-06-13 13:24:05 
   Deviance = 7549.6535 | Deviance change = 0.00014
    Maximum b parameter change =  0.000202  
...........................................................
Iteration 15     2015-06-13 13:24:05 
   Deviance = 7549.6534 | Deviance change = 7.7e-05
    Maximum b parameter change =  0.000151  
...........................................................
Iteration 16     2015-06-13 13:24:05 
   Deviance = 7549.6534 | Deviance change = 4.3e-05
    Maximum b parameter change =  0.000112  
...........................................................
Iteration 17     2015-06-13 13:24:05 
   Deviance = 7549.6533 | Deviance change = 2.3e-05
    Maximum b parameter change =  8.4e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:05 
End: 2015-06-13 13:24:05 
Time difference of 0.114027 secs
Difference: 0.114027 
------------------------------------------------------------
> summary(mod4)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:05 
Time difference of 0.114027 secs
Computation time: 0.114027 

Call:
rasch.mml2(dat = dat)

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Rasch Type Model with Fixed Discrimination, Guessing and Slipping Parameters 
alpha1= 0  alpha2= 0  
Moments: 
   M   SD  Var 
0.00 1.81 3.29 

------------------------------------------------------------
Number of iterations = 17 
Deviance =  7549.65  | Log Likelihood =  -3774.83 
Number of persons =  565 
Number of estimated parameters =  12 
AIC  =  7573.65  | penalty = 24    | AIC = -2*LL + 2*p  
AICc =  7574.22  | penalty = 24.57    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  7625.7  | penalty = 76.04    | BIC = -2*LL + log(n)*p  
CAIC =  7637.7  | penalty = 88.04   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 1.193 
 Skewness= 0
Item Difficulty Distribution ( 11  Items )
 Mean= -0.154  SD= 0.685 
Distribution of Items Administered ( 11  Items )
 Mean= 11  SD= 0 

EAP Reliability: 0.734
------------------------------------------------------------
Item Parameter 
      item   N     p      b est.b a est.a thresh c est.c d est.d emp.discrim
1  M192Q01 565 0.457  0.219     1 1     0  0.219 0     0 1     0       0.548
2  M406Q01 565 0.441  0.302     2 1     0  0.302 0     0 1     0       0.598
3  M406Q02 565 0.281  1.191     3 1     0  1.191 0     0 1     0       0.567
4  M423Q01 565 0.740 -1.327     4 1     0 -1.327 0     0 1     0       0.345
5  M496Q01 565 0.554 -0.282     5 1     0 -0.282 0     0 1     0       0.581
6  M496Q02 565 0.715 -1.172     6 1     0 -1.172 0     0 1     0       0.503
7  M564Q01 565 0.515 -0.082     7 1     0 -0.082 0     0 1     0       0.446
8  M564Q02 565 0.526 -0.136     8 1     0 -0.136 0     0 1     0       0.450
9  M571Q01 565 0.547 -0.246     9 1     0 -0.246 0     0 1     0       0.576
10 M603Q01 565 0.556 -0.291    10 1     0 -0.291 0     0 1     0       0.527
11 M603Q02 565 0.474  0.128    11 1     0  0.128 0     0 1     0       0.577
   alpha1 alpha2
1       0      0
2       0      0
3       0      0
4       0      0
5       0      0
6       0      0
7       0      0
8       0      0
9       0      0
10      0      0
11      0      0
> 
> ## Not run: 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: Grade of membership model with 2 classes
> ##D #############################################################################
> ##D 
> ##D #********* DATASET 1 *************
> ##D # define an ordinary 2 latent class model
> ##D set.seed(8765)
> ##D I <- 10
> ##D prob.class1 <- runif( I , 0 , .35 )
> ##D prob.class2 <- runif( I , .70 , .95 )
> ##D probs <- cbind( prob.class1 , prob.class2 )
> ##D 
> ##D # define classes 
> ##D N <- 1000
> ##D latent.class <- c( rep( 1 , 1/4*N ) , rep( 2,3/4*N ) )
> ##D 
> ##D # simulate item responses
> ##D dat <- matrix( NA , nrow=N , ncol=I )
> ##D for (ii in 1:I){    
> ##D     dat[,ii] <- probs[ ii , latent.class ]
> ##D     dat[,ii] <- 1 * ( runif(N) < dat[,ii] )
> ##D         }
> ##D colnames(dat) <- paste0( "I" , 1:I) 
> ##D 
> ##D # Model 1: estimate latent class model
> ##D mod1 <- gom.em(dat, K=2, problevels= c(0,1) , model="GOM" )
> ##D summary(mod1)
> ##D # Model 2: estimate GOM
> ##D mod2 <- gom.em(dat, K=2, problevels= seq(0,1,0.5) , model="GOM" )
> ##D summary(mod2)
> ##D # estimated distribution
> ##D cbind( mod2$theta.k , mod2$pi.k )
> ##D   ##       [,1] [,2]        [,3]
> ##D   ##  [1,]  1.0  0.0 0.243925644
> ##D   ##  [2,]  0.5  0.5 0.006534278
> ##D   ##  [3,]  0.0  1.0 0.749540078
> ##D 
> ##D #********* DATASET 2 *************
> ##D # define a 2-class model with graded membership
> ##D set.seed(8765)
> ##D I <- 10
> ##D prob.class1 <- runif( I , 0 , .35 )
> ##D prob.class2 <- runif( I , .70 , .95 )
> ##D prob.class3 <- .5*prob.class1+.5*prob.class2  # probabilities for 'fuzzy class'
> ##D probs <- cbind( prob.class1 , prob.class2 , prob.class3)
> ##D # define classes 
> ##D N <- 1000
> ##D latent.class <- c( rep(1,round(1/3*N)),rep(2,round(1/2*N)),rep(3,round(1/6*N)))
> ##D # simulate item responses
> ##D dat <- matrix( NA , nrow=N , ncol=I )
> ##D for (ii in 1:I){
> ##D     dat[,ii] <- probs[ ii , latent.class ]
> ##D     dat[,ii] <- 1 * ( runif(N) < dat[,ii] )
> ##D         }
> ##D colnames(dat) <- paste0( "I" , 1:I) 
> ##D 
> ##D #** Model 1: estimate latent class model
> ##D mod1 <- gom.em(dat, K=2, problevels= c(0,1) , model="GOM" )
> ##D summary(mod1)
> ##D 
> ##D #** Model 2: estimate GOM
> ##D mod2 <- gom.em(dat, K=2, problevels= seq(0,1,0.5) , model="GOM" )
> ##D summary(mod2)
> ##D # inspect distribution
> ##D cbind( mod2$theta.k , mod2$pi.k )
> ##D   ##       [,1] [,2]      [,3]
> ##D   ##  [1,]  1.0  0.0 0.3335666
> ##D   ##  [2,]  0.5  0.5 0.1810114
> ##D   ##  [3,]  0.0  1.0 0.4854220
> ##D 
> ##D #***
> ##D # Model2m: estimate discrete GOM in mirt
> ##D # define latent classes
> ##D Theta <- scan( nlines=1)
> ##D    1 0   .5 .5    0 1 
> ##D Theta <- matrix( Theta , nrow=3 , ncol=2,byrow=TRUE)
> ##D # define mirt model
> ##D I <- ncol(dat) 
> ##D #*** create customized item response function for mirt model
> ##D name <- 'gom'
> ##D par <- c("a1" = -1 , "a2" = 1 )
> ##D est <- c(TRUE, TRUE)
> ##D P.gom <- function(par,Theta,ncat){
> ##D     # GOM for two extremal classes
> ##D     pext1 <- plogis(par[1])
> ##D     pext2 <- plogis(par[2]) 
> ##D     P1 <- Theta[,1]*pext1 + Theta[,2]*pext2     
> ##D     cbind(1-P1, P1)
> ##D }
> ##D # create item response function
> ##D icc_gom <- mirt::createItem(name, par=par, est=est, P=P.gom)
> ##D #** define prior for latent class analysis
> ##D lca_prior <- function(Theta,Etable){
> ##D   # number of latent Theta classes
> ##D   TP <- nrow(Theta)
> ##D   # prior in initial iteration
> ##D   if ( is.null(Etable) ){ prior <- rep( 1/TP , TP ) }    
> ##D   # process Etable (this is correct for datasets without missing data)
> ##D   if ( ! is.null(Etable) ){  
> ##D     # sum over correct and incorrect expected responses 
> ##D     prior <- ( rowSums(Etable[ , seq(1,2*I,2)]) + rowSums(Etable[,seq(2,2*I,2)]) )/I
> ##D                  }
> ##D   prior <- prior / sum(prior)  
> ##D   return(prior)
> ##D }
> ##D #*** estimate discrete GOM in mirt package
> ##D mod2m <- mirt::mirt(dat, 1, rep( "icc_gom",I) , customItems=list("icc_gom"=icc_gom), 
> ##D            technical = list( customTheta=Theta , customPriorFun = lca_prior)  )
> ##D # correct number of estimated parameters
> ##D mod2m@nest <- as.integer(sum(mod.pars$est) + nrow(Theta)-1 ) 
> ##D # extract log-likelihood and compute AIC and BIC
> ##D mod2m@logLik
> ##D ( AIC <- -2*mod2m@logLik+2*mod2m@nest )
> ##D ( BIC <- -2*mod2m@logLik+log(mod2m@Data$N)*mod2m@nest )
> ##D # extract coefficients
> ##D ( cmod2m <- mirt.wrapper.coef(mod2m) )
> ##D # compare estimated distributions
> ##D round( cbind( "sirt"  = mod2$pi.k , "mirt" = mod2m@Prior[[1]] ) , 5 )
> ##D   ##           sirt    mirt
> ##D   ##   [1,] 0.33357 0.33627
> ##D   ##   [2,] 0.18101 0.17789
> ##D   ##   [3,] 0.48542 0.48584
> ##D # compare estimated item parameters
> ##D dfr <- data.frame( "sirt" = mod2$item[,4:5] )
> ##D dfr$mirt <- apply(cmod2m$coef[ , c("a1" , "a2") ] , 2 , plogis )
> ##D round(dfr,4)
> ##D   ##      sirt.lam.Cl1 sirt.lam.Cl2 mirt.a1 mirt.a2
> ##D   ##   1        0.1157       0.8935  0.1177  0.8934
> ##D   ##   2        0.0790       0.8360  0.0804  0.8360
> ##D   ##   3        0.0743       0.8165  0.0760  0.8164
> ##D   ##   4        0.0398       0.8093  0.0414  0.8094
> ##D   ##   5        0.1273       0.7244  0.1289  0.7243
> ##D   ##   [...]
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gom.em", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gom.jml")
> ### * gom.jml
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gom.jml
> ### Title: Grade of Membership Model (Joint Maximum Likelihood Estimation)
> ### Aliases: gom.jml
> ### Keywords: Grade of membership model
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: TIMSS data
> #############################################################################
> 
> data( data.timss)
> dat <- data.timss$data[ , grep("M" , colnames(data.timss$data) ) ] 
> 
> # 2 Classes (deterministic starting values)
> m2 <- gom.jml(dat,K=2 , maxiter=10 )
...........................................................
Iteration 1     2015-06-13 13:24:05 
   Deviance = 8406.5864
    Maximum membership parameter change = 0.089585
    Maximum probability change = 0.270059
...........................................................
Iteration 2     2015-06-13 13:24:05 
   Deviance = 8327.5833
    Maximum membership parameter change = 0.051093
    Maximum probability change = 0.045564
...........................................................
Iteration 3     2015-06-13 13:24:05 
   Deviance = 8292.6187 | Deviance change = 34.964681
    Maximum membership parameter change = 0.046936
    Maximum probability change = 0.017187
...........................................................
Iteration 4     2015-06-13 13:24:05 
   Deviance = 8269.4744 | Deviance change = 23.144274
    Maximum membership parameter change = 0.042929
    Maximum probability change = 0.011588
...........................................................
Iteration 5     2015-06-13 13:24:05 
   Deviance = 8253.1605 | Deviance change = 16.313849
    Maximum membership parameter change = 0.036367
    Maximum probability change = 0.009495
...........................................................
Iteration 6     2015-06-13 13:24:05 
   Deviance = 8241.0287 | Deviance change = 12.13183
    Maximum membership parameter change = 0.028476
    Maximum probability change = 0.007971
...........................................................
Iteration 7     2015-06-13 13:24:05 
   Deviance = 8231.8378 | Deviance change = 9.190929
    Maximum membership parameter change = 0.023268
    Maximum probability change = 0.006674
...........................................................
Iteration 8     2015-06-13 13:24:06 
   Deviance = 8225.2106 | Deviance change = 6.627217
    Maximum membership parameter change = 0.018962
    Maximum probability change = 0.005635
...........................................................
Iteration 9     2015-06-13 13:24:06 
   Deviance = 8220.1456 | Deviance change = 5.064925
    Maximum membership parameter change = 0.018111
    Maximum probability change = 0.005231
...........................................................
Iteration 10     2015-06-13 13:24:06 
   Deviance = 8216.0449 | Deviance change = 4.100696
    Maximum membership parameter change = 0.016944
    Maximum probability change = 0.005079
> summary(m2)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:06 
Time difference of 1.132428 secs
Computation time: 1.132428 

Grade of Membership Model (Joint Maximum Likelihood Estimation) 
   Function 'gdm.jml'
-----------------------------------------------------------------
Number of iterations = 10 
Deviance =  8216.04  | Log Likelihood =  -4108.02 
Number of persons =  345 
Number of items   =  25 
Number of classes =  2 
Number of estimated parameters  =  395 
    Item parameters (ni)        =  50 
    Person parameters (np)      =  345 
AICi  =  8316.04  | penalty = 100    | AICi = -2*LL + 2*(ni)  
AICip =  9006.04  | penalty = 790    | AICip = -2*LL + 2*(ni+np)  
BICi  =  8508.22  | penalty = 292.18    | BICi = -2*LL + log(n)*ni  
-----------------------------------------------------------------
Item Parameters 
       item     p Class1 Class2
1   M031286 0.638  0.345  0.945
2   M031106 0.420  0.179  0.685
3   M031282 0.357  0.016  0.744
4   M031227 0.087  0.001  0.187
5   M031335 0.716  0.484  0.966
6   M031068 0.539  0.152  0.976
7   M031299 0.597  0.207  0.999
8   M031301 0.817  0.637  0.999
9   M031271 0.829  0.661  0.999
10  M031134 0.278  0.063  0.517
11  M031045 0.716  0.453  0.991
12  M041014 0.817  0.664  0.985
13  M041039 0.513  0.270  0.778
14  M041278 0.742  0.623  0.875
15  M041006 0.299  0.105  0.521
16  M041250 0.386  0.075  0.737
17  M041094 0.443  0.151  0.777
18  M041330 0.617  0.326  0.936
19 M041300A 0.423  0.001  0.913
20 M041300B 0.522  0.059  0.999
21 M041300C 0.229  0.001  0.501
22 M041300D 0.194  0.001  0.423
23  M041173 0.313  0.137  0.505
24  M041274 0.272  0.034  0.549
25  M041203 0.423  0.138  0.752
-----------------------------------------------------------------
Membership Scores

Class Proportions:
Class1 Class2 
 0.525  0.475 

Distribution membership scores
       PrGr0 PrGr25 PrGr50 PrGr75 MGr0 MGr25 MGr50 MGr75 cor.score
Class1 30.14  17.39  17.39  35.07 0.75  0.56  0.44  0.25     -0.97
Class2 35.07  17.39  17.39  30.14 0.25  0.44  0.56  0.75      0.97
> 
> ## Not run: 
> ##D # 3 Classes with fixed seed and maximum number of iterations
> ##D m3 <- gom.jml(dat,K=3 , maxiter=50,seed=89)
> ##D summary(m3) 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gom.jml", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("greenyang.reliability")
> ### * greenyang.reliability
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: greenyang.reliability
> ### Title: Reliability for Dichotomous Item Response Data Using the Method
> ###   of Green and Yang (2009)
> ### Aliases: greenyang.reliability
> ### Keywords: Reliability
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: Reliability estimation of Reading dataset data.read
> ##D #############################################################################
> ##D library(psych)
> ##D set.seed(789)
> ##D data( data.read )
> ##D dat <- data.read
> ##D 
> ##D # calculate matrix of tetrachoric correlations
> ##D dat.tetra <- psych::tetrachoric(dat)      # using tetrachoric from psych package
> ##D dat.tetra2 <- tetrachoric2(dat)	   # using tetrachoric2 from sirt package
> ##D 
> ##D # perform parallel factor analysis
> ##D fap <- psych::fa.parallel.poly(dat , n.iter = 1 )
> ##D   ##   Parallel analysis suggests that the number of factors =  3  
> ##D   ##   and the number of components =  2 
> ##D 
> ##D # parallel factor analysis based on tetrachoric correlation matrix 
> ##D ##       (tetrachoric2)
> ##D fap2 <- psych::fa.parallel(dat.tetra2$rho , n.obs=nrow(dat) ,  n.iter = 1 )
> ##D   ## Parallel analysis suggests that the number of factors =  6  
> ##D   ## and the number of components =  2 
> ##D   ## Note that in this analysis, uncertainty with respect to thresholds is ignored.
> ##D 
> ##D # calculate reliability using a model with 4 factors
> ##D greenyang.reliability( object.tetra = dat.tetra , nfactors =4 )
> ##D   ##                                            coefficient dimensions estimate
> ##D   ## Omega Total (1D)                               omega_1          1    0.771
> ##D   ## Omega Total (4D)                               omega_t          4    0.844
> ##D   ## Omega Hierarchical (4D)                        omega_h          4    0.360
> ##D   ## Omega Hierarchical Asymptotic (4D)            omega_ha          4    0.427
> ##D   ## Explained Common Variance (4D)                     ECV          4    0.489
> ##D   ## Explained Variance (First Eigenvalue)          ExplVar         NA   35.145
> ##D   ## Eigenvalue Ratio (1st to 2nd Eigenvalue) EigenvalRatio         NA    2.121
> ##D 
> ##D # calculation of Green-Yang-Reliability based on tetrachoric correlations
> ##D #   obtained by tetrachoric2
> ##D greenyang.reliability( object.tetra = dat.tetra2 , nfactors =4 )
> ##D 
> ##D # The same result will be obtained by using fap as the input
> ##D greenyang.reliability( object.tetra = fap , nfactors =4 ) 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("greenyang.reliability", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("invariance.alignment")
> ### * invariance.alignment
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: invariance.alignment
> ### Title: Alignment Procedure for Linking under Approximate Invariance
> ### Aliases: invariance.alignment summary.invariance.alignment
> ###   plot.invariance.alignment
> ### Keywords: Linking Approximate Invariance Alignment summary
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Item parameters cultural activities 
> #############################################################################
> 
> data( data.activity.itempars )
> lambda <- data.activity.itempars$lambda
> nu <- data.activity.itempars$nu
> Ng <-  data.activity.itempars$N
> wgt <- matrix( sqrt(Ng) , length(Ng) , ncol(nu) )
> 
> #***
> # Model 1: Alignment using a quadratic loss function
> #   -> use the default of align.pow=c(1,1) and align.scale=c(1,1)
> mod1 <- invariance.alignment( lambda , nu , wgt )
* OPTIMIZATION LAMBDA
|****************|
|----------------|
* OPTIMIZATION NU
|****************|
|----------------|
> summary(mod1)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:06 
Time difference of 0.05253601 secs
Computation Time: 0.05253601 

  Function 'invariance.alignment' 
-----------------------------------------------------------------
Optimization Function Value (minimum value) =  3.9653 (LAMBDA) |  5.6793 (NU)
-----------------------------------------------------------------
Effect Sizes of Approximate Invariance 
       loadings intercepts
R2       0.9944     0.9988
sqrtU2   0.0748     0.0346
rbar     0.9265     0.9735
-----------------------------------------------------------------
Group Means and Standard Deviations 
         alpha0  psi0
country1 -0.024 0.953
country2 -0.211 0.982
country3  0.045 0.968
country4  0.004 0.961
country5  0.081 1.049
country6 -0.076 0.985
country7 -0.078 0.972
country8  0.017 1.017
country9  0.284 1.126
-----------------------------------------------------------------
Summary Aligned Item Parameters 
     M.lambda SD.lambda  M.nu SD.nu
act1    0.466     0.019 1.627 0.033
act2    0.347     0.019 1.432 0.033
act3    0.189     0.028 1.326 0.040
act4    0.310     0.028 2.308 0.047
act5    0.310     0.036 1.474 0.113
-----------------------------------------------------------------
Summary Absolute Residuals Loadings LAMBDA 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0003  0.0087  0.0182  0.0201  0.0251  0.0652 
-----------------------------------------------------------------
Summary Absolute Residuals Intercepts NU 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0005  0.0175  0.0309  0.0413  0.0498  0.2166 
>   ##   Effect Sizes of Approximate Invariance 
>   ##          loadings intercepts
>   ##   R2       0.9944     0.9988
>   ##   sqrtU2   0.0748     0.0346
>   ##   rbar     0.9265     0.9735
> 
> #****
> # Model 2: Different powers for alignment
> mod2 <- invariance.alignment( lambda , nu , wgt ,  align.pow=c(.25,1/2) , 
+               align.scale=c(.95,.95) ,  max.increment=.1)
* OPTIMIZATION LAMBDA
|****************|
|----------------|
* OPTIMIZATION NU
|****************|
|----------------|
> summary(mod2)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:06 
Time difference of 0.07800698 secs
Computation Time: 0.07800698 

  Function 'invariance.alignment' 
-----------------------------------------------------------------
Optimization Function Value (minimum value) =  115.7967 (LAMBDA) |  43.4535 (NU)
-----------------------------------------------------------------
Effect Sizes of Approximate Invariance 
       loadings intercepts
R2       0.9944     0.9988
sqrtU2   0.0747     0.0353
rbar     0.9265     0.9729
-----------------------------------------------------------------
Group Means and Standard Deviations 
         alpha0  psi0
country1  0.022 0.946
country2 -0.192 0.987
country3  0.065 0.969
country4 -0.011 0.962
country5  0.081 1.049
country6 -0.062 0.987
country7 -0.067 0.974
country8 -0.078 1.006
country9  0.281 1.132
-----------------------------------------------------------------
Summary Aligned Item Parameters 
     M.lambda SD.lambda  M.nu SD.nu
act1    0.466     0.018 1.627 0.024
act2    0.347     0.018 1.432 0.028
act3    0.189     0.028 1.326 0.034
act4    0.310     0.029 2.308 0.036
act5    0.310     0.037 1.475 0.126
-----------------------------------------------------------------
Summary Absolute Residuals Loadings LAMBDA 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0088  0.0182  0.0198  0.0228  0.0685 
-----------------------------------------------------------------
Summary Absolute Residuals Intercepts NU 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0009  0.0130  0.0287  0.0383  0.0395  0.2512 
> 
> # compare means from Models 1 and 2
> plot( mod1$pars$alpha0 , mod2$pars$alpha0 , pch=16 ,
+     xlab= "M (Model 1)" , ylab="M (Model 2)" , xlim=c(-.3,.3) , ylim=c(-.3,.3) )
> lines( c(-1,1) , c(-1,1) , col="gray")    
> round( cbind( mod1$pars$alpha0 , mod2$pars$alpha0 ) , 3 )
        [,1]   [,2]
 [1,] -0.024  0.022
 [2,] -0.211 -0.192
 [3,]  0.045  0.065
 [4,]  0.004 -0.011
 [5,]  0.081  0.081
 [6,] -0.076 -0.062
 [7,] -0.078 -0.067
 [8,]  0.017 -0.078
 [9,]  0.284  0.281
> round( mod1$nu.resid , 3)
           act1   act2   act3   act4   act5
country1  0.029 -0.025  0.068  0.076 -0.180
country2  0.007  0.036  0.022  0.015 -0.070
country3  0.049  0.011 -0.022  0.008 -0.070
country4 -0.043 -0.006 -0.016  0.008  0.085
country5  0.031 -0.040 -0.029 -0.011  0.034
country6 -0.017  0.021  0.028  0.043 -0.041
country7  0.000  0.040  0.034 -0.025 -0.024
country8 -0.050 -0.053 -0.054 -0.090  0.217
country9 -0.005  0.015 -0.032 -0.025  0.051
> round( mod2$nu.resid ,3 )
           act1   act2   act3   act4   act5
country1  0.009 -0.040  0.057  0.060 -0.193
country2 -0.003  0.028  0.019  0.010 -0.077
country3  0.039  0.005 -0.025  0.002 -0.077
country4 -0.036 -0.001 -0.013  0.013  0.088
country5  0.031 -0.040 -0.028 -0.010  0.033
country6 -0.024  0.016  0.026  0.039 -0.047
country7 -0.006  0.036  0.033 -0.029 -0.029
country8 -0.007 -0.022 -0.038 -0.061  0.251
country9 -0.003  0.017 -0.030 -0.024  0.051
> 
> #****
> # Model 3: Low powers for alignment of scale and power
> # Note that setting increment.factor larger than 1 seems necessary
> mod3 <- invariance.alignment( lambda , nu , wgt , align.pow=c(.25,.35) , 
+             align.scale=c(.55,.55) , psi0.init=mod1$psi0 , alpha0.init = mod1$alpha0 )
* OPTIMIZATION LAMBDA
|****************|
|----------------|
* OPTIMIZATION NU
|****************|
|----------------|
> summary(mod3)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:06 
Time difference of 0.07835507 secs
Computation Time: 0.07835507 

  Function 'invariance.alignment' 
-----------------------------------------------------------------
Optimization Function Value (minimum value) =  120.5461 (LAMBDA) |  92.0173 (NU)
-----------------------------------------------------------------
Effect Sizes of Approximate Invariance 
       loadings intercepts
R2       0.9944     0.9987
sqrtU2   0.0750     0.0361
rbar     0.9265     0.9726
-----------------------------------------------------------------
Group Means and Standard Deviations 
         alpha0  psi0
country1  0.043 0.935
country2 -0.182 0.993
country3  0.074 0.971
country4 -0.023 0.964
country5  0.078 1.049
country6 -0.055 0.991
country7 -0.059 0.975
country8 -0.118 0.997
country9  0.278 1.138
-----------------------------------------------------------------
Summary Aligned Item Parameters 
     M.lambda SD.lambda  M.nu SD.nu
act1    0.466     0.016 1.627 0.023
act2    0.347     0.016 1.433 0.027
act3    0.189     0.029 1.325 0.031
act4    0.310     0.030 2.308 0.032
act5    0.310     0.038 1.475 0.132
-----------------------------------------------------------------
Summary Absolute Residuals Loadings LAMBDA 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0004  0.0092  0.0161  0.0195  0.0222  0.0719 
-----------------------------------------------------------------
Summary Absolute Residuals Intercepts NU 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0011  0.0118  0.0295  0.0379  0.0387  0.2662 
> 
> # compare mean and SD estimates of Models 1 and 3
> plot( mod1$pars$alpha0 , mod3$pars$alpha0 , pch=16)
> plot( mod1$pars$psi0 , mod3$pars$psi0 , pch=16)
> 
> # compare residuals for Models 1 and 3   
> # plot lambda
> plot( abs(as.vector(mod1$lambda.resid)) , abs(as.vector(mod3$lambda.resid)) ,
+       pch=16 , xlab="Residuals lambda (Model 1)" ,
+       ylab="Residuals lambda (Model 3)" , xlim=c(0,.1) , ylim=c(0,.1))
> lines( c(-3,3),c(-3,3) , col="gray")    
> # plot nu
> plot( abs(as.vector(mod1$nu.resid)) , abs(as.vector(mod3$nu.resid)) ,
+       pch=16 , xlab="Residuals nu (Model 1)" , ylab="Residuals nu (Model 3)" , 
+       xlim=c(0,.4),ylim=c(0,.4))
> lines( c(-3,3),c(-3,3) , col="gray")
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 2: Comparison 4 groups | data.inv4gr 
> ##D #############################################################################
> ##D 
> ##D data(data.inv4gr)
> ##D dat <- data.inv4gr
> ##D library(semTools)
> ##D 
> ##D model1 <- "
> ##D     F =~ I01 + I02 + I03 + I04 + I05 + I06 + I07 + I08 + I09 + I10 + I11
> ##D     F ~~ 1*F
> ##D     "
> ##D 
> ##D res <- semTools::measurementInvariance(model1, std.lv =TRUE , data=dat , group="group")
> ##D   ##   Measurement invariance tests:
> ##D   ##   
> ##D   ##   Model 1: configural invariance:
> ##D   ##       chisq        df    pvalue       cfi     rmsea       bic 
> ##D   ##     162.084   176.000     0.766     1.000     0.000 95428.025 
> ##D   ##   
> ##D   ##   Model 2: weak invariance (equal loadings):
> ##D   ##       chisq        df    pvalue       cfi     rmsea       bic 
> ##D   ##     519.598   209.000     0.000     0.973     0.039 95511.835 
> ##D   ##   
> ##D   ##   [Model 1 versus model 2]
> ##D   ##     delta.chisq      delta.df delta.p.value     delta.cfi 
> ##D   ##         357.514        33.000         0.000         0.027 
> ##D   ##   
> ##D   ##   Model 3: strong invariance (equal loadings + intercepts):
> ##D   ##       chisq        df    pvalue       cfi     rmsea       bic 
> ##D   ##    2197.260   239.000     0.000     0.828     0.091 96940.676 
> ##D   ##   
> ##D   ##   [Model 1 versus model 3]
> ##D   ##     delta.chisq      delta.df delta.p.value     delta.cfi 
> ##D   ##        2035.176        63.000         0.000         0.172 
> ##D   ##   
> ##D   ##   [Model 2 versus model 3]
> ##D   ##     delta.chisq      delta.df delta.p.value     delta.cfi 
> ##D   ##        1677.662        30.000         0.000         0.144 
> ##D   ##   
> ##D 
> ##D # extract item parameters separate group analyses
> ##D ipars <- lavaan::parameterEstimates(res$fit.configural)
> ##D # extract lambda's: groups are in rows, items in columns
> ##D lambda <- matrix( ipars[ ipars$op == "=~" , "est"] , nrow=4 ,  byrow=TRUE)
> ##D colnames(lambda) <- colnames(dat)[-1]
> ##D # extract nu's
> ##D nu <- matrix( ipars[ ipars$op == "~1"  & ipars$se != 0 , "est" ], nrow=4 ,  byrow=TRUE)
> ##D colnames(nu) <- colnames(dat)[-1]
> ##D 
> ##D # Model 1: least squares optimization
> ##D mod1 <- invariance.alignment( lambda=lambda , nu=nu )
> ##D summary(mod1)
> ##D   ##   Effect Sizes of Approximate Invariance 
> ##D   ##          loadings intercepts
> ##D   ##   R2       0.9826     0.9972
> ##D   ##   sqrtU2   0.1319     0.0526
> ##D   ##   rbar     0.6237     0.7821
> ##D   ##   -----------------------------------------------------------------
> ##D   ##   Group Means and Standard Deviations 
> ##D   ##     alpha0  psi0
> ##D   ##   1  0.000 0.965
> ##D   ##   2 -0.105 1.098
> ##D   ##   3 -0.081 1.011
> ##D   ##   4  0.171 0.935
> ##D 
> ##D # Model 2: sparse target function
> ##D mod2 <- invariance.alignment( lambda=lambda , nu=nu , align.pow=c(1/4,1/4) )
> ##D summary(mod2)
> ##D   ##   Effect Sizes of Approximate Invariance 
> ##D   ##          loadings intercepts
> ##D   ##   R2       0.9824     0.9972
> ##D   ##   sqrtU2   0.1327     0.0529
> ##D   ##   rbar     0.6237     0.7856
> ##D   ##   -----------------------------------------------------------------
> ##D   ##   Group Means and Standard Deviations 
> ##D   ##     alpha0  psi0
> ##D   ##   1 -0.002 0.965
> ##D   ##   2 -0.107 1.098
> ##D   ##   3 -0.083 1.011
> ##D   ##   4  0.170 0.935
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: European Social Survey data.ess2005 
> ##D #############################################################################
> ##D 
> ##D data(data.ess2005)
> ##D lambda <- data.ess2005$lambda
> ##D nu <- data.ess2005$nu
> ##D 
> ##D # Model 1: least squares optimization
> ##D mod1 <- invariance.alignment( lambda=lambda , nu=nu )
> ##D summary(mod1)
> ##D 
> ##D # Model 2: sparse target function and definition of scales
> ##D mod2 <- invariance.alignment( lambda=lambda , nu=nu , align.pow=c(1/4,1/4) , 
> ##D             align.scale= c( .2 , .3)  )
> ##D summary(mod2)
> ##D 
> ##D # compare results of Model 1 and Model 2
> ##D round( cbind( mod1$pars , mod2$pars ) , 2 )
> ##D   ##      alpha0 psi0 alpha0 psi0
> ##D   ##   1    0.06 0.87   0.05 0.91
> ##D   ##   2   -0.51 1.03  -0.37 0.99
> ##D   ##   3    0.18 0.97   0.25 1.04
> ##D   ##   4   -0.67 0.90  -0.53 0.90
> ##D   ##   5    0.09 0.98   0.10 0.99
> ##D   ##   6    0.23 1.03   0.28 1.00
> ##D   ##   7    0.27 0.97   0.14 1.10
> ##D   ##   8    0.18 0.90   0.07 0.89
> ##D   ##   [...]
> ##D 
> ##D # look at nu residuals to explain differences in means
> ##D round( mod1$nu.resid , 2)
> ##D   ##         ipfrule ipmodst ipbhprp imptrad
> ##D   ##    [1,]    0.15   -0.25   -0.01    0.01
> ##D   ##    [2,]   -0.18    0.23    0.10   -0.24
> ##D   ##    [3,]    0.22   -0.34    0.05   -0.02
> ##D   ##    [4,]    0.29   -0.04    0.12   -0.53
> ##D   ##    [5,]   -0.32    0.19    0.00    0.13
> ##D   ##    [6,]    0.05   -0.21    0.05    0.04
> ##D   ##    [7,]   -0.26    0.54   -0.15   -0.02
> ##D   ##    [8,]    0.07   -0.05   -0.10    0.12
> ##D round( mod2$nu.resid , 2)
> ##D   ##         ipfrule ipmodst ipbhprp imptrad
> ##D   ##    [1,]    0.16   -0.25    0.00    0.02
> ##D   ##    [2,]   -0.27    0.14    0.00   -0.30
> ##D   ##    [3,]    0.18   -0.37    0.00   -0.05
> ##D   ##    [4,]    0.19   -0.13    0.00   -0.60
> ##D   ##    [5,]   -0.33    0.19   -0.01    0.12
> ##D   ##    [6,]    0.00   -0.23    0.00    0.01
> ##D   ##    [7,]   -0.16    0.64   -0.01    0.04
> ##D   ##    [8,]    0.15    0.02   -0.02    0.19
> ##D 
> ##D round( rowMeans( mod1$nu.resid )[1:8] , 2 )
> ##D   ##   [1] -0.02 -0.02 -0.02 -0.04  0.00 -0.02  0.03  0.01
> ##D round( rowMeans( mod2$nu.resid )[1:8] , 2 )
> ##D   ##   [1] -0.02 -0.11 -0.06 -0.14 -0.01 -0.06  0.13  0.09
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 4: Linking with item parameters containing outliers 
> ##D #############################################################################
> ##D     
> ##D # see Help file in linking.robust
> ##D     
> ##D # simulate some item difficulties in the Rasch model
> ##D I <- 38
> ##D set.seed(18785)
> ##D itempars <- data.frame("item" = paste0("I",1:I) )
> ##D itempars$study1 <- rnorm( I , mean = .3 , sd =1.4 )
> ##D # simulate DIF effects plus some outliers
> ##D bdif <- rnorm(I,mean=.4,sd=.09)+(runif(I)>.9 )* rep( 1*c(-1,1)+.4 , each=I/2 )
> ##D itempars$study2 <- itempars$study1 + bdif
> ##D # create input for function invariance.alignment
> ##D nu <- t( itempars[,2:3] )
> ##D colnames(nu) <- itempars$item
> ##D lambda <- 1+0*nu
> ##D 
> ##D # linking using least squares optimization
> ##D mod1 <- invariance.alignment( lambda=lambda , nu=nu )
> ##D summary(mod1)
> ##D   ##   Group Means and Standard Deviations 
> ##D   ##          alpha0 psi0
> ##D   ##   study1 -0.286    1
> ##D   ##   study2  0.286    1
> ##D 
> ##D # linking using powers of .5
> ##D mod2 <- invariance.alignment( lambda=lambda , nu=nu , align.pow=c(.5,.5) )
> ##D summary(mod2)
> ##D   ##   Group Means and Standard Deviations 
> ##D   ##          alpha0 psi0
> ##D   ##   study1 -0.213    1
> ##D   ##   study2  0.213    1
> ##D 
> ##D # linking using powers of .25
> ##D mod3 <- invariance.alignment( lambda=lambda , nu=nu , align.pow=c(.25,.25) )
> ##D summary(mod3)
> ##D   ##   Group Means and Standard Deviations 
> ##D   ##          alpha0 psi0
> ##D   ##   study1 -0.207    1
> ##D   ##   study2  0.207    1
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 5: Linking gender groups with data.math 
> ##D #############################################################################
> ##D 
> ##D data(data.math)
> ##D dat <- data.math$data
> ##D dat.male <- dat[ dat$female == 0 , substring( colnames(dat) ,1,1) == "M"  ]
> ##D dat.female <- dat[ dat$female == 1 , substring( colnames(dat) ,1,1) == "M"  ]
> ##D 
> ##D #*************************
> ##D # Model 1: Linking using the Rasch model
> ##D mod1m <- rasch.mml2( dat.male )
> ##D mod1f <- rasch.mml2( dat.female )
> ##D 
> ##D # create objects for invariance.alignment
> ##D nu <- rbind( mod1m$item$thresh , mod1f$item$thresh )
> ##D colnames(nu) <- mod1m$item$item
> ##D rownames(nu) <- c("male" , "female")
> ##D lambda <- 1+0*nu
> ##D 
> ##D # mean of item difficulties
> ##D round( rowMeans(nu) , 3 )
> ##D   ##     male female 
> ##D   ##   -0.081 -0.049 
> ##D 
> ##D # Linking using least squares optimization
> ##D res1a <- invariance.alignment( lambda , nu , align.scale = c( .3 , .5 ) )
> ##D summary(res1a)
> ##D   ##   Effect Sizes of Approximate Invariance 
> ##D   ##          loadings intercepts
> ##D   ##   R2            1     0.9801
> ##D   ##   sqrtU2        0     0.1412
> ##D   ##   rbar          1     0.9626
> ##D   ##   -----------------------------------------------------------------
> ##D   ##   Group Means and Standard Deviations 
> ##D   ##          alpha0 psi0
> ##D   ##   male   -0.016    1
> ##D   ##   female  0.016    1
> ##D 
> ##D # Linking using optimization with absolute values
> ##D res1b <- invariance.alignment( lambda , nu , align.scale = c( .3 , .5 ) ,
> ##D                 align.pow=c( .5 , .5 ) )
> ##D summary(res1b)
> ##D   ##   Group Means and Standard Deviations 
> ##D   ##          alpha0 psi0
> ##D   ##   male   -0.045    1
> ##D   ##   female  0.045    1
> ##D 
> ##D #-- compare results with Haberman linking
> ##D I <- ncol(dat.male)
> ##D itempartable <- data.frame( "study" = rep( c("male" , "female") , each=I ) )
> ##D itempartable$item <- c( paste0(mod1m$item$item)  ,  paste0(mod1f$item$item) )
> ##D itempartable$a <- 1
> ##D itempartable$b <- c( mod1m$item$b , mod1f$item$b )
> ##D # estimate linking parameters
> ##D res1c <- linking.haberman( itempars= itempartable )
> ##D   ##   Transformation parameters (Haberman linking)
> ##D   ##      study At     Bt
> ##D   ##   1 female  1  0.000
> ##D   ##   2   male  1 -0.032
> ##D   ##   Linear transformation for person parameters theta
> ##D   ##      study A_theta B_theta
> ##D   ##   1 female       1   0.000
> ##D   ##   2   male       1   0.032
> ##D   ##   R-Squared Measures of Invariance
> ##D   ##          slopes intercepts
> ##D   ##   R2          1     0.9801
> ##D   ##   sqrtU2      0     0.1412
> ##D 
> ##D #-- results of equating.rasch
> ##D x <- itempartable[ 1:I , c("item" , "b") ]
> ##D y <- itempartable[ I + 1:I , c("item" , "b") ]
> ##D res1d <- equating.rasch( x , y )
> ##D round( res1d$B.est , 3 )
> ##D   ##     Mean.Mean Haebara Stocking.Lord
> ##D   ##   1     0.032   0.032         0.029
> ##D 
> ##D #*************************
> ##D # Model 2: Linking using the 2PL model
> ##D I <- ncol(dat.male)
> ##D mod2m <- rasch.mml2( dat.male , est.a=1:I)
> ##D mod2f <- rasch.mml2( dat.female , est.a=1:I)
> ##D 
> ##D # create objects for invariance.alignment
> ##D nu <- rbind( mod2m$item$thresh , mod2f$item$thresh )
> ##D colnames(nu) <- mod2m$item$item
> ##D rownames(nu) <- c("male" , "female")
> ##D lambda <- rbind( mod2m$item$a , mod2f$item$a )
> ##D colnames(lambda) <- mod2m$item$item
> ##D rownames(lambda) <- c("male" , "female")
> ##D 
> ##D res2a <- invariance.alignment( lambda , nu , align.scale = c( .3 , .5 ) )
> ##D summary(res2a)
> ##D   ##   Effect Sizes of Approximate Invariance 
> ##D   ##          loadings intercepts
> ##D   ##   R2       0.9589     0.9682
> ##D   ##   sqrtU2   0.2027     0.1782
> ##D   ##   rbar     0.5177     0.9394
> ##D   ##   -----------------------------------------------------------------
> ##D   ##   Group Means and Standard Deviations 
> ##D   ##          alpha0  psi0
> ##D   ##   male   -0.044 0.968
> ##D   ##   female  0.047 1.034
> ##D 
> ##D res2b <- invariance.alignment( lambda , nu , align.scale = c( .3 , .5 ) ,
> ##D                 align.pow=c( .5 , .5 ) )
> ##D summary(res2b)
> ##D   ##   Group Means and Standard Deviations 
> ##D   ##          alpha0  psi0
> ##D   ##   male   -0.046 1.053
> ##D   ##   female  0.041 0.951
> ##D 
> ##D # compare results with Haberman linking
> ##D I <- ncol(dat.male)
> ##D itempartable <- data.frame( "study" = rep( c("male" , "female") , each=I ) )
> ##D itempartable$item <- c( paste0(mod2m$item$item)  ,  paste0(mod2f$item$item ) )
> ##D itempartable$a <- c( mod2m$item$a , mod2f$item$a )
> ##D itempartable$b <- c( mod2m$item$b , mod2f$item$b )
> ##D # estimate linking parameters
> ##D res2c <- linking.haberman( itempars= itempartable )
> ##D   ##   Transformation parameters (Haberman linking)
> ##D   ##      study    At   Bt
> ##D   ##   1 female 1.000 0.00
> ##D   ##   2   male 1.041 0.09
> ##D   ##   Linear transformation for person parameters theta
> ##D   ##      study A_theta B_theta
> ##D   ##   1 female   1.000    0.00
> ##D   ##   2   male   1.041   -0.09
> ##D   ##   R-Squared Measures of Invariance
> ##D   ##          slopes intercepts
> ##D   ##   R2     0.9554     0.9484
> ##D   ##   sqrtU2 0.2111     0.2273
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("invariance.alignment", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("isop")
> ### * isop
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: isop
> ### Title: Fit Unidimensional ISOP and ADISOP Model to Dichotomous and
> ###   Polytomous Item Responses
> ### Aliases: isop.dich isop.poly summary.isop plot.isop
> ### Keywords: ISOP model ADISOP model Nonparametric IRT summary plot
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset Reading (dichotomous items)
> #############################################################################
> 
> data(data.read)
> dat <- as.matrix( data.read)
> I <- ncol(dat)
> 
> # Model 1: ISOP Model (11 score groups)
> mod1 <- isop.dich( dat )

*******ISOP Model***********
Iteration 1 - Deviation = 11.44646 
Iteration 2 - Deviation = 0.00511 
Iteration 3 - Deviation = 0 

*******ADISOP Model*********
Iteration 1 - Deviation = 24.32621 
Iteration 2 - Deviation = 2.565126 
Iteration 3 - Deviation = 0.983598 
Iteration 4 - Deviation = 0.494976 
Iteration 5 - Deviation = 0.400727 
Iteration 6 - Deviation = 0.305244 
Iteration 7 - Deviation = 0.242128 
Iteration 8 - Deviation = 0.185187 
Iteration 9 - Deviation = 0.138548 
Iteration 10 - Deviation = 0.102524 
Iteration 11 - Deviation = 0.075514 
Iteration 12 - Deviation = 0.055555 
Iteration 13 - Deviation = 0.0409 
Iteration 14 - Deviation = 0.030162 
Iteration 15 - Deviation = 0.022288 
Iteration 16 - Deviation = 0.016503 
Iteration 17 - Deviation = 0.012247 
Iteration 18 - Deviation = 0.009101 
Iteration 19 - Deviation = 0.006788 
Iteration 20 - Deviation = 0.005076 
Iteration 21 - Deviation = 0.003802 
Iteration 22 - Deviation = 0.002849 
Iteration 23 - Deviation = 0.002137 
Iteration 24 - Deviation = 0.001603 
Iteration 25 - Deviation = 0.001203 
Iteration 26 - Deviation = 0.000903 
Iteration 27 - Deviation = 0.000677 
Iteration 28 - Deviation = 0.000508 
Iteration 29 - Deviation = 0.000382 
Iteration 30 - Deviation = 0.000287 
Iteration 31 - Deviation = 0.000215 
Iteration 32 - Deviation = 0.000162 
Iteration 33 - Deviation = 0.000121 
Iteration 34 - Deviation = 9.1e-05 

*******Logistic Model***********
Iteration 0 - Deviation = 1.528952 
Iteration 1 - Deviation = 1 
Iteration 2 - Deviation = 0.859565 
Iteration 3 - Deviation = 0.609597 
Iteration 4 - Deviation = 0.271673 
Iteration 5 - Deviation = 0.043773 
Iteration 6 - Deviation = 0.00104 
Iteration 7 - Deviation = 8e-06 
> summary(mod1)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:07 
ISOP and ADISOP Model 
-----------------------------------------------------------------
Number of persons =  328 
Number of items =  12 

Number of person score groups =  11 
Number of item score groups =  12 

Log-Likelihood Comparison
      model        ll   llcase
1 saturated -1548.791 -4.72192
2      isop -1589.178 -4.84506
3    adisop -1605.896 -4.89602
4  logistic -1633.477 -4.98011
*****************************************************************
Item Statistics and Scoring
   item      M  pscore p.Cat0 p.Cat1 score.Cat0 score.Cat1
A4   A4 0.4604 -0.2869 0.5396 0.4604    -0.4604     0.5396
B2   B2 0.5061 -0.2370 0.4939 0.5061    -0.5061     0.4939
A3   A3 0.5671 -0.1705 0.4329 0.5671    -0.5671     0.4329
B4   B4 0.6829 -0.0441 0.3171 0.6829    -0.6829     0.3171
B1   B1 0.7134 -0.0108 0.2866 0.7134    -0.7134     0.2866
C2   C2 0.7134 -0.0108 0.2866 0.7134    -0.7134     0.2866
C4   C4 0.7348  0.0125 0.2652 0.7348    -0.7348     0.2652
A2   A2 0.7378  0.0158 0.2622 0.7378    -0.7378     0.2622
A1   A1 0.8506  0.1389 0.1494 0.8506    -0.8506     0.1494
C3   C3 0.8720  0.1621 0.1280 0.8720    -0.8720     0.1280
B3   B3 0.9085  0.2021 0.0915 0.9085    -0.9085     0.0915
C1   C1 0.9329  0.2287 0.0671 0.9329    -0.9329     0.0671
> plot(mod1)
> 
> ## Not run: 
> ##D # Model 2: ISOP Model (5 score groups)
> ##D score.breaks <- seq( -.005 , 1.005 , len=5+1 ) 
> ##D mod2 <- isop.dich( dat , score.breaks=score.breaks)
> ##D summary(mod2)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Dataset PISA mathematics (dichotomous items)
> ##D #############################################################################
> ##D 
> ##D data(data.pisaMath)
> ##D dat <- data.pisaMath$data
> ##D dat <- dat[ , grep("M" , colnames(dat) ) ]
> ##D 
> ##D # fit ISOP model
> ##D # Note that for this model many iterations are needed
> ##D #   to reach convergence for ADISOP
> ##D mod1 <- isop.dich( dat , maxit=4000)
> ##D summary(mod1)
> ## End(Not run)
> 
> #############################################################################
> # EXAMPLE 3: Dataset Students (polytomous items)
> #############################################################################
> 
> # Dataset students: scale cultural activities
> library(CDM)
> data(data.Students , package="CDM")
> dat <- na.omit( data.Students[ , paste0("act",1:4) ] )
> 
> # fit models
> mod1 <- isop.poly( dat )

Fit ISOP Category 0
*******ISOP Model***********
Iteration 1 - Deviation = 48.44843 
Iteration 2 - Deviation = 0 

Fit ISOP Category 1
*******ISOP Model***********
Iteration 1 - Deviation = 56.80693 
Iteration 2 - Deviation = 0 

*******ADISOP Model*********
Iteration 1 - Deviation = 7.948858 
Iteration 2 - Deviation = 0.666468 
Iteration 3 - Deviation = 0.327089 
Iteration 4 - Deviation = 0.192132 
Iteration 5 - Deviation = 0.19086 
Iteration 6 - Deviation = 0.160002 
Iteration 7 - Deviation = 0.136683 
Iteration 8 - Deviation = 0.118263 
Iteration 9 - Deviation = 0.102987 
Iteration 10 - Deviation = 0.092487 
Iteration 11 - Deviation = 0.083009 
Iteration 12 - Deviation = 0.073456 
Iteration 13 - Deviation = 0.065148 
Iteration 14 - Deviation = 0.057991 
Iteration 15 - Deviation = 0.051759 
Iteration 16 - Deviation = 0.04627 
Iteration 17 - Deviation = 0.041395 
Iteration 18 - Deviation = 0.037044 
Iteration 19 - Deviation = 0.033149 
Iteration 20 - Deviation = 0.029656 
Iteration 21 - Deviation = 0.026522 
Iteration 22 - Deviation = 0.02371 
Iteration 23 - Deviation = 0.021189 
Iteration 24 - Deviation = 0.018928 
Iteration 25 - Deviation = 0.016903 
Iteration 26 - Deviation = 0.015089 
Iteration 27 - Deviation = 0.013467 
Iteration 28 - Deviation = 0.012015 
Iteration 29 - Deviation = 0.010718 
Iteration 30 - Deviation = 0.009558 
Iteration 31 - Deviation = 0.008523 
Iteration 32 - Deviation = 0.007598 
Iteration 33 - Deviation = 0.006773 
Iteration 34 - Deviation = 0.006036 
Iteration 35 - Deviation = 0.005379 
Iteration 36 - Deviation = 0.004793 
Iteration 37 - Deviation = 0.004271 
Iteration 38 - Deviation = 0.003805 
Iteration 39 - Deviation = 0.00339 
Iteration 40 - Deviation = 0.00302 
Iteration 41 - Deviation = 0.00269 
Iteration 42 - Deviation = 0.002396 
Iteration 43 - Deviation = 0.002134 
Iteration 44 - Deviation = 0.001901 
Iteration 45 - Deviation = 0.001693 
Iteration 46 - Deviation = 0.001508 
Iteration 47 - Deviation = 0.001343 
Iteration 48 - Deviation = 0.001196 
Iteration 49 - Deviation = 0.001065 
Iteration 50 - Deviation = 0.000949 
Iteration 51 - Deviation = 0.000845 
Iteration 52 - Deviation = 0.000752 
Iteration 53 - Deviation = 0.00067 
Iteration 54 - Deviation = 0.000597 
Iteration 55 - Deviation = 0.000531 
Iteration 56 - Deviation = 0.000473 
Iteration 57 - Deviation = 0.000421 
Iteration 58 - Deviation = 0.000375 
Iteration 59 - Deviation = 0.000334 
Iteration 60 - Deviation = 0.000298 
Iteration 61 - Deviation = 0.000265 
Iteration 62 - Deviation = 0.000236 
Iteration 63 - Deviation = 0.00021 
Iteration 64 - Deviation = 0.000187 
Iteration 65 - Deviation = 0.000167 
Iteration 66 - Deviation = 0.000148 
Iteration 67 - Deviation = 0.000132 
Iteration 68 - Deviation = 0.000118 
Iteration 69 - Deviation = 0.000105 
Iteration 70 - Deviation = 9.3e-05 

*******Graded Response Model***********
Iteration 0 - Deviation = 1.313475 
Iteration 1 - Deviation = 0.990099 
Iteration 2 - Deviation = 0.97059 
Iteration 3 - Deviation = 0.942045 
Iteration 4 - Deviation = 0.905287 
Iteration 5 - Deviation = 0.861349 
Iteration 6 - Deviation = 0.81143 
Iteration 7 - Deviation = 0.756836 
Iteration 8 - Deviation = 0.698925 
Iteration 9 - Deviation = 0.639055 
Iteration 10 - Deviation = 0.578528 
Iteration 11 - Deviation = 0.518548 
Iteration 12 - Deviation = 0.460185 
Iteration 13 - Deviation = 0.404348 
Iteration 14 - Deviation = 0.351768 
Iteration 15 - Deviation = 0.302995 
Iteration 16 - Deviation = 0.2584 
Iteration 17 - Deviation = 0.218187 
Iteration 18 - Deviation = 0.182409 
Iteration 19 - Deviation = 0.150987 
Iteration 20 - Deviation = 0.12374 
Iteration 21 - Deviation = 0.100407 
Iteration 22 - Deviation = 0.080666 
Iteration 23 - Deviation = 0.064165 
Iteration 24 - Deviation = 0.050534 
Iteration 25 - Deviation = 0.039405 
Iteration 26 - Deviation = 0.030423 
Iteration 27 - Deviation = 0.023255 
Iteration 28 - Deviation = 0.0176 
Iteration 29 - Deviation = 0.013189 
Iteration 30 - Deviation = 0.009785 
Iteration 31 - Deviation = 0.007188 
Iteration 32 - Deviation = 0.005228 
Iteration 33 - Deviation = 0.003765 
Iteration 34 - Deviation = 0.002684 
Iteration 35 - Deviation = 0.001895 
Iteration 36 - Deviation = 0.001324 
Iteration 37 - Deviation = 0.000916 
Iteration 38 - Deviation = 0.000628 
Iteration 39 - Deviation = 0.000426 
Iteration 40 - Deviation = 0.000286 
Iteration 41 - Deviation = 0.00019 
Iteration 42 - Deviation = 0.000125 
Iteration 43 - Deviation = 8.2e-05 
> summary(mod1)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:07 
ISOP and ADISOP Model 
-----------------------------------------------------------------
Number of persons =  2171 
Number of items =  4 

Number of person score groups =  9 
Number of item score groups =  4 

Log-Likelihood Comparison
      model        ll   llcase
1 saturated -4362.301 -2.00935
2      isop -4802.686 -2.21220
3    adisop -5068.372 -2.33458
4       grm -5304.026 -2.44313
*****************************************************************
Item Statistics and Scoring
     item      M  pscore p.Cat0 p.Cat1 p.Cat2 score.Cat0 score.Cat1 score.Cat2
act1 act1 0.6370 -0.0310 0.5099 0.3432 0.1469    -0.4901     0.3630     0.8531
act2 act2 0.4602 -0.2087 0.6485 0.2427 0.1087    -0.3515     0.5398     0.8913
act3 act3 0.3164 -0.3484 0.7453 0.1930 0.0617    -0.2547     0.6836     0.9383
act4 act4 1.3247  0.5881 0.1898 0.2957 0.5145    -0.8102    -0.3247     0.4855
> plot(mod1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("isop", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("isop.scoring")
> ### * isop.scoring
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: isop.scoring
> ### Title: Scoring Persons and Items in the ISOP Model
> ### Aliases: isop.scoring
> ### Keywords: ISOP model Nonparametric IRT
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset Reading
> #############################################################################
> 
> data( data.read )
> dat <- data.read
> 
> # Scoring according to the ISOP model
> msc <- isop.scoring( dat )
> # plot student scores
> boxplot( msc$person$mpsc ~ msc$person$score )
> 
> #############################################################################
> # EXAMPLE 2: Dataset students from CDM package | polytomous items
> #############################################################################
> 
> library(CDM)
> data( data.Students , package="CDM")
> dat <- na.omit(data.Students[ , -c(1:2) ])
> 
> # Scoring according to the ISOP model
> msc <- isop.scoring( dat )
> # plot student scores
> boxplot( msc$person$mpsc ~ msc$person$score )
> 
> # scoring with known scoring rule for activity items
> items <- paste0( "act" , 1:5 )
> score.itemcat <- msc$score.itemcat
> score.itemcat <- score.itemcat[ items , ]
> msc2 <- isop.scoring( dat[,items] , score.itemcat=score.itemcat )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("isop.scoring", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("isop.test")
> ### * isop.test
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: isop.test
> ### Title: Testing the ISOP Model
> ### Aliases: isop.test summary.isop.test
> ### Keywords: ISOP model summary Nonparametric IRT
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: ISOP model data.Students
> #############################################################################
> 
> data(data.Students, package="CDM")
> dat <- data.Students[ , paste0("act",1:5) ]
> dat <- dat[1:300 , ]	# select first 300 students
> 
> # perform the ISOP test
> mod <- isop.test(dat)
> summary(mod)
*** Test for the W1 Axiom in the ISOP Model **** 

  parm   N     M   est    se      t
1 test 300    NA 0.430 0.036 11.869
2 act1 278 0.601 0.451 0.048  9.384
3 act2 275 0.473 0.473 0.035 13.571
4 act3 274 0.277 0.352 0.098  3.596
5 act4 291 1.320 0.381 0.054  7.103
6 act5 276 0.460 0.475 0.042 11.184

-- Statistical inference is based on 20 jackknife units.
>   ## -> W1i statistics
>   ##     parm   N     M   est    se      t
>   ##   1 test 300    NA 0.430 0.036 11.869
>   ##   2 act1 278 0.601 0.451 0.048  9.384
>   ##   3 act2 275 0.473 0.473 0.035 13.571
>   ##   4 act3 274 0.277 0.352 0.098  3.596
>   ##   5 act4 291 1.320 0.381 0.054  7.103
>   ##   6 act5 276 0.460 0.475 0.042 11.184
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("isop.test", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("latent.regression.em.raschtype")
> ### * latent.regression.em.raschtype
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: latent.regression.em.raschtype
> ### Title: Latent Regression Model for the Generalized Logistic Item
> ###   Response Model and the Linear Model for Normal Responses
> ### Aliases: latent.regression.em.raschtype latent.regression.em.normal
> ###   summary.latent.regression
> ### Keywords: Latent regression model Generalized logistic item response
> ###   model Plausible values summary
> 
> ### ** Examples
> 
> #############################################################################
> #  EXAMPLE 1: PISA Reading | Rasch model for dichotomous data
> #############################################################################
> 
> data( data.pisaRead)
> dat <- data.pisaRead$data
> items <- grep("R" , colnames(dat))
> # define matrix of covariates
> X <- cbind( 1 , dat[ , c("female","hisei","migra" ) ] )
> 
> #***
> # Model 1: Latent regression model in the Rasch model
> # estimate Rasch model
> mod1 <- rasch.mml2( dat[,items] )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:07 
   Deviance = 6386.4167
    Maximum b parameter change =  0.490275  
...........................................................
Iteration 2     2015-06-13 13:24:07 
   Deviance = 6310.8759 | Deviance change = 75.540773
    Maximum b parameter change =  0.109421  
...........................................................
Iteration 3     2015-06-13 13:24:07 
   Deviance = 6296.2906 | Deviance change = 14.585286
    Maximum b parameter change =  0.065322  
...........................................................
Iteration 4     2015-06-13 13:24:07 
   Deviance = 6285.6968 | Deviance change = 10.593848
    Maximum b parameter change =  0.054726  
...........................................................
Iteration 5     2015-06-13 13:24:07 
   Deviance = 6277.5011 | Deviance change = 8.195684
    Maximum b parameter change =  0.049567  
...........................................................
Iteration 6     2015-06-13 13:24:07 
   Deviance = 6271.2607 | Deviance change = 6.240445
    Maximum b parameter change =  0.046221  
...........................................................
Iteration 7     2015-06-13 13:24:07 
   Deviance = 6266.7255 | Deviance change = 4.535195
    Maximum b parameter change =  0.043784  
...........................................................
Iteration 8     2015-06-13 13:24:07 
   Deviance = 6263.7137 | Deviance change = 3.011725
    Maximum b parameter change =  0.041861  
...........................................................
Iteration 9     2015-06-13 13:24:07 
   Deviance = 6262.0767 | Deviance change = 1.637041
    Maximum b parameter change =  0.040238  
...........................................................
Iteration 10     2015-06-13 13:24:07 
   Deviance = 6261.5714 | Deviance change = 0.505337
    Maximum b parameter change =  0.020269  
...........................................................
Iteration 11     2015-06-13 13:24:07 
   Deviance = 6261.3923 | Deviance change = 0.1791
    Maximum b parameter change =  0.013425  
...........................................................
Iteration 12     2015-06-13 13:24:07 
   Deviance = 6261.3156 | Deviance change = 0.076627
    Maximum b parameter change =  0.008267  
...........................................................
Iteration 13     2015-06-13 13:24:07 
   Deviance = 6261.278 | Deviance change = 0.037685
    Maximum b parameter change =  0.005644  
...........................................................
Iteration 14     2015-06-13 13:24:07 
   Deviance = 6261.2579 | Deviance change = 0.020031
    Maximum b parameter change =  0.003878  
...........................................................
Iteration 15     2015-06-13 13:24:07 
   Deviance = 6261.2469 | Deviance change = 0.01105
    Maximum b parameter change =  0.002777  
...........................................................
Iteration 16     2015-06-13 13:24:07 
   Deviance = 6261.2407 | Deviance change = 0.006188
    Maximum b parameter change =  0.002016  
...........................................................
Iteration 17     2015-06-13 13:24:07 
   Deviance = 6261.2372 | Deviance change = 0.003484
    Maximum b parameter change =  0.001487  
...........................................................
Iteration 18     2015-06-13 13:24:07 
   Deviance = 6261.2352 | Deviance change = 0.001963
    Maximum b parameter change =  0.001106  
...........................................................
Iteration 19     2015-06-13 13:24:07 
   Deviance = 6261.2341 | Deviance change = 0.001104
    Maximum b parameter change =  0.000827  
...........................................................
Iteration 20     2015-06-13 13:24:07 
   Deviance = 6261.2335 | Deviance change = 0.000618
    Maximum b parameter change =  0.000621  
...........................................................
Iteration 21     2015-06-13 13:24:07 
   Deviance = 6261.2332 | Deviance change = 0.000344
    Maximum b parameter change =  0.000467  
...........................................................
Iteration 22     2015-06-13 13:24:07 
   Deviance = 6261.233 | Deviance change = 0.00019
    Maximum b parameter change =  0.000352  
...........................................................
Iteration 23     2015-06-13 13:24:07 
   Deviance = 6261.2329 | Deviance change = 0.000104
    Maximum b parameter change =  0.000266  
...........................................................
Iteration 24     2015-06-13 13:24:07 
   Deviance = 6261.2328 | Deviance change = 5.6e-05
    Maximum b parameter change =  0.000201  
...........................................................
Iteration 25     2015-06-13 13:24:07 
   Deviance = 6261.2328 | Deviance change = 2.9e-05
    Maximum b parameter change =  0.000152  
...........................................................
Iteration 26     2015-06-13 13:24:07 
   Deviance = 6261.2328 | Deviance change = 1.5e-05
    Maximum b parameter change =  0.000114  
...........................................................
Iteration 27     2015-06-13 13:24:08 
   Deviance = 6261.2328 | Deviance change = 7e-06
    Maximum b parameter change =  8.6e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:07 
End: 2015-06-13 13:24:08 
Time difference of 0.166003 secs
Difference: 0.166003 
------------------------------------------------------------
> # latent regression model
> lm1 <- latent.regression.em.raschtype( data=dat[,items ], X = X , b = mod1$item$b )
Iteration 1: max parm. change 0.887698 
Iteration 2: max parm. change 0.323328 
Iteration 3: max parm. change 0.112923 
Iteration 4: max parm. change 0.051229 
Iteration 5: max parm. change 0.025677 
Iteration 6: max parm. change 0.013483 
Iteration 7: max parm. change 0.007248 
Iteration 8: max parm. change 0.003945 
Iteration 9: max parm. change 0.002162 
Iteration 10: max parm. change 0.001189 
Iteration 11: max parm. change 0.000655 
Iteration 12: max parm. change 0.000361 
Iteration 13: max parm. change 2e-04 
Iteration 14: max parm. change 0.00011 
Iteration 15: max parm. change 6.1e-05 

Regression Parameters

           est se.simple     se       t      p    beta    fmi N.simple
1      -0.1823    0.0814 0.0966 -1.8863 0.0593  0.0000 0.2901      623
female  0.3220    0.1080 0.1288  2.5009 0.0124  0.1120 0.2963      623
hisei   0.4243    0.0541 0.0649  6.5420 0.0000  0.2972 0.3049      623
migra  -0.5143    0.1815 0.2143 -2.3997 0.0164 -0.1074 0.2831      623
       pseudoN.latent
1             437.968
female        437.968
hisei         437.968
migra         437.968

Residual Variance  = 1.8094 
Explained Variance = 0.2506 
Total Variance     = 2.06 
	        R2 = 0.1217 
> 
> ## Not run: 
> ##D             
> ##D #***
> ##D # Model 2: Latent regression with generalized link function
> ##D # estimate alpha parameters for link function
> ##D mod2 <- rasch.mml2( dat[,items] , est.alpha=TRUE)
> ##D # use model estimated likelihood for latent regression model
> ##D lm2 <- latent.regression.em.raschtype( f.yi.qk=mod2$f.yi.qk , 
> ##D             X = X , theta.list=mod2$theta.k)
> ##D 
> ##D #***
> ##D # Model 3: Latent regression model based on Rasch copula model
> ##D testlets <- paste( data.pisaRead$item$testlet)
> ##D itemclusters <- match( testlets , unique(testlets) )
> ##D # estimate Rasch copula model
> ##D mod3 <- rasch.copula2( dat[,items] , itemcluster=itemclusters )
> ##D # use model estimated likelihood for latent regression model
> ##D lm3 <- latent.regression.em.raschtype( f.yi.qk=mod3$f.yi.qk , 
> ##D                 X = X , theta.list=mod3$theta.k) 
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: Simulated data according to the Rasch model
> ##D #############################################################################
> ##D 
> ##D set.seed(899)
> ##D I <- 21     # number of items
> ##D b <- seq(-2,2, len=I)   # item difficulties
> ##D n <- 2000       # number of students
> ##D 
> ##D # simulate theta and covariates
> ##D theta <- rnorm( n )
> ##D x <- .7 * theta + rnorm( n , .5 )
> ##D y <- .2 * x+ .3*theta + rnorm( n , .4 )
> ##D dfr <- data.frame( theta , 1 , x , y )
> ##D 
> ##D # simulate Rasch model
> ##D dat1 <- sim.raschtype( theta = theta , b = b )
> ##D 
> ##D # estimate latent regression
> ##D mod <- latent.regression.em.raschtype( data = dat1 , X  = dfr[,-1] , b = b )
> ##D   ## Regression Parameters
> ##D   ## 
> ##D   ##        est se.simple     se        t p   beta    fmi N.simple pseudoN.latent
> ##D   ## X1 -0.2554    0.0208 0.0248 -10.2853 0 0.0000 0.2972     2000       1411.322
> ##D   ## x   0.4113    0.0161 0.0193  21.3037 0 0.4956 0.3052     2000       1411.322
> ##D   ## y   0.1715    0.0179 0.0213   8.0438 0 0.1860 0.2972     2000       1411.322
> ##D   ## 
> ##D   ## Residual Variance  = 0.685 
> ##D   ## Explained Variance = 0.3639 
> ##D   ## Total Variance     = 1.049 
> ##D   ##                 R2 = 0.3469 
> ##D 
> ##D # compare with linear model (based on true scores)
> ##D summary( lm( theta  ~ x + y , data = dfr ) )
> ##D   ## Coefficients:
> ##D   ##             Estimate Std. Error t value Pr(>|t|)    
> ##D   ## (Intercept) -0.27821    0.01984  -14.02   <2e-16 ***
> ##D   ## x            0.40747    0.01534   26.56   <2e-16 ***
> ##D   ## y            0.18189    0.01704   10.67   <2e-16 ***
> ##D   ## ---
> ##D   ## 
> ##D   ## Residual standard error: 0.789 on 1997 degrees of freedom
> ##D   ## Multiple R-squared: 0.3713,     Adjusted R-squared: 0.3707 
> ##D 
> ##D #***********
> ##D # define guessing parameters (lower asymptotes) and 
> ##D # upper asymptotes ( 1 minus slipping parameters)
> ##D cI <- rep(.2, I)        # all items get a guessing parameter of .2
> ##D cI[ c(7,9) ] <- .25     # 7th and 9th get a guessing parameter of .25
> ##D dI <- rep( .95 , I )	# upper asymptote of .95
> ##D dI[ c(7,11) ] <- 1		# 7th and 9th item have an asymptote of 1
> ##D 
> ##D # latent regression model
> ##D mod1 <- latent.regression.em.raschtype( data = dat1 , X  = dfr[,-1] ,
> ##D            b = b , c = cI , d = dI    )
> ##D   ## Regression Parameters
> ##D   ## 
> ##D   ##        est se.simple     se        t p   beta    fmi N.simple pseudoN.latent
> ##D   ## X1 -0.7929    0.0243 0.0315 -25.1818 0 0.0000 0.4044     2000       1247.306
> ##D   ## x   0.5025    0.0188 0.0241  20.8273 0 0.5093 0.3936     2000       1247.306
> ##D   ## y   0.2149    0.0209 0.0266   8.0850 0 0.1960 0.3831     2000       1247.306
> ##D   ## 
> ##D   ## Residual Variance  = 0.9338 
> ##D   ## Explained Variance = 0.5487 
> ##D   ## Total Variance     = 1.4825 
> ##D   ##                 R2 = 0.3701
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 3: Measurement error in dependent variable
> ##D #############################################################################
> ##D 
> ##D set.seed(8766)
> ##D N <- 4000       # number of persons
> ##D X <- rnorm(N)           # independent variable
> ##D Z <- rnorm(N)           # independent variable
> ##D y <- .45 * X + .25 * Z + rnorm(N)   # dependent variable true score
> ##D sig.e <- runif( N , .5 , .6 )       # measurement error standard deviation
> ##D yast <- y + rnorm( N , sd = sig.e ) # dependent variable measured with error 
> ##D 
> ##D #****
> ##D # Model 1: Estimation with latent.regression.em.raschtype using 
> ##D #          individual likelihood
> ##D # define theta grid for evaluation of density
> ##D theta.list <- mean(yast) + sd(yast) * seq( - 5 , 5 , length=21)
> ##D # compute individual likelihood
> ##D f.yi.qk <- dnorm( outer( yast , theta.list , "-" ) / sig.e )
> ##D f.yi.qk <- f.yi.qk / rowSums(f.yi.qk)
> ##D # define predictor matrix
> ##D X1 <- as.matrix(data.frame( "intercept"=1 , "X"=X , "Z"=Z ))
> ##D 
> ##D # latent regression model
> ##D res <- latent.regression.em.raschtype( f.yi.qk=f.yi.qk , 
> ##D                     X= X1 , theta.list=theta.list)
> ##D   ##   Regression Parameters
> ##D   ##   
> ##D   ##                est se.simple     se       t      p   beta    fmi N.simple pseudoN.latent
> ##D   ##   intercept 0.0112    0.0157 0.0180  0.6225 0.5336 0.0000 0.2345     4000       3061.998
> ##D   ##   X         0.4275    0.0157 0.0180 23.7926 0.0000 0.3868 0.2350     4000       3061.998
> ##D   ##   Z         0.2314    0.0156 0.0178 12.9868 0.0000 0.2111 0.2349     4000       3061.998
> ##D   ##   
> ##D   ##   Residual Variance  = 0.9877 
> ##D   ##   Explained Variance = 0.2343 
> ##D   ##   Total Variance     = 1.222 
> ##D   ##                   R2 = 0.1917 
> ##D                 
> ##D #****
> ##D # Model 2: Estimation with latent.regression.em.normal
> ##D res2 <- latent.regression.em.normal( y = yast , sig.e = sig.e , X = X1)
> ##D   ##   Regression Parameters
> ##D   ##   
> ##D   ##                est se.simple     se       t      p   beta    fmi N.simple pseudoN.latent
> ##D   ##   intercept 0.0112    0.0157 0.0180  0.6225 0.5336 0.0000 0.2345     4000       3062.041
> ##D   ##   X         0.4275    0.0157 0.0180 23.7927 0.0000 0.3868 0.2350     4000       3062.041
> ##D   ##   Z         0.2314    0.0156 0.0178 12.9870 0.0000 0.2111 0.2349     4000       3062.041
> ##D   ##   
> ##D   ##   Residual Variance  = 0.9877 
> ##D   ##   Explained Variance = 0.2343 
> ##D   ##   Total Variance     = 1.222 
> ##D   ##                   R2 = 0.1917 
> ##D 
> ##D   ## -> Results between Model 1 and Model 2 are identical because they use
> ##D   ##    the same input.
> ##D 
> ##D #***
> ##D # Model 3: Regression model based on true scores y
> ##D mod3 <- lm( y ~ X + Z )
> ##D summary(mod3)
> ##D   ##   Coefficients:
> ##D   ##               Estimate Std. Error t value Pr(>|t|)    
> ##D   ##   (Intercept)  0.02364    0.01569   1.506    0.132    
> ##D   ##   X            0.42401    0.01570  27.016   <2e-16 ***
> ##D   ##   Z            0.23804    0.01556  15.294   <2e-16 ***
> ##D   ##   Residual standard error: 0.9925 on 3997 degrees of freedom
> ##D   ##   Multiple R-squared:  0.1923,    Adjusted R-squared:  0.1919 
> ##D   ##   F-statistic: 475.9 on 2 and 3997 DF,  p-value: < 2.2e-16
> ##D 
> ##D #***
> ##D # Model 4: Regression model based on observed scores yast
> ##D mod4 <- lm( yast ~ X + Z )
> ##D summary(mod4)
> ##D   ##   Coefficients:
> ##D   ##               Estimate Std. Error t value Pr(>|t|)    
> ##D   ##   (Intercept)  0.01101    0.01797   0.613     0.54    
> ##D   ##   X            0.42716    0.01797  23.764   <2e-16 ***
> ##D   ##   Z            0.23174    0.01783  13.001   <2e-16 ***
> ##D   ##   Residual standard error: 1.137 on 3997 degrees of freedom
> ##D   ##   Multiple R-squared:  0.1535,    Adjusted R-squared:  0.1531 
> ##D   ##   F-statistic: 362.4 on 2 and 3997 DF,  p-value: < 2.2e-16
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("latent.regression.em.raschtype", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lavaan2mirt")
> ### * lavaan2mirt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lavaan2mirt
> ### Title: Converting a 'lavaan' Model into a 'mirt' Model
> ### Aliases: lavaan2mirt
> ### Keywords: mirt lavaan
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: Convert some lavaan syntax to mirt syntax for data.read
> ##D #############################################################################
> ##D 
> ##D library(mirt)
> ##D data(data.read)
> ##D dat <- data.read
> ##D 
> ##D #******************
> ##D #*** Model 1: Single factor model
> ##D lavmodel <- "
> ##D      # omit item C3
> ##D      F=~ A1+A2+A3+A4 + C1+C2+C4 + B1+B2+B3+B4 
> ##D      F ~~ 1*F                         
> ##D             "
> ##D             
> ##D # convert syntax and estimate model
> ##D res <- lavaan2mirt( dat ,  lavmodel , verbose=TRUE , technical=list(NCYCLES=3) )
> ##D # inspect coefficients
> ##D coef(res$mirt)
> ##D mirt.wrapper.coef(res$mirt)
> ##D # converted mirt model and parameter table
> ##D cat(res$mirt.syntax)
> ##D res$mirt.pars
> ##D 
> ##D #******************
> ##D #*** Model 2: Rasch Model with first six items
> ##D lavmodel <- "
> ##D      F=~ a*A1+a*A2+a*A3+a*A4+a*B1+a*B2
> ##D      F ~~ 1*F     
> ##D             "
> ##D # convert syntax and estimate model
> ##D res <- lavaan2mirt( dat ,  lavmodel , est.mirt=FALSE)
> ##D # converted mirt model
> ##D cat(res$mirt.syntax)
> ##D # mirt parameter table
> ##D res$mirt.pars
> ##D # estimate model using generated objects
> ##D res2 <- mirt::mirt( res$dat , res$mirt.model , pars=res$mirt.pars )
> ##D mirt.wrapper.coef(res2)     # parameter estimates
> ##D 
> ##D #******************
> ##D #*** Model 3: Bifactor model
> ##D lavmodel <- "
> ##D      G=~ A1+A2+A3+A4 + B1+B2+B3+B4  + C1+C2+C3+C4 
> ##D      A=~ A1+A2+A3+A4
> ##D      B=~ B1+B2+B3+B4     
> ##D      C=~ C1+C2+C3+C4   
> ##D      G ~~ 1*G
> ##D      A ~~ 1*A
> ##D      B ~~ 1*B
> ##D      C ~~ 1*C      
> ##D             "           
> ##D res <- lavaan2mirt( dat ,  lavmodel , est.mirt=FALSE )
> ##D # mirt syntax and mirt model
> ##D cat(res$mirt.syntax)
> ##D res$mirt.model
> ##D res$mirt.pars
> ##D 
> ##D #******************
> ##D #*** Model 4: 3-dimensional model with some parameter constraints
> ##D lavmodel <- "
> ##D      # some equality constraints among loadings
> ##D      A=~ a*A1+a*A2+a2*A3+a2*A4  
> ##D      B=~ B1+B2+b3*B3+B4     
> ##D      C=~ c*C1+c*C2+c*C3+c*C4         
> ##D      # some equality constraints among thresholds 
> ##D      A1 | da*t1        
> ##D      A3 | da*t1  
> ##D      B3 | da*t1       
> ##D      C3 | dg*t1
> ##D      C4 | dg*t1
> ##D      # standardized latent variables
> ##D      A ~~ 1*A
> ##D      B ~~ 1*B
> ##D      C ~~ 1*C     
> ##D      # estimate Cov(A,B) and Cov(A,C)
> ##D      A ~~ B
> ##D      A ~~ C
> ##D      # estimate mean of B
> ##D      B ~ 1
> ##D             "           
> ##D res <- lavaan2mirt( dat ,  lavmodel , verbose=TRUE , technical=list(NCYCLES=3) )
> ##D # estimated parameters
> ##D mirt.wrapper.coef(res$mirt)
> ##D # generated mirt syntax
> ##D cat(res$mirt.syntax)
> ##D # mirt parameter table
> ##D mirt::mod2values(res$mirt)
> ##D 
> ##D #******************
> ##D #*** Model 5: 3-dimensional model with some parameter constraints and
> ##D #             parameter fixings
> ##D lavmodel <- "
> ##D      A=~ a*A1+a*A2+1.3*A3+A4  # set loading of A3 to 1.3
> ##D      B=~ B1+1*B2+b3*B3+B4     
> ##D      C=~ c*C1+C2+c*C3+C4          
> ##D      A1 | da*t1        
> ##D      A3 | da*t1  
> ##D      C4 | dg*t1
> ##D      B1 | 0*t1
> ##D      B3 | -1.4*t1   # fix item threshold of B3 to -1.4
> ##D      A ~~ 1*A	    
> ##D      B ~~ B         # estimate variance of B freely 
> ##D      C ~~ 1*C     
> ##D      A ~~ B         # estimate covariance between A and B
> ##D      A ~~ .6 * C    # fix covariance to .6
> ##D      A ~ .5*1       # set mean of A to .5
> ##D      B ~ 1          # estimate mean of B
> ##D             "   
> ##D res <- lavaan2mirt( dat ,  lavmodel , verbose=TRUE , technical=list(NCYCLES=3) )
> ##D mirt.wrapper.coef(res$mirt)
> ##D 
> ##D #******************
> ##D #*** Model 6: 1-dimensional model with guessing and slipping parameters
> ##D #******************
> ##D 
> ##D lavmodel <- "
> ##D      F=~ c*A1+c*A2+1*A3+1.3*A4 + C1__C4 + a*B1+b*B2+b*B3+B4
> ##D      # guessing parameters
> ##D      A1+A2 ?= guess1*g1     
> ##D      A3 ?= .25*g1
> ##D      B1+C1 ?= g1
> ##D      B2__B4 ?= 0.10*g1
> ##D      # slipping parameters
> ##D      A1+A2+C3 ?= slip1*s1
> ##D      A3 ?= .02*s1
> ##D      # fix item intercepts
> ##D      A1 | 0*t1
> ##D      A2 | -.4*t1
> ##D      F ~ 1	# estimate mean of F
> ##D      F ~~ 1*F   # fix variance of F
> ##D             "
> ##D # convert syntax and estimate model
> ##D res <- lavaan2mirt( dat ,  lavmodel , verbose=TRUE , technical=list(NCYCLES=3) )
> ##D # coefficients
> ##D mirt.wrapper.coef(res$mirt)
> ##D # converted mirt model
> ##D cat(res$mirt.syntax)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Convert some lavaan syntax to mirt syntax for
> ##D #            longitudinal data data.long   
> ##D #############################################################################
> ##D 
> ##D data(data.long)
> ##D dat <- data.long[,-1]
> ##D 
> ##D #******************
> ##D #*** Model 1: Rasch model for T1
> ##D lavmodel <- "
> ##D      F=~ 1*I1T1 +1*I2T1+1*I3T1+1*I4T1+1*I5T1+1*I6T1 
> ##D      F ~~ F
> ##D             "
> ##D # convert syntax and estimate model
> ##D res <- lavaan2mirt( dat ,  lavmodel , verbose=TRUE , technical=list(NCYCLES=20) )
> ##D # inspect coefficients
> ##D mirt.wrapper.coef(res$mirt)
> ##D # converted mirt model
> ##D cat(res$mirt.syntax)
> ##D 
> ##D #******************
> ##D #*** Model 2: Rasch model for two time points
> ##D lavmodel <- "
> ##D      F1=~ 1*I1T1 +1*I2T1+1*I3T1+1*I4T1+1*I5T1+1*I6T1 
> ##D      F2=~ 1*I3T2 +1*I4T2+1*I5T2+1*I6T2+1*I7T2+1*I8T2
> ##D      F1 ~~ F1
> ##D      F1 ~~ F2     
> ##D      F2 ~~ F2
> ##D      # equal item difficulties of same items
> ##D      I3T1 | i3*t1
> ##D      I3T2 | i3*t1
> ##D      I4T1 | i4*t1
> ##D      I4T2 | i4*t1
> ##D      I5T1 | i5*t1
> ##D      I5T2 | i5*t1              
> ##D      I6T1 | i6*t1
> ##D      I6T2 | i6*t1                   
> ##D      # estimate mean of F1, but fix mean of F2
> ##D      F1 ~ 1
> ##D      F2 ~ 0*1
> ##D             "
> ##D # convert syntax and estimate model
> ##D res <- lavaan2mirt( dat ,  lavmodel , verbose=TRUE , technical=list(NCYCLES=20) )
> ##D # inspect coefficients
> ##D mirt.wrapper.coef(res$mirt)
> ##D # converted mirt model
> ##D cat(res$mirt.syntax)
> ##D 
> ##D #-- compare estimation with smirt function
> ##D # define Q-matrix
> ##D I <- ncol(dat)
> ##D Q <- matrix(0,I,2)
> ##D Q[1:6,1] <- 1
> ##D Q[7:12,2] <- 1
> ##D rownames(Q) <- colnames(dat)
> ##D colnames(Q) <- c("T1","T2")
> ##D # vector with same items
> ##D itemnr <- as.numeric( substring( colnames(dat) ,2,2) )
> ##D # fix mean at T2 to zero
> ##D mu.fixed <- cbind( 2,0 )
> ##D # estimate model in smirt
> ##D mod1 <- smirt(dat, Qmatrix=Q , irtmodel="comp" , est.b= itemnr, mu.fixed=mu.fixed )
> ##D summary(mod1)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: Converting lavaan syntax for polytomous data   
> ##D #############################################################################
> ##D 
> ##D data(data.big5)
> ##D # select some items
> ##D items <- c( grep( "O" , colnames(data.big5) , value=TRUE )[1:6] ,
> ##D             grep( "N" , colnames(data.big5) , value=TRUE )[1:4] )
> ##D #  O3  O8  O13 O18 O23 O28 N1  N6  N11 N16            
> ##D dat <- data.big5[ , items ]
> ##D library(psych)
> ##D psych::describe(dat)
> ##D 
> ##D #******************
> ##D #*** Model 1: Partial credit model
> ##D lavmodel <- "
> ##D       O =~ 1*O3+1*O8+1*O13+1*O18+1*O23+1*O28
> ##D       O ~~ O
> ##D          "    
> ##D # estimate model in mirt
> ##D res <- lavaan2mirt( dat , lavmodel , technical=list(NCYCLES=20) , verbose=TRUE)
> ##D # estimated mirt model
> ##D mres <- res$mirt
> ##D # mirt syntax
> ##D cat(res$mirt.syntax)
> ##D   ##   O=1,2,3,4,5,6
> ##D   ##   COV = O*O
> ##D # estimated parameters
> ##D mirt.wrapper.coef(mres) 
> ##D # some plots
> ##D mirt::itemplot( mres , 3 )   # third item
> ##D plot(mres)   # item information
> ##D plot(mres,type="trace")  # item category functions
> ##D 
> ##D # graded response model with equal slopes
> ##D res1 <- lavaan2mirt( dat, lavmodel, poly.itemtype="graded", technical=list(NCYCLES=20),
> ##D               verbose=TRUE )
> ##D mirt.wrapper.coef(res1$mirt) 
> ##D 
> ##D #******************
> ##D #*** Model 2: Generalized partial credit model with some constraints
> ##D lavmodel <- "
> ##D       O =~ O3+O8+O13+a*O18+a*O23+1.2*O28
> ##D       O ~ 1   # estimate mean
> ##D       O ~~ O  # estimate variance
> ##D       # some constraints among thresholds
> ##D       O3  | d1*t1
> ##D       O13 | d1*t1
> ##D       O3  | d2*t2
> ##D       O8  | d3*t2
> ##D       O28 | (-0.5)*t1
> ##D          "             
> ##D # estimate model in mirt
> ##D res <- lavaan2mirt( dat , lavmodel , technical=list(NCYCLES=5) , verbose=TRUE)
> ##D # estimated mirt model
> ##D mres <- res$mirt
> ##D # estimated parameters
> ##D mirt.wrapper.coef(mres)
> ##D 
> ##D #*** generate syntax for mirt for this model and estimate it in mirt package
> ##D # Items: O3  O8  O13 O18 O23 O28
> ##D mirtmodel <- mirt::mirt.model( "
> ##D              O = 1-6
> ##D              # a(O18)=a(O23), t1(O3)=t1(O18), t2(O3)=t2(O8)
> ##D              CONSTRAIN= (4,5,a1), (1,3,d1), (1,2,d2)      
> ##D              MEAN = O
> ##D              COV = O*O
> ##D                ")
> ##D # initial table of parameters in mirt          
> ##D mirt.pars <- mirt::mirt( dat[,1:6] , mirtmodel , itemtype="gpcm" , pars="values")
> ##D # fix slope of item O28 to 1.2
> ##D ind <- which( ( mirt.pars$item == "O28" ) & ( mirt.pars$name == "a1") )
> ##D mirt.pars[ ind , "est"] <- FALSE
> ##D mirt.pars[ ind , "value"] <- 1.2
> ##D # fix d1 of item O28 to -0.5
> ##D ind <- which( ( mirt.pars$item == "O28" ) & ( mirt.pars$name == "d1") )
> ##D mirt.pars[ ind , "est"] <- FALSE
> ##D mirt.pars[ ind , "value"] <- -0.5
> ##D # estimate model
> ##D res2 <- mirt::mirt( dat[,1:6] , mirtmodel , pars=mirt.pars ,
> ##D              verbose=TRUE , technical=list(NCYCLES=4) )
> ##D mirt.wrapper.coef(res2)
> ##D plot(res2, type="trace")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lavaan2mirt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lc.2raters")
> ### * lc.2raters
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lc.2raters
> ### Title: Latent Class Model for Two Exchangeable Raters and One Item
> ### Aliases: lc.2raters summary.lc.2raters
> ### Keywords: summary Rater model Latent class model
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Latent class models for rating datasets data.si05
> #############################################################################
> 
> data(data.si05)
> 
> #*** Model 1: one item with two categories
> mod1 <- lc.2raters( data.si05$Ex1)
Iteration 1 | Max. probability change = 0.169229
Iteration 2 | Max. probability change = 0.14801
Iteration 3 | Max. probability change = 0.075156
Iteration 4 | Max. probability change = 0.01782
Iteration 5 | Max. probability change = 0.0025
Iteration 6 | Max. probability change = 0.000303
> summary(mod1)
---------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:08 
Letent Class Model for Two Exchangeable Raters 
---------------------------------------------------------------
Number of persons = 195 
Number of item categories = 2 

********************************************
Symmetrized Frequency Table
      Cat0 Cat1
Cat0 130.0  9.5
Cat1   9.5 46.0

********************************************
Rater agreement statistics

Percentage agreement = 0.9026 
Percentage agreement (up to 1 category) = 1 
Cohen's kappa = 0.7607 
Weighted kappa (linear weights) = 0.7607 
Gwet's AC1 = 0.8356 
Aickin's alpha = 0.7906 

********************************************
Item probabilities given latent classes
     LatCat0 LatCat1
Cat0  0.9571  0.0747
Cat1  0.0429  0.9253

********************************************
Latent class classification probability for one rater (likelihood estimate)
     LatCat0 LatCat1
Cat0  0.8736  0.1264
Cat1  0.0781  0.9219

********************************************
Latent class classification probability for two raters (likelihood estimate)
            Cat0   Cat1
Cat0-Cat0 0.9939 0.0061
Cat0-Cat1 0.3727 0.6273
Cat1-Cat1 0.0022 0.9978
> 
> #*** Model 2: one item with five categories
> mod2 <- lc.2raters( data.si05$Ex2)
Iteration 1 | Max. probability change = 0.181954
Iteration 2 | Max. probability change = 0.118027
Iteration 3 | Max. probability change = 0.035274
Iteration 4 | Max. probability change = 0.023165
Iteration 5 | Max. probability change = 0.014301
Iteration 6 | Max. probability change = 0.012532
Iteration 7 | Max. probability change = 0.01137
Iteration 8 | Max. probability change = 0.0101
Iteration 9 | Max. probability change = 0.009022
Iteration 10 | Max. probability change = 0.00815
Iteration 11 | Max. probability change = 0.007445
Iteration 12 | Max. probability change = 0.006867
Iteration 13 | Max. probability change = 0.006433
Iteration 14 | Max. probability change = 0.006311
Iteration 15 | Max. probability change = 0.006182
Iteration 16 | Max. probability change = 0.006047
Iteration 17 | Max. probability change = 0.005909
Iteration 18 | Max. probability change = 0.005767
Iteration 19 | Max. probability change = 0.005623
Iteration 20 | Max. probability change = 0.005478
Iteration 21 | Max. probability change = 0.005332
Iteration 22 | Max. probability change = 0.005186
Iteration 23 | Max. probability change = 0.005041
Iteration 24 | Max. probability change = 0.004897
Iteration 25 | Max. probability change = 0.004755
Iteration 26 | Max. probability change = 0.004615
Iteration 27 | Max. probability change = 0.004478
Iteration 28 | Max. probability change = 0.004343
Iteration 29 | Max. probability change = 0.004211
Iteration 30 | Max. probability change = 0.004083
Iteration 31 | Max. probability change = 0.003958
Iteration 32 | Max. probability change = 0.003836
Iteration 33 | Max. probability change = 0.003718
Iteration 34 | Max. probability change = 0.003604
Iteration 35 | Max. probability change = 0.003493
Iteration 36 | Max. probability change = 0.003385
Iteration 37 | Max. probability change = 0.003281
Iteration 38 | Max. probability change = 0.00318
Iteration 39 | Max. probability change = 0.003081
Iteration 40 | Max. probability change = 0.002986
Iteration 41 | Max. probability change = 0.002892
Iteration 42 | Max. probability change = 0.002801
Iteration 43 | Max. probability change = 0.002713
Iteration 44 | Max. probability change = 0.002626
Iteration 45 | Max. probability change = 0.002541
Iteration 46 | Max. probability change = 0.002458
Iteration 47 | Max. probability change = 0.002376
Iteration 48 | Max. probability change = 0.002297
Iteration 49 | Max. probability change = 0.002218
Iteration 50 | Max. probability change = 0.002141
Iteration 51 | Max. probability change = 0.002065
Iteration 52 | Max. probability change = 0.001991
Iteration 53 | Max. probability change = 0.001918
Iteration 54 | Max. probability change = 0.001847
Iteration 55 | Max. probability change = 0.001777
Iteration 56 | Max. probability change = 0.001708
Iteration 57 | Max. probability change = 0.001662
Iteration 58 | Max. probability change = 0.001617
Iteration 59 | Max. probability change = 0.001573
Iteration 60 | Max. probability change = 0.001531
Iteration 61 | Max. probability change = 0.00149
Iteration 62 | Max. probability change = 0.00145
Iteration 63 | Max. probability change = 0.001411
Iteration 64 | Max. probability change = 0.001374
Iteration 65 | Max. probability change = 0.001337
Iteration 66 | Max. probability change = 0.001302
Iteration 67 | Max. probability change = 0.001268
Iteration 68 | Max. probability change = 0.001235
Iteration 69 | Max. probability change = 0.001203
Iteration 70 | Max. probability change = 0.001171
Iteration 71 | Max. probability change = 0.001141
Iteration 72 | Max. probability change = 0.001112
Iteration 73 | Max. probability change = 0.001084
Iteration 74 | Max. probability change = 0.001056
Iteration 75 | Max. probability change = 0.001029
Iteration 76 | Max. probability change = 0.001004
Iteration 77 | Max. probability change = 0.000979
> summary(mod2)
---------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:08 
Letent Class Model for Two Exchangeable Raters 
---------------------------------------------------------------
Number of persons = 2000 
Number of item categories = 5 

********************************************
Symmetrized Frequency Table
      Cat0  Cat1  Cat2 Cat3 Cat4
Cat0 324.0  78.5  65.5  3.0  1.0
Cat1  78.5  78.0 122.0  3.5  0.5
Cat2  65.5 122.0 701.0 86.0 38.5
Cat3   3.0   3.5  86.0 32.0 22.5
Cat4   1.0   0.5  38.5 22.5 23.0

********************************************
Rater agreement statistics

Percentage agreement = 0.579 
Percentage agreement (up to 1 category) = 0.888 
Cohen's kappa = 0.3627 
Weighted kappa (linear weights) = 0.5182 
Gwet's AC1 = 0.4957 
Aickin's alpha = 0.4146 

********************************************
Item probabilities given latent classes
     LatCat0 LatCat1 LatCat2 LatCat3 LatCat4
Cat0  0.7887  0.1068  0.0355  0.0102  0.0075
Cat1  0.1512  0.4515  0.0747  0.0000  0.0000
Cat2  0.0601  0.4417  0.8147  0.4264  0.3885
Cat3  0.0001  0.0000  0.0657  0.3590  0.2162
Cat4  0.0000  0.0000  0.0095  0.2044  0.3878

********************************************
Latent class classification probability for one rater (likelihood estimate)
     LatCat0 LatCat1 LatCat2 LatCat3 LatCat4
Cat0  0.7565  0.1606  0.0551  0.0160  0.0118
Cat1  0.2487  0.6231  0.1282  0.0000  0.0000
Cat2  0.0381  0.2242  0.3151  0.2186  0.2040
Cat3  0.0001  0.0000  0.1153  0.5347  0.3499
Cat4  0.0000  0.0000  0.0188  0.3631  0.6180

********************************************
Latent class classification probability for two raters (likelihood estimate)
            Cat0   Cat1   Cat2   Cat3   Cat4
Cat0-Cat0 0.9797 0.0181 0.0020 0.0002 0.0001
Cat0-Cat1 0.6999 0.2846 0.0156 0.0000 0.0000
Cat0-Cat2 0.3627 0.3612 0.2209 0.0331 0.0221
Cat0-Cat3 0.0084 0.0000 0.3043 0.4768 0.2106
Cat0-Cat4 0.0009 0.0000 0.0639 0.3911 0.5441
Cat1-Cat1 0.0980 0.8780 0.0240 0.0000 0.0000
Cat1-Cat2 0.0337 0.7400 0.2262 0.0000 0.0000
Cat1-Cat3 0.0025 0.0000 0.9975 0.0000 0.0000
Cat1-Cat4 0.0012 0.0000 0.9988 0.0000 0.0000
Cat2-Cat2 0.0030 0.1628 0.5562 0.1518 0.1262
Cat2-Cat3 0.0000 0.0000 0.1843 0.5267 0.2890
Cat2-Cat4 0.0000 0.0000 0.0318 0.3549 0.6133
Cat3-Cat3 0.0000 0.0000 0.0239 0.7165 0.2595
Cat3-Cat4 0.0000 0.0000 0.0040 0.4652 0.5308
Cat4-Cat4 0.0000 0.0000 0.0005 0.2176 0.7820
> 
> #*** Model 3: one item with eight categories
> mod3 <- lc.2raters( data.si05$Ex3)
Iteration 1 | Max. probability change = 0.157912
Iteration 2 | Max. probability change = 0.083694
Iteration 3 | Max. probability change = 0.030391
Iteration 4 | Max. probability change = 0.017577
Iteration 5 | Max. probability change = 0.014873
Iteration 6 | Max. probability change = 0.012735
Iteration 7 | Max. probability change = 0.010716
Iteration 8 | Max. probability change = 0.009015
Iteration 9 | Max. probability change = 0.00763
Iteration 10 | Max. probability change = 0.00651
Iteration 11 | Max. probability change = 0.005599
Iteration 12 | Max. probability change = 0.004852
Iteration 13 | Max. probability change = 0.004233
Iteration 14 | Max. probability change = 0.003796
Iteration 15 | Max. probability change = 0.003429
Iteration 16 | Max. probability change = 0.003117
Iteration 17 | Max. probability change = 0.002848
Iteration 18 | Max. probability change = 0.002616
Iteration 19 | Max. probability change = 0.002412
Iteration 20 | Max. probability change = 0.002234
Iteration 21 | Max. probability change = 0.002075
Iteration 22 | Max. probability change = 0.001934
Iteration 23 | Max. probability change = 0.001808
Iteration 24 | Max. probability change = 0.001694
Iteration 25 | Max. probability change = 0.001591
Iteration 26 | Max. probability change = 0.001497
Iteration 27 | Max. probability change = 0.001412
Iteration 28 | Max. probability change = 0.001334
Iteration 29 | Max. probability change = 0.001263
Iteration 30 | Max. probability change = 0.001197
Iteration 31 | Max. probability change = 0.001136
Iteration 32 | Max. probability change = 0.00108
Iteration 33 | Max. probability change = 0.001029
Iteration 34 | Max. probability change = 0.000981
> summary(mod3)	
---------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:08 
Letent Class Model for Two Exchangeable Raters 
---------------------------------------------------------------
Number of persons = 2000 
Number of item categories = 8 

********************************************
Symmetrized Frequency Table
      Cat0 Cat1 Cat2  Cat3 Cat4 Cat5 Cat6 Cat7
Cat0 189.0 33.5 22.0  13.0  4.0  2.0  2.0  1.0
Cat1  33.5 68.0 56.5  33.0 10.0  3.5  1.0  0.0
Cat2  22.0 56.5 78.0  81.5 28.5 12.0  3.5  0.5
Cat3  13.0 33.0 81.5 124.0 91.0 48.0 14.5  3.5
Cat4   4.0 10.0 28.5  91.0 76.0 78.0 32.5  9.5
Cat5   2.0  3.5 12.0  48.0 78.0 67.0 39.0 25.5
Cat6   2.0  1.0  3.5  14.5 32.5 39.0 32.0 22.5
Cat7   1.0  0.0  0.5   3.5  9.5 25.5 22.5 23.0

********************************************
Rater agreement statistics

Percentage agreement = 0.3285 
Percentage agreement (up to 1 category) = 0.7305 
Cohen's kappa = 0.2162 
Weighted kappa (linear weights) = 0.5247 
Gwet's AC1 = 0.2349 
Aickin's alpha = 0.2203 

********************************************
Item probabilities given latent classes
     LatCat0 LatCat1 LatCat2 LatCat3 LatCat4 LatCat5 LatCat6 LatCat7
Cat0  0.8035  0.0802  0.0340  0.0107  0.0032  0.0025  0.0070  0.0126
Cat1  0.0995  0.5291  0.1946  0.0408  0.0078  0.0003  0.0000  0.0000
Cat2  0.0553  0.2729  0.4211  0.1934  0.0291  0.0087  0.0070  0.0015
Cat3  0.0278  0.0914  0.2854  0.4341  0.2530  0.1019  0.0214  0.0048
Cat4  0.0063  0.0194  0.0497  0.2250  0.3506  0.2866  0.1501  0.0166
Cat5  0.0020  0.0051  0.0110  0.0831  0.2660  0.3594  0.2322  0.2678
Cat6  0.0047  0.0018  0.0042  0.0126  0.0861  0.1598  0.3905  0.2377
Cat7  0.0010  0.0000  0.0000  0.0002  0.0043  0.0808  0.1918  0.4590

********************************************
Latent class classification probability for one rater (likelihood estimate)
     LatCat0 LatCat1 LatCat2 LatCat3 LatCat4 LatCat5 LatCat6 LatCat7
Cat0  0.7671  0.1228  0.0533  0.0171  0.0052  0.0040  0.0110  0.0196
Cat1  0.1337  0.5501  0.2484  0.0566  0.0109  0.0004  0.0000  0.0000
Cat2  0.0639  0.2795  0.3951  0.2071  0.0343  0.0103  0.0081  0.0017
Cat3  0.0262  0.0840  0.2341  0.3262  0.2118  0.0926  0.0205  0.0046
Cat4  0.0065  0.0199  0.0504  0.2071  0.3004  0.2544  0.1439  0.0175
Cat5  0.0019  0.0048  0.0104  0.0752  0.2171  0.2787  0.1936  0.2183
Cat6  0.0061  0.0023  0.0054  0.0162  0.1063  0.1890  0.4049  0.2698
Cat7  0.0017  0.0000  0.0000  0.0003  0.0071  0.1272  0.2839  0.5798

********************************************
Latent class classification probability for two raters (likelihood estimate)
            Cat0   Cat1   Cat2   Cat3   Cat4   Cat5   Cat6   Cat7
Cat0-Cat0 0.9879 0.0098 0.0018 0.0002 0.0000 0.0000 0.0001 0.0002
Cat0-Cat1 0.6176 0.3277 0.0511 0.0034 0.0002 0.0000 0.0000 0.0000
Cat0-Cat2 0.5363 0.2637 0.1728 0.0250 0.0012 0.0003 0.0006 0.0002
Cat0-Cat3 0.4924 0.1626 0.2135 0.1031 0.0182 0.0057 0.0033 0.0013
Cat0-Cat4 0.3639 0.1127 0.1227 0.1751 0.0829 0.0523 0.0752 0.0152
Cat0-Cat5 0.1603 0.0409 0.0378 0.0899 0.0869 0.0914 0.1615 0.3313
Cat0-Cat6 0.3624 0.0138 0.0135 0.0128 0.0265 0.0380 0.2556 0.2773
Cat0-Cat7 0.1010 0.0000 0.0000 0.0003 0.0018 0.0254 0.1652 0.7063
Cat1-Cat1 0.0301 0.8497 0.1150 0.0051 0.0002 0.0000 0.0000 0.0000
Cat1-Cat2 0.0230 0.6011 0.3421 0.0329 0.0009 0.0000 0.0000 0.0000
Cat1-Cat3 0.0218 0.3841 0.4380 0.1403 0.0154 0.0002 0.0000 0.0000
Cat1-Cat4 0.0191 0.3151 0.2980 0.2821 0.0834 0.0023 0.0000 0.0000
Cat1-Cat5 0.0187 0.2538 0.2034 0.3211 0.1938 0.0091 0.0001 0.0000
Cat1-Cat6 0.1365 0.2761 0.2347 0.1484 0.1915 0.0122 0.0006 0.0000
Cat1-Cat7 0.6101 0.0000 0.0005 0.0485 0.2036 0.1313 0.0059 0.0000
Cat2-Cat2 0.0104 0.2532 0.6060 0.1270 0.0029 0.0003 0.0002 0.0000
Cat2-Cat3 0.0064 0.1048 0.5024 0.3511 0.0310 0.0037 0.0006 0.0000
Cat2-Cat4 0.0041 0.0630 0.2505 0.5175 0.1227 0.0298 0.0122 0.0003
Cat2-Cat5 0.0031 0.0394 0.1329 0.4576 0.2215 0.0897 0.0450 0.0107
Cat2-Cat6 0.0222 0.0416 0.1489 0.2053 0.2126 0.1172 0.2239 0.0282
Cat2-Cat7 0.0194 0.0000 0.0001 0.0131 0.0441 0.2455 0.4531 0.2247
Cat3-Cat3 0.0022 0.0238 0.2290 0.5338 0.1806 0.0292 0.0013 0.0001
Cat3-Cat4 0.0007 0.0076 0.0604 0.4158 0.3777 0.1238 0.0138 0.0003
Cat3-Cat5 0.0004 0.0031 0.0210 0.2413 0.4476 0.2446 0.0334 0.0085
Cat3-Cat6 0.0024 0.0031 0.0219 0.1007 0.3995 0.2972 0.1546 0.0208
Cat3-Cat7 0.0018 0.0000 0.0000 0.0054 0.0695 0.5220 0.2624 0.1389
Cat4-Cat4 0.0001 0.0013 0.0088 0.1797 0.4382 0.2908 0.0799 0.0010
Cat4-Cat5 0.0000 0.0004 0.0022 0.0734 0.3654 0.4043 0.1366 0.0178
Cat4-Cat6 0.0002 0.0002 0.0015 0.0201 0.2137 0.3220 0.4137 0.0285
Cat4-Cat7 0.0001 0.0000 0.0000 0.0007 0.0248 0.3778 0.4691 0.1274
Cat5-Cat5 0.0000 0.0001 0.0004 0.0208 0.2117 0.3905 0.1621 0.2144
Cat5-Cat6 0.0000 0.0000 0.0002 0.0045 0.0971 0.2438 0.3850 0.2694
Cat5-Cat7 0.0000 0.0000 0.0000 0.0001 0.0058 0.1476 0.2253 0.6212
Cat6-Cat6 0.0001 0.0000 0.0001 0.0007 0.0307 0.1049 0.6302 0.2333
Cat6-Cat7 0.0000 0.0000 0.0000 0.0000 0.0019 0.0654 0.3793 0.5534
Cat7-Cat7 0.0000 0.0000 0.0000 0.0000 0.0001 0.0257 0.1444 0.8298
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lc.2raters", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("linking.haberman")
> ### * linking.haberman
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: linking.haberman
> ### Title: Linking in the 2PL/Generalized Partial Credit Model
> ### Aliases: linking.haberman
> ### Keywords: Linking Equating
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Item parameters data.pars1.rasch and data.pars1.2pl
> #############################################################################
> 
> # Model 1: Linking three studies calibrated by the Rasch model
> data(data.pars1.rasch)
> mod1 <- linking.haberman( itempars=data.pars1.rasch )
** A (slopes) estimation | Iteration 0 | Max. parameter change = 0 

** B (intercepts) estimation | Iteration 0 | Max. parameter change = 0.075141 
** B (intercepts) estimation | Iteration 1 | Max. parameter change = 0.031285 
** B (intercepts) estimation | Iteration 2 | Max. parameter change = 0.015051 
** B (intercepts) estimation | Iteration 3 | Max. parameter change = 0.008794 
** B (intercepts) estimation | Iteration 4 | Max. parameter change = 0.006593 
** B (intercepts) estimation | Iteration 5 | Max. parameter change = 0.006065 
** B (intercepts) estimation | Iteration 6 | Max. parameter change = 0.005464 
** B (intercepts) estimation | Iteration 7 | Max. parameter change = 0.004883 
** B (intercepts) estimation | Iteration 8 | Max. parameter change = 0.00435 
** B (intercepts) estimation | Iteration 9 | Max. parameter change = 0.003871 
** B (intercepts) estimation | Iteration 10 | Max. parameter change = 0.003442 
** B (intercepts) estimation | Iteration 11 | Max. parameter change = 0.00306 
** B (intercepts) estimation | Iteration 12 | Max. parameter change = 0.00272 
** B (intercepts) estimation | Iteration 13 | Max. parameter change = 0.002418 
** B (intercepts) estimation | Iteration 14 | Max. parameter change = 0.00215 
** B (intercepts) estimation | Iteration 15 | Max. parameter change = 0.001911 
** B (intercepts) estimation | Iteration 16 | Max. parameter change = 0.001699 
** B (intercepts) estimation | Iteration 17 | Max. parameter change = 0.00151 
** B (intercepts) estimation | Iteration 18 | Max. parameter change = 0.001342 
** B (intercepts) estimation | Iteration 19 | Max. parameter change = 0.001193 
** B (intercepts) estimation | Iteration 20 | Max. parameter change = 0.001061 
** B (intercepts) estimation | Iteration 21 | Max. parameter change = 0.000943 
** B (intercepts) estimation | Iteration 22 | Max. parameter change = 0.000838 
** B (intercepts) estimation | Iteration 23 | Max. parameter change = 0.000745 
** B (intercepts) estimation | Iteration 24 | Max. parameter change = 0.000662 
** B (intercepts) estimation | Iteration 25 | Max. parameter change = 0.000589 
** B (intercepts) estimation | Iteration 26 | Max. parameter change = 0.000523 
** B (intercepts) estimation | Iteration 27 | Max. parameter change = 0.000465 
** B (intercepts) estimation | Iteration 28 | Max. parameter change = 0.000414 
** B (intercepts) estimation | Iteration 29 | Max. parameter change = 0.000368 
** B (intercepts) estimation | Iteration 30 | Max. parameter change = 0.000327 
** B (intercepts) estimation | Iteration 31 | Max. parameter change = 0.00029 
** B (intercepts) estimation | Iteration 32 | Max. parameter change = 0.000258 
** B (intercepts) estimation | Iteration 33 | Max. parameter change = 0.00023 
** B (intercepts) estimation | Iteration 34 | Max. parameter change = 0.000204 
** B (intercepts) estimation | Iteration 35 | Max. parameter change = 0.000181 
** B (intercepts) estimation | Iteration 36 | Max. parameter change = 0.000161 
** B (intercepts) estimation | Iteration 37 | Max. parameter change = 0.000143 
** B (intercepts) estimation | Iteration 38 | Max. parameter change = 0.000127 
** B (intercepts) estimation | Iteration 39 | Max. parameter change = 0.000113 
** B (intercepts) estimation | Iteration 40 | Max. parameter change = 0.000101 
** B (intercepts) estimation | Iteration 41 | Max. parameter change = 8.9e-05 
** B (intercepts) estimation | Iteration 42 | Max. parameter change = 8e-05 
** B (intercepts) estimation | Iteration 43 | Max. parameter change = 7.1e-05 
** B (intercepts) estimation | Iteration 44 | Max. parameter change = 6.3e-05 
** B (intercepts) estimation | Iteration 45 | Max. parameter change = 5.6e-05 
** B (intercepts) estimation | Iteration 46 | Max. parameter change = 5e-05 
** B (intercepts) estimation | Iteration 47 | Max. parameter change = 4.4e-05 
** B (intercepts) estimation | Iteration 48 | Max. parameter change = 3.9e-05 
** B (intercepts) estimation | Iteration 49 | Max. parameter change = 3.5e-05 
** B (intercepts) estimation | Iteration 50 | Max. parameter change = 3.1e-05 
** B (intercepts) estimation | Iteration 51 | Max. parameter change = 2.8e-05 
** B (intercepts) estimation | Iteration 52 | Max. parameter change = 2.5e-05 
** B (intercepts) estimation | Iteration 53 | Max. parameter change = 2.2e-05 
** B (intercepts) estimation | Iteration 54 | Max. parameter change = 1.9e-05 
** B (intercepts) estimation | Iteration 55 | Max. parameter change = 1.7e-05 
** B (intercepts) estimation | Iteration 56 | Max. parameter change = 1.5e-05 
** B (intercepts) estimation | Iteration 57 | Max. parameter change = 1.4e-05 
** B (intercepts) estimation | Iteration 58 | Max. parameter change = 1.2e-05 
** B (intercepts) estimation | Iteration 59 | Max. parameter change = 1.1e-05 
** B (intercepts) estimation | Iteration 60 | Max. parameter change = 1e-05 

Transformation parameters (Haberman linking)
   study At     Bt
1 study1  1  0.000
2 study2  1 -0.065
3 study3  1 -0.177

Linear transformation for item parameters a and b
   study A_a A_b    B_b
1 study1   1   1  0.000
2 study2   1   1 -0.065
3 study3   1   1 -0.177

Linear transformation for person parameters theta
   study A_theta B_theta
1 study1       1   0.000
2 study2       1   0.065
3 study3       1   0.177

R-Squared Measures of Invariance
       slopes intercepts
R2          1     0.9938
sqrtU2      0     0.0790
> 
> # Model 1b: Linking these studies but weigh these studies by
> #     proportion weights 3 : 0.5 : 1  (see below).
> #     All weights are the same for each item but they could also
> #     be item specific.
> itempars <- data.pars1.rasch
> itempars$wgt <- 1
> itempars[ itempars$study == "study1","wgt"] <- 3
> itempars[ itempars$study == "study2","wgt"] <- .5
> mod1b <- linking.haberman( itempars=itempars )
** A (slopes) estimation | Iteration 0 | Max. parameter change = 0 

** B (intercepts) estimation | Iteration 0 | Max. parameter change = 0.077433 
** B (intercepts) estimation | Iteration 1 | Max. parameter change = 0.03662 
** B (intercepts) estimation | Iteration 2 | Max. parameter change = 0.018346 
** B (intercepts) estimation | Iteration 3 | Max. parameter change = 0.010059 
** B (intercepts) estimation | Iteration 4 | Max. parameter change = 0.006206 
** B (intercepts) estimation | Iteration 5 | Max. parameter change = 0.004352 
** B (intercepts) estimation | Iteration 6 | Max. parameter change = 0.00413 
** B (intercepts) estimation | Iteration 7 | Max. parameter change = 0.003817 
** B (intercepts) estimation | Iteration 8 | Max. parameter change = 0.003486 
** B (intercepts) estimation | Iteration 9 | Max. parameter change = 0.003165 
** B (intercepts) estimation | Iteration 10 | Max. parameter change = 0.002865 
** B (intercepts) estimation | Iteration 11 | Max. parameter change = 0.00259 
** B (intercepts) estimation | Iteration 12 | Max. parameter change = 0.00234 
** B (intercepts) estimation | Iteration 13 | Max. parameter change = 0.002113 
** B (intercepts) estimation | Iteration 14 | Max. parameter change = 0.001908 
** B (intercepts) estimation | Iteration 15 | Max. parameter change = 0.001723 
** B (intercepts) estimation | Iteration 16 | Max. parameter change = 0.001556 
** B (intercepts) estimation | Iteration 17 | Max. parameter change = 0.001405 
** B (intercepts) estimation | Iteration 18 | Max. parameter change = 0.001268 
** B (intercepts) estimation | Iteration 19 | Max. parameter change = 0.001145 
** B (intercepts) estimation | Iteration 20 | Max. parameter change = 0.001034 
** B (intercepts) estimation | Iteration 21 | Max. parameter change = 0.000933 
** B (intercepts) estimation | Iteration 22 | Max. parameter change = 0.000843 
** B (intercepts) estimation | Iteration 23 | Max. parameter change = 0.000761 
** B (intercepts) estimation | Iteration 24 | Max. parameter change = 0.000687 
** B (intercepts) estimation | Iteration 25 | Max. parameter change = 0.00062 
** B (intercepts) estimation | Iteration 26 | Max. parameter change = 0.00056 
** B (intercepts) estimation | Iteration 27 | Max. parameter change = 0.000506 
** B (intercepts) estimation | Iteration 28 | Max. parameter change = 0.000457 
** B (intercepts) estimation | Iteration 29 | Max. parameter change = 0.000412 
** B (intercepts) estimation | Iteration 30 | Max. parameter change = 0.000372 
** B (intercepts) estimation | Iteration 31 | Max. parameter change = 0.000336 
** B (intercepts) estimation | Iteration 32 | Max. parameter change = 0.000303 
** B (intercepts) estimation | Iteration 33 | Max. parameter change = 0.000274 
** B (intercepts) estimation | Iteration 34 | Max. parameter change = 0.000247 
** B (intercepts) estimation | Iteration 35 | Max. parameter change = 0.000223 
** B (intercepts) estimation | Iteration 36 | Max. parameter change = 0.000202 
** B (intercepts) estimation | Iteration 37 | Max. parameter change = 0.000182 
** B (intercepts) estimation | Iteration 38 | Max. parameter change = 0.000164 
** B (intercepts) estimation | Iteration 39 | Max. parameter change = 0.000148 
** B (intercepts) estimation | Iteration 40 | Max. parameter change = 0.000134 
** B (intercepts) estimation | Iteration 41 | Max. parameter change = 0.000121 
** B (intercepts) estimation | Iteration 42 | Max. parameter change = 0.000109 
** B (intercepts) estimation | Iteration 43 | Max. parameter change = 9.9e-05 
** B (intercepts) estimation | Iteration 44 | Max. parameter change = 8.9e-05 
** B (intercepts) estimation | Iteration 45 | Max. parameter change = 8e-05 
** B (intercepts) estimation | Iteration 46 | Max. parameter change = 7.3e-05 
** B (intercepts) estimation | Iteration 47 | Max. parameter change = 6.6e-05 
** B (intercepts) estimation | Iteration 48 | Max. parameter change = 5.9e-05 
** B (intercepts) estimation | Iteration 49 | Max. parameter change = 5.3e-05 
** B (intercepts) estimation | Iteration 50 | Max. parameter change = 4.8e-05 
** B (intercepts) estimation | Iteration 51 | Max. parameter change = 4.4e-05 
** B (intercepts) estimation | Iteration 52 | Max. parameter change = 3.9e-05 
** B (intercepts) estimation | Iteration 53 | Max. parameter change = 3.5e-05 
** B (intercepts) estimation | Iteration 54 | Max. parameter change = 3.2e-05 
** B (intercepts) estimation | Iteration 55 | Max. parameter change = 2.9e-05 
** B (intercepts) estimation | Iteration 56 | Max. parameter change = 2.6e-05 
** B (intercepts) estimation | Iteration 57 | Max. parameter change = 2.4e-05 
** B (intercepts) estimation | Iteration 58 | Max. parameter change = 2.1e-05 
** B (intercepts) estimation | Iteration 59 | Max. parameter change = 1.9e-05 
** B (intercepts) estimation | Iteration 60 | Max. parameter change = 1.7e-05 
** B (intercepts) estimation | Iteration 61 | Max. parameter change = 1.6e-05 
** B (intercepts) estimation | Iteration 62 | Max. parameter change = 1.4e-05 
** B (intercepts) estimation | Iteration 63 | Max. parameter change = 1.3e-05 
** B (intercepts) estimation | Iteration 64 | Max. parameter change = 1.2e-05 
** B (intercepts) estimation | Iteration 65 | Max. parameter change = 1e-05 
** B (intercepts) estimation | Iteration 66 | Max. parameter change = 9e-06 

Transformation parameters (Haberman linking)
   study At     Bt
1 study1  1  0.000
2 study2  1 -0.036
3 study3  1 -0.183

Linear transformation for item parameters a and b
   study A_a A_b    B_b
1 study1   1   1  0.000
2 study2   1   1 -0.036
3 study3   1   1 -0.183

Linear transformation for person parameters theta
   study A_theta B_theta
1 study1       1   0.000
2 study2       1   0.036
3 study3       1   0.183

R-Squared Measures of Invariance
       slopes intercepts
R2          1     0.9923
sqrtU2      0     0.0878
> 
> # Model 2: Linking three studies calibrated by the 2PL model
> data(data.pars1.2pl)
> mod2 <- linking.haberman( itempars=data.pars1.2pl )
** A (slopes) estimation | Iteration 0 | Max. parameter change = 0.040765 
** A (slopes) estimation | Iteration 1 | Max. parameter change = 0.013755 
** A (slopes) estimation | Iteration 2 | Max. parameter change = 0.004149 
** A (slopes) estimation | Iteration 3 | Max. parameter change = 0.002313 
** A (slopes) estimation | Iteration 4 | Max. parameter change = 0.001697 
** A (slopes) estimation | Iteration 5 | Max. parameter change = 0.00138 
** A (slopes) estimation | Iteration 6 | Max. parameter change = 0.00118 
** A (slopes) estimation | Iteration 7 | Max. parameter change = 0.001032 
** A (slopes) estimation | Iteration 8 | Max. parameter change = 0.000912 
** A (slopes) estimation | Iteration 9 | Max. parameter change = 0.000808 
** A (slopes) estimation | Iteration 10 | Max. parameter change = 0.000718 
** A (slopes) estimation | Iteration 11 | Max. parameter change = 0.000638 
** A (slopes) estimation | Iteration 12 | Max. parameter change = 0.000567 
** A (slopes) estimation | Iteration 13 | Max. parameter change = 0.000504 
** A (slopes) estimation | Iteration 14 | Max. parameter change = 0.000448 
** A (slopes) estimation | Iteration 15 | Max. parameter change = 0.000398 
** A (slopes) estimation | Iteration 16 | Max. parameter change = 0.000354 
** A (slopes) estimation | Iteration 17 | Max. parameter change = 0.000315 
** A (slopes) estimation | Iteration 18 | Max. parameter change = 0.00028 
** A (slopes) estimation | Iteration 19 | Max. parameter change = 0.000249 
** A (slopes) estimation | Iteration 20 | Max. parameter change = 0.000221 
** A (slopes) estimation | Iteration 21 | Max. parameter change = 0.000196 
** A (slopes) estimation | Iteration 22 | Max. parameter change = 0.000175 
** A (slopes) estimation | Iteration 23 | Max. parameter change = 0.000155 
** A (slopes) estimation | Iteration 24 | Max. parameter change = 0.000138 
** A (slopes) estimation | Iteration 25 | Max. parameter change = 0.000123 
** A (slopes) estimation | Iteration 26 | Max. parameter change = 0.000109 
** A (slopes) estimation | Iteration 27 | Max. parameter change = 9.7e-05 
** A (slopes) estimation | Iteration 28 | Max. parameter change = 8.6e-05 
** A (slopes) estimation | Iteration 29 | Max. parameter change = 7.7e-05 
** A (slopes) estimation | Iteration 30 | Max. parameter change = 6.8e-05 
** A (slopes) estimation | Iteration 31 | Max. parameter change = 6.1e-05 
** A (slopes) estimation | Iteration 32 | Max. parameter change = 5.4e-05 
** A (slopes) estimation | Iteration 33 | Max. parameter change = 4.8e-05 
** A (slopes) estimation | Iteration 34 | Max. parameter change = 4.3e-05 
** A (slopes) estimation | Iteration 35 | Max. parameter change = 3.8e-05 
** A (slopes) estimation | Iteration 36 | Max. parameter change = 3.4e-05 
** A (slopes) estimation | Iteration 37 | Max. parameter change = 3e-05 
** A (slopes) estimation | Iteration 38 | Max. parameter change = 2.7e-05 
** A (slopes) estimation | Iteration 39 | Max. parameter change = 2.4e-05 
** A (slopes) estimation | Iteration 40 | Max. parameter change = 2.1e-05 
** A (slopes) estimation | Iteration 41 | Max. parameter change = 1.9e-05 
** A (slopes) estimation | Iteration 42 | Max. parameter change = 1.7e-05 
** A (slopes) estimation | Iteration 43 | Max. parameter change = 1.5e-05 
** A (slopes) estimation | Iteration 44 | Max. parameter change = 1.3e-05 
** A (slopes) estimation | Iteration 45 | Max. parameter change = 1.2e-05 
** A (slopes) estimation | Iteration 46 | Max. parameter change = 1e-05 
** A (slopes) estimation | Iteration 47 | Max. parameter change = 9e-06 

** B (intercepts) estimation | Iteration 0 | Max. parameter change = 0.111274 
** B (intercepts) estimation | Iteration 1 | Max. parameter change = 0.040191 
** B (intercepts) estimation | Iteration 2 | Max. parameter change = 0.014627 
** B (intercepts) estimation | Iteration 3 | Max. parameter change = 0.00542 
** B (intercepts) estimation | Iteration 4 | Max. parameter change = 0.002094 
** B (intercepts) estimation | Iteration 5 | Max. parameter change = 0.000882 
** B (intercepts) estimation | Iteration 6 | Max. parameter change = 0.000433 
** B (intercepts) estimation | Iteration 7 | Max. parameter change = 0.000258 
** B (intercepts) estimation | Iteration 8 | Max. parameter change = 0.000201 
** B (intercepts) estimation | Iteration 9 | Max. parameter change = 0.000184 
** B (intercepts) estimation | Iteration 10 | Max. parameter change = 0.000166 
** B (intercepts) estimation | Iteration 11 | Max. parameter change = 0.000148 
** B (intercepts) estimation | Iteration 12 | Max. parameter change = 0.000132 
** B (intercepts) estimation | Iteration 13 | Max. parameter change = 0.000117 
** B (intercepts) estimation | Iteration 14 | Max. parameter change = 0.000104 
** B (intercepts) estimation | Iteration 15 | Max. parameter change = 9.3e-05 
** B (intercepts) estimation | Iteration 16 | Max. parameter change = 8.3e-05 
** B (intercepts) estimation | Iteration 17 | Max. parameter change = 7.3e-05 
** B (intercepts) estimation | Iteration 18 | Max. parameter change = 6.5e-05 
** B (intercepts) estimation | Iteration 19 | Max. parameter change = 5.8e-05 
** B (intercepts) estimation | Iteration 20 | Max. parameter change = 5.2e-05 
** B (intercepts) estimation | Iteration 21 | Max. parameter change = 4.6e-05 
** B (intercepts) estimation | Iteration 22 | Max. parameter change = 4.1e-05 
** B (intercepts) estimation | Iteration 23 | Max. parameter change = 3.6e-05 
** B (intercepts) estimation | Iteration 24 | Max. parameter change = 3.2e-05 
** B (intercepts) estimation | Iteration 25 | Max. parameter change = 2.9e-05 
** B (intercepts) estimation | Iteration 26 | Max. parameter change = 2.5e-05 
** B (intercepts) estimation | Iteration 27 | Max. parameter change = 2.3e-05 
** B (intercepts) estimation | Iteration 28 | Max. parameter change = 2e-05 
** B (intercepts) estimation | Iteration 29 | Max. parameter change = 1.8e-05 
** B (intercepts) estimation | Iteration 30 | Max. parameter change = 1.6e-05 
** B (intercepts) estimation | Iteration 31 | Max. parameter change = 1.4e-05 
** B (intercepts) estimation | Iteration 32 | Max. parameter change = 1.3e-05 
** B (intercepts) estimation | Iteration 33 | Max. parameter change = 1.1e-05 
** B (intercepts) estimation | Iteration 34 | Max. parameter change = 1e-05 

Transformation parameters (Haberman linking)
   study    At     Bt
1 study1 1.000  0.000
2 study2 1.045  0.055
3 study3 0.950 -0.177

Linear transformation for item parameters a and b
   study   A_a   A_b    B_b
1 study1 1.000 1.000  0.000
2 study2 0.957 1.045  0.055
3 study3 1.052 0.950 -0.177

Linear transformation for person parameters theta
   study A_theta B_theta
1 study1   1.000   0.000
2 study2   1.045  -0.055
3 study3   0.950   0.177

R-Squared Measures of Invariance
       slopes intercepts
R2     0.9902     0.9884
sqrtU2 0.0989     0.1077
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 2: Linking longitudinal data
> ##D #############################################################################
> ##D data(data.long)
> ##D 
> ##D #******
> ##D # Model 1: Scaling with the 1PL model
> ##D 
> ##D # scaling at T1
> ##D dat1 <- data.long[ , grep("T1" , colnames(data.long) ) ]
> ##D resT1 <- rasch.mml2( dat1 )
> ##D itempartable1 <- data.frame( "study"="T1" , resT1$item[ , c("item" , "a" , "b" ) ] )
> ##D # scaling at T2
> ##D dat2 <- data.long[ , grep("T2" , colnames(data.long) ) ]
> ##D resT2 <- rasch.mml2( dat2 )
> ##D summary(resT2)
> ##D itempartable2 <- data.frame( "study"="T2" , resT2$item[ , c("item" , "a" , "b" ) ] )
> ##D itempartable <- rbind( itempartable1 , itempartable2 )
> ##D itempartable[,2] <- substring( itempartable[,2] , 1, 2 )
> ##D # estimate linking parameters
> ##D mod1 <- linking.haberman( itempars= itempartable )
> ##D 
> ##D #******
> ##D # Model 2: Scaling with the 2PL model
> ##D 
> ##D # scaling at T1
> ##D dat1 <- data.long[ , grep("T1" , colnames(data.long) ) ]
> ##D resT1 <- rasch.mml2( dat1 , est.a=1:6)
> ##D itempartable1 <- data.frame( "study"="T1" , resT1$item[ , c("item" , "a" , "b" ) ] )
> ##D 
> ##D # scaling at T2
> ##D dat2 <- data.long[ , grep("T2" , colnames(data.long) ) ]
> ##D resT2 <- rasch.mml2( dat2 , est.a=1:6)
> ##D summary(resT2)
> ##D itempartable2 <- data.frame( "study"="T2" , resT2$item[ , c("item" , "a" , "b" ) ] )
> ##D itempartable <- rbind( itempartable1 , itempartable2 )
> ##D itempartable[,2] <- substring( itempartable[,2] , 1, 2 )
> ##D # estimate linking parameters
> ##D mod2 <- linking.haberman( itempars= itempartable )
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 3: 2 Studies - 1PL and 2PL linking 
> ##D #############################################################################
> ##D set.seed(789)
> ##D I <- 20		# number of items
> ##D N <- 2000       # number of persons
> ##D # define item parameters
> ##D b <- seq( -1.5 , 1.5 , length=I )
> ##D # simulate data
> ##D dat1 <- sim.raschtype( rnorm( N , mean=0,sd=1 ) , b=b )
> ##D dat2 <- sim.raschtype( rnorm( N , mean=0.5,sd=1.50 ) , b=b )
> ##D 
> ##D #*** Model 1: 1PL
> ##D # 1PL Study 1
> ##D mod1 <- rasch.mml2( dat1 , est.a= rep(1,I) )
> ##D summary(mod1)
> ##D # 1PL Study 2
> ##D mod2 <- rasch.mml2( dat2 , est.a= rep(1,I) )
> ##D summary(mod2)
> ##D 
> ##D # collect item parameters
> ##D dfr1 <- data.frame( "study1" , mod1$item$item , mod1$item$a , mod1$item$b )
> ##D dfr2 <- data.frame( "study2" , mod2$item$item , mod2$item$a , mod2$item$b )
> ##D colnames(dfr2) <- colnames(dfr1) <- c("study" , "item" , "a" , "b" )
> ##D itempars <- rbind( dfr1 , dfr2 )
> ##D 
> ##D # Haberman linking
> ##D linkhab1 <- linking.haberman(itempars=itempars)
> ##D   ## Transformation parameters (Haberman linking)
> ##D   ##    study    At     Bt
> ##D   ## 1 study1 1.000  0.000
> ##D   ## 2 study2 1.465 -0.512
> ##D   ## 
> ##D   ## Linear transformation for item parameters a and b
> ##D   ##    study   A_a   A_b    B_b
> ##D   ## 1 study1 1.000 1.000  0.000
> ##D   ## 2 study2 0.682 1.465 -0.512
> ##D   ## 
> ##D   ## Linear transformation for person parameters theta
> ##D   ##    study A_theta B_theta
> ##D   ## 1 study1   1.000   0.000
> ##D   ## 2 study2   1.465   0.512
> ##D   ## 
> ##D   ## R-Squared Measures of Invariance
> ##D   ##        slopes intercepts
> ##D   ## R2          1     0.9979
> ##D   ## sqrtU2      0     0.0456
> ##D 
> ##D #*** Model 2: 2PL
> ##D # 2PL Study 1
> ##D mod1 <- rasch.mml2( dat1 , est.a= 1:I )
> ##D summary(mod1)
> ##D # 2PL Study 2
> ##D mod2 <- rasch.mml2( dat2 , est.a= 1:I )
> ##D summary(mod2)
> ##D 
> ##D # collect item parameters
> ##D dfr1 <- data.frame( "study1" , mod1$item$item , mod1$item$a , mod1$item$b )
> ##D dfr2 <- data.frame( "study2" , mod2$item$item , mod2$item$a , mod2$item$b )
> ##D colnames(dfr2) <- colnames(dfr1) <- c("study" , "item" , "a" , "b" )
> ##D itempars <- rbind( dfr1 , dfr2 )
> ##D 
> ##D # Haberman linking
> ##D linkhab2 <- linking.haberman(itempars=itempars)
> ##D   ## Transformation parameters (Haberman linking)
> ##D   ##    study    At     Bt
> ##D   ## 1 study1 1.000  0.000
> ##D   ## 2 study2 1.468 -0.515
> ##D   ## 
> ##D   ## Linear transformation for item parameters a and b
> ##D   ##    study   A_a   A_b    B_b
> ##D   ## 1 study1 1.000 1.000  0.000
> ##D   ## 2 study2 0.681 1.468 -0.515
> ##D   ## 
> ##D   ## Linear transformation for person parameters theta
> ##D   ##    study A_theta B_theta
> ##D   ## 1 study1   1.000   0.000
> ##D   ## 2 study2   1.468   0.515
> ##D   ## 
> ##D   ## R-Squared Measures of Invariance
> ##D   ##        slopes intercepts
> ##D   ## R2     0.9984     0.9980
> ##D   ## sqrtU2 0.0397     0.0443
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 4: 3 Studies - 1PL and 2PL linking 
> ##D #############################################################################
> ##D set.seed(789)
> ##D I <- 20         # number of items
> ##D N <- 1500       # number of persons
> ##D # define item parameters
> ##D b <- seq( -1.5 , 1.5 , length=I )
> ##D # simulate data
> ##D dat1 <- sim.raschtype( rnorm( N , mean=0,sd=1 ) , b=b )
> ##D dat2 <- sim.raschtype( rnorm( N , mean=0.5,sd=1.50 ) , b=b )
> ##D dat3 <- sim.raschtype( rnorm( N , mean=-.2,sd=.8 ) , b=b )
> ##D # set some items to non-administered
> ##D dat3 <- dat3[ , -c(1,4) ]
> ##D dat2 <- dat2[ , -c(1,2,3) ] 
> ##D 
> ##D #*** Model 1: 1PL in sirt
> ##D # 1PL Study 1
> ##D mod1 <- rasch.mml2( dat1 , est.a= rep(1,ncol(dat1)) )
> ##D summary(mod1)
> ##D # 1PL Study 2
> ##D mod2 <- rasch.mml2( dat2 , est.a= rep(1,ncol(dat2)) )
> ##D summary(mod2)
> ##D # 1PL Study 3
> ##D mod3 <- rasch.mml2( dat3 , est.a= rep(1,ncol(dat3)) )
> ##D summary(mod3)
> ##D 
> ##D # collect item parameters
> ##D dfr1 <- data.frame( "study1" , mod1$item$item , mod1$item$a , mod1$item$b )
> ##D dfr2 <- data.frame( "study2" , mod2$item$item , mod2$item$a , mod2$item$b )
> ##D dfr3 <- data.frame( "study3" , mod3$item$item , mod3$item$a , mod3$item$b )
> ##D colnames(dfr3) <- colnames(dfr2) <- colnames(dfr1) <- c("study" , "item" , "a" , "b" )
> ##D itempars <- rbind( dfr1 , dfr2 , dfr3 )
> ##D 
> ##D # use person parameters
> ##D personpars <- list( mod1$person[ , c("EAP","SE.EAP") ] , mod2$person[ , c("EAP","SE.EAP") ] ,
> ##D     mod3$person[ , c("EAP","SE.EAP") ] )
> ##D 
> ##D # Haberman linking
> ##D linkhab1 <- linking.haberman(itempars=itempars , personpars=personpars)
> ##D # compare item parameters
> ##D round( cbind( linkhab1$joint.itempars[,-1], linkhab1$b.trans )[1:5,] , 3 )
> ##D   ##            aj     bj study1 study2 study3
> ##D   ##   I0001 0.998 -1.427 -1.427     NA     NA
> ##D   ##   I0002 0.998 -1.290 -1.324     NA -1.256
> ##D   ##   I0003 0.998 -1.140 -1.068     NA -1.212
> ##D   ##   I0004 0.998 -0.986 -1.003 -0.969     NA
> ##D   ##   I0005 0.998 -0.869 -0.809 -0.872 -0.926
> ##D 
> ##D # summary of person parameters of second study
> ##D round( psych::describe( linkhab1$personpars[[2]] ) , 2 )
> ##D   ##   var    n mean   sd median trimmed  mad   min  max range  skew kurtosis
> ##D   ## EAP      1 1500 0.45 1.36   0.41    0.47 1.52 -2.61 3.25  5.86 -0.08    -0.62
> ##D   ## SE.EAP   2 1500 0.57 0.09   0.53    0.56 0.04  0.49 0.84  0.35  1.47     1.56
> ##D   ##          se
> ##D   ## EAP    0.04
> ##D   ## SE.EAP 0.00
> ##D 
> ##D #*** Model 2: 2PL in TAM
> ##D library(TAM)
> ##D # 2PL Study 1
> ##D mod1 <- TAM::tam.mml.2pl( resp=dat1 , irtmodel="2PL" )
> ##D pvmod1 <- TAM::tam.pv(mod1, ntheta=300 , normal.approx=TRUE) # draw plausible values
> ##D summary(mod1)
> ##D # 2PL Study 2
> ##D mod2 <- TAM::tam.mml.2pl( resp=dat2 , irtmodel="2PL" )
> ##D pvmod2 <- TAM::tam.pv(mod2, ntheta=300 , normal.approx=TRUE)
> ##D summary(mod2)
> ##D # 2PL Study 3
> ##D mod3 <- TAM::tam.mml.2pl( resp=dat3 , irtmodel="2PL" )
> ##D pvmod3 <- TAM::tam.pv(mod3, ntheta=300 , normal.approx=TRUE)
> ##D summary(mod3)
> ##D 
> ##D # collect item parameters
> ##D #!!  Note that in TAM the parametrization is a*theta - b while linking.haberman
> ##D #!!  needs the parametrization a*(theta-b)
> ##D dfr1 <- data.frame( "study1" , mod1$item$item , mod1$B[,2,1] , mod1$xsi$xsi / mod1$B[,2,1] )
> ##D dfr2 <- data.frame( "study2" , mod2$item$item , mod2$B[,2,1] , mod2$xsi$xsi / mod2$B[,2,1] )
> ##D dfr3 <- data.frame( "study3" , mod3$item$item , mod3$B[,2,1] , mod3$xsi$xsi / mod3$B[,2,1] )
> ##D colnames(dfr3) <- colnames(dfr2) <- colnames(dfr1) <- c("study" , "item" , "a" , "b" )
> ##D itempars <- rbind( dfr1 , dfr2 , dfr3 )
> ##D 
> ##D # define list containing person parameters
> ##D personpars <- list(  pvmod1$pv[,-1] , pvmod2$pv[,-1] , pvmod3$pv[,-1] )
> ##D 
> ##D # Haberman linking
> ##D linkhab2 <- linking.haberman(itempars=itempars,personpars=personpars)
> ##D   ##   Linear transformation for person parameters theta
> ##D   ##      study A_theta B_theta
> ##D   ##   1 study1   1.000   0.000
> ##D   ##   2 study2   1.485   0.465
> ##D   ##   3 study3   0.786  -0.192
> ##D 
> ##D # extract transformed person parameters
> ##D personpars.trans <- linkhab2$personpars
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("linking.haberman", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("linking.robust")
> ### * linking.robust
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: linking.robust
> ### Title: Robust Linking of Item Intercepts
> ### Aliases: linking.robust summary.linking.robust plot.linking.robust
> ### Keywords: Linking Robust linking summary plot
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Linking data.si03 
> #############################################################################
> 
> data(data.si03)
> res1 <- linking.robust( itempars=data.si03 )
> summary(res1)
Robust linking with trimmed mean

Number of items = 27
Optimal trimming parameter k = 8 |  non-robust parameter k = 0 
Linking constant = -0.0345 |  non-robust estimate = -0.056 
Standard error = 0.0186 |  non-robust estimate = 0.027 
DIF SD: MAD = 0.0771 (robust) | SD = 0.1405 (non-robust) 
>   ##   Number of items = 27
>   ##   Optimal trimming parameter k = 8 |  non-robust parameter k = 0 
>   ##   Linking constant = -0.0345 |  non-robust estimate = -0.056 
>   ##   Standard error = 0.0186 |  non-robust estimate = 0.027 
>   ##   DIF SD: MAD = 0.0771 (robust) | SD = 0.1405 (non-robust) 
> plot(res1)
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 2: Linking PISA item parameters data.pisaPars 
> ##D #############################################################################
> ##D 
> ##D data(data.pisaPars)
> ##D 
> ##D # Linking with items
> ##D res2 <- linking.robust( data.pisaPars[ , c(1,3,4)] )
> ##D summary(res2)
> ##D   ##   Optimal trimming parameter k = 0 |  non-robust parameter k = 0 
> ##D   ##   Linking constant = -0.0883 |  non-robust estimate = -0.0883 
> ##D   ##   Standard error = 0.0297 |  non-robust estimate = 0.0297   
> ##D   ##   DIF SD: MAD = 0.1824 (robust) | SD = 0.1487 (non-robust) 
> ##D ##  -> no trimming is necessary for reducing the standard error
> ##D plot(res2)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 3: Linking with simulated item parameters containing outliers 
> ##D #############################################################################
> ##D 	
> ##D # simulate some parameters
> ##D I <- 38
> ##D set.seed(18785)
> ##D itempars <- data.frame("item" = paste0("I",1:I) )
> ##D itempars$study1 <- rnorm( I , mean = .3 , sd =1.4 )
> ##D # simulate DIF effects plus some outliers
> ##D bdif <- rnorm(I,mean=.4,sd=.09)+(runif(I)>.9 )* rep( 1*c(-1,1)+.4 , each=I/2 )
> ##D itempars$study2 <- itempars$study1 + bdif
> ##D 
> ##D # robust linking
> ##D res <- linking.robust( itempars )
> ##D summary(res)
> ##D   ##   Number of items = 38
> ##D   ##   Optimal trimming parameter k = 12 |  non-robust parameter k = 0 
> ##D   ##   Linking constant = -0.4285 |  non-robust estimate = -0.5727 
> ##D   ##   Standard error = 0.0218 |  non-robust estimate = 0.0913 
> ##D   ##   DIF SD: MAD = 0.1186 (robust) | SD = 0.5628 (non-robust)
> ##D ## -> substantial differences of estimated linking constants in this case of 
> ##D ##    deviations from normality of item parameters
> ##D plot(res)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("linking.robust", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lsdm")
> ### * lsdm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lsdm
> ### Title: Least Squares Distance Method of Cognitive Validation
> ### Aliases: lsdm summary.lsdm
> ### Keywords: Least Squares Distance Method (LSDM) summary
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: DATA FISCHER (see Dimitrov, 2007)
> #############################################################################
> 
> # item difficulties
> b <- c( 0.171,-1.626,-0.729,0.137,0.037,-0.787,-1.322,-0.216,1.802,
+     0.476,1.19,-0.768,0.275,-0.846,0.213,0.306,0.796,0.089,
+     0.398,-0.887,0.888,0.953,-1.496,0.905,-0.332,-0.435,0.346,
+     -0.182,0.906)
> # read Q-matrix
> Qmatrix <- c( 1,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,
+     1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,1,0,0,0,
+     1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1,1,0,0,0,
+     1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1,0,1,1,0,
+     1,0,1,1,0,0,1,0,1,0,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,1,
+     0,1,0,0,0,1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,
+     1,0,0,1,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,0,0,1,0,1,1,0,1,0,0,
+     1,1,0,1,0,0,0,0,1,0,1,1,1,1,0,0 )
> Qmatrix <- matrix( Qmatrix , nrow=29, byrow=TRUE )
> colnames(Qmatrix) <- paste("A",1:8,sep="")
> rownames(Qmatrix) <- paste("Item",1:29,sep="")
> 
> # Perform a LSDM analysis
> lsdm.res <- lsdm( b = b, Qmatrix = Qmatrix )
................................................................................ 
LSDM -- Least Squares Distance Method of Cognitive Validation 
Reference: Dimitrov, D. (2007) Applied Psychological Measurement, 31, 367-387.
................................................................................ 

Qmatrix

       A1 A2 A3 A4 A5 A6 A7 A8
Item1   1  1  0  1  0  0  0  0
Item2   1  0  1  0  0  0  0  0
Item3   1  0  0  1  0  0  0  0
Item4   1  0  1  1  0  0  0  0
Item5   1  0  0  1  0  0  0  0
Item6   0  1  0  0  1  1  0  0
Item7   1  0  1  0  1  0  0  0
Item8   1  0  1  0  1  1  0  0
Item9   1  0  1  1  0  1  0  0
Item10  1  0  0  1  0  1  0  0
Item11  1  0  1  1  1  0  0  0
Item12  1  0  0  1  0  0  1  0
Item13  1  0  0  1  0  0  1  0
Item14  1  0  1  0  0  0  1  0
Item15  1  1  0  1  0  1  1  0
Item16  1  0  1  1  0  0  1  0
Item17  1  0  0  1  0  0  0  1
Item18  1  0  1  1  0  0  0  1
Item19  1  0  0  1  0  0  0  1
Item20  0  1  0  0  0  1  0  1
Item21  1  1  0  1  0  1  0  1
Item22  1  0  0  1  0  1  0  0
Item23  1  1  0  0  1  0  0  0
Item24  1  0  0  1  1  0  0  0
Item25  1  1  0  1  0  0  0  0
Item26  1  0  1  1  0  0  0  0
Item27  1  0  1  1  0  1  0  0
Item28  1  1  0  1  0  0  0  0
Item29  1  0  1  1  1  1  0  0

Estimation of Item Parameters 
................................................................................ 
Estimation of Attribute Parameters 
................................................................................ 
Model Fit LSDM   -  Mean MAD:  0.071     Median MAD:   0.07 
Model Fit LLTM   -  Mean MAD:  0.079     Median MAD:  0.063    R^2= 0.615 
> summary(lsdm.res)
................................................................................ 
LSDM -- Least Squares Distance Method of Cognitive Validation 
Reference: Dimitrov, D. (2007) Applied Psychological Measurement, 31, 367-387.
................................................................................ 

Model Fit

Model Fit LSDM   -  Mean MAD:  0.071     Median MAD:   0.07 
Model Fit LLTM   -  Mean MAD:  0.079     Median MAD:  0.063    R^2= 0.615 
................................................................................ 

Attribute Parameters

   N.Items  b.2PL a.2PL  b.1PL eta.LLTM se.LLTM pval.LLTM
A1      27 -2.101 1.615 -2.664   -1.168   0.404     0.009
A2       8 -3.736 3.335 -5.491   -0.645   0.284     0.034
A3      12 -5.491 0.360 -2.685   -0.013   0.284     0.963
A4      22 -0.081 0.744 -0.059    1.495   0.350     0.000
A5       7 -2.306 0.580 -1.622    0.243   0.301     0.428
A6      10 -1.946 0.542 -1.306    0.447   0.243     0.080
A7       5 -4.247 1.283 -4.799   -0.147   0.316     0.646
A8       5 -2.670 0.663 -2.065    0.077   0.310     0.806
................................................................................ 

Item Parameters

       mad.lsdm mad.lltm  b.2PL a.2PL  b.1PL
Item1     0.030    0.100  0.171     1  0.171
Item2     0.024    0.068 -1.626     1 -1.626
Item3     0.150    0.212 -0.729     1 -0.729
Item4     0.031    0.036  0.137     1  0.137
Item5     0.013    0.059  0.037     1  0.037
Item6     0.085    0.166 -0.787     1 -0.787
Item7     0.100    0.065 -1.322     1 -1.322
Item8     0.051    0.055 -0.216     1 -0.216
Item9     0.162    0.166  1.802     1  1.802
Item10    0.020    0.058  0.476     1  0.476
Item11    0.093    0.115  1.190     1  1.190
Item12    0.159    0.190 -0.768     1 -0.768
Item13    0.050    0.019  0.275     1  0.275
Item14    0.145    0.083 -0.846     1 -0.846
Item15    0.074    0.047  0.213     1  0.213
Item16    0.010    0.028  0.306     1  0.306
Item17    0.092    0.076  0.796     1  0.796
Item18    0.093    0.061  0.089     1  0.089
Item19    0.014    0.001  0.398     1  0.398
Item20    0.063    0.150 -0.887     1 -0.887
Item21    0.016    0.133  0.888     1  0.888
Item22    0.070    0.033  0.953     1  0.953
Item23    0.042    0.011 -1.496     1 -1.496
Item24    0.085    0.063  0.905     1  0.905
Item25    0.072    0.003 -0.332     1 -0.332
Item26    0.146    0.152 -0.435     1 -0.435
Item27    0.085    0.081  0.346     1  0.346
Item28    0.042    0.028 -0.182     1 -0.182
Item29    0.034    0.018  0.906     1  0.906
................................................................................ 

Discrimination Parameters

           A1     A2     A3     A4     A5     A6     A7     A8
Item1   1.310 -0.034     NA  1.102     NA     NA     NA     NA
Item2   1.093     NA  1.185     NA     NA     NA     NA     NA
Item3   1.322     NA     NA  0.545     NA     NA     NA     NA
Item4   1.289     NA -0.510  1.175     NA     NA     NA     NA
Item5   1.336     NA     NA  1.003     NA     NA     NA     NA
Item6      NA  3.537     NA     NA  6.429 -3.645     NA     NA
Item7   1.048     NA  0.390     NA  0.695     NA     NA     NA
Item8   0.776     NA -0.795     NA  3.516 -0.508     NA     NA
Item9  -0.748     NA  4.409 -1.874     NA  8.621     NA     NA
Item10  1.217     NA     NA  1.395     NA -0.104     NA     NA
Item11  1.811     NA  5.109  2.617 -4.582     NA     NA     NA
Item12  1.339     NA     NA  0.525     NA     NA -0.153     NA
Item13  1.327     NA     NA  1.180     NA     NA -0.297     NA
Item14  1.808     NA  2.391     NA     NA     NA -2.321     NA
Item15  1.355  0.058     NA  1.542     NA -0.928  0.339     NA
Item16  1.276     NA -0.140  1.234     NA     NA -0.092     NA
Item17  1.825     NA     NA  2.246     NA     NA     NA -2.685
Item18  0.647     NA  0.166  0.481     NA     NA     NA  2.339
Item19  1.006     NA     NA  1.109     NA     NA     NA  0.777
Item20     NA  1.532     NA     NA     NA -1.017     NA  4.178
Item21  0.413  0.851     NA  0.703     NA  1.981     NA  0.781
Item22  0.640     NA     NA  0.818     NA  2.247     NA     NA
Item23  0.868  0.851     NA     NA  0.795     NA     NA     NA
Item24  0.859     NA     NA  1.538  0.609     NA     NA     NA
Item25  1.372 -0.080     NA  0.758     NA     NA     NA     NA
Item26  1.329     NA -0.613  0.818     NA     NA     NA     NA
Item27  1.358     NA  0.367  1.452     NA -0.651     NA     NA
Item28  1.373 -0.121     NA  0.851     NA     NA     NA     NA
Item29  0.788     NA  1.251  0.772  0.302  1.448     NA     NA
>   ## Model Fit
>   ## Model Fit LSDM   -  Mean MAD:  0.071     Median MAD:   0.07 
>   ## Model Fit LLTM   -  Mean MAD:  0.079     Median MAD:  0.063    R^2= 0.615 
>   ## ................................................................................ 
>   ## Attribute Parameters
>   ##    N.Items  b.2PL a.2PL  b.1PL eta.LLTM se.LLTM pval.LLTM
>   ## A1      27 -2.101 1.615 -2.664   -1.168   0.404     0.009
>   ## A2       8 -3.736 3.335 -5.491   -0.645   0.284     0.034
>   ## A3      12 -5.491 0.360 -2.685   -0.013   0.284     0.963
>   ## A4      22 -0.081 0.744 -0.059    1.495   0.350     0.000
>   ## A5       7 -2.306 0.580 -1.622    0.243   0.301     0.428
>   ## A6      10 -1.946 0.542 -1.306    0.447   0.243     0.080
>   ## A7       5 -4.247 1.283 -4.799   -0.147   0.316     0.646
>   ## A8       5 -2.670 0.663 -2.065    0.077   0.310     0.806
>   ## [...]
> 
> #############################################################################
> # EXAMPLE 2 DATA HENNING (see Dimitrov, 2007)
> #############################################################################
> 
> # item difficulties
> b <- c(-2.03,-1.29,-1.03,-1.58,0.59,-1.65,2.22,-1.46,2.58,-0.66)
> # item slopes
> a <- c(0.6,0.81,0.75,0.81,0.62,0.75,0.54,0.65,0.75,0.54)
> # define Q-matrix
> Qmatrix <- c(1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,
+     0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,1,0,0 )
> Qmatrix <- matrix( Qmatrix , nrow=10, byrow=TRUE )
> colnames(Qmatrix) <- paste("A",1:5,sep="")
> rownames(Qmatrix) <- paste("Item",1:10,sep="")
> 
> # LSDM analysis
> lsdm.res <- lsdm( b = b, a=a , Qmatrix = Qmatrix )
................................................................................ 
LSDM -- Least Squares Distance Method of Cognitive Validation 
Reference: Dimitrov, D. (2007) Applied Psychological Measurement, 31, 367-387.
................................................................................ 

Qmatrix

       A1 A2 A3 A4 A5
Item1   1  0  0  0  0
Item2   0  1  0  0  0
Item3   0  1  0  1  0
Item4   0  1  0  0  0
Item5   0  1  1  0  0
Item6   0  0  0  1  0
Item7   0  1  0  0  1
Item8   0  0  0  1  0
Item9   0  0  0  1  1
Item10  1  0  1  0  0

Estimation of Item Parameters 
................................................................................ 
Estimation of Attribute Parameters 
................................................................................ 
Model Fit LSDM   -  Mean MAD:  0.061     Median MAD:   0.06 
Model Fit LLTM   -  Mean MAD:  0.069     Median MAD:  0.069    R^2= 0.902 
> summary(lsdm.res)
................................................................................ 
LSDM -- Least Squares Distance Method of Cognitive Validation 
Reference: Dimitrov, D. (2007) Applied Psychological Measurement, 31, 367-387.
................................................................................ 

Model Fit

Model Fit LSDM   -  Mean MAD:  0.061     Median MAD:   0.06 
Model Fit LLTM   -  Mean MAD:  0.069     Median MAD:  0.069    R^2= 0.902 
................................................................................ 

Attribute Parameters

   N.Items  b.2PL a.2PL  b.1PL eta.LLTM se.LLTM pval.LLTM
A1       2 -2.727 0.786 -2.367   -1.592   0.478     0.021
A2       5 -2.099 0.794 -1.834   -0.934   0.295     0.025
A3       2 -0.763 0.401 -0.397    1.260   0.507     0.056
A4       4 -1.459 0.638 -1.108   -0.738   0.309     0.062
A5       2  2.410 0.509  1.564    2.673   0.451     0.002
................................................................................ 

Item Parameters

       mad.lsdm mad.lltm  b.2PL a.2PL  b.1PL
Item1     0.117    0.054 -2.030  0.60 -1.477
Item2     0.100    0.035 -1.290  0.81 -1.144
Item3     0.079    0.136 -1.030  0.75 -0.871
Item4     0.060    0.071 -1.580  0.81 -1.400
Item5     0.061    0.059  0.590  0.62  0.441
Item6     0.050    0.103 -1.649  0.75 -1.394
Item7     0.041    0.070  2.220  0.54  1.498
Item8     0.004    0.067 -1.460  0.65 -1.124
Item9     0.030    0.025  2.580  0.75  2.176
Item10    0.074    0.072 -0.660  0.54 -0.447
................................................................................ 

Discrimination Parameters

          A1    A2   A3    A4    A5
Item1  1.723    NA   NA    NA    NA
Item2     NA 1.615   NA    NA    NA
Item3     NA 0.650   NA 0.798    NA
Item4     NA 1.367   NA    NA    NA
Item5     NA 1.001 1.26    NA    NA
Item6     NA    NA   NA 0.866    NA
Item7     NA 0.697   NA    NA 0.891
Item8     NA    NA   NA 0.997    NA
Item9     NA    NA   NA 1.312 1.074
Item10 1.000    NA 0.74    NA    NA
>   ## Model Fit LSDM   -  Mean MAD:  0.061     Median MAD:   0.06 
>   ## Model Fit LLTM   -  Mean MAD:  0.069     Median MAD:  0.069    R^2= 0.902 
>   ## ................................................................................ 
>   ## Attribute Parameters
>   ##    N.Items  b.2PL a.2PL  b.1PL eta.LLTM se.LLTM pval.LLTM
>   ## A1       2 -2.727 0.786 -2.367   -1.592   0.478     0.021
>   ## A2       5 -2.099 0.794 -1.834   -0.934   0.295     0.025
>   ## A3       2 -0.763 0.401 -0.397    1.260   0.507     0.056
>   ## A4       4 -1.459 0.638 -1.108   -0.738   0.309     0.062
>   ## A5       2  2.410 0.509  1.564    2.673   0.451     0.002
>   ## [...]
>   ##
>   ##  Discrimination Parameters
>   ##  
>   ##            A1    A2   A3    A4    A5
>   ##  Item1  1.723    NA   NA    NA    NA
>   ##  Item2     NA 1.615   NA    NA    NA
>   ##  Item3     NA 0.650   NA 0.798    NA
>   ##  Item4     NA 1.367   NA    NA    NA
>   ##  Item5     NA 1.001 1.26    NA    NA
>   ##  Item6     NA    NA   NA 0.866    NA
>   ##  Item7     NA 0.697   NA    NA 0.891
>   ##  Item8     NA    NA   NA 0.997    NA
>   ##  Item9     NA    NA   NA 1.312 1.074
>   ##  Item10 1.000    NA 0.74    NA    NA
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 3: PISA reading (data.pisaRead)
> ##D #    using nonparametrically estimated item response functions
> ##D #############################################################################
> ##D 
> ##D data(data.pisaRead)
> ##D # response data
> ##D dat <- data.pisaRead$data
> ##D dat <- dat[ , substring( colnames(dat),1,1)=="R" ]
> ##D # define Q-matrix
> ##D pars <- data.pisaRead$item
> ##D Qmatrix <- data.frame(  "A0" = 1*(pars$ItemFormat=="MC" ) , 
> ##D                   "A1" = 1*(pars$ItemFormat=="CR" ) )
> ##D 
> ##D # start with estimating the 1PL in order to get person parameters
> ##D mod <- rasch.mml2( dat )
> ##D theta <- wle.rasch( dat=dat ,b = mod$item$b )$theta
> ##D # Nonparametric estimation of item response functions
> ##D mod2 <- np.dich( dat=dat , theta=theta , thetagrid = seq(-3,3,len=100) )
> ##D 
> ##D # LSDM analysis
> ##D lsdm.res <- lsdm( data=mod2$estimate , Qmatrix=Qmatrix , theta=mod2$thetagrid)
> ##D summary(lsdm.res)
> ##D   ## Model Fit
> ##D   ## Model Fit LSDM   -  Mean MAD:  0.215     Median MAD:  0.151 
> ##D   ## Model Fit LLTM   -  Mean MAD:  0.193     Median MAD:  0.119    R^2= 0.285 
> ##D   ## ................................................................................ 
> ##D   ## Attribute Parameter
> ##D   ##    N.Items  b.2PL a.2PL  b.1PL eta.LLTM se.LLTM pval.LLTM
> ##D   ## A0       5  1.326 0.705  1.289   -0.455   0.965     0.648
> ##D   ## A1       7 -1.271 1.073 -1.281   -1.585   0.816     0.081
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 4: Fraction subtraction dataset
> ##D #############################################################################
> ##D 
> ##D data( data.fraction1 , package="CDM")
> ##D data <- data.fraction1$data
> ##D q.matrix <- data.fraction1$q.matrix
> ##D 
> ##D #****
> ##D # Model 1: 2PL estimation 
> ##D mod1 <- rasch.mml2( data , est.a=1:nrow(q.matrix) )
> ##D 
> ##D # LSDM analysis
> ##D lsdm.res1 <- lsdm( b=mod1$item$b , a=mod1$item$a , Qmatrix=q.matrix )
> ##D summary(lsdm.res1)
> ##D   ##   
> ##D   ##   Model Fit LSDM   -  Mean MAD:  0.076     Median MAD:  0.055 
> ##D   ##   Model Fit LLTM   -  Mean MAD:  0.153     Median MAD:  0.155    R^2= 0.801 
> ##D   ##   ................................................................................ 
> ##D   ##   Attribute Parameter  
> ##D   ##       N.Items   b.2PL a.2PL  b.1PL eta.LLTM se.LLTM pval.LLTM
> ##D   ##   QT1      14  -0.741 2.991 -1.115   -0.815   0.217     0.004
> ##D   ##   QT2       8 -80.387 0.031 -4.806   -0.025   0.262     0.925
> ##D   ##   QT3      12  -2.461 0.711 -2.006   -0.362   0.268     0.207
> ##D   ##   QT4       9  -0.019 3.873 -0.100    1.465   0.345     0.002
> ##D   ##   QT5       3  -3.062 0.375 -1.481    0.254   0.280     0.387
> ##D 
> ##D #****
> ##D # Model 2: 1PL estimation  
> ##D mod2 <- rasch.mml2( data  )
> ##D 
> ##D # LSDM analysis
> ##D lsdm.res2 <- lsdm( b=mod1$item$b , Qmatrix=q.matrix )
> ##D summary(lsdm.res2)
> ##D   ##   
> ##D   ##   Model Fit LSDM   -  Mean MAD:  0.046     Median MAD:   0.03 
> ##D   ##   Model Fit LLTM   -  Mean MAD:  0.041     Median MAD:  0.042    R^2= 0.772
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 5: Dataset LLTM Sonnleitner Reading Comprehension (Sonnleitner, 2008)
> ##D #############################################################################
> ##D 
> ##D # item difficulties Table 7, p. 355 (Sonnleitner, 2008)
> ##D b <- c(-1.0189,1.6754,-1.0842,-.4457,-1.9419,-1.1513,2.0871,2.4874,-1.659,-1.197,-1.2437,
> ##D     2.1537,.3301,-.5181,-1.3024,-.8248,-.0278,1.3279,2.1454,-1.55,1.4277,.3301)
> ##D b <- b[-21] # remove Item 21
> ##D 
> ##D # Q-matrix Table 9 , p. 357 (Sonnleitner, 2008)
> ##D Qmatrix <- scan()    
> ##D    1 0 0 0 0 0 0 7 4 0 0 0   0 1 0 0 0 0 0 5 1 0 0 0   1 1 0 1 0 0 0 9 1 0 1 0   
> ##D    1 1 1 0 0 0 0 5 2 0 1 0   1 1 0 0 1 0 0 7 5 1 1 0   1 1 0 0 0 0 0 7 3 0 0 0   
> ##D    0 1 0 0 0 0 2 6 1 0 0 0   0 0 0 0 0 0 2 6 1 0 0 0   1 0 0 0 0 0 1 7 4 1 0 0   
> ##D    0 1 0 0 0 0 0 6 2 1 1 0   0 1 0 0 0 1 0 7 3 1 0 0   0 1 0 0 0 0 0 5 1 0 0 0   
> ##D    0 0 0 0 0 1 0 4 1 0 0 1   0 0 0 0 0 0 0 6 1 0 1 1   0 0 1 0 0 0 0 6 3 0 1 1   
> ##D    0 0 0 1 0 0 1 7 5 0 0 1   0 1 0 0 0 0 1 2 2 0 0 1   0 1 1 0 0 0 1 4 1 0 0 1   
> ##D    0 1 0 0 1 0 0 5 1 0 0 1   0 1 0 0 0 0 1 7 2 0 0 1   0 0 0 0 0 1 0 5 1 0 0 1
> ##D   
> ##D Qmatrix <- matrix( as.numeric(Qmatrix) , nrow=21 , ncol=12 , byrow=TRUE ) 
> ##D colnames(Qmatrix) <- scan( what="character" , nlines=1)
> ##D    pc ic ier inc iui igc ch nro ncro td a t
> ##D 
> ##D # divide Q-matrix entries by maximum in each column
> ##D Qmatrix <- round(Qmatrix / matrix(apply(Qmatrix,2,max),21,12,byrow=TRUE) ,3)
> ##D # LSDM analysis   
> ##D res <- lsdm( b=b , Qmatrix=Qmatrix )
> ##D summary(res)
> ##D   ##   
> ##D   ##   Model Fit LSDM   -  Mean MAD:  0.217     Median MAD:  0.178 
> ##D   ##   Model Fit LLTM   -  Mean MAD:  0.087     Median MAD:  0.062    R^2= 0.785 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lsdm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lsem.estimate")
> ### * lsem.estimate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lsem.estimate
> ### Title: Local Structural Equation Models (LSEM)
> ### Aliases: lsem.estimate summary.lsem plot.lsem lsem.MGM.stepfunctions
> ### Keywords: LSEM
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: data.lsem01 | Age differentiation
> ##D #############################################################################	
> ##D 	
> ##D data(data.lsem01)
> ##D dat <- data.lsem01
> ##D 
> ##D # specify lavaan model
> ##D lavmodel <- "
> ##D         F =~ v1+v2+v3+v4+v5
> ##D         F ~~ 1*F"
> ##D         
> ##D # define grid of moderator variable age
> ##D moderator.grid <- seq(4,23,1)
> ##D 
> ##D #********************************
> ##D #*** Model 1: estimate LSEM with bandwidth 2
> ##D mod1 <- lsem.estimate( dat , moderator="age" , moderator.grid=moderator.grid , 
> ##D                lavmodel=lavmodel , h=2 , std.lv=TRUE)
> ##D summary(mod1)
> ##D plot(mod1 , parindex=1:5)
> ##D 
> ##D # perform permutation test for Model 1
> ##D pmod1 <- lsem.permutationTest( mod1 , B=10 )    
> ##D           # only for illustrative purposes the number of permutations B is set 
> ##D           # to a low number of 10
> ##D summary(pmod1)
> ##D plot(pmod1, type="global")
> ##D 
> ##D #********************************
> ##D #*** Model 2: estimate multiple group model with 4 age groups
> ##D 
> ##D # define breaks for age groups
> ##D moderator.grid <- seq( 3.5 , 23.5 , len=5) # 4 groups 
> ##D # estimate model
> ##D mod2 <- lsem.estimate( dat , moderator="age" , moderator.grid=moderator.grid , 
> ##D            lavmodel=lavmodel , type="MGM" , std.lv=TRUE)
> ##D summary(mod2)
> ##D 
> ##D # output step functions
> ##D smod2 <- lsem.MGM.stepfunctions( lsem.object=mod2 , moderator.grid=seq(4,23,1) )
> ##D str(smod2)
> ## End(Not run)	
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lsem.estimate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("marginal.truescore.reliability")
> ### * marginal.truescore.reliability
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: marginal.truescore.reliability
> ### Title: True-Score Reliability for Dichotomous Data
> ### Aliases: marginal.truescore.reliability
> ### Keywords: Reliability
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dimitrov (2003) Table 1 - 2PL model
> #############################################################################
> 
> # item discriminations
> a <- 1.7*c(0.449,0.402,0.232,0.240,0.610,0.551,0.371,0.321,0.403,0.434,0.459,
+     0.410,0.302,0.343,0.225,0.215,0.487,0.608,0.341,0.465)
> # item difficulties
> b <- c( -2.554,-2.161,-1.551,-1.226,-0.127,-0.855,-0.568,-0.277,-0.017,
+     0.294,0.532,0.773,1.004,1.250,1.562,1.385,2.312,2.650,2.712,3.000 )
> 
> marginal.truescore.reliability( b=b , a =a )
Reliability= 0.606 
>   ##   Reliability= 0.606 
> 
> #############################################################################
> # EXAMPLE 2: Dimitrov (2003) Table 2
> #  3PL model: Poetry items (4 items)
> #############################################################################
> 
> # slopes, difficulties and guessing parameters
> a <- 1.7*c(1.169,0.724,0.554,0.706 )
> b <- c(0.468,-1.541,-0.042,0.698 )
> c <- c(0.159,0.211,0.197,0.177 )
> 
> res <- marginal.truescore.reliability( b=b , a =a , c=c)
Reliability= 0.403 
>   ##   Reliability= 0.403 
>   ##   > round( res$item , 3 )
>   ##     item    pi sig2.tau sig2.error rel.item
>   ##   1    1 0.463    0.063      0.186    0.252
>   ##   2    2 0.855    0.017      0.107    0.135
>   ##   3    3 0.605    0.026      0.213    0.107
>   ##   4    4 0.459    0.032      0.216    0.130
> 
> #############################################################################
> # EXAMPLE 3: Reading Data
> #############################################################################
> data( data.read)
> 
> #***
> # Model 1: 1PL
> mod <- rasch.mml2( data.read )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:09 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:24:09 
   Deviance = 3942.478 | Deviance change = 13.465952
    Maximum b parameter change =  0.054894  
...........................................................
Iteration 3     2015-06-13 13:24:09 
   Deviance = 3940.2892 | Deviance change = 2.188817
    Maximum b parameter change =  0.042995  
...........................................................
Iteration 4     2015-06-13 13:24:09 
   Deviance = 3939.4559 | Deviance change = 0.833271
    Maximum b parameter change =  0.022889  
...........................................................
Iteration 5     2015-06-13 13:24:09 
   Deviance = 3939.0706 | Deviance change = 0.38535
    Maximum b parameter change =  0.015712  
...........................................................
Iteration 6     2015-06-13 13:24:09 
   Deviance = 3938.8854 | Deviance change = 0.185235
    Maximum b parameter change =  0.010687  
...........................................................
Iteration 7     2015-06-13 13:24:09 
   Deviance = 3938.7952 | Deviance change = 0.090117
    Maximum b parameter change =  0.007515  
...........................................................
Iteration 8     2015-06-13 13:24:09 
   Deviance = 3938.7511 | Deviance change = 0.044171
    Maximum b parameter change =  0.005289  
...........................................................
Iteration 9     2015-06-13 13:24:09 
   Deviance = 3938.7293 | Deviance change = 0.021762
    Maximum b parameter change =  0.003736  
...........................................................
Iteration 10     2015-06-13 13:24:09 
   Deviance = 3938.7186 | Deviance change = 0.010757
    Maximum b parameter change =  0.00264  
...........................................................
Iteration 11     2015-06-13 13:24:09 
   Deviance = 3938.7132 | Deviance change = 0.005327
    Maximum b parameter change =  0.001867  
...........................................................
Iteration 12     2015-06-13 13:24:09 
   Deviance = 3938.7106 | Deviance change = 0.002639
    Maximum b parameter change =  0.001321  
...........................................................
Iteration 13     2015-06-13 13:24:09 
   Deviance = 3938.7093 | Deviance change = 0.001306
    Maximum b parameter change =  0.000934  
...........................................................
Iteration 14     2015-06-13 13:24:09 
   Deviance = 3938.7086 | Deviance change = 0.000645
    Maximum b parameter change =  0.000661  
...........................................................
Iteration 15     2015-06-13 13:24:09 
   Deviance = 3938.7083 | Deviance change = 0.000317
    Maximum b parameter change =  0.000468  
...........................................................
Iteration 16     2015-06-13 13:24:09 
   Deviance = 3938.7082 | Deviance change = 0.000155
    Maximum b parameter change =  0.000331  
...........................................................
Iteration 17     2015-06-13 13:24:09 
   Deviance = 3938.7081 | Deviance change = 7.5e-05
    Maximum b parameter change =  0.000234  
...........................................................
Iteration 18     2015-06-13 13:24:09 
   Deviance = 3938.7081 | Deviance change = 3.5e-05
    Maximum b parameter change =  0.000166  
...........................................................
Iteration 19     2015-06-13 13:24:09 
   Deviance = 3938.708 | Deviance change = 1.6e-05
    Maximum b parameter change =  0.000117  
...........................................................
Iteration 20     2015-06-13 13:24:09 
   Deviance = 3938.708 | Deviance change = 7e-06
    Maximum b parameter change =  8.3e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:09 
End: 2015-06-13 13:24:09 
Time difference of 0.1270568 secs
Difference: 0.1270568 
------------------------------------------------------------
> marginal.truescore.reliability( b=mod$item$b )
Reliability= 0.653 
>   ##   Reliability= 0.653 
> 
> #***
> # Model 2: 2PL
> mod <- rasch.mml2( data.read , est.a=1:12 )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:09 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
    Maximum a parameter change = 0.179056
...........................................................
Iteration 2     2015-06-13 13:24:09 
   Deviance = 3932.6605 | Deviance change = 23.283488
    Maximum b parameter change =  0.164255  
    Maximum a parameter change = 0.100263
...........................................................
Iteration 3     2015-06-13 13:24:09 
   Deviance = 3925.6262 | Deviance change = 7.034286
    Maximum b parameter change =  0.124259  
    Maximum a parameter change = 0.082788
...........................................................
Iteration 4     2015-06-13 13:24:09 
   Deviance = 3921.946 | Deviance change = 3.680179
    Maximum b parameter change =  0.105658  
    Maximum a parameter change = 0.08511
...........................................................
Iteration 5     2015-06-13 13:24:09 
   Deviance = 3919.6984 | Deviance change = 2.24764
    Maximum b parameter change =  0.102686  
    Maximum a parameter change = 0.089018
...........................................................
Iteration 6     2015-06-13 13:24:09 
   Deviance = 3918.092 | Deviance change = 1.606391
    Maximum b parameter change =  0.096286  
    Maximum a parameter change = 0.092056
...........................................................
Iteration 7     2015-06-13 13:24:09 
   Deviance = 3916.8161 | Deviance change = 1.275871
    Maximum b parameter change =  0.088139  
    Maximum a parameter change = 0.094078
...........................................................
Iteration 8     2015-06-13 13:24:09 
   Deviance = 3915.7459 | Deviance change = 1.070213
    Maximum b parameter change =  0.079338  
    Maximum a parameter change = 0.094998
...........................................................
Iteration 9     2015-06-13 13:24:09 
   Deviance = 3914.8286 | Deviance change = 0.917339
    Maximum b parameter change =  0.070572  
    Maximum a parameter change = 0.094796
...........................................................
Iteration 10     2015-06-13 13:24:09 
   Deviance = 3914.0385 | Deviance change = 0.790111
    Maximum b parameter change =  0.062256  
    Maximum a parameter change = 0.093529
...........................................................
Iteration 11     2015-06-13 13:24:09 
   Deviance = 3913.3596 | Deviance change = 0.678899
    Maximum b parameter change =  0.054618  
    Maximum a parameter change = 0.091315
...........................................................
Iteration 12     2015-06-13 13:24:09 
   Deviance = 3912.7791 | Deviance change = 0.580504
    Maximum b parameter change =  0.04776  
    Maximum a parameter change = 0.088316
...........................................................
Iteration 13     2015-06-13 13:24:09 
   Deviance = 3912.2853 | Deviance change = 0.493774
    Maximum b parameter change =  0.041702  
    Maximum a parameter change = 0.084718
...........................................................
Iteration 14     2015-06-13 13:24:09 
   Deviance = 3911.8673 | Deviance change = 0.417991
    Maximum b parameter change =  0.036413  
    Maximum a parameter change = 0.080696
...........................................................
Iteration 15     2015-06-13 13:24:09 
   Deviance = 3911.5149 | Deviance change = 0.352373
    Maximum b parameter change =  0.031828  
    Maximum a parameter change = 0.076415
...........................................................
Iteration 16     2015-06-13 13:24:09 
   Deviance = 3911.2189 | Deviance change = 0.295993
    Maximum b parameter change =  0.027871  
    Maximum a parameter change = 0.072011
...........................................................
Iteration 17     2015-06-13 13:24:09 
   Deviance = 3910.9711 | Deviance change = 0.247863
    Maximum b parameter change =  0.024464  
    Maximum a parameter change = 0.067585
...........................................................
Iteration 18     2015-06-13 13:24:09 
   Deviance = 3910.7641 | Deviance change = 0.206986
    Maximum b parameter change =  0.021528  
    Maximum a parameter change = 0.063218
...........................................................
Iteration 19     2015-06-13 13:24:09 
   Deviance = 3910.5917 | Deviance change = 0.172412
    Maximum b parameter change =  0.018995  
    Maximum a parameter change = 0.058964
...........................................................
Iteration 20     2015-06-13 13:24:09 
   Deviance = 3910.4484 | Deviance change = 0.143281
    Maximum b parameter change =  0.016802  
    Maximum a parameter change = 0.054857
...........................................................
Iteration 21     2015-06-13 13:24:09 
   Deviance = 3910.3296 | Deviance change = 0.118815
    Maximum b parameter change =  0.014897  
    Maximum a parameter change = 0.050923
...........................................................
Iteration 22     2015-06-13 13:24:09 
   Deviance = 3910.2312 | Deviance change = 0.098331
    Maximum b parameter change =  0.013237  
    Maximum a parameter change = 0.047174
...........................................................
Iteration 23     2015-06-13 13:24:09 
   Deviance = 3910.15 | Deviance change = 0.08123
    Maximum b parameter change =  0.011784  
    Maximum a parameter change = 0.04362
...........................................................
Iteration 24     2015-06-13 13:24:09 
   Deviance = 3910.083 | Deviance change = 0.066993
    Maximum b parameter change =  0.010508  
    Maximum a parameter change = 0.040262
...........................................................
Iteration 25     2015-06-13 13:24:09 
   Deviance = 3910.0279 | Deviance change = 0.055168
    Maximum b parameter change =  0.009384  
    Maximum a parameter change = 0.0371
...........................................................
Iteration 26     2015-06-13 13:24:09 
   Deviance = 3909.9825 | Deviance change = 0.04537
    Maximum b parameter change =  0.00839  
    Maximum a parameter change = 0.034131
...........................................................
Iteration 27     2015-06-13 13:24:09 
   Deviance = 3909.9452 | Deviance change = 0.037268
    Maximum b parameter change =  0.007509  
    Maximum a parameter change = 0.031357
...........................................................
Iteration 28     2015-06-13 13:24:09 
   Deviance = 3909.9146 | Deviance change = 0.030582
    Maximum b parameter change =  0.006727  
    Maximum a parameter change = 0.028767
...........................................................
Iteration 29     2015-06-13 13:24:09 
   Deviance = 3909.8896 | Deviance change = 0.025074
    Maximum b parameter change =  0.006031  
    Maximum a parameter change = 0.026354
...........................................................
Iteration 30     2015-06-13 13:24:09 
   Deviance = 3909.869 | Deviance change = 0.020541
    Maximum b parameter change =  0.00541  
    Maximum a parameter change = 0.024115
...........................................................
Iteration 31     2015-06-13 13:24:09 
   Deviance = 3909.8522 | Deviance change = 0.016818
    Maximum b parameter change =  0.004856  
    Maximum a parameter change = 0.022041
...........................................................
Iteration 32     2015-06-13 13:24:09 
   Deviance = 3909.8384 | Deviance change = 0.013761
    Maximum b parameter change =  0.00436  
    Maximum a parameter change = 0.020123
...........................................................
Iteration 33     2015-06-13 13:24:09 
   Deviance = 3909.8272 | Deviance change = 0.011256
    Maximum b parameter change =  0.003917  
    Maximum a parameter change = 0.018354
...........................................................
Iteration 34     2015-06-13 13:24:09 
   Deviance = 3909.818 | Deviance change = 0.009203
    Maximum b parameter change =  0.00352  
    Maximum a parameter change = 0.016724
...........................................................
Iteration 35     2015-06-13 13:24:09 
   Deviance = 3909.8105 | Deviance change = 0.007522
    Maximum b parameter change =  0.003164  
    Maximum a parameter change = 0.015228
...........................................................
Iteration 36     2015-06-13 13:24:09 
   Deviance = 3909.8043 | Deviance change = 0.006147
    Maximum b parameter change =  0.002846  
    Maximum a parameter change = 0.013854
...........................................................
Iteration 37     2015-06-13 13:24:09 
   Deviance = 3909.7993 | Deviance change = 0.005023
    Maximum b parameter change =  0.002559  
    Maximum a parameter change = 0.012595
...........................................................
Iteration 38     2015-06-13 13:24:09 
   Deviance = 3909.7952 | Deviance change = 0.004104
    Maximum b parameter change =  0.002303  
    Maximum a parameter change = 0.011443
...........................................................
Iteration 39     2015-06-13 13:24:09 
   Deviance = 3909.7918 | Deviance change = 0.003353
    Maximum b parameter change =  0.002072  
    Maximum a parameter change = 0.01039
...........................................................
Iteration 40     2015-06-13 13:24:09 
   Deviance = 3909.7891 | Deviance change = 0.002739
    Maximum b parameter change =  0.001865  
    Maximum a parameter change = 0.00943
...........................................................
Iteration 41     2015-06-13 13:24:09 
   Deviance = 3909.7869 | Deviance change = 0.002238
    Maximum b parameter change =  0.001679  
    Maximum a parameter change = 0.008554
...........................................................
Iteration 42     2015-06-13 13:24:09 
   Deviance = 3909.785 | Deviance change = 0.001829
    Maximum b parameter change =  0.001511  
    Maximum a parameter change = 0.007756
...........................................................
Iteration 43     2015-06-13 13:24:09 
   Deviance = 3909.7835 | Deviance change = 0.001494
    Maximum b parameter change =  0.001361  
    Maximum a parameter change = 0.00703
...........................................................
Iteration 44     2015-06-13 13:24:09 
   Deviance = 3909.7823 | Deviance change = 0.001221
    Maximum b parameter change =  0.001226  
    Maximum a parameter change = 0.006369
...........................................................
Iteration 45     2015-06-13 13:24:09 
   Deviance = 3909.7813 | Deviance change = 0.000999
    Maximum b parameter change =  0.001104  
    Maximum a parameter change = 0.005769
...........................................................
Iteration 46     2015-06-13 13:24:09 
   Deviance = 3909.7805 | Deviance change = 0.000817
    Maximum b parameter change =  0.000995  
    Maximum a parameter change = 0.005223
...........................................................
Iteration 47     2015-06-13 13:24:09 
   Deviance = 3909.7798 | Deviance change = 0.000668
    Maximum b parameter change =  0.000896  
    Maximum a parameter change = 0.004729
...........................................................
Iteration 48     2015-06-13 13:24:09 
   Deviance = 3909.7793 | Deviance change = 0.000546
    Maximum b parameter change =  0.000807  
    Maximum a parameter change = 0.00428
...........................................................
Iteration 49     2015-06-13 13:24:09 
   Deviance = 3909.7788 | Deviance change = 0.000447
    Maximum b parameter change =  0.000728  
    Maximum a parameter change = 0.003873
...........................................................
Iteration 50     2015-06-13 13:24:09 
   Deviance = 3909.7785 | Deviance change = 0.000366
    Maximum b parameter change =  0.000656  
    Maximum a parameter change = 0.003503
...........................................................
Iteration 51     2015-06-13 13:24:09 
   Deviance = 3909.7782 | Deviance change = 3e-04
    Maximum b parameter change =  0.000591  
    Maximum a parameter change = 0.003169
...........................................................
Iteration 52     2015-06-13 13:24:09 
   Deviance = 3909.7779 | Deviance change = 0.000246
    Maximum b parameter change =  0.000533  
    Maximum a parameter change = 0.002866
...........................................................
Iteration 53     2015-06-13 13:24:09 
   Deviance = 3909.7777 | Deviance change = 0.000202
    Maximum b parameter change =  0.00048  
    Maximum a parameter change = 0.002592
...........................................................
Iteration 54     2015-06-13 13:24:09 
   Deviance = 3909.7776 | Deviance change = 0.000165
    Maximum b parameter change =  0.000433  
    Maximum a parameter change = 0.002344
...........................................................
Iteration 55     2015-06-13 13:24:09 
   Deviance = 3909.7774 | Deviance change = 0.000136
    Maximum b parameter change =  0.000391  
    Maximum a parameter change = 0.002119
...........................................................
Iteration 56     2015-06-13 13:24:09 
   Deviance = 3909.7773 | Deviance change = 0.000112
    Maximum b parameter change =  0.000352  
    Maximum a parameter change = 0.001916
...........................................................
Iteration 57     2015-06-13 13:24:09 
   Deviance = 3909.7772 | Deviance change = 9.2e-05
    Maximum b parameter change =  0.000318  
    Maximum a parameter change = 0.001732
...........................................................
Iteration 58     2015-06-13 13:24:09 
   Deviance = 3909.7771 | Deviance change = 7.6e-05
    Maximum b parameter change =  0.000287  
    Maximum a parameter change = 0.001566
...........................................................
Iteration 59     2015-06-13 13:24:09 
   Deviance = 3909.7771 | Deviance change = 6.2e-05
    Maximum b parameter change =  0.000258  
    Maximum a parameter change = 0.001415
...........................................................
Iteration 60     2015-06-13 13:24:09 
   Deviance = 3909.777 | Deviance change = 5.1e-05
    Maximum b parameter change =  0.000233  
    Maximum a parameter change = 0.001279
...........................................................
Iteration 61     2015-06-13 13:24:09 
   Deviance = 3909.777 | Deviance change = 4.2e-05
    Maximum b parameter change =  0.00021  
    Maximum a parameter change = 0.001156
...........................................................
Iteration 62     2015-06-13 13:24:09 
   Deviance = 3909.777 | Deviance change = 3.5e-05
    Maximum b parameter change =  0.00019  
    Maximum a parameter change = 0.001045
...........................................................
Iteration 63     2015-06-13 13:24:09 
   Deviance = 3909.7769 | Deviance change = 2.9e-05
    Maximum b parameter change =  0.000171  
    Maximum a parameter change = 0.000944
...........................................................
Iteration 64     2015-06-13 13:24:09 
   Deviance = 3909.7769 | Deviance change = 2.4e-05
    Maximum b parameter change =  0.000155  
    Maximum a parameter change = 0.000854
...........................................................
Iteration 65     2015-06-13 13:24:09 
   Deviance = 3909.7769 | Deviance change = 2e-05
    Maximum b parameter change =  0.000139  
    Maximum a parameter change = 0.000771
...........................................................
Iteration 66     2015-06-13 13:24:09 
   Deviance = 3909.7769 | Deviance change = 1.6e-05
    Maximum b parameter change =  0.000126  
    Maximum a parameter change = 0.000697
...........................................................
Iteration 67     2015-06-13 13:24:09 
   Deviance = 3909.7769 | Deviance change = 1.4e-05
    Maximum b parameter change =  0.000114  
    Maximum a parameter change = 0.00063
...........................................................
Iteration 68     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 1.1e-05
    Maximum b parameter change =  0.000103  
    Maximum a parameter change = 0.000569
...........................................................
Iteration 69     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 1e-05
    Maximum b parameter change =  9.3e-05  
    Maximum a parameter change = 0.000514
...........................................................
Iteration 70     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 8e-06
    Maximum b parameter change =  8.4e-05  
    Maximum a parameter change = 0.000465
...........................................................
Iteration 71     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 7e-06
    Maximum b parameter change =  7.5e-05  
    Maximum a parameter change = 0.00042
...........................................................
Iteration 72     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 6e-06
    Maximum b parameter change =  6.8e-05  
    Maximum a parameter change = 0.00038
...........................................................
Iteration 73     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 5e-06
    Maximum b parameter change =  6.1e-05  
    Maximum a parameter change = 0.000343
...........................................................
Iteration 74     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 4e-06
    Maximum b parameter change =  5.6e-05  
    Maximum a parameter change = 0.00031
...........................................................
Iteration 75     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 3e-06
    Maximum b parameter change =  5e-05  
    Maximum a parameter change = 0.00028
...........................................................
Iteration 76     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 3e-06
    Maximum b parameter change =  4.5e-05  
    Maximum a parameter change = 0.000253
...........................................................
Iteration 77     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 2e-06
    Maximum b parameter change =  4.1e-05  
    Maximum a parameter change = 0.000229
...........................................................
Iteration 78     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 2e-06
    Maximum b parameter change =  3.7e-05  
    Maximum a parameter change = 0.000207
...........................................................
Iteration 79     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 2e-06
    Maximum b parameter change =  3.3e-05  
    Maximum a parameter change = 0.000187
...........................................................
Iteration 80     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  3e-05  
    Maximum a parameter change = 0.000169
...........................................................
Iteration 81     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  2.7e-05  
    Maximum a parameter change = 0.000153
...........................................................
Iteration 82     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  2.5e-05  
    Maximum a parameter change = 0.000138
...........................................................
Iteration 83     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  2.2e-05  
    Maximum a parameter change = 0.000125
...........................................................
Iteration 84     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  2e-05  
    Maximum a parameter change = 0.000113
...........................................................
Iteration 85     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  1.8e-05  
    Maximum a parameter change = 0.000102
...........................................................
Iteration 86     2015-06-13 13:24:09 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  1.6e-05  
    Maximum a parameter change = 9.2e-05
------------------------------------------------------------
Start: 2015-06-13 13:24:09 
End: 2015-06-13 13:24:10 
Time difference of 0.751595 secs
Difference: 0.751595 
------------------------------------------------------------
> marginal.truescore.reliability( b=mod$item$b , a=mod$item$a)
Reliability= 0.696 
>   ##   Reliability= 0.696 
> 
> ## Not run: 
> ##D # compare results with Cronbach's alpha and McDonald's omega
> ##D # posing a 'wrong model' for normally distributed data
> ##D library(psych)
> ##D psych::omega(dat , nfactors=1)     # 1 factor
> ##D   ##  Omega_h for 1 factor is not meaningful, just omega_t
> ##D   ##   Omega 
> ##D   ##   Call: omega(m = dat, nfactors = 1)
> ##D   ##   Alpha:                 0.69 
> ##D   ##   G.6:                   0.7 
> ##D   ##   Omega Hierarchical:    0.66 
> ##D   ##   Omega H asymptotic:    0.95 
> ##D   ##   Omega Total            0.69 
> ##D 
> ##D ##! Note that alpha in psych is the standardized one. 
> ## End(Not run) 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("marginal.truescore.reliability", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("matrixfunctions.sirt")
> ### * matrixfunctions.sirt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: matrixfunctions.sirt
> ### Title: Some Matrix Functions
> ### Aliases: rowMaxs.sirt rowMins.sirt rowCumsums.sirt colCumsums.sirt
> ###   rowIntervalIndex.sirt rowKSmallest.sirt rowKSmallest2.sirt
> ### Keywords: Matrix utilities
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: a small toy example (I)
> #############################################################################
> set.seed(789)
> N1 <- 10 ; N2 <- 4
> M1 <- round( matrix( runif(N1*N2) , nrow=N1 , ncol=N2) , 1 )
> 
> rowMaxs.sirt(M1)      # rowwise maximum
$maxval
 [1] 0.7 0.5 0.7 0.6 0.5 0.5 0.6 0.6 0.8 0.7

$maxind
 [1] 1 2 4 1 1 3 1 2 2 4

> rowMins.sirt(M1)      # rowwise minimum
$minval
 [1] 0.2 0.1 0.0 0.3 0.3 0.0 0.2 0.2 0.2 0.1

$minind
 [1] 4 1 1 3 4 1 2 1 4 2

> rowCumsums.sirt(M1)   # rowwise cumulative sum
      [,1] [,2] [,3] [,4]
 [1,]  0.7  1.0  1.3  1.5
 [2,]  0.1  0.6  1.0  1.3
 [3,]  0.0  0.3  0.5  1.2
 [4,]  0.6  1.1  1.4  1.9
 [5,]  0.5  0.9  1.3  1.6
 [6,]  0.0  0.0  0.5  0.9
 [7,]  0.6  0.8  1.1  1.7
 [8,]  0.2  0.8  1.3  1.6
 [9,]  0.4  1.2  2.0  2.2
[10,]  0.3  0.4  0.9  1.6
> 
> # row index for exceeding a certain threshold value  
> matr <- M1
> matr <- matr / rowSums( matr )
> matr <- rowCumsums.sirt( matr )
> rn <- runif(N1)	# generate random numbers
> rowIntervalIndex.sirt(matr,rn)
 [1] 1 4 4 4 1 3 3 4 1 4
> 
> # select the two smallest values
> rowKSmallest.sirt(matr=M1 , K=2)
$smallval
      [,1] [,2]
 [1,]  0.2  0.3
 [2,]  0.1  0.3
 [3,]  0.0  0.2
 [4,]  0.3  0.5
 [5,]  0.3  0.4
 [6,]  0.0  0.0
 [7,]  0.2  0.3
 [8,]  0.2  0.3
 [9,]  0.2  0.4
[10,]  0.1  0.3

$smallind
      [,1] [,2]
 [1,]    4    3
 [2,]    1    4
 [3,]    1    3
 [4,]    3    4
 [5,]    4    2
 [6,]    2    2
 [7,]    2    3
 [8,]    1    4
 [9,]    4    1
[10,]    2    2

> rowKSmallest2.sirt(matr=M1 , K=2)
$smallval
      [,1] [,2]
 [1,]  0.2  0.3
 [2,]  0.1  0.3
 [3,]  0.0  0.2
 [4,]  0.3  0.5
 [5,]  0.3  0.4
 [6,]  0.0  0.0
 [7,]  0.2  0.3
 [8,]  0.2  0.3
 [9,]  0.2  0.4
[10,]  0.1  0.3

$smallind
      [,1] [,2]
 [1,]    4    2
 [2,]    1    4
 [3,]    1    3
 [4,]    3    2
 [5,]    4    2
 [6,]    1    2
 [7,]    2    3
 [8,]    1    4
 [9,]    4    1
[10,]    2    1

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("matrixfunctions.sirt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mcmc.2pno")
> ### * mcmc.2pno
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mcmc.2pno
> ### Title: MCMC Estimation of the Two-Parameter Normal Ogive Item Response
> ###   Model
> ### Aliases: mcmc.2pno
> ### Keywords: Markov Chain Monte Carlo (MCMC)
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D #############################################################################
> ##D # EXAMPLE 1: Dataset Reading
> ##D #############################################################################
> ##D data(data.read)
> ##D # estimate 2PNO with MCMC with 3000 iterations and 500 burn-in iterations
> ##D mod <- mcmc.2pno( dat=data.read , iter=3000 , burnin=500 )
> ##D # plot MCMC chains
> ##D plot( mod$mcmcobj , ask=TRUE )
> ##D # write sampled chains into codafile
> ##D mcmclist2coda( mod$mcmcobj , name = "dataread_2pno" )
> ##D # summary
> ##D summary(mod)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2
> ##D #############################################################################
> ##D # simulate data
> ##D N <- 1000
> ##D I <- 10
> ##D b <- seq( -1.5 , 1.5 , len=I )
> ##D a <- rep( c(1,2) , I/2 )
> ##D theta1 <- rnorm(N)
> ##D dat <- sim.raschtype( theta=theta1 , fixed.a =a , b=b )
> ##D 
> ##D #***
> ##D # Model 1: estimate model without weights
> ##D mod1 <- mcmc.2pno( dat , iter= 1500 , burnin=500)
> ##D mod1$summary.mcmcobj
> ##D plot( mod1$mcmcobj , ask=TRUE )
> ##D 
> ##D #***
> ##D # Model 2: estimate model with weights
> ##D # define weights
> ##D weights <- c( rep( 5 , N/4 ) , rep( .2 , 3/4*N ) )
> ##D mod2 <- mcmc.2pno( dat , weights=weights , iter= 1500 , burnin=500)
> ##D mod1$summary.mcmcobj
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mcmc.2pno", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mcmc.2pno.ml")
> ### * mcmc.2pno.ml
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mcmc.2pno.ml
> ### Title: Random Item Response Model / Multilevel IRT Model
> ### Aliases: mcmc.2pno.ml
> ### Keywords: Markov Chain Monte Carlo (MCMC) Multilevel item response
> ###   model Multilevel DIF
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D #############################################################################
> ##D # EXAMPLE 1: Dataset Multilevel data.ml1 - dichotomous items
> ##D #############################################################################
> ##D data(data.ml1)
> ##D dat <- data.ml1[,-1]
> ##D group <- data.ml1$group
> ##D # just for a try use a very small number of iterations
> ##D burnin <- 50 ; iter <- 100
> ##D 
> ##D #***
> ##D # Model 1: 1PNO with no cluster item effects
> ##D mod1 <- mcmc.2pno.ml( dat , group , est.b.Var="n" , burnin=burnin , iter=iter )
> ##D summary(mod1)	# summary
> ##D plot(mod1,layout=2,ask=TRUE) # plot results
> ##D # write results to coda file
> ##D mcmclist2coda( mod1$mcmcobj , name = "data.ml1_mod1" )
> ##D 
> ##D #***
> ##D # Model 2: 1PNO with cluster item effects of item difficulties 
> ##D mod2 <- mcmc.2pno.ml( dat , group , est.b.Var="i" , burnin=burnin , iter=iter )
> ##D summary(mod2)
> ##D plot(mod2, ask=TRUE , layout=2 )
> ##D 
> ##D #***
> ##D # Model 3: 2PNO with cluster item effects of item difficulties but
> ##D #          joint item slopes
> ##D mod3 <- mcmc.2pno.ml( dat , group , est.b.Var="i" , est.a.M="h" , 
> ##D               burnin=burnin , iter=iter )
> ##D summary(mod3)
> ##D 
> ##D #***
> ##D # Model 4: 2PNO with cluster item effects of item difficulties and
> ##D #          cluster item effects with a jointly estimated SD
> ##D mod4 <- mcmc.2pno.ml( dat , group , est.b.Var="i" , est.a.M="h" ,
> ##D                 est.a.Var="j" , burnin=burnin , iter=iter )
> ##D summary(mod4)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Dataset Multilevel data.ml2 - polytomous items
> ##D #            assuming a normal distribution for polytomous items
> ##D #############################################################################
> ##D data(data.ml2)
> ##D dat <- data.ml2[,-1]
> ##D group <- data.ml2$group
> ##D # set iterations for all examples (too few!!)
> ##D burnin <- 100 ; iter <- 500
> ##D 
> ##D #***
> ##D # Model 1: no intercept variance, no slopes
> ##D mod1 <- mcmc.2pno.ml( dat=dat , group=group , est.b.Var="n" , 
> ##D              burnin=burnin , iter=iter , link="normal" ,  progress.iter=20  )
> ##D summary(mod1)
> ##D 
> ##D #***
> ##D # Model 2a: itemwise intercept variance, no slopes
> ##D mod2a <- mcmc.2pno.ml( dat=dat , group=group , est.b.Var="i" , 
> ##D             burnin=burnin , iter=iter ,link="normal" ,  progress.iter=20  )
> ##D summary(mod2a)
> ##D 
> ##D #***
> ##D # Model 2b: homogeneous intercept variance, no slopes
> ##D mod2b <- mcmc.2pno.ml( dat=dat , group=group , est.b.Var="j" , 
> ##D               burnin=burnin , iter=iter ,link="normal" ,  progress.iter=20  )
> ##D summary(mod2b)
> ##D 
> ##D #***
> ##D # Model 3: intercept variance and slope variances
> ##D #          hierarchical item and slope parameters
> ##D mod3 <- mcmc.2pno.ml( dat=dat , group=group , 
> ##D                est.b.M="h" , est.b.Var="i" , est.a.M="h" , est.a.Var="i" , 
> ##D                burnin=burnin , iter=iter ,link="normal" ,  progress.iter=20  )
> ##D summary(mod3)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 3: Simulated random effects model | dichotomous items
> ##D #############################################################################
> ##D set.seed(7698)
> ##D 
> ##D #*** model parameters
> ##D sig2.lev2 <- .3^2   # theta level 2 variance
> ##D sig2.lev1 <- .8^2   # theta level 1 variance 
> ##D G <- 100            # number of groups
> ##D n <- 20             # number of persons within a group
> ##D I <- 12             # number of items
> ##D #*** simuate theta
> ##D theta2 <- rnorm( G , sd = sqrt(sig2.lev2) )
> ##D theta1 <- rnorm( n*G , sd =  sqrt(sig2.lev1) )
> ##D theta  <- theta1 + rep( theta2 , each=n )
> ##D #*** item difficulties
> ##D b <- seq( -2 , 2 , len=I )
> ##D #*** define group identifier
> ##D group <- 1000 + rep(1:G , each=n )
> ##D #*** SD of group specific difficulties for items 3 and 5
> ##D sigma.item <- rep(0,I)
> ##D sigma.item[c(3,5)] <- 1
> ##D #*** simulate group specific item difficulties
> ##D b.class <- sapply( sigma.item , FUN = function(sii){ rnorm( G , sd = sii ) } )
> ##D b.class <- b.class[ rep( 1:G ,each=n ) , ]
> ##D b <- matrix( b , n*G , I , byrow=TRUE ) + b.class
> ##D #*** simulate item responses
> ##D m1 <- pnorm( theta - b ) 
> ##D dat <- 1 * ( m1 > matrix( runif( n*G*I ) , n*G , I ) )
> ##D 
> ##D #*** estimate model
> ##D mod <- mcmc.2pno.ml( dat , group=group , burnin=burnin , iter=iter , 
> ##D             est.b.M="n" , est.b.Var="i" , progress.iter=20)
> ##D summary(mod)
> ##D plot(mod , layout=2 , ask=TRUE )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mcmc.2pno.ml", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mcmc.2pnoh")
> ### * mcmc.2pnoh
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mcmc.2pnoh
> ### Title: MCMC Estimation of the Hierarchical IRT Model for
> ###   Criterion-Referenced Measurement
> ### Aliases: mcmc.2pnoh
> ### Keywords: Markov Chain Monte Carlo (MCMC)
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 1: Simulated data according to Janssen et al. (2000, Table 2)
> ##D #############################################################################
> ##D 
> ##D N <- 1000
> ##D Ik <- c(4,6,8,5,9,6,8,6,5)
> ##D xi.k <- c( -.89 , -1.13 , -1.23 , .06 , -1.41 , -.66 , -1.09 , .57 , -2.44)
> ##D omega.k <- c(.98 , .91 , .76 , .74 , .71 , .80 , .79 , .82 , .54)
> ##D 
> ##D # select 4 attributes
> ##D K <- 4
> ##D Ik <- Ik[1:K] ; xi.k <- xi.k[1:K] ; omega.k <- omega.k[1:K]
> ##D sig2 <- 3.02
> ##D nu2 <- .09
> ##D I <- sum(Ik)
> ##D b <- rep( xi.k , Ik ) + rnorm(I , sd = sqrt(sig2) )
> ##D a <- rep( omega.k , Ik ) + rnorm(I , sd = sqrt(nu2) )
> ##D theta1 <- rnorm(N)
> ##D t1 <- rep(1,N)
> ##D p1 <- pnorm( outer(t1,a) * ( theta1 - outer(t1,b) ) )
> ##D dat <- 1  * ( p1 > runif(N*I)  )
> ##D itemgroups <- rep( paste0("A" , 1:K ) , Ik )
> ##D 
> ##D # estimate model
> ##D mod <- mcmc.2pnoh(dat  , itemgroups , burnin=200 , iter=1000 )
> ##D # summary
> ##D summary(mod)
> ##D # plot
> ##D plot(mod$mcmcobj , ask=TRUE)
> ##D # write coda files
> ##D mcmclist2coda( mod$mcmcobj , name = "simul_2pnoh" )
> ## End(Not run)	
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mcmc.2pnoh", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mcmc.3pno.testlet")
> ### * mcmc.3pno.testlet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mcmc.3pno.testlet
> ### Title: 3PNO Testlet Model
> ### Aliases: mcmc.3pno.testlet
> ### Keywords: Testlet model Testlets Markov Chain Monte Carlo (MCMC)
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D #############################################################################
> ##D # EXAMPLE 1: Dataset Reading
> ##D #############################################################################
> ##D data(data.read)
> ##D dat <- data.read
> ##D I <- ncol(dat)
> ##D 
> ##D # set burnin and total number of iterations here (CHANGE THIS!)
> ##D burnin <- 200
> ##D iter <- 500
> ##D 
> ##D #***
> ##D # Model 1: 1PNO model
> ##D mod1 <- mcmc.3pno.testlet( dat ,  est.slope=FALSE , est.guess=FALSE , 
> ##D             burnin=burnin, iter=iter )
> ##D summary(mod1)
> ##D plot(mod1,ask=TRUE) # plot MCMC chains in coda style
> ##D plot(mod1,ask=TRUE , layout=2) # plot MCMC output in different layout
> ##D 
> ##D #***
> ##D # Model 2: 3PNO model with Beta(5,17) prior for guessing parameters
> ##D mod2 <- mcmc.3pno.testlet( dat ,  guess.prior=c(5,17) ,
> ##D                burnin=burnin, iter=iter )
> ##D summary(mod2)
> ##D 
> ##D #***
> ##D # Model 3: Rasch (1PNO) testlet model
> ##D testlets <- substring( colnames(dat) , 1 , 1 )
> ##D mod3 <- mcmc.3pno.testlet( dat ,  testlets=testlets ,  est.slope=FALSE , 
> ##D            est.guess=FALSE , burnin=burnin, iter=iter )
> ##D summary(mod3)
> ##D 
> ##D #***
> ##D # Model 4: 3PNO testlet model with (almost) fixed guessing parameters .25
> ##D mod4 <- mcmc.3pno.testlet( dat ,  guess.prior=1000*c(25,75) , testlets=testlets , 
> ##D               burnin=burnin, iter=iter )
> ##D summary(mod4)
> ##D plot(mod4, ask=TRUE, layout=2)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: Simulated data according to the Rasch testlet model
> ##D #############################################################################
> ##D set.seed(678)
> ##D 
> ##D N <- 3000   # number of persons
> ##D I <- 4      # number of items per testlet
> ##D TT <- 3     # number of testlets
> ##D 
> ##D ITT <- I*TT
> ##D b <- round( rnorm( ITT , mean=0 , sd = 1 ) , 2 )
> ##D sd0 <- 1 # sd trait
> ##D sdt <- seq( 0 , 2 , len=TT ) # sd testlets
> ##D sdt <- sdt
> ##D 
> ##D # simulate theta
> ##D theta <- rnorm( N , sd = sd0 )
> ##D # simulate testlets
> ##D ut <- matrix(0,nrow=N , ncol=TT )
> ##D for (tt in 1:TT){ ut[,tt] <- rnorm( N , sd = sdt[tt] ) }
> ##D ut <- ut[ , rep(1:TT,each=I) ]
> ##D # calculate response probability
> ##D prob <- matrix( pnorm( theta + ut + matrix( b , nrow=N , ncol=ITT , 
> ##D 		byrow=TRUE ) ) , N, ITT)
> ##D Y <- (matrix( runif(N*ITT) , N , ITT) < prob )*1
> ##D colMeans(Y)
> ##D 
> ##D # define testlets
> ##D testlets <- rep(1:TT , each=I )
> ##D 
> ##D burnin <- 300
> ##D iter <- 1000
> ##D 
> ##D #***
> ##D # Model 1: 1PNO model (without testlet structure)
> ##D mod1 <- mcmc.3pno.testlet( dat=Y ,  est.slope=FALSE , est.guess=FALSE , 
> ##D             burnin=burnin, iter=iter , testlets= testlets )        
> ##D summary(mod1)        
> ##D 
> ##D summ1 <- mod1$summary.mcmcobj
> ##D # compare item parameters
> ##D cbind( b , summ1[ grep("b" , summ1$parameter ) , "Mean" ] )
> ##D # Testlet standard deviations
> ##D cbind( sdt , summ1[ grep("sigma\.testlet" , summ1$parameter ) , "Mean" ] )
> ##D 
> ##D #***
> ##D # Model 2: 1PNO model (without testlet structure)
> ##D mod2 <- mcmc.3pno.testlet( dat=Y ,  est.slope=TRUE , est.guess=FALSE , 
> ##D            burnin=burnin, iter=iter , testlets= testlets )        
> ##D summary(mod2)        
> ##D 
> ##D summ2 <- mod2$summary.mcmcobj
> ##D # compare item parameters
> ##D cbind( b , summ2[ grep("b\[" , summ2$parameter ) , "Mean" ] )
> ##D # item discriminations
> ##D cbind( sd0 , summ2[ grep("a\[" , summ2$parameter ) , "Mean" ] )
> ##D # Testlet standard deviations
> ##D cbind( sdt , summ2[ grep("sigma\.testlet" , summ2$parameter ) , "Mean" ] )
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 3: Simulated data according to the 2PNO testlet model
> ##D #############################################################################
> ##D set.seed(678)
> ##D 
> ##D N <- 3000    # number of persons
> ##D I <- 3      # number of items per testlet
> ##D TT <- 5    # number of testlets
> ##D 
> ##D ITT <- I*TT
> ##D b <- round( rnorm( ITT , mean=0 , sd = 1 ) , 2 )
> ##D a <- round( runif( ITT , 0.5 , 2 ) ,2)
> ##D sdt <- seq( 0 , 2 , len=TT ) # sd testlets
> ##D sdt <- sdt
> ##D 
> ##D # simulate theta
> ##D theta <- rnorm( N , sd = sd0 )
> ##D # simulate testlets
> ##D ut <- matrix(0,nrow=N , ncol=TT )
> ##D for (tt in 1:TT){ ut[,tt] <- rnorm( N , sd = sdt[tt] ) }
> ##D ut <- ut[ , rep(1:TT,each=I) ]
> ##D # calculate response probability
> ##D bM <- matrix( b , nrow=N , ncol=ITT , byrow=TRUE )
> ##D aM <- matrix( a , nrow=N , ncol=ITT , byrow=TRUE )
> ##D prob <- matrix( pnorm( aM*theta + ut + bM ) , N, ITT)
> ##D Y <- (matrix( runif(N*ITT) , N , ITT) < prob )*1
> ##D colMeans(Y)
> ##D 
> ##D # define testlets
> ##D testlets <- rep(1:TT , each=I )
> ##D 
> ##D burnin <- 500
> ##D iter <- 1500
> ##D 
> ##D #***
> ##D # Model 1: 2PNO model
> ##D mod1 <- mcmc.3pno.testlet( dat=Y ,  est.slope=TRUE , est.guess=FALSE , 
> ##D              burnin=burnin, iter=iter , testlets= testlets )                               
> ##D summary(mod1)        
> ##D 
> ##D summ1 <- mod1$summary.mcmcobj
> ##D # compare item parameters
> ##D cbind( b , summ1[ grep("b" , summ1$parameter ) , "Mean" ] )
> ##D # item discriminations
> ##D cbind( a , summ1[ grep("a\[" , summ1$parameter ) , "Mean" ] )
> ##D # Testlet standard deviations
> ##D cbind( sdt , summ1[ grep("sigma\.testlet" , summ1$parameter ) , "Mean" ] )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mcmc.3pno.testlet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mcmc.list.descriptives")
> ### * mcmc.list.descriptives
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mcmc.list.descriptives
> ### Title: Computation of Descriptive Statistics for a 'mcmc.list' Object
> ### Aliases: mcmc.list.descriptives
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(rcppbugs)
> ##D library(coda)
> ##D library(R2WinBUGS)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 1: Logistic regression 
> ##D #############################################################################
> ##D 
> ##D #***************************************
> ##D # (1) simulate data
> ##D set.seed(8765)
> ##D N <- 500
> ##D x1 <- rnorm(N)
> ##D x2 <- rnorm(N)
> ##D y <- 1*( plogis( -.6 + .7*x1 + 1.1 *x2 ) > runif(N) )
> ##D 
> ##D #***************************************
> ##D # (2) estimate logistic regression with glm
> ##D mod <- glm( y ~ x1 + x2 , family="binomial" )
> ##D summary(mod)
> ##D 
> ##D #***************************************
> ##D # (3) estimate model with rcppbugs package
> ##D b <- rcppbugs::mcmc.normal(rnorm(3),mu=0,tau=0.0001)
> ##D y.hat <- rcppbugs::deterministic(function(x1,x2,b) { plogis( b[1] + b[2]*x1 + b[3]*x2 ) }, 
> ##D              x1 , x2 , b)
> ##D y.lik <- rcppbugs::mcmc.bernoulli( y , p = y.hat, observed = TRUE)
> ##D m <- rcppbugs::create.model(b, y.hat, y.lik)
> ##D 
> ##D #*** estimate model in rcppbugs; 5000 iterations, 1000 burnin iterations
> ##D ans <- rcppbugs::run.model(m, iterations=5000, burn=1000, adapt=1000, thin=5)
> ##D print(rcppbugs::get.ar(ans))   # get acceptance rate
> ##D print(apply(ans[["b"]],2,mean))  # get means of posterior
> ##D 
> ##D #*** convert rcppbugs into mcmclist object
> ##D mcmcobj <- data.frame( ans$b  )
> ##D colnames(mcmcobj) <- paste0("b",1:3)
> ##D mcmcobj <- as.matrix(mcmcobj)
> ##D class(mcmcobj) <- "mcmc"
> ##D attr(mcmcobj, "mcpar") <- c( 1 , nrow(mcmcobj) , 1 )
> ##D mcmcobj <- as.mcmc.list( mcmcobj )
> ##D 
> ##D # plot results
> ##D plot(mcmcobj)
> ##D 
> ##D # summary
> ##D summ1 <-  mcmc.list.descriptives( mcmcobj )
> ##D summ1
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mcmc.list.descriptives", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mcmclist2coda")
> ### * mcmclist2coda
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mcmclist2coda
> ### Title: Write Coda File from an Object of Class 'mcmc.list'
> ### Aliases: mcmclist2coda
> ### Keywords: coda
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: MCMC estimation 2PNO dataset Reading
> ##D #############################################################################	
> ##D 
> ##D data(data.read)
> ##D # estimate 2PNO with MCMC with 3000 iterations and 500 burn-in iterations
> ##D mod <- mcmc.2pno( dat=data.read , iter=3000 , burnin=500 )
> ##D # plot MCMC chains
> ##D plot( mod$mcmcobj , ask=TRUE )
> ##D # write sampled chains into codafile
> ##D mcmclist2coda( mod$mcmcobj , name = "dataread_2pl" ) 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mcmclist2coda", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("md.pattern.sirt")
> ### * md.pattern.sirt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: md.pattern.sirt
> ### Title: Response Pattern in a Binary Matrix
> ### Aliases: md.pattern.sirt
> ### Keywords: Utilities
> 
> ### ** Examples
> 
> #############################################################################
> # SIMULATED EXAMPLE 1
> #############################################################################
> set.seed(7654)
> N <- 21         # number of rows
> I <- 4          # number of columns
> dat <- matrix( 1*(runif(N*I) > .3 ) , N, I )
> res <- md.pattern.sirt(dat)
> # plot of response patterns
> res$dat.ordered
      [,1] [,2] [,3] [,4]
 [1,]    1    1    1    1
 [2,]    1    1    1    1
 [3,]    1    1    1    1
 [4,]    1    1    1    1
 [5,]    1    1    1    1
 [6,]    1    1    1    1
 [7,]    1    1    1    1
 [8,]    1    1    1    0
 [9,]    1    1    1    0
[10,]    1    1    1    0
[11,]    1    1    1    0
[12,]    1    1    0    1
[13,]    1    1    0    1
[14,]    1    1    0    1
[15,]    1    1    0    1
[16,]    0    1    1    1
[17,]    0    1    1    1
[18,]    0    1    1    1
[19,]    0    1    0    1
[20,]    0    1    0    0
[21,]    0    0    1    1
> image( z=t(res$dat.ordered) , y =1:N , x=1:I , xlab="Items"  , ylab="Persons")
> # 0's are yellow and 1's are red
> 
> #############################################################################
> # EXAMPLE 2: Item response patterns for dataset data.read
> #############################################################################
> 
> data(data.read)
> dat <- data.read  ; N <- nrow(dat) ; I <- ncol(dat)
> # order items according to p values
> dat <- dat[ , order(colMeans(dat , na.rm=TRUE )) ]
> # analyzing response pattern
> res <- md.pattern.sirt(dat)
> res$dat.ordered
     A4 B2 A3 B4 B1 C2 C4 A2 A1 C3 B3 C1
41    1  1  1  1  1  1  1  1  1  1  1  1
86    1  1  1  1  1  1  1  1  1  1  1  1
107   1  1  1  1  1  1  1  1  1  1  1  1
251   1  1  1  1  1  1  1  1  1  1  1  1
485   1  1  1  1  1  1  1  1  1  1  1  1
505   1  1  1  1  1  1  1  1  1  1  1  1
587   1  1  1  1  1  1  1  1  1  1  1  1
630   1  1  1  1  1  1  1  1  1  1  1  1
850   1  1  1  1  1  1  1  1  1  1  1  1
851   1  1  1  1  1  1  1  1  1  1  1  1
961   1  1  1  1  1  1  1  1  1  1  1  1
1027  1  1  1  1  1  1  1  1  1  1  1  1
1127  1  1  1  1  1  1  1  1  1  1  1  1
1148  1  1  1  1  1  1  1  1  1  1  1  1
1248  1  1  1  1  1  1  1  1  1  1  1  1
1422  1  1  1  1  1  1  1  1  1  1  1  1
1445  1  1  1  1  1  1  1  1  1  1  1  1
1550  1  1  1  1  1  1  1  1  1  1  1  1
1742  1  1  1  1  1  1  1  1  1  1  1  1
1765  1  1  1  1  1  1  1  1  1  1  1  1
1827  1  1  1  1  1  1  1  1  1  1  1  1
2018  1  1  1  1  1  1  1  1  1  1  1  1
2296  1  1  1  1  1  1  1  1  1  1  1  1
2452  1  1  1  1  1  1  1  1  1  1  1  1
2600  1  1  1  1  1  1  1  1  1  1  1  1
2815  1  1  1  1  1  1  1  1  1  1  1  1
3213  1  1  1  1  1  1  1  1  1  1  1  1
3233  1  1  1  1  1  1  1  1  1  1  1  1
3358  1  1  1  1  1  1  1  1  1  1  1  1
3377  1  1  1  1  1  1  1  1  1  1  1  1
3421  1  1  1  1  1  1  1  1  1  1  1  1
3423  1  1  1  1  1  1  1  1  1  1  1  1
3567  1  1  1  1  1  1  1  1  1  1  1  1
3769  1  1  1  1  1  1  1  1  1  1  1  1
3829  1  1  1  1  1  1  1  1  1  1  1  1
3048  1  1  1  1  1  1  1  1  1  0  1  1
208   1  1  1  1  1  1  1  0  1  1  1  1
2     1  1  1  1  1  1  0  1  1  1  1  1
809   1  1  1  1  1  1  0  1  1  1  1  1
1810  1  1  1  1  1  1  0  1  1  1  1  1
1956  1  1  1  1  1  1  0  1  1  1  1  1
2616  1  1  1  1  1  1  0  1  1  1  1  1
3071  1  1  1  1  1  1  0  1  1  1  1  1
807   1  1  1  1  1  0  1  1  1  1  1  1
2320  1  1  1  1  1  0  1  1  1  1  1  1
2879  1  1  1  1  1  0  1  1  1  1  1  1
3793  1  1  1  1  1  0  0  1  1  1  1  1
1741  1  1  1  1  1  0  0  1  1  0  1  0
2577  1  1  1  1  1  0  0  1  1  0  1  0
3252  1  1  1  1  1  0  0  1  1  0  1  0
1975  1  1  1  1  0  1  1  1  1  1  1  1
2430  1  1  1  1  0  1  1  1  1  1  1  1
2432  1  1  1  1  0  1  1  1  1  1  1  1
2450  1  1  1  1  0  1  1  1  1  1  1  1
2532  1  1  1  1  0  1  1  1  1  1  1  1
2750  1  1  1  1  0  1  1  1  1  1  1  1
3444  1  1  1  1  0  1  1  1  1  1  1  1
357   1  1  1  1  0  1  0  0  1  1  1  1
1043  1  1  1  1  0  0  1  1  1  1  1  1
2362  1  1  1  1  0  0  1  1  1  1  0  1
1066  1  1  1  0  1  1  1  1  1  1  1  1
1381  1  1  1  0  1  1  1  1  1  1  1  1
1424  1  1  1  0  1  1  1  1  1  1  1  1
3675  1  1  1  0  1  1  1  1  1  1  1  1
206   1  1  1  0  1  1  1  1  1  0  1  1
3611  1  1  1  0  1  1  1  1  1  0  1  1
2408  1  1  1  0  1  1  0  1  1  1  1  1
3815  1  1  1  0  0  1  1  0  1  1  0  1
2103  1  1  0  1  1  1  1  1  1  1  1  1
2838  1  1  0  1  1  1  1  1  1  1  1  1
3127  1  1  0  1  1  1  1  1  1  1  1  1
1700  1  1  0  1  1  1  1  1  1  0  1  1
2795  1  1  0  1  1  1  1  0  1  1  1  1
2900  1  1  0  1  1  1  1  0  1  0  1  1
1108  1  1  0  1  1  1  0  1  1  1  1  1
2681  1  1  0  1  1  0  1  1  1  1  1  1
2877  1  1  0  1  1  0  1  0  1  1  1  1
1489  1  1  0  1  1  0  1  0  1  0  1  1
676   1  1  0  1  1  0  0  1  1  1  1  1
2146  1  1  0  1  0  1  1  1  0  1  1  1
3690  1  1  0  1  0  1  0  0  1  1  1  1
2752  1  1  0  0  1  1  1  1  1  1  0  1
2382  1  1  0  0  1  1  0  1  1  1  1  1
2101  1  1  0  0  1  0  1  1  1  1  1  1
2902  1  1  0  0  1  0  0  1  0  1  1  1
2966  1  1  0  0  0  1  1  1  1  1  1  1
2168  1  1  0  0  0  0  1  0  0  1  1  1
891   1  0  1  1  1  1  1  1  1  1  1  1
893   1  0  1  1  1  1  1  1  1  1  1  1
938   1  0  1  1  1  1  1  1  1  1  1  1
1045  1  0  1  1  1  1  1  1  1  1  1  1
1150  1  0  1  1  1  1  1  1  1  1  1  1
1358  1  0  1  1  1  1  1  1  1  1  1  1
1571  1  0  1  1  1  1  1  1  1  1  1  1
1719  1  0  1  1  1  1  1  1  1  1  1  1
1785  1  0  1  1  1  1  1  1  1  1  1  1
2189  1  0  1  1  1  1  1  1  1  1  1  1
2530  1  0  1  1  1  1  1  1  1  1  1  1
2729  1  0  1  1  1  1  1  1  1  1  1  1
3192  1  0  1  1  1  1  1  1  1  1  1  1
3212  1  0  1  1  1  1  1  1  1  1  1  1
3850  1  0  1  1  1  1  1  1  1  1  1  1
1653  1  0  1  1  1  1  1  1  1  0  1  1
229   1  0  1  1  1  1  0  1  1  1  1  1
2704  1  0  1  1  1  1  0  0  1  1  1  1
786   1  0  1  1  1  0  1  1  1  1  1  1
959   1  0  1  1  1  0  1  1  1  1  1  1
2080  1  0  1  1  1  0  1  1  1  1  1  1
183   1  0  1  1  0  1  1  1  1  1  1  1
1007  1  0  1  1  0  1  1  1  1  1  1  1
2041  1  0  1  1  0  1  1  1  1  1  1  1
1188  1  0  1  1  0  1  1  1  1  1  0  1
570   1  0  1  0  1  1  1  1  1  1  1  1
1529  1  0  1  0  1  1  1  1  1  1  1  1
2020  1  0  1  0  1  1  1  1  1  1  1  1
3714  1  0  1  0  1  1  1  1  1  1  1  1
2410  1  0  1  0  1  0  0  0  1  1  1  1
2554  1  0  1  0  0  1  1  1  1  1  1  1
721   1  0  1  0  0  1  0  0  0  1  1  1
1675  1  0  1  0  0  0  0  1  1  1  1  1
466   1  0  1  0  0  0  0  1  1  0  0  0
3612  1  0  1  0  0  0  0  1  1  0  0  0
23    1  0  0  1  1  1  1  1  1  1  1  1
334   1  0  0  1  1  1  1  1  1  1  1  1
336   1  0  0  1  1  1  1  1  1  1  1  1
674   1  0  0  1  1  1  1  1  1  1  1  1
1125  1  0  0  1  1  1  1  1  1  1  1  1
1616  1  0  0  1  1  1  1  1  1  1  1  1
3712  1  0  0  1  1  1  1  0  1  1  1  1
1186  1  0  0  1  1  1  1  0  1  1  1  0
3317  1  0  0  1  1  1  1  0  1  1  0  1
2772  1  0  0  1  1  1  1  0  0  0  1  1
3852  1  0  0  1  1  0  1  1  0  1  0  1
3651  1  0  0  1  1  0  1  0  1  1  0  1
2921  1  0  0  1  1  0  0  0  1  0  1  0
1272  1  0  0  1  0  1  1  1  1  1  1  1
1572  1  0  0  1  0  1  1  1  1  1  1  1
3524  1  0  0  1  0  1  1  0  0  0  1  1
1229  1  0  0  1  0  0  1  1  1  1  1  1
2252  1  0  0  1  0  0  1  1  1  1  1  1
43    1  0  0  1  0  0  0  0  1  1  1  1
585   1  0  0  0  1  1  1  1  1  1  1  1
1637  1  0  0  0  1  1  1  1  1  1  1  1
3674  1  0  0  0  1  1  1  0  1  1  1  1
1915  1  0  0  0  1  1  1  0  0  1  1  1
742   1  0  0  0  1  1  0  1  1  1  0  1
3482  1  0  0  0  1  1  0  0  1  1  1  0
608   1  0  0  0  1  0  1  0  0  1  1  1
379   1  0  0  0  0  1  1  0  1  1  1  1
1207  1  0  0  0  0  1  0  0  1  0  0  1
2361  1  0  0  0  0  0  1  0  1  1  1  1
84    0  1  1  1  1  1  1  1  1  1  1  1
914   0  1  1  1  1  1  1  1  1  1  1  1
1250  0  1  1  1  1  1  1  1  1  1  1  1
1293  0  1  1  1  1  1  1  1  1  1  1  1
1491  0  1  1  1  1  1  1  1  1  1  1  1
2380  0  1  1  1  1  1  1  1  1  1  1  1
2489  0  1  1  1  1  1  1  1  1  1  1  1
2793  0  1  1  1  1  1  1  1  1  1  1  1
3545  0  1  1  1  1  1  1  1  1  1  1  1
3546  0  1  1  1  1  1  1  1  1  1  1  1
2964  0  1  1  1  1  1  1  1  1  1  0  1
464   0  1  1  1  1  1  1  0  1  1  1  1
2682  0  1  1  1  1  1  1  0  1  1  1  1
527   0  1  1  1  1  1  0  1  1  1  1  1
762   0  1  1  1  1  1  0  1  1  1  1  1
872   0  1  1  1  1  1  0  1  1  1  1  1
2124  0  1  1  1  1  1  0  1  1  1  1  1
3400  0  1  1  1  1  1  0  1  1  1  1  1
314   0  1  1  1  1  0  1  1  1  1  1  1
422   0  1  1  1  1  0  1  1  1  1  1  1
1954  0  1  1  1  1  0  1  1  1  1  1  1
2253  0  1  1  1  1  0  1  1  1  1  1  1
3442  0  1  1  1  1  0  0  0  0  0  1  0
525   0  1  1  1  0  1  1  1  1  1  1  1
1655  0  1  1  1  0  1  1  1  1  1  1  1
3006  0  1  1  1  0  1  1  1  1  1  1  1
3736  0  1  1  1  0  1  1  1  1  1  1  1
3629  0  1  1  1  0  1  1  1  0  1  1  1
105   0  1  1  1  0  0  1  1  1  1  0  1
2166  0  1  1  1  0  0  0  1  1  0  1  1
312   0  1  1  0  1  1  1  1  1  1  1  1
442   0  1  1  0  1  1  1  1  1  1  1  1
1508  0  1  1  0  1  1  1  1  0  1  1  1
2575  0  1  1  0  1  1  1  1  0  1  1  1
632   0  1  1  0  1  1  1  0  1  1  1  1
2059  0  1  1  0  1  1  1  0  1  0  0  1
1089  0  1  1  0  1  0  0  0  1  1  1  1
355   0  1  1  0  0  1  1  1  1  1  1  1
290   0  1  1  0  0  1  1  0  1  1  1  1
3050  0  1  1  0  0  1  1  0  1  1  1  1
2855  0  1  1  0  0  1  0  0  1  1  1  1
764   0  1  1  0  0  0  1  0  0  1  1  1
3590  0  1  1  0  0  0  0  1  1  1  1  1
145   0  1  0  1  1  1  1  1  1  1  1  1
546   0  1  0  1  1  1  1  1  1  1  1  1
936   0  1  0  1  1  1  1  1  1  1  1  1
1338  0  1  0  1  1  1  1  1  1  1  1  1
3295  0  1  0  1  1  1  1  1  1  1  1  1
1028  0  1  0  1  1  1  1  1  1  0  0  1
1552  0  1  0  1  1  1  1  0  1  1  1  1
249   0  1  0  1  1  1  0  1  1  1  1  1
548   0  1  0  1  1  1  0  1  1  1  1  1
3379  0  1  0  1  1  1  0  1  1  1  1  1
3653  0  1  0  1  1  1  0  1  1  1  1  1
2211  0  1  0  1  1  1  0  0  0  1  1  1
1869  0  1  0  1  1  0  1  0  1  1  0  1
2471  0  1  0  1  1  0  1  0  0  1  1  1
1064  0  1  0  1  1  0  0  1  1  0  1  1
2491  0  1  0  1  1  0  0  1  1  0  1  0
3692  0  1  0  1  0  1  1  1  0  1  1  1
3315  0  1  0  1  0  1  1  0  1  1  0  1
3502  0  1  0  1  0  1  0  1  1  0  1  0
1360  0  1  0  1  0  0  1  1  1  1  1  1
420   0  1  0  1  0  0  1  0  0  1  1  1
1932  0  1  0  1  0  0  0  1  1  0  1  1
1270  0  1  0  0  1  1  1  1  1  1  1  1
3337  0  1  0  0  1  1  1  0  1  1  1  1
444   0  1  0  0  1  1  0  1  1  1  1  1
744   0  1  0  0  1  1  0  0  1  1  0  1
1400  0  1  0  0  1  1  0  0  0  1  1  1
3402  0  1  0  0  1  0  1  0  1  1  1  1
1635  0  1  0  0  1  0  0  1  0  1  1  1
3504  0  1  0  0  1  0  0  1  0  1  1  1
831   0  1  0  0  1  0  0  0  1  1  1  1
984   0  1  0  0  0  1  1  1  1  1  1  1
2987  0  1  0  0  0  1  1  0  1  1  1  1
1209  0  1  0  0  0  1  1  0  0  1  1  1
1315  0  1  0  0  0  0  1  0  0  1  1  1
2944  0  1  0  0  0  0  0  1  1  1  1  1
268   0  0  1  1  1  1  1  1  1  1  1  1
483   0  0  1  1  1  1  1  1  1  1  1  1
2144  0  0  1  1  1  1  1  1  1  1  1  1
2513  0  0  1  1  1  1  1  1  1  1  1  1
2552  0  0  1  1  1  1  1  1  1  1  1  1
2727  0  0  1  1  1  1  1  1  1  1  1  1
3028  0  0  1  1  1  1  1  1  1  1  1  1
3073  0  0  1  1  1  1  1  1  1  1  1  1
401   0  0  1  1  1  1  1  1  0  1  1  1
982   0  0  1  1  1  1  1  1  0  1  1  1
1763  0  0  1  1  1  1  1  1  0  1  1  1
3092  0  0  1  1  1  1  1  0  1  1  1  1
185   0  0  1  1  1  1  0  1  1  1  1  1
1110  0  0  1  1  1  0  1  1  1  1  1  1
1787  0  0  1  1  1  0  1  0  1  1  1  1
2817  0  0  1  1  1  0  1  0  1  0  1  1
399   0  0  1  1  0  1  1  1  1  1  1  1
503   0  0  1  1  0  1  1  1  1  1  1  1
1846  0  0  1  1  0  1  1  1  1  1  1  1
3771  0  0  1  1  0  1  1  0  1  1  1  1
2342  0  0  1  1  0  1  0  1  1  1  1  1
1615  0  0  1  1  0  1  0  1  1  1  0  1
2231  0  0  1  1  0  1  0  1  1  0  1  1
127   0  0  1  1  0  0  1  1  1  1  1  1
3273  0  0  1  1  0  0  1  1  1  0  1  1
1088  0  0  1  1  0  0  1  0  1  1  1  1
1469  0  0  1  1  0  0  1  0  0  1  1  1
1848  0  0  1  0  1  1  1  1  1  1  1  1
2598  0  0  1  0  1  1  1  1  1  1  1  1
1977  0  0  1  0  1  1  1  0  0  1  1  1
3149  0  0  1  0  1  1  1  0  0  1  0  1
870   0  0  1  0  1  0  1  1  1  1  1  1
1698  0  0  1  0  1  0  1  1  0  1  1  1
1720  0  0  1  0  1  0  1  0  1  1  0  1
2274  0  0  1  0  1  0  0  1  1  0  1  0
1677  0  0  1  0  1  0  0  0  1  0  1  0
2318  0  0  1  0  1  0  0  0  1  0  0  0
2923  0  0  1  0  1  0  0  0  0  0  1  1
1467  0  0  1  0  0  1  1  1  1  1  1  1
3356  0  0  1  0  0  0  1  1  1  1  1  1
63    0  0  0  1  1  1  1  1  1  1  1  1
652   0  0  0  1  1  1  1  1  1  1  1  1
696   0  0  0  1  1  1  1  1  1  1  1  1
829   0  0  0  1  1  1  1  1  1  1  1  1
916   0  0  0  1  1  1  1  1  1  1  1  1
2706  0  0  0  1  1  1  1  1  1  1  1  1
3293  0  0  0  1  1  1  1  1  1  1  1  1
654   0  0  0  1  1  1  1  0  1  0  1  1
3026  0  0  0  1  1  1  1  0  0  1  1  1
3463  0  0  0  1  1  1  1  0  0  1  1  1
1164  0  0  0  1  1  1  0  1  1  1  1  1
2839  0  0  0  1  1  1  0  1  1  1  1  1
3191  0  0  0  1  1  1  0  1  1  1  1  1
1005  0  0  0  1  1  1  0  1  1  1  1  0
3569  0  0  0  1  1  1  0  1  0  1  1  1
2078  0  0  0  1  1  0  1  1  1  1  1  1
22    0  0  0  1  1  0  0  1  1  1  1  1
2661  0  0  0  1  1  0  0  1  0  1  1  1
1913  0  0  0  1  1  0  0  0  1  0  1  0
698   0  0  0  1  0  1  1  1  1  1  0  1
1934  0  0  0  1  0  1  1  1  0  1  1  1
2942  0  0  0  1  0  1  1  1  0  1  1  1
3271  0  0  0  1  0  1  1  0  1  1  0  1
2229  0  0  0  1  0  1  0  1  1  1  1  1
2618  0  0  0  1  0  0  1  1  1  0  1  1
2774  0  0  0  1  0  0  1  0  1  1  1  1
1379  0  0  0  1  0  0  1  0  0  1  1  1
1530  0  0  0  1  0  0  0  0  1  0  1  0
292   0  0  0  0  1  1  1  1  1  1  1  1
1295  0  0  0  0  1  1  1  1  1  1  1  1
1808  0  0  0  0  1  1  1  1  0  1  1  1
2294  0  0  0  0  1  1  1  0  1  1  1  1
3090  0  0  0  0  1  1  1  0  1  1  1  1
2985  0  0  0  0  1  1  1  0  1  1  1  0
2340  0  0  0  0  1  1  1  0  0  1  1  1
128   0  0  0  0  1  1  0  1  1  1  1  1
2057  0  0  0  0  1  0  1  1  1  1  1  1
719   0  0  0  0  1  0  1  1  0  1  1  1
3171  0  0  0  0  1  0  1  1  0  0  1  1
2000  0  0  0  0  1  0  1  0  0  0  1  1
1998  0  0  0  0  1  0  0  0  1  1  1  1
1891  0  0  0  0  1  0  0  0  1  0  0  1
3111  0  0  0  0  1  0  0  0  0  0  1  0
144   0  0  0  0  0  1  1  1  0  1  1  1
2511  0  0  0  0  0  1  1  0  1  1  1  1
3126  0  0  0  0  0  1  1  0  0  1  1  1
569   0  0  0  0  0  1  0  1  0  1  1  1
3113  0  0  0  0  0  1  0  0  1  1  0  1
1447  0  0  0  0  0  0  1  1  1  1  1  1
2638  0  0  0  0  0  0  1  0  1  1  1  1
378   0  0  0  0  0  0  0  1  1  1  1  1
1593  0  0  0  0  0  0  0  1  1  1  1  1
3631  0  0  0  0  0  0  0  1  1  1  1  1
64    0  0  0  0  0  0  0  1  1  0  0  0
610   0  0  0  0  0  0  0  1  1  0  0  0
270   0  0  0  0  0  0  0  0  1  1  1  1
3526  0  0  0  0  0  0  0  0  0  1  0  1
3791  0  0  0  0  0  0  0  0  0  0  0  0
> image( z=t(res$dat.ordered) , y =1:N , x=1:I , xlab="Items"  , ylab="Persons")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("md.pattern.sirt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mirt.specify.partable")
> ### * mirt.specify.partable
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mirt.specify.partable
> ### Title: Specify or modify a Parameter Table in 'mirt'
> ### Aliases: mirt.specify.partable
> ### Keywords: mirt
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Modifying a parameter table for single group 
> #############################################################################
> 
> library(mirt)
Loading required package: stats4
Loading required package: lattice
> data(LSAT7,package="mirt")
> data <- mirt::expand.table(LSAT7)
> 
> mirt.partable <- mirt::mirt(data, 1, pars = "values")
> colnames(mirt.partable)
 [1] "group"      "item"       "class"      "name"       "parnum"    
 [6] "value"      "lbound"     "ubound"     "est"        "prior.type"
[11] "prior_1"    "prior_2"   
> ## > colnames(mirt.partable) [1] 'group' 'item' 'class' 'name' 'parnum' 'value' 
> ##   'lbound' 'ubound' 'est' 'prior.type' 'prior_1' 'prior_2'
> 
> # specify some values of item parameters
> value <- data.frame(d = c(0.7, -1, NA), a1 = c(1, 1.2, 1.3), g = c(NA, 0.25, 0.25))
> rownames(value) <- c("Item.1", "Item.4", "Item.3")
> 
> # fix some item paramters
> est1 <- data.frame(d = c(TRUE, NA), a1 = c(FALSE, TRUE))
> rownames(est1) <- c("Item.4", "Item.3")
> 
> # estimate all guessing parameters
> est2 <- data.frame(g = rep(TRUE, 5))
> rownames(est2) <- colnames(data)
> 
> # prior distributions
> prior.type <- data.frame(g = rep("norm", 4))
> rownames(prior.type) <- c("Item.1", "Item.2", "Item.4", "Item.5")
> prior_1 <- data.frame(g = rep(-1.38, 4))
> rownames(prior_1) <- c("Item.1", "Item.2", "Item.4", "Item.5")
> prior_2 <- data.frame(g = rep(0.5, 4))
> rownames(prior_2) <- c("Item.1", "Item.2", "Item.4", "Item.5")
> 
> # misspecify some entries
> rownames(prior_2)[c(3,2)] <- c("A" , "B")
> rownames(est1)[2] <- c("B")
> 
> # define complete list with parameter specification
> parlist <- list(value = value, est = est1, est = est2, prior.type = prior.type, 
+       prior_1 = prior_1, prior_2 = prior_2)
> 
> # modify parameter table
> mirt.specify.partable(mirt.partable, parlist)
*** Process group  all  - parameter  value 
*** Process group  all  - parameter  est 
  - Following items do not exist in parameter table:  B 
*** Process group  all  - parameter  est 
*** Process group  all  - parameter  prior.type 
*** Process group  all  - parameter  prior_1 
*** Process group  all  - parameter  prior_2 
  - Following items do not exist in parameter table:  A B 
   group   item     class   name parnum      value lbound ubound   est
1    all Item.1      dich     a1      1  1.0000000   -Inf    Inf  TRUE
2    all Item.1      dich      d      2  0.7000000   -Inf    Inf  TRUE
3    all Item.1      dich      g      3  0.0000000   -Inf    Inf  TRUE
4    all Item.1      dich      u      4  1.0000000   -Inf    Inf FALSE
5    all Item.2      dich     a1      5  0.8510000   -Inf    Inf  TRUE
6    all Item.2      dich      d      6  0.7998986   -Inf    Inf  TRUE
7    all Item.2      dich      g      7  0.0000000   -Inf    Inf  TRUE
8    all Item.2      dich      u      8  1.0000000   -Inf    Inf FALSE
9    all Item.3      dich     a1      9  1.3000000   -Inf    Inf  TRUE
10   all Item.3      dich      d     10  1.4650322   -Inf    Inf  TRUE
11   all Item.3      dich      g     11  0.2500000   -Inf    Inf  TRUE
12   all Item.3      dich      u     12  1.0000000   -Inf    Inf FALSE
13   all Item.4      dich     a1     13  1.2000000   -Inf    Inf FALSE
14   all Item.4      dich      d     14 -1.0000000   -Inf    Inf  TRUE
15   all Item.4      dich      g     15  0.2500000   -Inf    Inf  TRUE
16   all Item.4      dich      u     16  1.0000000   -Inf    Inf FALSE
17   all Item.5      dich     a1     17  0.8510000   -Inf    Inf  TRUE
18   all Item.5      dich      d     18  1.9787907   -Inf    Inf  TRUE
19   all Item.5      dich      g     19  0.0000000   -Inf    Inf  TRUE
20   all Item.5      dich      u     20  1.0000000   -Inf    Inf FALSE
21   all  GROUP GroupPars MEAN_1     21  0.0000000   -Inf    Inf FALSE
22   all  GROUP GroupPars COV_11     22  1.0000000  1e-04    Inf FALSE
   prior.type prior_1 prior_2
1        none     NaN     NaN
2        none     NaN     NaN
3        norm   -1.38     0.5
4        none     NaN     NaN
5        none     NaN     NaN
6        none     NaN     NaN
7        norm   -1.38     NaN
8        none     NaN     NaN
9        none     NaN     NaN
10       none     NaN     NaN
11       none     NaN     NaN
12       none     NaN     NaN
13       none     NaN     NaN
14       none     NaN     NaN
15       norm   -1.38     NaN
16       none     NaN     NaN
17       none     NaN     NaN
18       none     NaN     NaN
19       norm   -1.38     0.5
20       none     NaN     NaN
21       none     NaN     NaN
22       none     NaN     NaN
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mirt.specify.partable", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:mirt’, ‘package:lattice’, ‘package:stats4’

> nameEx("mirt.wrapper")
> ### * mirt.wrapper
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mirt.wrapper
> ### Title: Some Functions for Wrapping with the 'mirt' Package
> ### Aliases: mirt.wrapper mirt.wrapper.coef mirt.wrapper.posterior
> ###   mirt.wrapper.fscores mirt.wrapper.itemplot
> ###   IRT.irfprob.SingleGroupClass IRT.likelihood.SingleGroupClass
> ###   IRT.posterior.SingleGroupClass
> ### Keywords: mirt
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # A development version can be installed from GitHub
> ##D if (FALSE){ # default is set to FALSE, use the installed version
> ##D    library(devtools)
> ##D    devtools::install_github("philchalmers/mirt")
> ##D           }
> ##D # now, load mirt
> ##D library(mirt)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 1: Extracting item parameters and posterior LSAT data
> ##D #############################################################################
> ##D 
> ##D data(LSAT7, package="mirt")
> ##D data <- mirt::expand.table(LSAT7)
> ##D 
> ##D #*** Model 1: 3PL model for item 5 only, other items 2PL
> ##D mod1 <- mirt::mirt(data, 1, itemtype=c("2PL","2PL","2PL","2PL","3PL") , verbose=TRUE)
> ##D print(mod1)
> ##D summary(mod1)
> ##D # extracting coefficients
> ##D coef(mod1)
> ##D mirt.wrapper.coef(mod1)$coef
> ##D # extract parameter values in mirt
> ##D mirt::mod2values(mod1)
> ##D # extract posterior
> ##D post1 <- mirt.wrapper.posterior(mod1)
> ##D # extract item response functions
> ##D probs1 <- IRT.irfprob( mod1 )
> ##D str(probs1)
> ##D # extract individual likelihood
> ##D likemod1 <- IRT.likelihood( mod1 )
> ##D str(likemod1)
> ##D # extract individual posterior
> ##D postmod1 <- IRT.posterior( mod1 )
> ##D str(postmod1)
> ##D 
> ##D #*** Model 2: Confirmatory model with two factors
> ##D cmodel <- mirt::mirt.model("
> ##D         F1 = 1,4,5
> ##D         F2 = 2,3
> ##D         ")
> ##D mod2 <- mirt::mirt(data, cmodel , verbose=TRUE)
> ##D print(mod2)
> ##D summary(mod2)
> ##D # extract coefficients
> ##D coef(mod2)
> ##D mirt.wrapper.coef(mod2)$coef
> ##D # extract posterior
> ##D post2 <- mirt.wrapper.posterior(mod2)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Extracting item parameters and posterior for differering 
> ##D #            number of response catagories | Dataset Science
> ##D #############################################################################
> ##D 
> ##D data(Science,package="mirt")
> ##D library(psych)
> ##D psych::describe(Science)
> ##D 
> ##D # modify dataset
> ##D dat <- Science
> ##D dat[ dat[,1] > 3 ,1] <- 3
> ##D psych::describe(dat)
> ##D 
> ##D # estimate generalized partial credit model
> ##D mod1 <- mirt::mirt(dat, 1, itemtype="gpcm")
> ##D print(mod1)
> ##D # extract coefficients
> ##D coef(mod1)
> ##D mirt.wrapper.coef(mod1)$coef
> ##D # extract posterior
> ##D post1 <- mirt.wrapper.posterior(mod1)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 3: Multiple group model; simulated dataset from
> ##D #        mirt package
> ##D #############################################################################
> ##D 
> ##D #*** simulate data (copy from the multipleGroup manual site in mirt package)
> ##D set.seed(1234)
> ##D a <- matrix(c(abs(rnorm(5,1,.3)), rep(0,15),abs(rnorm(5,1,.3)),
> ##D           rep(0,15),abs(rnorm(5,1,.3))), 15, 3)
> ##D d <- matrix(rnorm(15,0,.7),ncol=1)
> ##D mu <- c(-.4, -.7, .1)
> ##D sigma <- matrix(c(1.21,.297,1.232,.297,.81,.252,1.232,.252,1.96),3,3)
> ##D itemtype <- rep("dich", nrow(a))
> ##D N <- 1000
> ##D dataset1 <- mirt::simdata(a, d, N, itemtype)
> ##D dataset2 <- mirt::simdata(a, d, N, itemtype, mu = mu, sigma = sigma)
> ##D dat <- rbind(dataset1, dataset2)
> ##D group <- c(rep("D1", N), rep("D2", N))
> ##D 
> ##D #group models
> ##D model <- mirt::mirt.model("
> ##D    F1 = 1-5
> ##D    F2 = 6-10
> ##D    F3 = 11-15
> ##D       ")
> ##D 
> ##D # separate analysis
> ##D mod_configural <- multipleGroup(dat, model, group = group , verbose=TRUE)
> ##D mirt.wrapper.coef(mod_configural)
> ##D 
> ##D # equal slopes (metric invariance)
> ##D mod_metric <- multipleGroup(dat, model, group = group, invariance=c("slopes") , 
> ##D                 verbose=TRUE)
> ##D mirt.wrapper.coef(mod_metric)
> ##D                   
> ##D # equal slopes and intercepts (scalar invariance)
> ##D mod_scalar <- multipleGroup(dat, model, group = group,  
> ##D     invariance=c("slopes","intercepts","free_means","free_varcov"), verbose=TRUE)
> ##D mirt.wrapper.coef(mod_scalar)
> ##D 
> ##D # full constraint
> ##D mod_fullconstrain <- multipleGroup(dat, model, group = group,  
> ##D     invariance=c("slopes", "intercepts") , verbose=TRUE )
> ##D mirt.wrapper.coef(mod_fullconstrain)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 4: Nonlinear item response model
> ##D #############################################################################
> ##D 
> ##D data(data.read)
> ##D dat <- data.read
> ##D # specify mirt model with some interactions
> ##D mirtmodel <- mirt.model("
> ##D    A = 1-4
> ##D    B = 5-8
> ##D    C = 9-12
> ##D    (A*B) = 4,8
> ##D    (C*C) = 9
> ##D    (A*B*C) = 12
> ##D    " )
> ##D # estimate model
> ##D res <- mirt::mirt( dat , mirtmodel , verbose=TRUE , technical=list(NCYCLES=3) )
> ##D # look at estimated parameters
> ##D mirt.wrapper.coef(res)
> ##D coef(res)
> ##D mirt::mod2values(res)
> ##D # model specification
> ##D res@model
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 5: Extracting factor scores
> ##D #############################################################################
> ##D 
> ##D data(data.read)
> ##D dat <- data.read
> ##D # define lavaan model and convert syntax to mirt
> ##D lavmodel <- "
> ##D     A=~ a*A1+a*A2+1.3*A3+A4       # set loading of A3 to 1.3
> ##D     B=~ B1+1*B2+b3*B3+B4
> ##D     C=~ c*C1+C2+c*C3+C4
> ##D     A1 | da*t1
> ##D     A3 | da*t1
> ##D     C4 | dg*t1
> ##D     B1 | 0*t1
> ##D     B3 | -1.4*t1                  # fix item threshold of B3 to -1.4
> ##D     A ~~ B                        # estimate covariance between A and B
> ##D     A ~~ .6 * C                   # fix covariance to .6
> ##D     B ~~ B                        # estimate variance of B
> ##D     A ~ .5*1                      # set mean of A to .5
> ##D     B ~ 1                         # estimate mean of B
> ##D     "
> ##D res <- lavaan2mirt( dat , lavmodel , verbose=TRUE , technical=list(NCYCLES=3) )
> ##D # estimated coefficients
> ##D mirt.wrapper.coef(res$mirt)
> ##D # extract factor scores
> ##D fres <- mirt.wrapper.fscores(res$mirt)
> ##D # look at factor scores
> ##D head( round(fres$person,2))
> ##D   ##     case    M EAP.Var1 SE.EAP.Var1 EAP.Var2 SE.EAP.Var2 EAP.Var3 SE.EAP.Var3 MLE.Var1
> ##D   ##   1    1 0.92     1.26        0.67     1.61        0.60     0.05        0.69     2.65
> ##D   ##   2    2 0.58     0.06        0.59     1.14        0.55    -0.80        0.56     0.00
> ##D   ##   3    3 0.83     0.86        0.66     1.15        0.55     0.48        0.74     0.53
> ##D   ##   4    4 1.00     1.52        0.67     1.57        0.60     0.73        0.76     2.65
> ##D   ##   5    5 0.50    -0.13        0.58     0.85        0.48    -0.82        0.55    -0.53
> ##D   ##   6    6 0.75     0.41        0.63     1.09        0.54     0.27        0.71     0.00
> ##D   ##     MLE.Var2 MLE.Var3 MAP.Var1 MAP.Var2 MAP.Var3
> ##D   ##   1     2.65    -0.53     1.06     1.59     0.00
> ##D   ##   2     1.06    -1.06     0.00     1.06    -1.06
> ##D   ##   3     1.06     2.65     1.06     1.06     0.53
> ##D   ##   4     2.65     2.65     1.59     1.59     0.53
> ##D   ##   5     0.53    -1.06    -0.53     0.53    -1.06
> ##D   ##   6     1.06     2.65     0.53     1.06     0.00
> ##D # EAP reliabilities
> ##D round(fres$EAP.rel,3)
> ##D   ##    Var1  Var2  Var3 
> ##D   ##   0.574 0.452 0.541 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mirt.wrapper", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mle.pcm.group")
> ### * mle.pcm.group
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mle.pcm.group
> ### Title: Maximum Likelihood Estimation of Person or Group Parameters in
> ###   the Generalized Partial Credit Model
> ### Aliases: mle.pcm.group
> ### Keywords: Person parameters Group parameters
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 1: Estimation of a group parameter for only one item per group
> ##D #############################################################################
> ##D 
> ##D data(data.si01)
> ##D dat <- data.si01
> ##D # item parameter estimation (partial credit model) in TAM
> ##D library(TAM)
> ##D mod <- TAM::tam.mml( dat[,2:3] , irtmodel="PCM")
> ##D # extract item difficulties
> ##D b <- matrix( mod$xsi$xsi , nrow=2 , byrow=TRUE )
> ##D # groupwise estimation
> ##D res1 <- mle.pcm.group( dat[,2:3] , b=b , group=dat$idgroup )
> ##D # individual estimation
> ##D res2 <- mle.pcm.group( dat[,2:3] , b=b  )
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Data Reading data.read
> ##D #############################################################################
> ##D 
> ##D data(data.read)
> ##D # estimate Rasch model
> ##D mod <- rasch.mml2( data.read )
> ##D score <- rowSums( data.read )
> ##D data.read <- data.read[ order(score) , ]
> ##D score <- score[ order(score) ]
> ##D # compare different epsilon-adjustments
> ##D res30 <- mle.pcm.group( data.read , b = matrix( mod$item$b , 12 , 1 ) ,
> ##D                adj_eps=.3 )$person
> ##D res10 <- mle.pcm.group( data.read , b = matrix( mod$item$b , 12 , 1 ) ,
> ##D              adj_eps=.1 )$person
> ##D res05 <- mle.pcm.group( data.read , b = matrix( mod$item$b , 12 , 1 ) ,
> ##D               adj_eps=.05 )$person
> ##D # plot different scorings
> ##D plot( score , res05$theta , type="l" , xlab="Raw score" , ylab=expression(theta[epsilon]),
> ##D          main="Scoring with different epsilon-adjustments")
> ##D lines( score , res10$theta , col=2 , lty=2 )
> ##D lines( score , res30$theta , col=4 , lty=3 )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mle.pcm.group", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("modelfit.sirt")
> ### * modelfit.sirt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: modelfit.sirt
> ### Title: Assessing Model Fit and Local Dependence by Comparing Observed
> ###   and Expected Item Pair Correlations
> ### Aliases: modelfit.sirt modelfit.cor.poly
> ### Keywords: Model fit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D #############################################################################
> ##D # EXAMPLE 1: Reading data
> ##D #############################################################################
> ##D data(data.read)
> ##D dat <- data.read
> ##D I <- ncol(dat)
> ##D 
> ##D #*** Model 1: Rasch model
> ##D mod1 <- rasch.mml2(dat)
> ##D fmod1 <- modelfit.sirt( mod1 )
> ##D summary(fmod1)
> ##D 
> ##D #*** Model 1b: Rasch model in TAM package
> ##D library(TAM)
> ##D mod1b <- TAM::tam.mml(dat)
> ##D fmod1b <- modelfit.sirt( mod1b )
> ##D summary(fmod1b)
> ##D 
> ##D #*** Model 2: Rasch model with smoothed distribution
> ##D mod2 <- rasch.mml2( dat , distribution.trait="smooth3" )
> ##D fmod2 <- modelfit.sirt( mod2 )
> ##D summary(fmod2 )
> ##D 
> ##D #*** Model 3: 2PL model
> ##D mod3 <- rasch.mml2( dat , distribution.trait="normal" , est.a=1:I )
> ##D fmod3 <- modelfit.sirt( mod3 )
> ##D summary(fmod3 )
> ##D 
> ##D #*** Model 3: 2PL model in TAM package
> ##D mod3b <- TAM::tam.mml.2pl( dat )
> ##D fmod3b <- modelfit.sirt(mod3b)
> ##D summary(fmod3b)
> ##D # model fit in TAM package
> ##D tmod3b <- TAM::tam.modelfit(mod3b)
> ##D summary(tmod3b)
> ##D # model fit in mirt package
> ##D library(mirt)
> ##D mmod3b <- tam2mirt(mod3b)   # convert to mirt object
> ##D mirt::M2(mmod3b$mirt)         # global fit statistic
> ##D mirt::residuals( mmod3b$mirt , type="LD")  # local dependence statistics
> ##D 
> ##D #*** Model 4: 3PL model with equal guessing parameter
> ##D mod4 <- TAM::rasch.mml2( dat, distribution.trait="smooth3", est.a=1:I, est.c=rep(1,I) )
> ##D fmod4 <- modelfit.sirt( mod4 )
> ##D summary(fmod4 )
> ##D 
> ##D #*** Model 5: Latent class model with 2 classes
> ##D mod5 <- rasch.mirtlc( dat , Nclasses=2 )
> ##D fmod5 <- modelfit.sirt( mod5 )
> ##D summary(fmod5 )
> ##D 
> ##D #*** Model 6: Rasch latent class model with 3 classes
> ##D mod6 <- rasch.mirtlc( dat , Nclasses=3 , modeltype="MLC1", mmliter=100)
> ##D fmod6 <- modelfit.sirt( mod6 )
> ##D summary(fmod6 )
> ##D 
> ##D #*** Model 7: PML estimation
> ##D mod7 <- rasch.pml3( dat )
> ##D fmod7 <- modelfit.sirt( mod7 )
> ##D summary(fmod7 )
> ##D 
> ##D #*** Model 8: PML estimation
> ##D #      Modelling error correlations: 
> ##D #          joint residual correlations for each item cluster
> ##D error.corr <- diag(1,ncol(dat))
> ##D itemcluster <- rep( 1:4 ,each=3 )
> ##D for ( ii in 1:3){
> ##D     ind.ii <- which( itemcluster == ii )
> ##D     error.corr[ ind.ii , ind.ii ] <- ii
> ##D         }
> ##D mod8 <- rasch.pml3( dat , error.corr = error.corr )
> ##D fmod8 <- modelfit.sirt( mod8 )
> ##D summary(fmod8 )
> ##D 
> ##D #*** Model 9: 1PL in smirt
> ##D Qmatrix <- matrix( 1 , nrow=I , ncol=1 )
> ##D mod9 <- smirt( dat , Qmatrix=Qmatrix )
> ##D fmod9 <- modelfit.sirt( mod9 )
> ##D summary(fmod9 )
> ##D 
> ##D #*** Model 10: 3-dimensional Rasch model in NOHARM 
> ##D noharm.path <- "c:/NOHARM"
> ##D Q <- matrix( 0 , nrow=12 , ncol=3 )
> ##D Q[ cbind(1:12 , rep(1:3,each=4) ) ] <- 1
> ##D rownames(Q) <- colnames(dat)
> ##D colnames(Q) <- c("A","B","C")
> ##D # covariance matrix
> ##D P.pattern <- matrix( 1 , ncol=3 , nrow=3 )
> ##D P.init <- 0.8+0*P.pattern
> ##D diag(P.init) <- 1
> ##D # loading matrix
> ##D F.pattern <- 0*Q
> ##D F.init <- Q
> ##D # estimate model
> ##D mod10 <- R2noharm( dat = dat , model.type="CFA" , F.pattern = F.pattern , 
> ##D             F.init = F.init , P.pattern = P.pattern , P.init = P.init , 
> ##D             writename = "ex4e" , noharm.path = noharm.path  , dec ="," )
> ##D fmod10 <- modelfit.sirt( mod10 )
> ##D summary(fmod10)
> ##D 
> ##D #*** Model 11: Rasch model in mirt package
> ##D library(mirt)
> ##D mod11 <- mirt::mirt(dat , 1, itemtype="Rasch",verbose=TRUE)
> ##D fmod11 <- modelfit.sirt( mod11 )
> ##D summary(fmod11)
> ##D # model fit in mirt package
> ##D mirt::M2(mod11)
> ##D mirt::residuals(mod11)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("modelfit.sirt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("monoreg.rowwise")
> ### * monoreg.rowwise
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: monoreg.rowwise
> ### Title: Monotone Regression for Rows or Columns in a Matrix
> ### Aliases: monoreg.rowwise monoreg.colwise
> ### Keywords: Monotone regression Isotone regression
> 
> ### ** Examples
> 
> y <- c(22.5 , 23.33 , 20.83 , 24.25 )
> w <- c( 3,3,3,2)
> # define matrix input
> yM <- matrix( 0 , nrow=2 , ncol=4 )
> wM <- yM
> yM[1,] <- yM[2,] <- y
> wM[1,] <- w
> wM[2,] <- c(1,3,4, 3 )
> 
> # fit rowwise monotone regression
> monoreg.rowwise( yM , wM )
         [,1]     [,2]     [,3]  [,4]
[1,] 22.22000 22.22000 22.22000 24.25
[2,] 21.97625 21.97625 21.97625 24.25
> # compare results with monoreg function from fdrtool package
> ## Not run: 
> ##D library(fdrtool)
> ##D fdrtool::monoreg(x=yM[1,] , w=wM[1,])$yf
> ##D fdrtool::monoreg(x=yM[2,] , w=wM[2,])$yf
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("monoreg.rowwise", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("nedelsky.sim")
> ### * nedelsky.sim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: nedelsky-methods
> ### Title: Functions for the Nedelsky Model
> ### Aliases: nedelsky.sim nedelsky.latresp nedelsky.irf
> ### Keywords: Nedelsky model
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 1: Simulated data according to the Nedelsky model
> ##D #############################################################################
> ##D 
> ##D #*** simulate data
> ##D set.seed(123)
> ##D I <- 20          # number of items
> ##D b <- matrix(NA,I,ncol=3)
> ##D b[,1] <- -.5 + runif( I , -.75 , .75 )
> ##D b[,2] <- -1.5 + runif( I , -.75 , .75 )
> ##D b[,3] <- -2.5 + runif( I , -.75 , .75 )
> ##D K <- 3           # number of distractors
> ##D N <- 2000        # number of persons
> ##D # apply simulation function
> ##D dat <- nedelsky.sim( theta = rnorm(N,sd=1.2) , b=b )
> ##D 
> ##D #*** latent response patterns
> ##D K <- 3
> ##D combis <- nedelsky.latresp(K=3)
> ##D 
> ##D #*** defining the Nedelky item response function for estimation in mirt
> ##D par <- c( 3  , rep(-1,K) , 1 , rep(1,K+1) ,1)
> ##D names(par) <- c("K" , paste0("b",1:K) , "a" , paste0("tau" , 0:K) ,"thdim")
> ##D est <- c( FALSE , rep(TRUE,K) , rep(FALSE , K+1 + 2 ) )
> ##D names(est) <- names(par)
> ##D nedelsky.icc <- function( par , Theta , ncat ){
> ##D      K <- par[1]
> ##D      b <- par[ 1:K + 1]
> ##D      a <- par[ K+2]
> ##D      tau <- par[1:(K+1) + (K+2) ]
> ##D      thdim <- par[ K+2+K+1 +1 ]
> ##D      probs <- nedelsky.irf( Theta , K=K , b=b , a=a , tau=tau , combis , 
> ##D                     thdim=thdim  )$probs
> ##D      return(probs)
> ##D             }
> ##D name <- "nedelsky"
> ##D # create item response function
> ##D nedelsky.itemfct <- mirt::createItem(name, par=par, est=est, P=nedelsky.icc)
> ##D 
> ##D #*** define model in mirt
> ##D mirtmodel <- mirt::mirt.model("
> ##D            F1 = 1-20
> ##D            COV = F1*F1
> ##D            # define some prior distributions
> ##D            PRIOR = (1-20,b1 ,norm,-1,2),(1-20,b2 ,norm,-1,2),
> ##D                    (1-20,b3 ,norm,-1,2)
> ##D         " )
> ##D 
> ##D itemtype <- rep("nedelsky" , I )
> ##D customItems <- list("nedelsky"= nedelsky.itemfct)
> ##D # define parameters to be estimated
> ##D mod1.pars <- mirt::mirt(dat, mirtmodel , itemtype=itemtype , 
> ##D                    customItems=customItems, pars = "values")                
> ##D # estimate model
> ##D mod1 <- mirt::mirt(dat,mirtmodel , itemtype=itemtype , customItems=customItems, 
> ##D                pars = mod1.pars , verbose=TRUE  )
> ##D # model summaries
> ##D print(mod1)                
> ##D summary(mod1)
> ##D mirt.wrapper.coef( mod1 )$coef
> ##D mirt.wrapper.itemplot(mod1 ,ask=TRUE)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Multiple choice dataset data.si06
> ##D #############################################################################
> ##D 
> ##D data(data.si06)
> ##D dat <- data.si06
> ##D 
> ##D #*** create latent responses
> ##D combis <- nedelsky.latresp(K)
> ##D I <- ncol(dat)
> ##D #*** define item response function
> ##D K <- 3
> ##D par <- c( 3  , rep(-1,K) , 1 , rep(1,K+1) ,1)
> ##D names(par) <- c("K" , paste0("b",1:K) , "a" , paste0("tau" , 0:K) ,"thdim")
> ##D est <- c( FALSE , rep(TRUE,K) , rep(FALSE , K+1 + 2 ) )
> ##D names(est) <- names(par)
> ##D nedelsky.icc <- function( par , Theta , ncat ){
> ##D      K <- par[1]
> ##D      b <- par[ 1:K + 1]
> ##D      a <- par[ K+2]
> ##D      tau <- par[1:(K+1) + (K+2) ]
> ##D      thdim <- par[ K+2+K+1 +1 ]
> ##D      probs <- nedelsky.irf( Theta , K=K , b=b , a=a , tau=tau , combis , 
> ##D                     thdim=thdim  )$probs
> ##D      return(probs)
> ##D             }
> ##D name <- "nedelsky"
> ##D # create item response function
> ##D nedelsky.itemfct <- mirt::createItem(name, par=par, est=est, P=nedelsky.icc)
> ##D 
> ##D #*** define model in mirt
> ##D mirtmodel <- mirt::mirt.model("
> ##D            F1 = 1-14
> ##D            COV = F1*F1
> ##D            PRIOR = (1-14,b1 ,norm,-1,2),(1-14,b2 ,norm,-1,2),
> ##D                    (1-14,b3 ,norm,-1,2)
> ##D         " )
> ##D 
> ##D itemtype <- rep("nedelsky" , I )
> ##D customItems <- list("nedelsky"= nedelsky.itemfct)
> ##D # define parameters to be estimated
> ##D mod1.pars <- mirt::mirt(dat, mirtmodel , itemtype=itemtype , 
> ##D                    customItems=customItems, pars = "values")                
> ##D 
> ##D #*** estimate model
> ##D mod1 <- mirt::mirt(dat,mirtmodel , itemtype=itemtype , customItems=customItems, 
> ##D                pars = mod1.pars , verbose=TRUE )
> ##D #*** summaries                
> ##D print(mod1)                
> ##D summary(mod1)
> ##D mirt.wrapper.coef( mod1 )$coef
> ##D mirt.wrapper.itemplot(mod1 ,ask=TRUE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("nedelsky.sim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("noharm.sirt")
> ### * noharm.sirt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: noharm.sirt
> ### Title: NOHARM Model in R
> ### Aliases: noharm.sirt summary.noharm.sirt plot.noharm.sirt
> ### Keywords: NOHARM summary plot
> 
> ### ** Examples
> 
> #############################################################################
> # SIMULATED EXAMPLE 1: Two-dimensional IRT model with 10 items
> #############################################################################
> 		
> #**** data simulation
> set.seed(9776)
> N <- 3400 # sample size
> # define difficulties
> f0 <- c( .5 , .25 , -.25 , -.5 , 0 , -.5 , -.25 , .25 , .5 , 0 )
> I <- length(f0)
> # define loadings
> f1 <- matrix( 0 , I , 2 )
> f1[ 1:5,1] <- c(.8,.7,.6,.5 , .5)
> f1[ 6:10 ,2] <- c(.8,.7,.6,.5 , .5 )
> # covariance matrix
> Pval <- matrix( c(1,.5,.5,1) , 2 , 2 )
> # simulate theta
> library(MASS)
> theta <- MASS::mvrnorm(N , mu=c(0,0) , Sigma = Pval )
> # simulate item responses
> dat <- matrix( NA , N , I )
> for (ii in 1:I){ # ii <- 1
+     dat[,ii] <- 1*(pnorm(f0[ii]+theta[,1]*f1[ii,1]+theta[,2]*f1[ii,2])>runif(N))
+         }
> colnames(dat) <- paste0("I" , 1:I)
> 
> #**** Model 1: Two-dimensional CFA with estimated item loadings 
> # define pattern matrices
> Pval <- .3+0*Pval
> Ppatt <- 1*(Pval>0)
> diag(Ppatt) <- 0
> diag(Pval) <- 1
> Fval <- .7 * ( f1>0)
> Fpatt <- 1 * ( Fval > 0 )
> # estimate model
> mod1 <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval )
> summary(mod1)
------------------------------------------------- 
Function 'noharm.sirt' | 2015-06-13 13:24:10 
sirt 1.7-0 (2015-06-05)
------------------------------------------------- 

Multidimensional Confirmatory Factor Analysis
NOHARM approximation

Number of Observations: 3400 
Number of Items       : 10 
Number of Dimensions  : 2 
Number of Iterations  : 20 
Tanaka Index          : 0.99988 
RMSR                  : 0.0032 

Number of Used Item Pairs      : 45 
Number of Estimated Parameters : 21 
       # Thresholds            : 10 
       # Loadings              : 10 
       # Variances/Covariances : 1 
       # Residual Correlations : 0 

Chi Square Statistic of Gessaroli & De Champlain (1996)

Chi2                           : 56.445 
Degrees of Freedom (df)        : 34 
p(Chi2,df)                     : 0.009 
Chi2 / df                      : 1.66 
RMSEA                          : 0.014 

Green-Yang Reliability Omega Total : 0.593 

Factor Covariance Matrix
      F1    F2
F1 1.000 0.467
F2 0.467 1.000

Factor Correlation Matrix
      F1    F2
F1 1.000 0.467
F2 0.467 1.000

Item Parameters - Latent Trait Model (THETA) Parametrization
 Loadings, Constants, Asymptotes and Decriptives

       F1    F2 final.constant lower upper item.variance    N     p
I1  0.758 0.000          0.528     0     1         1.575 3400 0.663
I2  0.744 0.000          0.296     0     1         1.554 3400 0.594
I3  0.630 0.000         -0.230     0     1         1.397 3400 0.423
I4  0.545 0.000         -0.475     0     1         1.297 3400 0.338
I5  0.502 0.000         -0.012     0     1         1.252 3400 0.496
I6  0.000 0.673         -0.488     0     1         1.452 3400 0.343
I7  0.000 0.771         -0.289     0     1         1.594 3400 0.409
I8  0.000 0.561          0.229     0     1         1.315 3400 0.579
I9  0.000 0.522          0.493     0     1         1.272 3400 0.669
I10 0.000 0.520         -0.032     0     1         1.271 3400 0.489

Item Parameters - Common Factor (DELTA) Parametrization
 Loadings, Thresholds, Uniquenesses and Asymptotes

       F1    F2 threshold lower upper uniqueness
I1  0.604 0.000    -0.421     0     1      0.635
I2  0.597 0.000    -0.237     0     1      0.644
I3  0.533 0.000     0.194     0     1      0.716
I4  0.478 0.000     0.417     0     1      0.771
I5  0.449 0.000     0.010     0     1      0.798
I6  0.000 0.558     0.405     0     1      0.688
I7  0.000 0.611     0.229     0     1      0.627
I8  0.000 0.489    -0.200     0     1      0.760
I9  0.000 0.463    -0.437     0     1      0.786
I10 0.000 0.461     0.029     0     1      0.787
> # EAP ability estimates
> pmod1 <- R2noharm.EAP(mod1 , theta.k = seq(-4,4,len=10) )
EAP Reliabilities:
[1] 0.546 0.532
> # model fit
> summary( modelfit.sirt( mod1 ))
Test of Global Model Fit
       type   value p
1   max(X2) 2.84177 1
2 abs(fcor) 0.02889 1

Fit Statistics
                    est
MADcor          0.01097
SRMSR           0.01355
100*MADRESIDCOV 0.25862
MADQ3           0.06177
MADaQ3          0.03885
> 
> # estimate model based on tetrachoric correlations
> mod1b <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval , 
+             modesttype=2)
> summary(mod1b)
------------------------------------------------- 
Function 'noharm.sirt' | 2015-06-13 13:24:11 
sirt 1.7-0 (2015-06-05)
------------------------------------------------- 

Multidimensional Confirmatory Factor Analysis
Estimation based on tetrachoric correlations

Number of Observations: 3400 
Number of Items       : 10 
Number of Dimensions  : 2 
Number of Iterations  : 23 

Number of Used Item Pairs      : 45 
Number of Estimated Parameters : 21 
       # Thresholds            : 10 
       # Loadings              : 10 
       # Variances/Covariances : 1 
       # Residual Correlations : 0 

Green-Yang Reliability Omega Total : 0.587 

Factor Covariance Matrix
     F1   F2
F1 1.00 0.47
F2 0.47 1.00

Factor Correlation Matrix
     F1   F2
F1 1.00 0.47
F2 0.47 1.00

Item Parameters - Latent Trait Model (THETA) Parametrization
 Loadings, Constants, Asymptotes and Decriptives

       F1    F2 final.constant lower upper item.variance    N     p
I1  0.758 0.000          0.528     0     1         1.575 3400 0.663
I2  0.732 0.000          0.294     0     1         1.536 3400 0.594
I3  0.624 0.000         -0.229     0     1         1.389 3400 0.423
I4  0.530 0.000         -0.472     0     1         1.281 3400 0.338
I5  0.496 0.000         -0.012     0     1         1.247 3400 0.496
I6  0.000 0.640         -0.481     0     1         1.409 3400 0.343
I7  0.000 0.765         -0.288     0     1         1.586 3400 0.409
I8  0.000 0.554          0.228     0     1         1.307 3400 0.579
I9  0.000 0.520          0.493     0     1         1.270 3400 0.669
I10 0.000 0.516         -0.032     0     1         1.266 3400 0.489

Item Parameters - Common Factor (DELTA) Parametrization
 Loadings, Thresholds, Uniquenesses and Asymptotes

       F1    F2 threshold lower upper uniqueness
I1  0.604 0.000    -0.421     0     1      0.635
I2  0.591 0.000    -0.237     0     1      0.651
I3  0.529 0.000     0.194     0     1      0.720
I4  0.468 0.000     0.417     0     1      0.781
I5  0.445 0.000     0.010     0     1      0.802
I6  0.000 0.539     0.405     0     1      0.710
I7  0.000 0.608     0.229     0     1      0.631
I8  0.000 0.485    -0.200     0     1      0.765
I9  0.000 0.461    -0.437     0     1      0.787
I10 0.000 0.458     0.029     0     1      0.790
> 
> ## Not run: 
> ##D #**** Model 2: Two-dimensional CFA with correlated residuals
> ##D # define pattern matrix for residual correlation
> ##D Psipatt <- 0*diag(I)
> ##D Psipatt[1,2] <- 1
> ##D Psival <- 0*Psipatt
> ##D # estimate model
> ##D mod2 <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval ,
> ##D             Psival=Psival , Psipatt=Psipatt )
> ##D summary(mod2)
> ##D 
> ##D #**** Model 3: Two-dimensional Rasch model
> ##D # pattern matrices
> ##D Fval <- matrix(0,10,2)
> ##D Fval[1:5,1] <- Fval[6:10,2] <- 1
> ##D Fpatt <- 0*Fval
> ##D Ppatt <- Pval <- matrix(1,2,2)
> ##D Pval[1,2] <- Pval[2,1] <- 0
> ##D # estimate model
> ##D mod3 <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval )
> ##D summary(mod3)
> ##D # model fit
> ##D summary( modelfit.sirt( mod3 ))
> ##D 
> ##D #** compare fit with NOHARM
> ##D noharm.path <- "c:/NOHARM"
> ##D P.pattern <- Ppatt ; P.init <- Pval
> ##D F.pattern <- Fpatt ; F.init <- Fval
> ##D mod3b <- R2noharm( dat = dat , model.type="CFA" ,  
> ##D              F.pattern = F.pattern , F.init = F.init , P.pattern = P.pattern ,
> ##D              P.init = P.init , writename = "example_sim_2dim_rasch" , 
> ##D              noharm.path = noharm.path  , dec = "," )
> ##D summary(mod3b)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: data.read
> ##D #############################################################################
> ##D 
> ##D data(data.read)
> ##D dat <- data.read
> ##D I <- ncol(dat)
> ##D 
> ##D #**** Model 1: Unidimensional Rasch model
> ##D Fpatt <- matrix( 0 , I , 1 )
> ##D Fval <- 1 + 0*Fpatt
> ##D Ppatt <- Pval <- matrix(1,1,1)
> ##D # estimate model
> ##D mod1 <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval )
> ##D summary(mod1)
> ##D plot(mod1)	# semPaths plot
> ##D 
> ##D #**** Model 2: Rasch model in which item pairs within a testlet are excluded
> ##D wgtm <- matrix( 1 , I , I )
> ##D wgtm[1:4,1:4] <- wgtm[5:8,5:8] <- wgtm[ 9:12, 9:12] <- 0
> ##D # estimation
> ##D mod2 <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval , wgtm=wgtm)
> ##D summary(mod2)
> ##D 
> ##D #**** Model 3: Rasch model with correlated residuals
> ##D Psipatt <- Psival <- 0*diag(I)
> ##D Psipatt[1:4,1:4] <- Psipatt[5:8,5:8] <- Psipatt[ 9:12, 9:12] <- 1
> ##D diag(Psipatt) <- 0
> ##D Psival <- .6*(Psipatt>0)
> ##D # estimation
> ##D mod3 <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval ,
> ##D             Psival=Psival , Psipatt=Psipatt )
> ##D summary(mod3)
> ##D # allow only positive residual correlations
> ##D mod3b <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval ,
> ##D             Psival=Psival , Psipatt=Psipatt , pos.residcorr=TRUE)
> ##D summary(mod3b)
> ##D plot(mod3 , fade=FALSE)
> ##D 
> ##D #**** Model 4: Rasch testlet model
> ##D Fval <- Fpatt <- matrix( 0 , I , 4 )
> ##D Fval[,1] <- Fval[1:4,2] <- Fval[5:8,3] <- Fval[9:12,4 ] <- 1
> ##D Ppatt <- Pval <- diag(4)
> ##D colnames(Ppatt) <- c("g" , "A", "B","C")
> ##D Pval <- .5*Pval
> ##D # estimation
> ##D mod4 <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval  )
> ##D summary(mod4)
> ##D # allow only positive variance entries
> ##D mod4b <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval ,
> ##D                pos.variance=TRUE )
> ##D summary(mod4b)
> ##D 
> ##D #**** Model 5: Bifactor model
> ##D Fval <- matrix( 0 , I , 4 )
> ##D Fval[,1] <- Fval[1:4,2] <- Fval[5:8,3] <- Fval[9:12,4 ] <- .6
> ##D Fpatt <- 1 * ( Fval > 0 )
> ##D Pval <- diag(4) 
> ##D Ppatt <- 0*Pval
> ##D colnames(Ppatt) <- c("g" , "A", "B","C")
> ##D # estimation
> ##D mod5 <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval  )
> ##D summary(mod5)
> ##D # allow only positive loadings
> ##D mod5b <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval ,
> ##D               pos.loading=TRUE )                        
> ##D summary(mod5b)
> ##D summary( modelfit.sirt(mod5b))
> ##D plot(x= mod5b ,what="stand" ,  ThreshAtSide=TRUE , fade=FALSE , residuals= TRUE )
> ##D 
> ##D #**** Model 6: 3-dimensional Rasch model
> ##D Fval <- matrix( 0 , I , 3 )
> ##D Fval[1:4,1] <- Fval[5:8,2] <- Fval[9:12,3 ] <- 1
> ##D Fpatt <- 0*Fval
> ##D Pval <- .6*diag(3) 
> ##D diag(Pval) <- 1
> ##D Ppatt <- 1+0*Pval
> ##D colnames(Ppatt) <- c("A", "B","C")
> ##D # estimation
> ##D mod6 <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval  )
> ##D summary(mod6)
> ##D summary( modelfit.sirt(mod6) )  # model fit
> ##D plot(x= mod6 ,what="stand" , edge.label.cex=.75 , ThreshAtSide=TRUE , 
> ##D      fixedStyle = c("black",1) , freeStyle=c("black",1) , residuals= TRUE )
> ##D 
> ##D #**** Model 7: 3-dimensional 2PL model
> ##D Fval <- matrix( 0 , I , 3 )
> ##D Fval[1:4,1] <- Fval[5:8,2] <- Fval[9:12,3 ] <- 1
> ##D Fpatt <- Fval
> ##D Pval <- .6*diag(3) 
> ##D diag(Pval) <- 1
> ##D Ppatt <- 1+0*Pval
> ##D diag(Ppatt) <- 0
> ##D colnames(Ppatt) <- c("A", "B","C")
> ##D # estimation
> ##D mod7 <- noharm.sirt( dat=dat , Ppatt=Ppatt,Fpatt=Fpatt , Fval=Fval , Pval=Pval  )
> ##D summary(mod7)
> ##D summary( modelfit.sirt(mod7) )
> ##D plot(x= mod7 ,what="est" , edge.label.cex=.75 , ThreshAtSide=TRUE , fade=FALSE ,
> ##D       residuals= TRUE )
> ##D 
> ##D #**** Model 8: Exploratory factor analysis with 3 dimensions
> ##D # estimation
> ##D mod8 <- noharm.sirt( dat=dat , dimensions=3  )
> ##D summary(mod8)
> ##D plot(mod8)   
> ##D # plot only standardized loadings larger than .40
> ##D plot(mod8 , efa.load.min=.4 ) 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("noharm.sirt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("np.dich")
> ### * np.dich
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: np.dich
> ### Title: Nonparametric Estimation of Item Response Functions
> ### Aliases: np.dich
> ### Keywords: Nonparametric item response theory
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Reading dataset
> #############################################################################
> data( data.read )
> dat <- data.read
> 
> # estimate Rasch model
> mod <- rasch.mml2( dat )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:11 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:24:11 
   Deviance = 3942.478 | Deviance change = 13.465952
    Maximum b parameter change =  0.054894  
...........................................................
Iteration 3     2015-06-13 13:24:11 
   Deviance = 3940.2892 | Deviance change = 2.188817
    Maximum b parameter change =  0.042995  
...........................................................
Iteration 4     2015-06-13 13:24:11 
   Deviance = 3939.4559 | Deviance change = 0.833271
    Maximum b parameter change =  0.022889  
...........................................................
Iteration 5     2015-06-13 13:24:11 
   Deviance = 3939.0706 | Deviance change = 0.38535
    Maximum b parameter change =  0.015712  
...........................................................
Iteration 6     2015-06-13 13:24:11 
   Deviance = 3938.8854 | Deviance change = 0.185235
    Maximum b parameter change =  0.010687  
...........................................................
Iteration 7     2015-06-13 13:24:11 
   Deviance = 3938.7952 | Deviance change = 0.090117
    Maximum b parameter change =  0.007515  
...........................................................
Iteration 8     2015-06-13 13:24:11 
   Deviance = 3938.7511 | Deviance change = 0.044171
    Maximum b parameter change =  0.005289  
...........................................................
Iteration 9     2015-06-13 13:24:11 
   Deviance = 3938.7293 | Deviance change = 0.021762
    Maximum b parameter change =  0.003736  
...........................................................
Iteration 10     2015-06-13 13:24:11 
   Deviance = 3938.7186 | Deviance change = 0.010757
    Maximum b parameter change =  0.00264  
...........................................................
Iteration 11     2015-06-13 13:24:11 
   Deviance = 3938.7132 | Deviance change = 0.005327
    Maximum b parameter change =  0.001867  
...........................................................
Iteration 12     2015-06-13 13:24:11 
   Deviance = 3938.7106 | Deviance change = 0.002639
    Maximum b parameter change =  0.001321  
...........................................................
Iteration 13     2015-06-13 13:24:11 
   Deviance = 3938.7093 | Deviance change = 0.001306
    Maximum b parameter change =  0.000934  
...........................................................
Iteration 14     2015-06-13 13:24:11 
   Deviance = 3938.7086 | Deviance change = 0.000645
    Maximum b parameter change =  0.000661  
...........................................................
Iteration 15     2015-06-13 13:24:11 
   Deviance = 3938.7083 | Deviance change = 0.000317
    Maximum b parameter change =  0.000468  
...........................................................
Iteration 16     2015-06-13 13:24:11 
   Deviance = 3938.7082 | Deviance change = 0.000155
    Maximum b parameter change =  0.000331  
...........................................................
Iteration 17     2015-06-13 13:24:11 
   Deviance = 3938.7081 | Deviance change = 7.5e-05
    Maximum b parameter change =  0.000234  
...........................................................
Iteration 18     2015-06-13 13:24:11 
   Deviance = 3938.7081 | Deviance change = 3.5e-05
    Maximum b parameter change =  0.000166  
...........................................................
Iteration 19     2015-06-13 13:24:11 
   Deviance = 3938.708 | Deviance change = 1.6e-05
    Maximum b parameter change =  0.000117  
...........................................................
Iteration 20     2015-06-13 13:24:11 
   Deviance = 3938.708 | Deviance change = 7e-06
    Maximum b parameter change =  8.3e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:11 
End: 2015-06-13 13:24:11 
Time difference of 0.118526 secs
Difference: 0.118526 
------------------------------------------------------------
> # WLE estimation
> wle1 <- wle.rasch( dat=dat , b =mod$item$b )$theta
WLE Reliability = 0.567 
> # nonparametric function estimation
> np1 <- np.dich( dat=dat, theta= wle1, thetagrid = seq(-2.5 , 2.5 , len=100 ) )
Nonparametric ICC Estimation for Dichotomous Data  
12 Items 
> print( str(np1))
List of 7
 $ dat         :'data.frame':	328 obs. of  12 variables:
  ..$ A1: num [1:328] 1 1 1 1 1 1 1 1 1 1 ...
  ..$ A2: num [1:328] 1 1 1 1 0 1 1 1 1 1 ...
  ..$ A3: num [1:328] 1 0 0 1 0 0 0 1 1 1 ...
  ..$ A4: num [1:328] 1 0 1 1 1 0 0 0 1 0 ...
  ..$ B1: num [1:328] 1 1 1 1 0 1 0 1 1 0 ...
  ..$ B2: num [1:328] 1 0 0 1 0 0 0 1 1 1 ...
  ..$ B3: num [1:328] 1 1 1 1 1 1 0 1 1 0 ...
  ..$ B4: num [1:328] 1 1 1 1 1 1 0 1 1 1 ...
  ..$ C1: num [1:328] 1 1 1 1 1 1 0 1 1 1 ...
  ..$ C2: num [1:328] 1 0 1 1 0 1 0 1 1 0 ...
  ..$ C3: num [1:328] 1 1 1 1 1 1 0 1 1 1 ...
  ..$ C4: num [1:328] 0 0 1 1 0 1 0 1 1 1 ...
 $ thetagrid   : num [1:100] -2.5 -2.45 -2.4 -2.35 -2.3 ...
 $ theta       : Named num [1:328] 1.081 -0.941 0.407 2.333 -1.329 ...
  ..- attr(*, "names")= chr [1:328] "2" "22" "23" "41" ...
 $ estimate    : num [1:12, 1:100] 0.9534 0.0466 0.356 0.0691 0.6202 ...
 $ lower       : NULL
 $ upper       : NULL
 $ missing.resp:'data.frame':	328 obs. of  12 variables:
  ..$ A1: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ A2: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ A3: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ A4: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ B1: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ B2: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ B3: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ B4: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ C1: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ C2: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ C3: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
  ..$ C4: num [1:328] 0 0 0 0 0 0 0 0 0 0 ...
 - attr(*, "class")= chr "np.dich"
NULL
> # plot nonparametric item response curves
> plot( np1 , b = mod$item$b )
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
Warning in rug(theta[missing.resp[, ii] == 0], col = "cyan") :
  some values will be clipped
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("np.dich", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pbivnorm2")
> ### * pbivnorm2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pbivnorm2
> ### Title: Cumulative Function for the Bivariate Normal Distribution
> ### Aliases: pbivnorm2
> ### Keywords: Bivariate normal distribution
> 
> ### ** Examples
> 
> library(pbivnorm)
> # define input
> x <- c(0 , 0 ,  .5 , 1  , 1  )
> y <- c( 0 , -.5 ,  1 , 3 , .5 )
> rho <- c( .2 , .8 , -.4 , .6 , .5 )
> # compare pbivnorm2 and pbivnorm functions
> pbiv2 <- pbivnorm2( x = x , y = y , rho = rho )
> pbiv <- pbivnorm::pbivnorm(  x ,  y , rho = rho )
> max( abs(pbiv-pbiv2))
[1] 0.0030626
>   ## [1] 0.0030626
> round( cbind( x , y , rho ,pbiv, pbiv2 ) , 4 )
       x    y  rho   pbiv  pbiv2
[1,] 0.0  0.0  0.2 0.2820 0.2821
[2,] 0.0 -0.5  0.8 0.2778 0.2747
[3,] 0.5  1.0 -0.4 0.5514 0.5514
[4,] 1.0  3.0  0.6 0.8412 0.8412
[5,] 1.0  0.5  0.5 0.6303 0.6304
>   ##          x    y  rho   pbiv  pbiv2
>   ##   [1,] 0.0  0.0  0.2 0.2820 0.2821
>   ##   [2,] 0.0 -0.5  0.8 0.2778 0.2747
>   ##   [3,] 0.5  1.0 -0.4 0.5514 0.5514
>   ##   [4,] 1.0  3.0  0.6 0.8412 0.8412
>   ##   [5,] 1.0  0.5  0.5 0.6303 0.6304
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pbivnorm2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:pbivnorm’

> nameEx("pcm.conversion")
> ### * pcm.conversion
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pcm.conversion
> ### Title: Conversion of the Parameterization of the Partial Credit Model
> ### Aliases: pcm.conversion
> ### Keywords: Partial credit model
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D #############################################################################
> ##D # EXAMPLE 1: Transformation PCM for data.mg
> ##D #############################################################################
> ##D 
> ##D library(CDM)
> ##D data(data.mg,package="CDM")
> ##D dat <- data.mg[ 1:1000 , paste0("I",1:11) ]
> ##D 
> ##D #*** Model 1: estimate partial credit model in parameterization "PCM"
> ##D mod1a <- TAM::tam.mml( dat , irtmodel="PCM")
> ##D # use parameterization "PCM2"
> ##D mod1b <- TAM::tam.mml( dat , irtmodel="PCM2")
> ##D summary(mod1a)
> ##D summary(mod1b)
> ##D 
> ##D # convert parameterization of Model 1a into parameterization of Model 1b
> ##D b <- mod1a$item[ , c("AXsi_.Cat1","AXsi_.Cat2","AXsi_.Cat3") ]
> ##D # compare results
> ##D pcm.conversion(b)
> ##D mod1b$xsi
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pcm.conversion", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pcm.fit")
> ### * pcm.fit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pcm.fit
> ### Title: Item and Person Fit Statistics for the Partial Credit Model
> ### Aliases: pcm.fit
> ### Keywords: Item fit Person fit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D #############################################################################
> ##D # EXAMPLE 1: Partial credit model
> ##D #############################################################################	
> ##D 
> ##D data(data.Students,package="CDM")
> ##D dat <- data.Students
> ##D # select items
> ##D items <- c(paste0("sc" , 1:4 ) , paste0("mj" , 1:4 ) ) 
> ##D dat <- dat[,items]
> ##D dat <- dat[ rowSums( 1 - is.na(dat) ) > 0 , ]
> ##D 
> ##D #*** Model 1a: Partial credit model in TAM
> ##D # estimate model
> ##D mod1a <- TAM::tam.mml( resp=dat )
> ##D summary(mod1a)
> ##D # estimate person parameters
> ##D wle1a <- TAM::tam.wle(mod1a)
> ##D # extract item parameters
> ##D b1 <- - mod1a$AXsi[ , -1 ]
> ##D # parametrization in xsi parameters
> ##D b2 <- matrix( mod1a$xsi$xsi , ncol=3 , byrow=TRUE )
> ##D # convert b2 to b1
> ##D b1b <- 0*b1
> ##D b1b[,1] <- b2[,1]
> ##D b1b[,2] <- rowSums( b2[,1:2] )
> ##D b1b[,3] <- rowSums( b2[,1:3] )
> ##D # assess fit
> ##D fit1a <- pcm.fit(b=b1, theta=wle1a$theta , dat)
> ##D fit1a$item
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Rasch model
> ##D #############################################################################   
> ##D 
> ##D data(data.read)
> ##D dat <- data.read
> ##D 
> ##D #*** Rasch model in TAM
> ##D # estimate model
> ##D mod <- TAM::tam.mml( resp=dat )
> ##D summary(mod)
> ##D # estimate person parameters
> ##D wle <- TAM::tam.wle(mod)
> ##D # extract item parameters
> ##D b1 <- - mod$AXsi[ , -1 ]
> ##D # assess fit
> ##D fit1a <- pcm.fit(b=b1, theta=wle$theta , dat)
> ##D fit1a$item
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: Rating scale model
> ##D #############################################################################
> ##D 
> ##D data(data.Students,package="CDM")
> ##D dat <- data.Students
> ##D items <- paste0("sc" , 1:4 ) 
> ##D dat <- dat[,items]
> ##D dat <- dat[ rowSums( 1 - is.na(dat) ) > 0 , ]
> ##D 
> ##D #*** Model 1: Rating scale model in TAM
> ##D # estimate model
> ##D mod1 <- tam.mml( resp=dat , irtmodel="RSM")
> ##D summary(mod1)
> ##D # estimate person parameters
> ##D wle1 <- tam.wle(mod1)
> ##D # extract item parameters
> ##D b1 <- - mod1a$AXsi[ , -1 ]
> ##D # fit statistic
> ##D pcm.fit(b=b1, theta=wle1$theta, dat)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pcm.fit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("person.parameter.rasch.copula")
> ### * person.parameter.rasch.copula
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: person.parameter.rasch.copula
> ### Title: Person Parameter Estimation of the Rasch Copula Model (Braeken,
> ###   2011)
> ### Aliases: person.parameter.rasch.copula
> ### Keywords: IRT copula models Person parameter estimation
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Reading Data
> #############################################################################
> 
> data(data.read)
> dat <- data.read
> 
> # define item cluster
> itemcluster <- rep( 1:3 , each = 4 )
> mod1 <- rasch.copula2( dat , itemcluster = itemcluster )
-----------------------------------------------------------------
Marginal Maximum Likelihood Estimation 
Raschtype Copula Model with generalized logistic link function: Estimation of alpha1 and alpha2 
Function 'rasch.copula2'
-----------------------------------------------------------------
---------------------------------------------------------------------- 
MML EM Iter. 1        |**********|  2015-06-13 13:24:11  
 Estimation of b:     |----------|     max. parm. change 0.24866 
 Estimation of a:     |----------|     max. parm. change 0.01639 
 Estimation of delta: |----------|     max. parm. change 0.19802 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3966.123  | Deviance change =  -3965.123 | max. parm. change =  0.248655  
---------------------------------------------------------------------- 
MML EM Iter. 2        |**********|  2015-06-13 13:24:11  0.0452 secs
 Estimation of b:     |----------|     max. parm. change 0.16383 
 Estimation of a:     |----------|     max. parm. change 0.01051 
 Estimation of delta: |----------|     max. parm. change 0.19606 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3891.219  | Deviance change =  74.9037 | max. parm. change =  0.196059  
---------------------------------------------------------------------- 
MML EM Iter. 3        |**********|  2015-06-13 13:24:11  0.0445 secs
 Estimation of b:     |----------|     max. parm. change 0.0805 
 Estimation of a:     |----------|     max. parm. change 0.01488 
 Estimation of delta: |----------|     max. parm. change 0.05477 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3865.858  | Deviance change =  25.3611 | max. parm. change =  0.0805  
---------------------------------------------------------------------- 
MML EM Iter. 4        |**********|  2015-06-13 13:24:11  0.0521 secs
 Estimation of b:     |----------|     max. parm. change 0.042 
 Estimation of a:     |----------|     max. parm. change 0.00874 
 Estimation of delta: |----------|     max. parm. change 0.0064 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.678  | Deviance change =  3.1801 | max. parm. change =  0.042  
---------------------------------------------------------------------- 
MML EM Iter. 5        |**********|  2015-06-13 13:24:12  0.045 secs
 Estimation of b:     |----------|     max. parm. change 0.02367 
 Estimation of a:     |----------|     max. parm. change 0.00267 
 Estimation of delta: |----------|     max. parm. change 0.00211 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.324  | Deviance change =  0.3535 | max. parm. change =  0.023667  
---------------------------------------------------------------------- 
MML EM Iter. 6        |**********|  2015-06-13 13:24:12  0.0434 secs
 Estimation of b:     |----------|     max. parm. change 0.0148 
 Estimation of a:     |----------|     max. parm. change 0.00017 
 Estimation of delta: |----------|     max. parm. change 9e-04 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.176  | Deviance change =  0.1486 | max. parm. change =  0.014796  
---------------------------------------------------------------------- 
MML EM Iter. 7        |**********|  2015-06-13 13:24:12  0.0452 secs
 Estimation of b:     |----------|     max. parm. change 0.00977 
 Estimation of a:     |----------|     max. parm. change 0.00149 
 Estimation of delta: |----------|     max. parm. change 0.00038 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.098  | Deviance change =  0.0778 | max. parm. change =  0.009765  
---------------------------------------------------------------------- 
MML EM Iter. 8        |**********|  2015-06-13 13:24:12  0.0442 secs
 Estimation of b:     |----------|     max. parm. change 0.00921 
 Estimation of a:     |----------|     max. parm. change 0.00205 
 Estimation of delta: |----------|     max. parm. change 0.00017 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.049  | Deviance change =  0.0486 | max. parm. change =  0.009213  
---------------------------------------------------------------------- 
MML EM Iter. 9        |**********|  2015-06-13 13:24:12  0.0444 secs
 Estimation of b:     |----------|     max. parm. change 0.00858 
 Estimation of a:     |----------|     max. parm. change 0.00222 
 Estimation of delta: |----------|     max. parm. change 9e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.015  | Deviance change =  0.0341 | max. parm. change =  0.008576  
---------------------------------------------------------------------- 
MML EM Iter. 10       |**********|  2015-06-13 13:24:12  0.0541 secs
 Estimation of b:     |----------|     max. parm. change 0.00792 
 Estimation of a:     |----------|     max. parm. change 0.00218 
 Estimation of delta: |----------|     max. parm. change 0.00014 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.99  | Deviance change =  0.0254 | max. parm. change =  0.00792  
---------------------------------------------------------------------- 
MML EM Iter. 11       |**********|  2015-06-13 13:24:12  0.0425 secs
 Estimation of b:     |----------|     max. parm. change 0.00728 
 Estimation of a:     |----------|     max. parm. change 0.00206 
 Estimation of delta: |----------|     max. parm. change 0.00016 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.97  | Deviance change =  0.0195 | max. parm. change =  0.00728  
---------------------------------------------------------------------- 
MML EM Iter. 12       |**********|  2015-06-13 13:24:12  0.0414 secs
 Estimation of b:     |----------|     max. parm. change 0.0065 
 Estimation of a:     |----------|     max. parm. change 0.0019 
 Estimation of delta: |----------|     max. parm. change 0.00016 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.955  | Deviance change =  0.0152 | max. parm. change =  0.006504  
---------------------------------------------------------------------- 
MML EM Iter. 13       |**********|  2015-06-13 13:24:12  0.0432 secs
 Estimation of b:     |----------|     max. parm. change 0.00589 
 Estimation of a:     |----------|     max. parm. change 0.00172 
 Estimation of delta: |----------|     max. parm. change 0.00016 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.943  | Deviance change =  0.0119 | max. parm. change =  0.005888  
---------------------------------------------------------------------- 
MML EM Iter. 14       |**********|  2015-06-13 13:24:12  0.0419 secs
 Estimation of b:     |----------|     max. parm. change 0.00525 
 Estimation of a:     |----------|     max. parm. change 0.00155 
 Estimation of delta: |----------|     max. parm. change 0.00015 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.934  | Deviance change =  0.0094 | max. parm. change =  0.005251  
---------------------------------------------------------------------- 
MML EM Iter. 15       |**********|  2015-06-13 13:24:12  0.0431 secs
 Estimation of b:     |----------|     max. parm. change 0.00474 
 Estimation of a:     |----------|     max. parm. change 0.0014 
 Estimation of delta: |----------|     max. parm. change 0.00014 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.926  | Deviance change =  0.0075 | max. parm. change =  0.004741  
---------------------------------------------------------------------- 
MML EM Iter. 16       |**********|  2015-06-13 13:24:12  0.0494 secs
 Estimation of b:     |----------|     max. parm. change 0.00421 
 Estimation of a:     |----------|     max. parm. change 0.00124 
 Estimation of delta: |----------|     max. parm. change 0.00012 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.92  | Deviance change =  0.0059 | max. parm. change =  0.004211  
---------------------------------------------------------------------- 
MML EM Iter. 17       |**********|  2015-06-13 13:24:12  0.0415 secs
 Estimation of b:     |----------|     max. parm. change 0.00375 
 Estimation of a:     |----------|     max. parm. change 0.00111 
 Estimation of delta: |----------|     max. parm. change 0.00011 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.916  | Deviance change =  0.0046 | max. parm. change =  0.003746  
---------------------------------------------------------------------- 
MML EM Iter. 18       |**********|  2015-06-13 13:24:12  0.0419 secs
 Estimation of b:     |----------|     max. parm. change 0.00336 
 Estimation of a:     |----------|     max. parm. change 0.00099 
 Estimation of delta: |----------|     max. parm. change 1e-04 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.912  | Deviance change =  0.0037 | max. parm. change =  0.003358  
---------------------------------------------------------------------- 
MML EM Iter. 19       |**********|  2015-06-13 13:24:12  0.0425 secs
 Estimation of b:     |----------|     max. parm. change 0.00299 
 Estimation of a:     |----------|     max. parm. change 0.00088 
 Estimation of delta: |----------|     max. parm. change 9e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.909  | Deviance change =  0.0029 | max. parm. change =  0.002988  
---------------------------------------------------------------------- 
MML EM Iter. 20       |**********|  2015-06-13 13:24:12  0.0421 secs
 Estimation of b:     |----------|     max. parm. change 0.00267 
 Estimation of a:     |----------|     max. parm. change 0.00079 
 Estimation of delta: |----------|     max. parm. change 8e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.907  | Deviance change =  0.0023 | max. parm. change =  0.002674  
---------------------------------------------------------------------- 
MML EM Iter. 21       |**********|  2015-06-13 13:24:12  0.0422 secs
 Estimation of b:     |----------|     max. parm. change 0.00237 
 Estimation of a:     |----------|     max. parm. change 7e-04 
 Estimation of delta: |----------|     max. parm. change 7e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.905  | Deviance change =  0.0018 | max. parm. change =  0.002368  
---------------------------------------------------------------------- 
MML EM Iter. 22       |**********|  2015-06-13 13:24:12  0.0506 secs
 Estimation of b:     |----------|     max. parm. change 0.00211 
 Estimation of a:     |----------|     max. parm. change 0.00062 
 Estimation of delta: |----------|     max. parm. change 6e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.904  | Deviance change =  0.0014 | max. parm. change =  0.002112  
---------------------------------------------------------------------- 
MML EM Iter. 23       |**********|  2015-06-13 13:24:12  0.0423 secs
 Estimation of b:     |----------|     max. parm. change 0.00189 
 Estimation of a:     |----------|     max. parm. change 0.00055 
 Estimation of delta: |----------|     max. parm. change 6e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.902  | Deviance change =  0.0011 | max. parm. change =  0.001892  
---------------------------------------------------------------------- 
MML EM Iter. 24       |**********|  2015-06-13 13:24:12  0.0423 secs
 Estimation of b:     |----------|     max. parm. change 0.00168 
 Estimation of a:     |----------|     max. parm. change 0.00049 
 Estimation of delta: |----------|     max. parm. change 5e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.902  | Deviance change =  9e-04 | max. parm. change =  0.001675  
---------------------------------------------------------------------- 
MML EM Iter. 25       |**********|  2015-06-13 13:24:12  0.0402 secs
 Estimation of b:     |----------|     max. parm. change 0.00149 
 Estimation of a:     |----------|     max. parm. change 0.00044 
 Estimation of delta: |----------|     max. parm. change 4e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.901  | Deviance change =  7e-04 | max. parm. change =  0.001493  
---------------------------------------------------------------------- 
MML EM Iter. 26       |**********|  2015-06-13 13:24:12  0.0416 secs
 Estimation of b:     |----------|     max. parm. change 0.00134 
 Estimation of a:     |----------|     max. parm. change 0.00039 
 Estimation of delta: |----------|     max. parm. change 4e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.9  | Deviance change =  6e-04 | max. parm. change =  0.001336  
---------------------------------------------------------------------- 
MML EM Iter. 27       |**********|  2015-06-13 13:24:12  0.0506 secs
 Estimation of b:     |----------|     max. parm. change 0.00119 
 Estimation of a:     |----------|     max. parm. change 0.00035 
 Estimation of delta: |----------|     max. parm. change 4e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.9  | Deviance change =  5e-04 | max. parm. change =  0.001185  
---------------------------------------------------------------------- 
MML EM Iter. 28       |**********|  2015-06-13 13:24:13  0.0421 secs
 Estimation of b:     |----------|     max. parm. change 0.00106 
 Estimation of a:     |----------|     max. parm. change 0.00031 
 Estimation of delta: |----------|     max. parm. change 3e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.899  | Deviance change =  4e-04 | max. parm. change =  0.001056  
---------------------------------------------------------------------- 
MML EM Iter. 29       |**********|  2015-06-13 13:24:13  0.0429 secs
 Estimation of b:     |----------|     max. parm. change 0.00094 
 Estimation of a:     |----------|     max. parm. change 0.00028 
 Estimation of delta: |----------|     max. parm. change 3e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.899  | Deviance change =  3e-04 | max. parm. change =  0.000945  
---------------------------------------------------------------------------------------------------------- 
Parameter summary
   item   N     p      b est.b     a est.a thresh itemcluster delta est.delta
A1   A1 328 0.851 -2.020     1 0.995     1 -2.009           1 0.166         1
A2   A2 328 0.738 -1.247     2 0.995     1 -1.240           1 0.166         1
A3   A3 328 0.567 -0.311     3 0.995     1 -0.309           1 0.166         1
A4   A4 328 0.460  0.205     4 0.995     1  0.204           1 0.166         1
B1   B1 328 0.713 -1.099     5 0.995     1 -1.093           2 0.000         2
B2   B2 328 0.506 -0.031     6 0.995     1 -0.031           2 0.000         2
B3   B3 328 0.909 -2.679     7 0.995     1 -2.664           2 0.000         2
B4   B4 328 0.683 -0.927     8 0.995     1 -0.922           2 0.000         2
C1   C1 328 0.933 -2.967     9 0.995     1 -2.951           3 0.304         3
C2   C2 328 0.713 -1.076    10 0.995     1 -1.070           3 0.304         3
C3   C3 328 0.872 -2.444    11 0.995     1 -2.430           3 0.304         3
C4   C4 328 0.735 -1.391    12 0.995     1 -1.384           3 0.304         3

Dependency parameters
  cluster delta est.delta copula.type       items
1       1 0.166         1  bound.mixt A1-A2-A3-A4
2       2 0.000         2  bound.mixt B1-B2-B3-B4
3       3 0.304         3  bound.mixt C1-C2-C3-C4

EAP Reliability: 0.592 

Generalized logistic link function
alpha1= 0  alpha2= 0  

-----------------------------------------------------------------
Start: 2015-06-13 13:24:11 
End: 2015-06-13 13:24:13 
Time difference of 1.322575 secs
Difference: 1.322575 
-----------------------------------------------------------------
> summary(mod1)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 
Date of Analysis: 2015-06-13 13:24:13 
Time difference of 1.322575 secs
Computation Time: 1.322575 

Marginal Maximum Likelihood Estimation 
Raschtype Copula Model with generalized logistic link function: Estimation of alpha1 and alpha2 
Function rasch.copula2
alpha1= 0  alpha2= 0  
-----------------------------------------------------------------
Deviance =  3861.9 
Number of persons =  328  ( 185  Response Patterns)
Number of estimated parameters =  16 
Number of iterations =  29 
AIC  =  3893.9  | penalty = 32 
AICc =  3895.65  | penalty = 33.75 (bias corrected AIC)
BIC  =  3954.59  | penalty = 92.69 
CAIC =  3970.59  | penalty = 108.69 (consistent AIC) 

Trait Distribution ( 21  Knots )
 Mean= 0  SD= 1 

EAP Reliability: 0.592 

-----------------------------------------------------------------
Item Parameter 
   item   N     p      b est.b     a est.a thresh itemcluster delta est.delta
A1   A1 328 0.851 -2.020     1 0.995     1 -2.009           1 0.166         1
A2   A2 328 0.738 -1.247     2 0.995     1 -1.240           1 0.166         1
A3   A3 328 0.567 -0.311     3 0.995     1 -0.309           1 0.166         1
A4   A4 328 0.460  0.205     4 0.995     1  0.204           1 0.166         1
B1   B1 328 0.713 -1.099     5 0.995     1 -1.093           2 0.000         2
B2   B2 328 0.506 -0.031     6 0.995     1 -0.031           2 0.000         2
B3   B3 328 0.909 -2.679     7 0.995     1 -2.664           2 0.000         2
B4   B4 328 0.683 -0.927     8 0.995     1 -0.922           2 0.000         2
C1   C1 328 0.933 -2.967     9 0.995     1 -2.951           3 0.304         3
C2   C2 328 0.713 -1.076    10 0.995     1 -1.070           3 0.304         3
C3   C3 328 0.872 -2.444    11 0.995     1 -2.430           3 0.304         3
C4   C4 328 0.735 -1.391    12 0.995     1 -1.384           3 0.304         3

Dependency parameters
  cluster delta est.delta copula.type       items
1       1 0.166         1  bound.mixt A1-A2-A3-A4
2       2 0.000         2  bound.mixt B1-B2-B3-B4
3       3 0.304         3  bound.mixt C1-C2-C3-C4
> 
> # person parameter estimation under the Rasch copula model
> pmod1 <- person.parameter.rasch.copula(raschcopula.object = mod1 )
Iteration 1 :   max. parm. change 1   | 2 out of 185 cases converged ( 1.1 %)
Iteration 2 :   max. parm. change 1   | 3 out of 185 cases converged ( 1.6 %)
Iteration 3 :   max. parm. change 0.99109   | 35 out of 185 cases converged ( 18.9 %)
Iteration 4 :   max. parm. change 0.00508   | 182 out of 185 cases converged ( 98.4 %)
Iteration 5 :   max. parm. change 1e-05   | 185 out of 185 cases converged ( 100 %)
Warning in sqrt(-1/d2d) : NaNs produced
Warning in sqrt(-1/d2i) : NaNs produced
Warning in FUN(X[[i]], ...) :
  no non-missing arguments to min; returning Inf
Warning in FUN(X[[i]], ...) :
  no non-missing arguments to min; returning Inf
Warning in FUN(X[[i]], ...) :
  no non-missing arguments to max; returning -Inf
Warning in FUN(X[[i]], ...) :
  no non-missing arguments to max; returning -Inf

..................................................................
Mean percentage standard error inflation

  missing.pattern Mperc.seinflat
1               1           6.35

..................................................................
Summary theta estimation

   missing.pattern score max  N M.theta.dep M.theta.ind SD.theta.dep
1                1     0  12  0         NaN         NaN           NA
2                1     2  12  4     -3.2363     -3.2534       0.1570
3                1     3  12  3     -2.4234     -2.6596       0.1566
4                1     4  12  9     -2.3765     -2.1725       0.7720
5                1     5  12 13     -1.5994     -1.7363       0.3441
6                1     6  12 32     -1.3117     -1.3224       0.2095
7                1     7  12 44     -0.9123     -0.9106       0.1543
8                1     8  12 32     -0.3665     -0.4801       0.5017
9                1     9  12 47     -0.0483     -0.0019       0.0776
10               1    10  12 58      0.5320      0.5810       0.0803
11               1    11  12 50      1.3669      1.4420       0.0256
12               1    12  12  0         NaN         NaN           NA
   Min.theta.dep Max.theta.dep M.seinflat M.setheta.dep M.setheta.ind
1            Inf          -Inf        NaN           NaN           NaN
2        -3.3889       -3.0164     1.1632        0.9643        0.8290
3        -2.6040       -2.3255     1.1011        0.8014        0.7278
4        -3.6871       -1.6349     1.2273        0.8307        0.6769
5        -2.1596       -1.0085     1.1243        0.7318        0.6509
6        -1.5998       -0.3477     1.0779        0.6918        0.6418
7        -1.3237       -0.5287     1.0920        0.7074        0.6478
8        -0.6206        1.1616     1.0934        0.7340        0.6713
9        -0.2564        0.2321     1.0407        0.7502        0.7209
10        0.4282        0.9873     1.0317        0.8481        0.8221
11        1.3436        1.4076     1.0130        1.0961        1.0820
12           Inf          -Inf        NaN           NaN           NaN
> ## Mean percentage standard error inflation
> ##   missing.pattern Mperc.seinflat
> ## 1               1           6.35
> 
> ## Not run: 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: 12 items nested within 3 item clusters (testlets)
> ##D #   Cluster 1 -> Items 1-4; Cluster 2 -> Items 6-9;  Cluster 3 -> Items 10-12
> ##D #############################################################################
> ##D 
> ##D set.seed(967)
> ##D I <- 12                             # number of items
> ##D n <- 450                            # number of persons
> ##D b <- seq(-2,2, len=I)               # item difficulties
> ##D b <- sample(b)                      # sample item difficulties
> ##D theta <- rnorm( n , sd = 1 )        # person abilities
> ##D # itemcluster
> ##D itemcluster <- rep(0,I)
> ##D itemcluster[ 1:4 ] <- 1
> ##D itemcluster[ 6:9 ] <- 2
> ##D itemcluster[ 10:12 ] <- 3
> ##D # residual correlations
> ##D rho <- c( .35 , .25 , .30 )
> ##D 
> ##D # simulate data
> ##D dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> ##D colnames(dat) <- paste("I" , seq(1,ncol(dat)) , sep="")
> ##D 
> ##D # estimate Rasch copula model 
> ##D mod1 <- rasch.copula2( dat , itemcluster = itemcluster )
> ##D summary(mod1)
> ##D 
> ##D # person parameter estimation under the Rasch copula model
> ##D pmod1 <- person.parameter.rasch.copula(raschcopula.object = mod1 )
> ##D   ## Mean percentage standard error inflation
> ##D   ##   missing.pattern Mperc.seinflat
> ##D   ## 1               1          10.48 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("person.parameter.rasch.copula", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("personfit.stat")
> ### * personfit.stat
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: personfit.stat
> ### Title: Person Fit Statistics for the Rasch Model
> ### Aliases: personfit.stat
> ### Keywords: Person fit
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Person fit Reading Data
> #############################################################################
> 
> data(data.read)
> dat <- data.read
> 
> # estimate Rasch model
> mod <- rasch.mml2( dat )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:13 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:24:13 
   Deviance = 3942.478 | Deviance change = 13.465952
    Maximum b parameter change =  0.054894  
...........................................................
Iteration 3     2015-06-13 13:24:13 
   Deviance = 3940.2892 | Deviance change = 2.188817
    Maximum b parameter change =  0.042995  
...........................................................
Iteration 4     2015-06-13 13:24:13 
   Deviance = 3939.4559 | Deviance change = 0.833271
    Maximum b parameter change =  0.022889  
...........................................................
Iteration 5     2015-06-13 13:24:13 
   Deviance = 3939.0706 | Deviance change = 0.38535
    Maximum b parameter change =  0.015712  
...........................................................
Iteration 6     2015-06-13 13:24:13 
   Deviance = 3938.8854 | Deviance change = 0.185235
    Maximum b parameter change =  0.010687  
...........................................................
Iteration 7     2015-06-13 13:24:13 
   Deviance = 3938.7952 | Deviance change = 0.090117
    Maximum b parameter change =  0.007515  
...........................................................
Iteration 8     2015-06-13 13:24:13 
   Deviance = 3938.7511 | Deviance change = 0.044171
    Maximum b parameter change =  0.005289  
...........................................................
Iteration 9     2015-06-13 13:24:13 
   Deviance = 3938.7293 | Deviance change = 0.021762
    Maximum b parameter change =  0.003736  
...........................................................
Iteration 10     2015-06-13 13:24:13 
   Deviance = 3938.7186 | Deviance change = 0.010757
    Maximum b parameter change =  0.00264  
...........................................................
Iteration 11     2015-06-13 13:24:13 
   Deviance = 3938.7132 | Deviance change = 0.005327
    Maximum b parameter change =  0.001867  
...........................................................
Iteration 12     2015-06-13 13:24:13 
   Deviance = 3938.7106 | Deviance change = 0.002639
    Maximum b parameter change =  0.001321  
...........................................................
Iteration 13     2015-06-13 13:24:13 
   Deviance = 3938.7093 | Deviance change = 0.001306
    Maximum b parameter change =  0.000934  
...........................................................
Iteration 14     2015-06-13 13:24:13 
   Deviance = 3938.7086 | Deviance change = 0.000645
    Maximum b parameter change =  0.000661  
...........................................................
Iteration 15     2015-06-13 13:24:13 
   Deviance = 3938.7083 | Deviance change = 0.000317
    Maximum b parameter change =  0.000468  
...........................................................
Iteration 16     2015-06-13 13:24:13 
   Deviance = 3938.7082 | Deviance change = 0.000155
    Maximum b parameter change =  0.000331  
...........................................................
Iteration 17     2015-06-13 13:24:13 
   Deviance = 3938.7081 | Deviance change = 7.5e-05
    Maximum b parameter change =  0.000234  
...........................................................
Iteration 18     2015-06-13 13:24:13 
   Deviance = 3938.7081 | Deviance change = 3.5e-05
    Maximum b parameter change =  0.000166  
...........................................................
Iteration 19     2015-06-13 13:24:13 
   Deviance = 3938.708 | Deviance change = 1.6e-05
    Maximum b parameter change =  0.000117  
...........................................................
Iteration 20     2015-06-13 13:24:13 
   Deviance = 3938.708 | Deviance change = 7e-06
    Maximum b parameter change =  8.3e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:13 
End: 2015-06-13 13:24:13 
Time difference of 0.110466 secs
Difference: 0.110466 
------------------------------------------------------------
> # WLE
> wle1 <- wle.rasch( dat,b=mod$item$b )$theta
WLE Reliability = 0.567 
> b <- mod$item$b # item difficulty
> 
> # evaluate person fit
> pf1 <- personfit.stat( dat = dat , abil=wle1 , b=b)
> 
> ## Not run: 
> ##D # dimensional analysis of person fit statistics
> ##D x0 <- na.omit(pf1[ , -c(1:3) ] )
> ##D factanal( x=x0 , factors=2 , rotation="promax" )
> ##D   ## Loadings:
> ##D   ##                Factor1 Factor2
> ##D   ## caution         0.914         
> ##D   ## depend          0.293   0.750 
> ##D   ## ECI1            0.869   0.160 
> ##D   ## ECI2            0.869   0.162 
> ##D   ## ECI3            1.011         
> ##D   ## ECI4            1.159  -0.269 
> ##D   ## ECI5            1.012         
> ##D   ## ECI6            0.879   0.130 
> ##D   ## l0              0.409  -1.255 
> ##D   ## lz             -0.504  -0.529 
> ##D   ## outfit          0.297   0.702 
> ##D   ## infit           0.362   0.695 
> ##D   ## rpbis          -1.014         
> ##D   ## rpbis.itemdiff  1.032         
> ##D   ## U3              0.735   0.309 
> ##D   ## 
> ##D   ## Factor Correlations:
> ##D   ##         Factor1 Factor2
> ##D   ## Factor1   1.000  -0.727
> ##D   ## Factor2  -0.727   1.000
> ##D   ##
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("personfit.stat", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pgenlogis")
> ### * pgenlogis
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pgenlogis
> ### Title: Calculation of Probabilities and Moments for the Generalized
> ###   Logistic Item Response Model
> ### Aliases: pgenlogis genlogis.moments
> ### Keywords: Generalized logistic item response model
> 
> ### ** Examples
> 
> pgenlogis( x=c(-.3 , 0 , .25 , 1 ) , alpha1=0 , alpha2= .6 )
[1] 0.4185580 0.5000000 0.5621765 0.7310586
>   ##   [1] 0.4185580 0.5000000 0.5621765 0.7310586
> 
> ####################################################################
> # compare link functions
> x <- seq( -3 ,3 , .1 )
> 
> #***
> # logistic link
> y <- pgenlogis( x , alpha1=0, alpha2=0 )
> plot( x , plogis(x) , type="l" , main="Logistic Link" , lwd=2)
> points( x , y , pch=1 , col=2 )
> 
> #***
> # probit link 
> round( genlogis.moments( alpha1=.165 , alpha2=.165 ) , 3 )
    M    SD   Var 
0.000 1.472 2.167 
>   ##       M    SD   Var 
>   ##   0.000 1.472 2.167 
> # SD of generalized logistic link function is 1.472
> y <- pgenlogis( x * 1.47 , alpha1=.165 , alpha2=.165 )
> plot( x , pnorm(x) , type="l" , main="Probit Link" , lwd=2)
> points( x , y , pch=1 , col=2 )
> 
> #***
> # loglog link 
> y <- pgenlogis( -.39 + 1.20*x -.007*x^2  , alpha1=-.037 , alpha2=.62 )
> plot( x , exp( - exp( -x ) )  , type="l" , main="Loglog Link" , lwd=2,
+     ylab="loglog(x) = exp(-exp(-x))" )
> points( x , y , pch=17 , col=2 )
> 
> #***
> # cloglog link 
> y <- pgenlogis( .54+1.64*x +.28*x^2 + .046*x^3 , alpha1=.062 , alpha2=-.037 )
> plot( x , 1-exp( - exp(x) )  , type="l" , main="Cloglog Link" , lwd=2,
+     ylab="loglog(x) = 1-exp(-exp(x))" )
> points( x , y , pch=17 , col=2 )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pgenlogis", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plausible.value.imputation.raschtype")
> ### * plausible.value.imputation.raschtype
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plausible.value.imputation.raschtype
> ### Title: Plausible Value Imputation in Generalized Logistic Item Response
> ###   Model
> ### Aliases: plausible.value.imputation.raschtype
> ### Keywords: Plausible values
> 
> ### ** Examples
> 
> #############################################################################
> # SIMULATED EXAMPLE 1: Rasch model with covariates
> #############################################################################
> 
> set.seed(899)
> I <- 21     # number of items
> b <- seq(-2,2, len=I)   # item difficulties
> n <- 2000       # number of students
> 
> # simulate theta and covariates
> theta <- rnorm( n )
> x <- .7 * theta + rnorm( n , .5 )
> y <- .2 * x+ .3*theta + rnorm( n , .4 )
> dfr <- data.frame( theta , 1 , x , y )
> 
> # simulate Rasch model
> dat1 <- sim.raschtype( theta = theta , b = b )
> 
> # Plausible value draws
> pv1 <- plausible.value.imputation.raschtype(data=dat1 , X=dfr[,-1] , b = b ,
+             nplausible=3 , iter=10 , burnin=5)

IRT Plausible Value Imputation - Rasch type model

 Iteration 1.2.3.4.5.6.7.8.9.10.
     
> # estimate linear regression based on first plausible value
> mod1 <- lm( pv1$pvdraws[,1] ~ x+y )
> summary(mod1)

Call:
lm(formula = pv1$pvdraws[, 1] ~ x + y)

Residuals:
     Min       1Q   Median       3Q      Max 
-2.55751 -0.58705  0.02465  0.54606  2.83137 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.27755    0.02121  -13.09   <2e-16 ***
x            0.40483    0.01640   24.69   <2e-16 ***
y            0.20307    0.01822   11.15   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.8434 on 1997 degrees of freedom
Multiple R-squared:  0.3497,	Adjusted R-squared:  0.349 
F-statistic: 536.9 on 2 and 1997 DF,  p-value: < 2.2e-16

>   ##               Estimate Std. Error t value Pr(>|t|)    
>   ##   (Intercept) -0.27755    0.02121  -13.09   <2e-16 ***
>   ##   x            0.40483    0.01640   24.69   <2e-16 ***
>   ##   y            0.20307    0.01822   11.15   <2e-16 ***
> 
> # true regression estimate
> summary( lm( theta ~ x + y ) )

Call:
lm(formula = theta ~ x + y)

Residuals:
     Min       1Q   Median       3Q      Max 
-2.42883 -0.55230  0.00844  0.53424  2.62295 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.27821    0.01984  -14.02   <2e-16 ***
x            0.40747    0.01534   26.56   <2e-16 ***
y            0.18189    0.01704   10.67   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.789 on 1997 degrees of freedom
Multiple R-squared:  0.3713,	Adjusted R-squared:  0.3707 
F-statistic: 589.7 on 2 and 1997 DF,  p-value: < 2.2e-16

>   ## Coefficients:
>   ##             Estimate Std. Error t value Pr(>|t|)    
>   ## (Intercept) -0.27821    0.01984  -14.02   <2e-16 ***
>   ## x            0.40747    0.01534   26.56   <2e-16 ***
>   ## y            0.18189    0.01704   10.67   <2e-16 ***
> 
> ## Not run: 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: Classical test theory, homogeneous regression variance
> ##D #############################################################################
> ##D 
> ##D set.seed(899)
> ##D n <- 3000       # number of students
> ##D x <- round( runif( n , 0 ,1 ) )
> ##D y <- rnorm(n)
> ##D # simulate true score theta
> ##D theta <- .4*x + .5 * y + rnorm(n)
> ##D # simulate observed score by adding measurement error
> ##D sig.e <- rep( sqrt(.40) , n )
> ##D theta_obs <- theta + rnorm( n , sd=sig.e)
> ##D 
> ##D # define theta grid for evaluation of density
> ##D theta.list <- mean(theta_obs) + sd(theta_obs) * seq( - 5 , 5 , length=21)
> ##D # compute individual likelihood
> ##D f.yi.qk <- dnorm( outer( theta_obs , theta.list , "-" ) / sig.e )
> ##D f.yi.qk <- f.yi.qk / rowSums(f.yi.qk)
> ##D # define covariates
> ##D X <- cbind( 1 , x , y )
> ##D # draw plausible values        
> ##D mod2 <- plausible.value.imputation.raschtype( f.yi.qk =f.yi.qk , 
> ##D                   theta.list=theta.list , X=X , iter=10 , burnin=5)
> ##D 
> ##D # linear regression
> ##D mod1 <- lm( mod2$pvdraws[,1] ~ x+y )
> ##D summary(mod1)
> ##D   ##             Estimate Std. Error t value Pr(>|t|)    
> ##D   ## (Intercept) -0.01393    0.02655  -0.525      0.6    
> ##D   ## x            0.35686    0.03739   9.544   <2e-16 ***
> ##D   ## y            0.53759    0.01872  28.718   <2e-16 ***
> ##D 
> ##D # true regression model
> ##D summary( lm( theta ~ x + y ) )
> ##D   ##             Estimate Std. Error t value Pr(>|t|)    
> ##D   ## (Intercept) 0.002931   0.026171   0.112    0.911    
> ##D   ## x           0.359954   0.036864   9.764   <2e-16 ***
> ##D   ## y           0.509073   0.018456  27.584   <2e-16 ***
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 3: Classical test theory, heterogeneous regression variance
> ##D #############################################################################
> ##D 
> ##D set.seed(899)
> ##D n <- 5000       # number of students
> ##D x <- round( runif( n , 0 ,1 ) )
> ##D y <- rnorm(n)
> ##D # simulate true score theta
> ##D theta <- .4*x + .5 * y + rnorm(n) * ( 1 - .4 * x )
> ##D # simulate observed score by adding measurement error
> ##D sig.e <- rep( sqrt(.40) , n )
> ##D theta_obs <- theta + rnorm( n , sd=sig.e)
> ##D 
> ##D # define theta grid for evaluation of density
> ##D theta.list <- mean(theta_obs) + sd(theta_obs) * seq( - 5 , 5 , length=21)
> ##D # compute individual likelihood
> ##D f.yi.qk <- dnorm( outer( theta_obs , theta.list , "-" ) / sig.e )
> ##D f.yi.qk <- f.yi.qk / rowSums(f.yi.qk)
> ##D # define covariates
> ##D X <- cbind( 1 , x , y )
> ##D # draw plausible values (assuming variance homogeneity)
> ##D mod3a <- plausible.value.imputation.raschtype( f.yi.qk =f.yi.qk , 
> ##D                   theta.list=theta.list , X=X , iter=10 , burnin=5)
> ##D # draw plausible values (assuming variance heterogeneity)
> ##D #  -> include predictor Z
> ##D mod3b <- plausible.value.imputation.raschtype( f.yi.qk =f.yi.qk , 
> ##D                   theta.list=theta.list , X=X , Z=X , iter=10 , burnin=5)
> ##D 
> ##D # investigate variance of theta conditional on x
> ##D res3 <- sapply( 0:1 , FUN = function(vv){
> ##D         c( var(theta[x==vv]), var(mod3b$pvdraw[x==vv,1]),
> ##D               var(mod3a$pvdraw[x==vv,1]))})
> ##D rownames(res3) <- c("true" , "pv(hetero)" , "pv(homog)" )
> ##D colnames(res3) <- c("x=0","x=1")     
> ##D   ## > round( res3 , 2 )
> ##D   ##             x=0  x=1
> ##D   ## true       1.30 0.58
> ##D   ## pv(hetero) 1.29 0.55
> ##D   ## pv(homog)  1.06 0.77
> ##D ## -> assuming heteroscedastic variances recovers true conditional variance
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plausible.value.imputation.raschtype", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("polychoric2")
> ### * polychoric2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: polychoric2
> ### Title: Polychoric Correlation
> ### Aliases: polychoric2
> ### Keywords: Polychoric correlation Tetrachoric correlation
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: data.Students | activity scale
> #############################################################################
> 
> data(data.Students, package="CDM")
> dat <- data.Students[ , paste0("act" , 1:5 ) ]
> 
> # tetrachoric correlation from psych package
> library(psych)
> t0 <- psych::polychoric( dat )$rho
> # Olsson method (maximum likelihood estimation)
> t1 <- polychoric2( dat )$rho
> # maximum absolute difference
> max( abs( t0 - t1 ) )
[1] 0.005410612
>   ##   [1] 0.006914892
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("polychoric2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:psych’

> nameEx("prmse.subscores.scales")
> ### * prmse.subscores.scales
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: prmse.subscores.scales
> ### Title: Proportional Reduction of Mean Squared Error (PRMSE) for
> ###   Subscale Scores
> ### Aliases: prmse.subscores.scales
> ### Keywords: Proportional reduction of mean squared error (PRMSE)
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: PRMSE Reading data data.read
> #############################################################################	
> 
> data( data.read )
> p1 <- prmse.subscores.scales(data=data.read, 
+          subscale = substring( colnames(data.read) , 1 ,1 ) )
> print( p1 , digits= 3 )
                A       B       C
N         328.000 328.000 328.000
nX          4.000   4.000   4.000
M.X         2.616   2.811   3.253
Var.X       1.381   1.059   1.107
SD.X        1.175   1.029   1.052
alpha.X     0.545   0.381   0.640
Var.TX      0.752   0.403   0.709
Var.EX      0.629   0.655   0.398
nZ         12.000  12.000  12.000
M.Z         8.680   8.680   8.680
Var.Z       5.668   5.668   5.668
SD.Z        2.381   2.381   2.381
alpha.Z     0.677   0.677   0.677
Var.TZ      3.839   3.839   3.839
Var.EZ      1.829   1.829   1.829
cor.X_Z     0.775   0.735   0.678
cor.X_Y     0.406   0.408   0.306
cor.TX_TY   0.721   0.831   0.490
cor.TX_TZ   0.971   1.014   0.831
cor.TX_Z    0.799   0.835   0.684
rmse.X      0.585   0.500   0.505
rmse.Z      0.522   0.350   0.614
rmse.XZ     0.495   0.350   0.478
prmse.X     0.545   0.381   0.640
prmse.Z     0.638   0.697   0.468
prmse.XZ    0.674   0.697   0.677
>   ##                 A       B       C
>   ## N         328.000 328.000 328.000
>   ## nX          4.000   4.000   4.000
>   ## M.X         2.616   2.811   3.253
>   ## Var.X       1.381   1.059   1.107
>   ## SD.X        1.175   1.029   1.052
>   ## alpha.X     0.545   0.381   0.640
>   ## [...]
>   ## nZ         12.000  12.000  12.000
>   ## M.Z         8.680   8.680   8.680
>   ## Var.Z       5.668   5.668   5.668
>   ## SD.Z        2.381   2.381   2.381
>   ## alpha.Z     0.677   0.677   0.677
>   ## [...]
>   ## cor.TX_Z    0.799   0.835   0.684
>   ## rmse.X      0.585   0.500   0.505
>   ## rmse.Z      0.522   0.350   0.614
>   ## rmse.XZ     0.495   0.350   0.478
>   ## prmse.X     0.545   0.381   0.640
>   ## prmse.Z     0.638   0.697   0.468
>   ## prmse.XZ    0.674   0.697   0.677
> #-> Scales A and B do not have lower RMSEA,
> #   but for scale C the RMSE is smaller than the RMSE of a
> #   prediction based on a whole scale.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("prmse.subscores.scales", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("prob.guttman")
> ### * prob.guttman
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: prob.guttman
> ### Title: Probabilistic Guttman Model
> ### Aliases: prob.guttman summary.prob.guttman logLik.prob.guttman
> ###   anova.prob.guttman IRT.likelihood.prob.guttman
> ###   IRT.posterior.prob.guttman IRT.irfprob.prob.guttman
> ### Keywords: Probabilistic Guttman model summary
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset Reading
> #############################################################################
> data(data.read)
> dat <- data.read
> 
> #***
> # Model 1: estimate probabilistic Guttman model
> mod1 <- prob.guttman( dat )
---------------------------------------------------------------------------------------------------------- 
Probabilistic Guttman Model 
---------------------------------------------------------------------------------------------------------- 
Iteration 1 |  Deviance = 4443.4257 | Maximum parameter change =  0.228369  
Iteration 2 |  Deviance = 3977.3649 | Deviance change = 466.060772 | Maximum parameter change =  0.109463  
Iteration 3 |  Deviance = 3949.9783 | Deviance change = 27.386572 | Maximum parameter change =  0.100448  
Iteration 4 |  Deviance = 3933.7502 | Deviance change = 16.228129 | Maximum parameter change =  0.056672  
Iteration 5 |  Deviance = 3922.9911 | Deviance change = 10.759101 | Maximum parameter change =  0.02699  
Iteration 6 |  Deviance = 3915.8271 | Deviance change = 7.163975 | Maximum parameter change =  0.01887  
Iteration 7 |  Deviance = 3910.4231 | Deviance change = 5.403967 | Maximum parameter change =  0.018411  
Iteration 8 |  Deviance = 3905.9636 | Deviance change = 4.459535 | Maximum parameter change =  0.016694  
Iteration 9 |  Deviance = 3902.2305 | Deviance change = 3.733105 | Maximum parameter change =  0.014743  
Iteration 10 |  Deviance = 3899.1363 | Deviance change = 3.094241 | Maximum parameter change =  0.013314  
Iteration 11 |  Deviance = 3896.599 | Deviance change = 2.537278 | Maximum parameter change =  0.011738  
Iteration 12 |  Deviance = 3894.531 | Deviance change = 2.067946 | Maximum parameter change =  0.010203  
Iteration 13 |  Deviance = 3892.8478 | Deviance change = 1.683201 | Maximum parameter change =  0.008799  
Iteration 14 |  Deviance = 3891.4745 | Deviance change = 1.373332 | Maximum parameter change =  0.007561  
Iteration 15 |  Deviance = 3890.3483 | Deviance change = 1.126171 | Maximum parameter change =  0.00759  
Iteration 16 |  Deviance = 3889.4186 | Deviance change = 0.929707 | Maximum parameter change =  0.007476  
Iteration 17 |  Deviance = 3888.6453 | Deviance change = 0.773297 | Maximum parameter change =  0.00721  
Iteration 18 |  Deviance = 3887.9973 | Deviance change = 0.648085 | Maximum parameter change =  0.00682  
Iteration 19 |  Deviance = 3887.4503 | Deviance change = 0.546997 | Maximum parameter change =  0.006336  
Iteration 20 |  Deviance = 3886.9857 | Deviance change = 0.46456 | Maximum parameter change =  0.005787  
Iteration 21 |  Deviance = 3886.5891 | Deviance change = 0.396634 | Maximum parameter change =  0.005201  
Iteration 22 |  Deviance = 3886.2489 | Deviance change = 0.340144 | Maximum parameter change =  0.004605  
Iteration 23 |  Deviance = 3885.9561 | Deviance change = 0.292821 | Maximum parameter change =  0.004021  
Iteration 24 |  Deviance = 3885.7031 | Deviance change = 0.252983 | Maximum parameter change =  0.003466  
Iteration 25 |  Deviance = 3885.4838 | Deviance change = 0.21936 | Maximum parameter change =  0.002953  
Iteration 26 |  Deviance = 3885.2928 | Deviance change = 0.190958 | Maximum parameter change =  0.00249  
Iteration 27 |  Deviance = 3885.1258 | Deviance change = 0.166971 | Maximum parameter change =  0.002081  
Iteration 28 |  Deviance = 3884.9791 | Deviance change = 0.14672 | Maximum parameter change =  0.001726  
Iteration 29 |  Deviance = 3884.8495 | Deviance change = 0.12962 | Maximum parameter change =  0.001422  
Iteration 30 |  Deviance = 3884.7343 | Deviance change = 0.115166 | Maximum parameter change =  0.001166  
Iteration 31 |  Deviance = 3884.6314 | Deviance change = 0.102918 | Maximum parameter change =  0.000953  
Iteration 32 |  Deviance = 3884.5389 | Deviance change = 0.0925 | Maximum parameter change =  0.000848  
Iteration 33 |  Deviance = 3884.4553 | Deviance change = 0.083596 | Maximum parameter change =  0.00077  
Iteration 34 |  Deviance = 3884.3794 | Deviance change = 0.075938 | Maximum parameter change =  0.000702  
Iteration 35 |  Deviance = 3884.3101 | Deviance change = 0.069309 | Maximum parameter change =  0.000641  
Iteration 36 |  Deviance = 3884.2465 | Deviance change = 0.063528 | Maximum parameter change =  0.000589  
Iteration 37 |  Deviance = 3884.1881 | Deviance change = 0.058451 | Maximum parameter change =  0.000554  
Iteration 38 |  Deviance = 3884.1341 | Deviance change = 0.05396 | Maximum parameter change =  0.000523  
Iteration 39 |  Deviance = 3884.0842 | Deviance change = 0.04996 | Maximum parameter change =  0.000495  
Iteration 40 |  Deviance = 3884.0378 | Deviance change = 0.046376 | Maximum parameter change =  0.00047  
Iteration 41 |  Deviance = 3883.9946 | Deviance change = 0.043147 | Maximum parameter change =  0.000447  
Iteration 42 |  Deviance = 3883.9544 | Deviance change = 0.040222 | Maximum parameter change =  0.000426  
Iteration 43 |  Deviance = 3883.9169 | Deviance change = 0.03756 | Maximum parameter change =  0.000407  
Iteration 44 |  Deviance = 3883.8817 | Deviance change = 0.035129 | Maximum parameter change =  0.000389  
Iteration 45 |  Deviance = 3883.8488 | Deviance change = 0.0329 | Maximum parameter change =  0.000373  
Iteration 46 |  Deviance = 3883.818 | Deviance change = 0.030851 | Maximum parameter change =  0.000358  
Iteration 47 |  Deviance = 3883.789 | Deviance change = 0.028962 | Maximum parameter change =  0.000344  
Iteration 48 |  Deviance = 3883.7618 | Deviance change = 0.027216 | Maximum parameter change =  0.000332  
Iteration 49 |  Deviance = 3883.7362 | Deviance change = 0.025599 | Maximum parameter change =  0.00032  
Iteration 50 |  Deviance = 3883.7121 | Deviance change = 0.024099 | Maximum parameter change =  0.000308  
Iteration 51 |  Deviance = 3883.6894 | Deviance change = 0.022705 | Maximum parameter change =  0.000298  
Iteration 52 |  Deviance = 3883.668 | Deviance change = 0.021408 | Maximum parameter change =  0.000288  
Iteration 53 |  Deviance = 3883.6478 | Deviance change = 0.020199 | Maximum parameter change =  0.000279  
Iteration 54 |  Deviance = 3883.6287 | Deviance change = 0.019071 | Maximum parameter change =  0.00027  
Iteration 55 |  Deviance = 3883.6107 | Deviance change = 0.018018 | Maximum parameter change =  0.000262  
Iteration 56 |  Deviance = 3883.5937 | Deviance change = 0.017033 | Maximum parameter change =  0.000254  
Iteration 57 |  Deviance = 3883.5776 | Deviance change = 0.016111 | Maximum parameter change =  0.000246  
Iteration 58 |  Deviance = 3883.5623 | Deviance change = 0.015247 | Maximum parameter change =  0.000239  
Iteration 59 |  Deviance = 3883.5479 | Deviance change = 0.014438 | Maximum parameter change =  0.000232  
Iteration 60 |  Deviance = 3883.5342 | Deviance change = 0.013678 | Maximum parameter change =  0.000226  
Iteration 61 |  Deviance = 3883.5212 | Deviance change = 0.012965 | Maximum parameter change =  0.000219  
Iteration 62 |  Deviance = 3883.5089 | Deviance change = 0.012295 | Maximum parameter change =  0.000213  
Iteration 63 |  Deviance = 3883.4973 | Deviance change = 0.011665 | Maximum parameter change =  0.000207  
Iteration 64 |  Deviance = 3883.4862 | Deviance change = 0.011073 | Maximum parameter change =  0.000202  
Iteration 65 |  Deviance = 3883.4757 | Deviance change = 0.010515 | Maximum parameter change =  0.000197  
Iteration 66 |  Deviance = 3883.4657 | Deviance change = 0.009989 | Maximum parameter change =  0.000192  
Iteration 67 |  Deviance = 3883.4562 | Deviance change = 0.009494 | Maximum parameter change =  0.000187  
Iteration 68 |  Deviance = 3883.4472 | Deviance change = 0.009027 | Maximum parameter change =  0.000183  
Iteration 69 |  Deviance = 3883.4386 | Deviance change = 0.008587 | Maximum parameter change =  0.000179  
Iteration 70 |  Deviance = 3883.4304 | Deviance change = 0.008171 | Maximum parameter change =  0.000175  
Iteration 71 |  Deviance = 3883.4226 | Deviance change = 0.007779 | Maximum parameter change =  0.00017  
Iteration 72 |  Deviance = 3883.4152 | Deviance change = 0.007408 | Maximum parameter change =  0.000167  
Iteration 73 |  Deviance = 3883.4082 | Deviance change = 0.007057 | Maximum parameter change =  0.000163  
Iteration 74 |  Deviance = 3883.4014 | Deviance change = 0.006726 | Maximum parameter change =  0.000159  
Iteration 75 |  Deviance = 3883.395 | Deviance change = 0.006413 | Maximum parameter change =  0.000156  
Iteration 76 |  Deviance = 3883.3889 | Deviance change = 0.006116 | Maximum parameter change =  0.000152  
Iteration 77 |  Deviance = 3883.3831 | Deviance change = 0.005835 | Maximum parameter change =  0.000149  
Iteration 78 |  Deviance = 3883.3775 | Deviance change = 0.005569 | Maximum parameter change =  0.000146  
Iteration 79 |  Deviance = 3883.3722 | Deviance change = 0.005317 | Maximum parameter change =  0.000142  
Iteration 80 |  Deviance = 3883.3671 | Deviance change = 0.005078 | Maximum parameter change =  0.000139  
Iteration 81 |  Deviance = 3883.3623 | Deviance change = 0.004851 | Maximum parameter change =  0.000136  
Iteration 82 |  Deviance = 3883.3576 | Deviance change = 0.004637 | Maximum parameter change =  0.000134  
Iteration 83 |  Deviance = 3883.3532 | Deviance change = 0.004433 | Maximum parameter change =  0.000131  
Iteration 84 |  Deviance = 3883.349 | Deviance change = 0.004239 | Maximum parameter change =  0.000128  
Iteration 85 |  Deviance = 3883.3449 | Deviance change = 0.004055 | Maximum parameter change =  0.000125  
Iteration 86 |  Deviance = 3883.341 | Deviance change = 0.003881 | Maximum parameter change =  0.000123  
Iteration 87 |  Deviance = 3883.3373 | Deviance change = 0.003715 | Maximum parameter change =  0.00012  
Iteration 88 |  Deviance = 3883.3337 | Deviance change = 0.003557 | Maximum parameter change =  0.000118  
Iteration 89 |  Deviance = 3883.3303 | Deviance change = 0.003407 | Maximum parameter change =  0.000116  
Iteration 90 |  Deviance = 3883.3271 | Deviance change = 0.003265 | Maximum parameter change =  0.000113  
Iteration 91 |  Deviance = 3883.3239 | Deviance change = 0.003129 | Maximum parameter change =  0.000111  
Iteration 92 |  Deviance = 3883.3209 | Deviance change = 0.003 | Maximum parameter change =  0.000109  
Iteration 93 |  Deviance = 3883.3181 | Deviance change = 0.002877 | Maximum parameter change =  0.000107  
Iteration 94 |  Deviance = 3883.3153 | Deviance change = 0.00276 | Maximum parameter change =  0.000105  
Iteration 95 |  Deviance = 3883.3127 | Deviance change = 0.002649 | Maximum parameter change =  0.000103  
Iteration 96 |  Deviance = 3883.3101 | Deviance change = 0.002543 | Maximum parameter change =  0.000101  
Iteration 97 |  Deviance = 3883.3077 | Deviance change = 0.002442 | Maximum parameter change =  9.9e-05  
Iteration 98 |  Deviance = 3883.3053 | Deviance change = 0.002345 | Maximum parameter change =  9.7e-05  
Iteration 99 |  Deviance = 3883.3031 | Deviance change = 0.002253 | Maximum parameter change =  9.5e-05  
Iteration 100 |  Deviance = 3883.3009 | Deviance change = 0.002166 | Maximum parameter change =  9.4e-05  
Iteration 101 |  Deviance = 3883.2988 | Deviance change = 0.002082 | Maximum parameter change =  9.2e-05  
Iteration 102 |  Deviance = 3883.2968 | Deviance change = 0.002002 | Maximum parameter change =  9e-05  
Iteration 103 |  Deviance = 3883.2949 | Deviance change = 0.001926 | Maximum parameter change =  8.9e-05  
Iteration 104 |  Deviance = 3883.293 | Deviance change = 0.001853 | Maximum parameter change =  8.7e-05  
Iteration 105 |  Deviance = 3883.2913 | Deviance change = 0.001783 | Maximum parameter change =  8.5e-05  
Iteration 106 |  Deviance = 3883.2895 | Deviance change = 0.001717 | Maximum parameter change =  8.4e-05  
Iteration 107 |  Deviance = 3883.2879 | Deviance change = 0.001653 | Maximum parameter change =  8.2e-05  
Iteration 108 |  Deviance = 3883.2863 | Deviance change = 0.001592 | Maximum parameter change =  8.1e-05  
Iteration 109 |  Deviance = 3883.2848 | Deviance change = 0.001534 | Maximum parameter change =  8e-05  
Iteration 110 |  Deviance = 3883.2833 | Deviance change = 0.001479 | Maximum parameter change =  7.8e-05  
Iteration 111 |  Deviance = 3883.2819 | Deviance change = 0.001426 | Maximum parameter change =  7.7e-05  
Iteration 112 |  Deviance = 3883.2805 | Deviance change = 0.001375 | Maximum parameter change =  7.6e-05  
Iteration 113 |  Deviance = 3883.2792 | Deviance change = 0.001326 | Maximum parameter change =  7.4e-05  
Iteration 114 |  Deviance = 3883.2779 | Deviance change = 0.001279 | Maximum parameter change =  7.3e-05  
Iteration 115 |  Deviance = 3883.2766 | Deviance change = 0.001235 | Maximum parameter change =  7.2e-05  
Iteration 116 |  Deviance = 3883.2755 | Deviance change = 0.001192 | Maximum parameter change =  7.1e-05  
Iteration 117 |  Deviance = 3883.2743 | Deviance change = 0.001151 | Maximum parameter change =  6.9e-05  
Iteration 118 |  Deviance = 3883.2732 | Deviance change = 0.001112 | Maximum parameter change =  6.8e-05  
Iteration 119 |  Deviance = 3883.2721 | Deviance change = 0.001074 | Maximum parameter change =  6.7e-05  
Iteration 120 |  Deviance = 3883.2711 | Deviance change = 0.001038 | Maximum parameter change =  6.6e-05  
Iteration 121 |  Deviance = 3883.2701 | Deviance change = 0.001003 | Maximum parameter change =  6.5e-05  
Iteration 122 |  Deviance = 3883.2691 | Deviance change = 0.00097 | Maximum parameter change =  6.4e-05  
> summary(mod1)
---------------------------------------------------------------------------------------------------------- 
sirt 1.7-0 (2015-06-05) 

Probabilistic Guttman Model 
---------------------------------------------------------------------------------------------------------- 
Number of iterations = 122 
Deviance =  3883.27 
Number of persons =  328 
Number of estimated parameters =  35 
AIC  =  3953.27  | penalty = 70    | AIC = -2*LL + 2*p  
AICc =  3961.9  | penalty = 78.63    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  4086.02  | penalty = 202.76    | BIC = -2*LL + log(n)*p  
CAIC =  4121.02  | penalty = 237.76   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

---------------------------------------------------------------------------------------------------------- 
Trait Distribution 
               level  prob freq.MLE freq.MAP
theta_level_0      0 0.075    0.067    0.067
theta_level_1      1 0.047    0.012    0.058
theta_level_2      2 0.004    0.049    0.000
theta_level_3      3 0.328    0.113    0.351
theta_level_4      4 0.000    0.122    0.000
theta_level_5      5 0.000    0.040    0.000
theta_level_6      6 0.000    0.052    0.000
theta_level_7      7 0.012    0.024    0.000
theta_level_8      8 0.103    0.098    0.085
theta_level_9      9 0.028    0.058    0.000
theta_level_10    10 0.132    0.088    0.137
theta_level_11    11 0.271    0.277    0.302

---------------------------------------------------------------------------------------------------------- 
Item Parameter 
   index item     p level guess  slip discrim
1      1   A1 0.851     4 0.693 0.019   0.288
2      2   A2 0.738     5 0.470 0.040   0.490
3      3   A3 0.567     9 0.317 0.103   0.581
4      4   A4 0.460    11 0.285 0.068   0.648
5      5   B1 0.713     7 0.574 0.171   0.255
6      6   B2 0.506    10 0.374 0.298   0.327
7      7   B3 0.909     2 0.720 0.066   0.214
8      8   B4 0.683     8 0.464 0.126   0.411
9      9   C1 0.933     1 0.100 0.000   0.900
10    10   C2 0.713     7 0.489 0.100   0.411
11    11   C3 0.872     3 0.209 0.033   0.758
12    12   C4 0.735     6 0.581 0.138   0.281
> 
> #***
> # Model 2: probabilistic Guttman model with equal guessing and slipping parameters
> mod2 <- prob.guttman( dat , guess.equal=TRUE , slip.equal=TRUE)
---------------------------------------------------------------------------------------------------------- 
Probabilistic Guttman Model 
---------------------------------------------------------------------------------------------------------- 
Iteration 1 |  Deviance = 4443.4257 | Maximum parameter change =  0.105124  
Iteration 2 |  Deviance = 4061.0145 | Deviance change = 382.411134 | Maximum parameter change =  0.021354  
Iteration 3 |  Deviance = 4042.7177 | Deviance change = 18.296804 | Maximum parameter change =  0.017566  
Iteration 4 |  Deviance = 4030.3796 | Deviance change = 12.338153 | Maximum parameter change =  0.014712  
Iteration 5 |  Deviance = 4021.9476 | Deviance change = 8.431973 | Maximum parameter change =  0.012359  
Iteration 6 |  Deviance = 4016.0959 | Deviance change = 5.851718 | Maximum parameter change =  0.010382  
Iteration 7 |  Deviance = 4011.9782 | Deviance change = 4.117705 | Maximum parameter change =  0.008721  
Iteration 8 |  Deviance = 4009.0485 | Deviance change = 2.929667 | Maximum parameter change =  0.007327  
Iteration 9 |  Deviance = 4006.9479 | Deviance change = 2.100605 | Maximum parameter change =  0.006156  
Iteration 10 |  Deviance = 4005.4347 | Deviance change = 1.513242 | Maximum parameter change =  0.005171  
Iteration 11 |  Deviance = 4004.3419 | Deviance change = 1.092802 | Maximum parameter change =  0.004342  
Iteration 12 |  Deviance = 4003.5517 | Deviance change = 0.79021 | Maximum parameter change =  0.003643  
Iteration 13 |  Deviance = 4002.9796 | Deviance change = 0.572078 | Maximum parameter change =  0.003055  
Iteration 14 |  Deviance = 4002.5647 | Deviance change = 0.414921 | Maximum parameter change =  0.00256  
Iteration 15 |  Deviance = 4002.2628 | Deviance change = 0.301847 | Maximum parameter change =  0.002144  
Iteration 16 |  Deviance = 4002.0422 | Deviance change = 0.220578 | Maximum parameter change =  0.001795  
Iteration 17 |  Deviance = 4001.8801 | Deviance change = 0.162175 | Maximum parameter change =  0.001503  
Iteration 18 |  Deviance = 4001.7599 | Deviance change = 0.120157 | Maximum parameter change =  0.001258  
Iteration 19 |  Deviance = 4001.67 | Deviance change = 0.089846 | Maximum parameter change =  0.001053  
Iteration 20 |  Deviance = 4001.6022 | Deviance change = 0.067891 | Maximum parameter change =  0.000882  
Iteration 21 |  Deviance = 4001.5503 | Deviance change = 0.051899 | Maximum parameter change =  0.000739  
Iteration 22 |  Deviance = 4001.5101 | Deviance change = 0.04017 | Maximum parameter change =  0.00062  
Iteration 23 |  Deviance = 4001.4786 | Deviance change = 0.031496 | Maximum parameter change =  0.00052  
Iteration 24 |  Deviance = 4001.4536 | Deviance change = 0.025023 | Maximum parameter change =  0.000437  
Iteration 25 |  Deviance = 4001.4334 | Deviance change = 0.020143 | Maximum parameter change =  0.000368  
Iteration 26 |  Deviance = 4001.417 | Deviance change = 0.016424 | Maximum parameter change =  0.00031  
Iteration 27 |  Deviance = 4001.4034 | Deviance change = 0.013558 | Maximum parameter change =  0.000261  
Iteration 28 |  Deviance = 4001.3921 | Deviance change = 0.011324 | Maximum parameter change =  0.00022  
Iteration 29 |  Deviance = 4001.3826 | Deviance change = 0.009561 | Maximum parameter change =  0.000186  
Iteration 30 |  Deviance = 4001.3744 | Deviance change = 0.008156 | Maximum parameter change =  0.000158  
Iteration 31 |  Deviance = 4001.3674 | Deviance change = 0.007022 | Maximum parameter change =  0.000134  
Iteration 32 |  Deviance = 4001.3613 | Deviance change = 0.006097 | Maximum parameter change =  0.000113  
Iteration 33 |  Deviance = 4001.356 | Deviance change = 0.005335 | Maximum parameter change =  9.6e-05  
Iteration 34 |  Deviance = 4001.3512 | Deviance change = 0.004702 | Maximum parameter change =  8.2e-05  
Iteration 35 |  Deviance = 4001.3471 | Deviance change = 0.00417 | Maximum parameter change =  7e-05  
Iteration 36 |  Deviance = 4001.3434 | Deviance change = 0.00372 | Maximum parameter change =  6e-05  
Iteration 37 |  Deviance = 4001.34 | Deviance change = 0.003337 | Maximum parameter change =  5.1e-05  
Iteration 38 |  Deviance = 4001.337 | Deviance change = 0.003007 | Maximum parameter change =  4.4e-05  
Iteration 39 |  Deviance = 4001.3343 | Deviance change = 0.002722 | Maximum parameter change =  3.7e-05  
Iteration 40 |  Deviance = 4001.3318 | Deviance change = 0.002474 | Maximum parameter change =  3.2e-05  
Iteration 41 |  Deviance = 4001.3296 | Deviance change = 0.002257 | Maximum parameter change =  2.8e-05  
Iteration 42 |  Deviance = 4001.3275 | Deviance change = 0.002066 | Maximum parameter change =  2.4e-05  
Iteration 43 |  Deviance = 4001.3256 | Deviance change = 0.001897 | Maximum parameter change =  2e-05  
Iteration 44 |  Deviance = 4001.3239 | Deviance change = 0.001747 | Maximum parameter change =  1.8e-05  
Iteration 45 |  Deviance = 4001.3222 | Deviance change = 0.001613 | Maximum parameter change =  1.5e-05  
Iteration 46 |  Deviance = 4001.3207 | Deviance change = 0.001494 | Maximum parameter change =  1.3e-05  
Iteration 47 |  Deviance = 4001.3194 | Deviance change = 0.001386 | Maximum parameter change =  1.1e-05  
Iteration 48 |  Deviance = 4001.3181 | Deviance change = 0.001289 | Maximum parameter change =  1e-05  
Iteration 49 |  Deviance = 4001.3169 | Deviance change = 0.001201 | Maximum parameter change =  8e-06  
Iteration 50 |  Deviance = 4001.3157 | Deviance change = 0.001122 | Maximum parameter change =  7e-06  
Iteration 51 |  Deviance = 4001.3147 | Deviance change = 0.001049 | Maximum parameter change =  6e-06  
Iteration 52 |  Deviance = 4001.3137 | Deviance change = 0.000983 | Maximum parameter change =  5e-06  
> summary(mod2)
---------------------------------------------------------------------------------------------------------- 
sirt 1.7-0 (2015-06-05) 

Probabilistic Guttman Model 
---------------------------------------------------------------------------------------------------------- 
Number of iterations = 52 
Deviance =  4001.31 
Number of persons =  328 
Number of estimated parameters =  13 
AIC  =  4027.31  | penalty = 26    | AIC = -2*LL + 2*p  
AICc =  4028.47  | penalty = 27.16    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  4076.62  | penalty = 75.31    | BIC = -2*LL + log(n)*p  
CAIC =  4089.62  | penalty = 88.31   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

---------------------------------------------------------------------------------------------------------- 
Trait Distribution 
               level  prob freq.MLE freq.MAP
theta_level_0      0 0.082    0.055    0.073
theta_level_1      1 0.001    0.043    0.000
theta_level_2      2 0.026    0.040    0.015
theta_level_3      3 0.137    0.095    0.098
theta_level_4      4 0.122    0.073    0.180
theta_level_5      5 0.028    0.052    0.000
theta_level_6      6 0.055    0.073    0.058
theta_level_7      7 0.076    0.070    0.052
theta_level_8      8 0.153    0.113    0.134
theta_level_9      9 0.124    0.125    0.204
theta_level_10    10 0.044    0.082    0.000
theta_level_11    11 0.152    0.180    0.186

---------------------------------------------------------------------------------------------------------- 
Item Parameter 
   index item     p level guess  slip discrim
1      1   A1 0.851     4 0.436 0.068   0.496
2      2   A2 0.738     5 0.436 0.068   0.496
3      3   A3 0.567     9 0.436 0.068   0.496
4      4   A4 0.460    11 0.436 0.068   0.496
5      5   B1 0.713     7 0.436 0.068   0.496
6      6   B2 0.506    10 0.436 0.068   0.496
7      7   B3 0.909     2 0.436 0.068   0.496
8      8   B4 0.683     8 0.436 0.068   0.496
9      9   C1 0.933     1 0.436 0.068   0.496
10    10   C2 0.713     7 0.436 0.068   0.496
11    11   C3 0.872     3 0.436 0.068   0.496
12    12   C4 0.735     6 0.436 0.068   0.496
> 
> #***
> # Model 3: Guttman model with three a priori specified item levels
> itemlevel <- rep(1,12)
> itemlevel[ c(2,5,8,10,12) ] <- 2
> itemlevel[ c(3,4,6) ] <- 3
> mod3 <- prob.guttman( dat , itemlevel=itemlevel )
---------------------------------------------------------------------------------------------------------- 
Probabilistic Guttman Model 
---------------------------------------------------------------------------------------------------------- 
Iteration 1 |  Deviance = 4390.2983 | Maximum parameter change =  0.414624  
Iteration 2 |  Deviance = 3971.4794 | Deviance change = 418.818824 | Maximum parameter change =  0.135139  
Iteration 3 |  Deviance = 3950.1775 | Deviance change = 21.301961 | Maximum parameter change =  0.057199  
Iteration 4 |  Deviance = 3941.7631 | Deviance change = 8.414369 | Maximum parameter change =  0.02655  
Iteration 5 |  Deviance = 3937.7465 | Deviance change = 4.016647 | Maximum parameter change =  0.02887  
Iteration 6 |  Deviance = 3935.1221 | Deviance change = 2.624382 | Maximum parameter change =  0.025856  
Iteration 7 |  Deviance = 3933.0375 | Deviance change = 2.084541 | Maximum parameter change =  0.021539  
Iteration 8 |  Deviance = 3931.2524 | Deviance change = 1.785102 | Maximum parameter change =  0.0177  
Iteration 9 |  Deviance = 3929.6735 | Deviance change = 1.578976 | Maximum parameter change =  0.01462  
Iteration 10 |  Deviance = 3928.258 | Deviance change = 1.415477 | Maximum parameter change =  0.01223  
Iteration 11 |  Deviance = 3926.9837 | Deviance change = 1.274249 | Maximum parameter change =  0.011488  
Iteration 12 |  Deviance = 3925.836 | Deviance change = 1.147756 | Maximum parameter change =  0.010654  
Iteration 13 |  Deviance = 3924.8022 | Deviance change = 1.033752 | Maximum parameter change =  0.011392  
Iteration 14 |  Deviance = 3923.8709 | Deviance change = 0.931295 | Maximum parameter change =  0.012225  
Iteration 15 |  Deviance = 3923.032 | Deviance change = 0.838971 | Maximum parameter change =  0.012796  
Iteration 16 |  Deviance = 3922.2774 | Deviance change = 0.754599 | Maximum parameter change =  0.013051  
Iteration 17 |  Deviance = 3921.6017 | Deviance change = 0.675705 | Maximum parameter change =  0.012965  
Iteration 18 |  Deviance = 3921.0015 | Deviance change = 0.600187 | Maximum parameter change =  0.012544  
Iteration 19 |  Deviance = 3920.4747 | Deviance change = 0.526778 | Maximum parameter change =  0.011832  
Iteration 20 |  Deviance = 3920.0195 | Deviance change = 0.45519 | Maximum parameter change =  0.010894  
Iteration 21 |  Deviance = 3919.6335 | Deviance change = 0.386013 | Maximum parameter change =  0.009811  
Iteration 22 |  Deviance = 3919.313 | Deviance change = 0.320456 | Maximum parameter change =  0.008665  
Iteration 23 |  Deviance = 3919.053 | Deviance change = 0.260019 | Maximum parameter change =  0.007526  
Iteration 24 |  Deviance = 3918.8469 | Deviance change = 0.206116 | Maximum parameter change =  0.006453  
Iteration 25 |  Deviance = 3918.6872 | Deviance change = 0.159739 | Maximum parameter change =  0.005479  
Iteration 26 |  Deviance = 3918.5659 | Deviance change = 0.121257 | Maximum parameter change =  0.004625  
Iteration 27 |  Deviance = 3918.4755 | Deviance change = 0.090405 | Maximum parameter change =  0.00389  
Iteration 28 |  Deviance = 3918.4091 | Deviance change = 0.066419 | Maximum parameter change =  0.00327  
Iteration 29 |  Deviance = 3918.3608 | Deviance change = 0.048257 | Maximum parameter change =  0.00275  
Iteration 30 |  Deviance = 3918.326 | Deviance change = 0.034794 | Maximum parameter change =  0.002318  
Iteration 31 |  Deviance = 3918.3011 | Deviance change = 0.024978 | Maximum parameter change =  0.001957  
Iteration 32 |  Deviance = 3918.2831 | Deviance change = 0.017906 | Maximum parameter change =  0.001657  
Iteration 33 |  Deviance = 3918.2703 | Deviance change = 0.01285 | Maximum parameter change =  0.001406  
Iteration 34 |  Deviance = 3918.2611 | Deviance change = 0.00925 | Maximum parameter change =  0.001196  
Iteration 35 |  Deviance = 3918.2544 | Deviance change = 0.00669 | Maximum parameter change =  0.001019  
Iteration 36 |  Deviance = 3918.2495 | Deviance change = 0.004867 | Maximum parameter change =  0.00087  
Iteration 37 |  Deviance = 3918.2459 | Deviance change = 0.003565 | Maximum parameter change =  0.000743  
Iteration 38 |  Deviance = 3918.2433 | Deviance change = 0.002631 | Maximum parameter change =  0.000636  
Iteration 39 |  Deviance = 3918.2413 | Deviance change = 0.001957 | Maximum parameter change =  0.000544  
Iteration 40 |  Deviance = 3918.2399 | Deviance change = 0.001468 | Maximum parameter change =  0.000467  
Iteration 41 |  Deviance = 3918.2388 | Deviance change = 0.001111 | Maximum parameter change =  4e-04  
Iteration 42 |  Deviance = 3918.2379 | Deviance change = 0.000848 | Maximum parameter change =  0.000343  
> summary(mod3)
---------------------------------------------------------------------------------------------------------- 
sirt 1.7-0 (2015-06-05) 

Probabilistic Guttman Model 
---------------------------------------------------------------------------------------------------------- 
Number of iterations = 42 
Deviance =  3918.24 
Number of persons =  328 
Number of estimated parameters =  27 
AIC  =  3972.24  | penalty = 54    | AIC = -2*LL + 2*p  
AICc =  3977.28  | penalty = 59.04    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  4074.65  | penalty = 156.41    | BIC = -2*LL + log(n)*p  
CAIC =  4101.65  | penalty = 183.41   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

---------------------------------------------------------------------------------------------------------- 
Trait Distribution 
              level  prob freq.MLE freq.MAP
theta_level_0     0 0.137    0.125    0.125
theta_level_1     1 0.303    0.284    0.299
theta_level_2     2 0.152    0.210    0.116
theta_level_3     3 0.408    0.381    0.460

---------------------------------------------------------------------------------------------------------- 
Item Parameter 
   index item     p level guess  slip discrim
1      1   A1 0.851     1 0.781 0.138   0.081
2      2   A2 0.738     2 0.451 0.037   0.511
3      3   A3 0.567     3 0.320 0.075   0.605
4      4   A4 0.460     3 0.301 0.308   0.391
5      5   B1 0.713     2 0.578 0.180   0.242
6      6   B2 0.506     3 0.376 0.305   0.319
7      7   B3 0.909     1 0.726 0.063   0.211
8      8   B4 0.683     2 0.456 0.139   0.406
9      9   C1 0.933     1 0.511 0.000   0.489
10    10   C2 0.713     2 0.471 0.096   0.433
11    11   C3 0.872     1 0.246 0.029   0.726
12    12   C4 0.735     2 0.565 0.132   0.303
> 
> ## Not run: 
> ##D #***
> ##D # Model3m: estimate Model 3 in mirt
> ##D 
> ##D library(mirt)
> ##D # define four ordered latent classes
> ##D Theta <- scan(nlines=1)
> ##D    0 0 0    1 0 0   1 1 0   1 1 1    
> ##D Theta <- matrix( Theta , nrow=4 , ncol=3,byrow=TRUE)
> ##D 
> ##D # define mirt model
> ##D I <- ncol(dat)  # I = 12
> ##D mirtmodel <- mirt::mirt.model("
> ##D         # specify factors for each item level
> ##D         C1 = 1,7,9,11
> ##D         C2 = 2,5,8,10,12 
> ##D         C3 = 3,4,6
> ##D         ")
> ##D # get initial parameter values
> ##D mod.pars <- mirt::mirt(dat, model=mirtmodel ,  pars = "values")
> ##D # redefine initial parameter values
> ##D mod.pars[ mod.pars$name == "d" ,"value" ]  <- -1
> ##D mod.pars[ mod.pars$name %in% paste0("a",1:3) & mod.pars$est    ,"value" ]  <- 2
> ##D mod.pars
> ##D # define prior for latent class analysis
> ##D lca_prior <- function(Theta,Etable){
> ##D   # number of latent Theta classes
> ##D   TP <- nrow(Theta)
> ##D   # prior in initial iteration
> ##D   if ( is.null(Etable) ){ prior <- rep( 1/TP , TP ) }    
> ##D   # process Etable (this is correct for datasets without missing data)
> ##D   if ( ! is.null(Etable) ){  
> ##D     # sum over correct and incorrect expected responses 
> ##D     prior <- ( rowSums(Etable[ , seq(1,2*I,2)]) + rowSums(Etable[,seq(2,2*I,2)]) )/I
> ##D                  }
> ##D   prior <- prior / sum(prior)  
> ##D   return(prior)
> ##D }
> ##D # estimate model in mirt
> ##D mod3m <- mirt::mirt(dat, mirtmodel , pars = mod.pars , verbose=TRUE , 
> ##D             technical = list( customTheta=Theta , customPriorFun = lca_prior) )
> ##D # correct number of estimated parameters
> ##D mod3m@nest <- as.integer(sum(mod.pars$est) + nrow(Theta)-1 ) 
> ##D # extract log-likelihood and compute AIC and BIC
> ##D mod3m@logLik
> ##D ( AIC <- -2*mod3m@logLik+2*mod3m@nest )
> ##D ( BIC <- -2*mod3m@logLik+log(mod3m@Data$N)*mod3m@nest )
> ##D # compare with information criteria from prob.guttman
> ##D mod3$ic
> ##D # model fit in mirt
> ##D mirt::M2(mod3m)
> ##D # extract coefficients
> ##D ( cmod3m <- mirt.wrapper.coef(mod3m) )
> ##D # compare estimated distributions
> ##D round( cbind( "sirt"  = mod3$trait$prob , "mirt" = mod3m@Prior[[1]] ) , 5 )
> ##D   ##           sirt    mirt
> ##D   ##   [1,] 0.13709 0.13765
> ##D   ##   [2,] 0.30266 0.30303
> ##D   ##   [3,] 0.15239 0.15085
> ##D   ##   [4,] 0.40786 0.40846
> ##D # compare estimated item parameters
> ##D ipars <- data.frame( "guess.sirt" = mod3$item$guess , 
> ##D                      "guess.mirt" = plogis( cmod3m$coef$d ) )
> ##D ipars$slip.sirt <- mod3$item$slip
> ##D ipars$slip.mirt <- 1-plogis( rowSums(cmod3m$coef[ , c("a1","a2","a3","d") ] ) )
> ##D round( ipars , 4 )
> ##D   ##      guess.sirt guess.mirt slip.sirt slip.mirt
> ##D   ##   1      0.7810     0.7804    0.1383    0.1382
> ##D   ##   2      0.4513     0.4517    0.0373    0.0368
> ##D   ##   3      0.3203     0.3200    0.0747    0.0751
> ##D   ##   4      0.3009     0.3007    0.3082    0.3087
> ##D   ##   5      0.5776     0.5779    0.1800    0.1798
> ##D   ##   6      0.3758     0.3759    0.3047    0.3051
> ##D   ##   7      0.7262     0.7259    0.0625    0.0623
> ##D   ##   [...]
> ##D 
> ##D #***
> ##D # Model 4: Monotone item response function estimated in mirt
> ##D 
> ##D # define four ordered latent classes
> ##D Theta <- scan(nlines=1)
> ##D    0 0 0    1 0 0   1 1 0   1 1 1    
> ##D Theta <- matrix( Theta , nrow=4 , ncol=3,byrow=TRUE)
> ##D 
> ##D # define mirt model
> ##D I <- ncol(dat)  # I = 12
> ##D mirtmodel <- mirt::mirt.model("
> ##D         # specify factors for each item level
> ##D         C1 = 1-12  
> ##D         C2 = 1-12
> ##D         C3 = 1-12
> ##D         ")
> ##D # get initial parameter values
> ##D mod.pars <- mirt::mirt(dat, model=mirtmodel ,  pars = "values")
> ##D # redefine initial parameter values
> ##D mod.pars[ mod.pars$name == "d" ,"value" ]  <- -1
> ##D mod.pars[ mod.pars$name %in% paste0("a",1:3) & mod.pars$est    ,"value" ]  <- .6
> ##D # set lower bound to zero ton ensure monotonicity
> ##D mod.pars[ mod.pars$name %in% paste0("a",1:3)     ,"lbound" ]  <- 0
> ##D mod.pars
> ##D # estimate model in mirt
> ##D mod4 <- mirt::mirt(dat, mirtmodel , pars = mod.pars , verbose=TRUE , 
> ##D             technical = list( customTheta=Theta , customPriorFun = lca_prior) )
> ##D # correct number of estimated parameters
> ##D mod4@nest <- as.integer(sum(mod.pars$est) + nrow(Theta)-1 ) 
> ##D # extract coefficients
> ##D cmod4 <- mirt.wrapper.coef(mod4)
> ##D cmod4
> ##D # compute item response functions
> ##D cmod4c <- cmod4$coef[ , c("d" , "a1" , "a2" , "a3" ) ]
> ##D probs4 <- t( apply( cmod4c , 1 , FUN = function(ll){ 
> ##D                  plogis(cumsum(as.numeric(ll))) } ) )
> ##D matplot( 1:4 ,  t(probs4) , type="b" , pch=1:I)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("prob.guttman", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("qmc.nodes")
> ### * qmc.nodes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: qmc.nodes
> ### Title: Calculation of Quasi Monte Carlo Integration Points
> ### Aliases: qmc.nodes
> ### Keywords: Quasi Monte Carlo integration
> 
> ### ** Examples
> 
> ## some toy examples
> 
> # 5 nodes on one dimension
> qmc.nodes( snodes=5 , ndim=1 )
           [,1]
[1,]  0.0000000
[2,] -0.3863753
[3,]  0.8409238
[4,] -0.8426682
[5,]  0.3850568
>   ##            [,1]
>   ## [1,]  0.0000000
>   ## [2,] -0.3863753
>   ## [3,]  0.8409238
>   ## [4,] -0.8426682
>   ## [5,]  0.3850568
> 
> # 7 nodes on two dimensions
> qmc.nodes( snodes =7 , ndim=2 )
            [,1]        [,2]
[1,]  0.00000000 -0.43072730
[2,] -0.38637529  0.79736332
[3,]  0.84092380 -1.73230641
[4,] -0.84266815 -0.03840544
[5,]  0.38505683  1.51466109
[6,] -0.00122394 -0.86704605
[7,]  1.35539115  0.33491073
>   ##             [,1]        [,2]
>   ## [1,]  0.00000000 -0.43072730
>   ## [2,] -0.38637529  0.79736332
>   ## [3,]  0.84092380 -1.73230641
>   ## [4,] -0.84266815 -0.03840544
>   ## [5,]  0.38505683  1.51466109
>   ## [6,] -0.00122394 -0.86704605
>   ## [7,]  1.35539115  0.33491073
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("qmc.nodes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.copula")
> ### * rasch.copula
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.copula2
> ### Title: Multidimensional IRT Copula Model
> ### Aliases: rasch.copula2 rasch.copula3 summary.rasch.copula2
> ###   summary.rasch.copula3 anova.rasch.copula2 anova.rasch.copula3
> ###   logLik.rasch.copula2 logLik.rasch.copula3
> ###   IRT.likelihood.rasch.copula2 IRT.likelihood.rasch.copula3
> ###   IRT.posterior.rasch.copula2 IRT.posterior.rasch.copula3
> ### Keywords: IRT copula models Local dependence summary logLik anova
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Reading Data
> #############################################################################
> 
> data(data.read)
> dat <- data.read
> 
> # define item clusters
> itemcluster <- rep( 1:3 , each=4 )
> 
> # estimate Copula model
> mod1 <- rasch.copula2( dat=dat , itemcluster=itemcluster)
-----------------------------------------------------------------
Marginal Maximum Likelihood Estimation 
Raschtype Copula Model with generalized logistic link function: Estimation of alpha1 and alpha2 
Function 'rasch.copula2'
-----------------------------------------------------------------
---------------------------------------------------------------------- 
MML EM Iter. 1        |**********|  2015-06-13 13:24:14  
 Estimation of b:     |----------|     max. parm. change 0.24866 
 Estimation of a:     |----------|     max. parm. change 0.01639 
 Estimation of delta: |----------|     max. parm. change 0.19802 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3966.123  | Deviance change =  -3965.123 | max. parm. change =  0.248655  
---------------------------------------------------------------------- 
MML EM Iter. 2        |**********|  2015-06-13 13:24:14  0.0489 secs
 Estimation of b:     |----------|     max. parm. change 0.16383 
 Estimation of a:     |----------|     max. parm. change 0.01051 
 Estimation of delta: |----------|     max. parm. change 0.19606 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3891.219  | Deviance change =  74.9037 | max. parm. change =  0.196059  
---------------------------------------------------------------------- 
MML EM Iter. 3        |**********|  2015-06-13 13:24:14  0.0608 secs
 Estimation of b:     |----------|     max. parm. change 0.0805 
 Estimation of a:     |----------|     max. parm. change 0.01488 
 Estimation of delta: |----------|     max. parm. change 0.05477 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3865.858  | Deviance change =  25.3611 | max. parm. change =  0.0805  
---------------------------------------------------------------------- 
MML EM Iter. 4        |**********|  2015-06-13 13:24:14  0.0557 secs
 Estimation of b:     |----------|     max. parm. change 0.042 
 Estimation of a:     |----------|     max. parm. change 0.00874 
 Estimation of delta: |----------|     max. parm. change 0.0064 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.678  | Deviance change =  3.1801 | max. parm. change =  0.042  
---------------------------------------------------------------------- 
MML EM Iter. 5        |**********|  2015-06-13 13:24:14  0.0555 secs
 Estimation of b:     |----------|     max. parm. change 0.02367 
 Estimation of a:     |----------|     max. parm. change 0.00267 
 Estimation of delta: |----------|     max. parm. change 0.00211 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.324  | Deviance change =  0.3535 | max. parm. change =  0.023667  
---------------------------------------------------------------------- 
MML EM Iter. 6        |**********|  2015-06-13 13:24:14  0.044 secs
 Estimation of b:     |----------|     max. parm. change 0.0148 
 Estimation of a:     |----------|     max. parm. change 0.00017 
 Estimation of delta: |----------|     max. parm. change 9e-04 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.176  | Deviance change =  0.1486 | max. parm. change =  0.014796  
---------------------------------------------------------------------- 
MML EM Iter. 7        |**********|  2015-06-13 13:24:14  0.0437 secs
 Estimation of b:     |----------|     max. parm. change 0.00977 
 Estimation of a:     |----------|     max. parm. change 0.00149 
 Estimation of delta: |----------|     max. parm. change 0.00038 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.098  | Deviance change =  0.0778 | max. parm. change =  0.009765  
---------------------------------------------------------------------- 
MML EM Iter. 8        |**********|  2015-06-13 13:24:14  0.0436 secs
 Estimation of b:     |----------|     max. parm. change 0.00921 
 Estimation of a:     |----------|     max. parm. change 0.00205 
 Estimation of delta: |----------|     max. parm. change 0.00017 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.049  | Deviance change =  0.0486 | max. parm. change =  0.009213  
---------------------------------------------------------------------- 
MML EM Iter. 9        |**********|  2015-06-13 13:24:14  0.0473 secs
 Estimation of b:     |----------|     max. parm. change 0.00858 
 Estimation of a:     |----------|     max. parm. change 0.00222 
 Estimation of delta: |----------|     max. parm. change 9e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3862.015  | Deviance change =  0.0341 | max. parm. change =  0.008576  
---------------------------------------------------------------------- 
MML EM Iter. 10       |**********|  2015-06-13 13:24:14  0.0537 secs
 Estimation of b:     |----------|     max. parm. change 0.00792 
 Estimation of a:     |----------|     max. parm. change 0.00218 
 Estimation of delta: |----------|     max. parm. change 0.00014 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.99  | Deviance change =  0.0254 | max. parm. change =  0.00792  
---------------------------------------------------------------------- 
MML EM Iter. 11       |**********|  2015-06-13 13:24:14  0.0429 secs
 Estimation of b:     |----------|     max. parm. change 0.00728 
 Estimation of a:     |----------|     max. parm. change 0.00206 
 Estimation of delta: |----------|     max. parm. change 0.00016 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.97  | Deviance change =  0.0195 | max. parm. change =  0.00728  
---------------------------------------------------------------------- 
MML EM Iter. 12       |**********|  2015-06-13 13:24:14  0.0423 secs
 Estimation of b:     |----------|     max. parm. change 0.0065 
 Estimation of a:     |----------|     max. parm. change 0.0019 
 Estimation of delta: |----------|     max. parm. change 0.00016 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.955  | Deviance change =  0.0152 | max. parm. change =  0.006504  
---------------------------------------------------------------------- 
MML EM Iter. 13       |**********|  2015-06-13 13:24:14  0.0423 secs
 Estimation of b:     |----------|     max. parm. change 0.00589 
 Estimation of a:     |----------|     max. parm. change 0.00172 
 Estimation of delta: |----------|     max. parm. change 0.00016 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.943  | Deviance change =  0.0119 | max. parm. change =  0.005888  
---------------------------------------------------------------------- 
MML EM Iter. 14       |**********|  2015-06-13 13:24:14  0.043 secs
 Estimation of b:     |----------|     max. parm. change 0.00525 
 Estimation of a:     |----------|     max. parm. change 0.00155 
 Estimation of delta: |----------|     max. parm. change 0.00015 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.934  | Deviance change =  0.0094 | max. parm. change =  0.005251  
---------------------------------------------------------------------- 
MML EM Iter. 15       |**********|  2015-06-13 13:24:14  0.0502 secs
 Estimation of b:     |----------|     max. parm. change 0.00474 
 Estimation of a:     |----------|     max. parm. change 0.0014 
 Estimation of delta: |----------|     max. parm. change 0.00014 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.926  | Deviance change =  0.0075 | max. parm. change =  0.004741  
---------------------------------------------------------------------- 
MML EM Iter. 16       |**********|  2015-06-13 13:24:14  0.0424 secs
 Estimation of b:     |----------|     max. parm. change 0.00421 
 Estimation of a:     |----------|     max. parm. change 0.00124 
 Estimation of delta: |----------|     max. parm. change 0.00012 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.92  | Deviance change =  0.0059 | max. parm. change =  0.004211  
---------------------------------------------------------------------- 
MML EM Iter. 17       |**********|  2015-06-13 13:24:15  0.0421 secs
 Estimation of b:     |----------|     max. parm. change 0.00375 
 Estimation of a:     |----------|     max. parm. change 0.00111 
 Estimation of delta: |----------|     max. parm. change 0.00011 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.916  | Deviance change =  0.0046 | max. parm. change =  0.003746  
---------------------------------------------------------------------- 
MML EM Iter. 18       |**********|  2015-06-13 13:24:15  0.0425 secs
 Estimation of b:     |----------|     max. parm. change 0.00336 
 Estimation of a:     |----------|     max. parm. change 0.00099 
 Estimation of delta: |----------|     max. parm. change 1e-04 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.912  | Deviance change =  0.0037 | max. parm. change =  0.003358  
---------------------------------------------------------------------- 
MML EM Iter. 19       |**********|  2015-06-13 13:24:15  0.0418 secs
 Estimation of b:     |----------|     max. parm. change 0.00299 
 Estimation of a:     |----------|     max. parm. change 0.00088 
 Estimation of delta: |----------|     max. parm. change 9e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.909  | Deviance change =  0.0029 | max. parm. change =  0.002988  
---------------------------------------------------------------------- 
MML EM Iter. 20       |**********|  2015-06-13 13:24:15  0.0508 secs
 Estimation of b:     |----------|     max. parm. change 0.00267 
 Estimation of a:     |----------|     max. parm. change 0.00079 
 Estimation of delta: |----------|     max. parm. change 8e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.907  | Deviance change =  0.0023 | max. parm. change =  0.002674  
---------------------------------------------------------------------- 
MML EM Iter. 21       |**********|  2015-06-13 13:24:15  0.0428 secs
 Estimation of b:     |----------|     max. parm. change 0.00237 
 Estimation of a:     |----------|     max. parm. change 7e-04 
 Estimation of delta: |----------|     max. parm. change 7e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.905  | Deviance change =  0.0018 | max. parm. change =  0.002368  
---------------------------------------------------------------------- 
MML EM Iter. 22       |**********|  2015-06-13 13:24:15  0.0418 secs
 Estimation of b:     |----------|     max. parm. change 0.00211 
 Estimation of a:     |----------|     max. parm. change 0.00062 
 Estimation of delta: |----------|     max. parm. change 6e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.904  | Deviance change =  0.0014 | max. parm. change =  0.002112  
---------------------------------------------------------------------- 
MML EM Iter. 23       |**********|  2015-06-13 13:24:15  0.0422 secs
 Estimation of b:     |----------|     max. parm. change 0.00189 
 Estimation of a:     |----------|     max. parm. change 0.00055 
 Estimation of delta: |----------|     max. parm. change 6e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.902  | Deviance change =  0.0011 | max. parm. change =  0.001892  
---------------------------------------------------------------------- 
MML EM Iter. 24       |**********|  2015-06-13 13:24:15  0.041 secs
 Estimation of b:     |----------|     max. parm. change 0.00168 
 Estimation of a:     |----------|     max. parm. change 0.00049 
 Estimation of delta: |----------|     max. parm. change 5e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.902  | Deviance change =  9e-04 | max. parm. change =  0.001675  
---------------------------------------------------------------------- 
MML EM Iter. 25       |**********|  2015-06-13 13:24:15  0.0498 secs
 Estimation of b:     |----------|     max. parm. change 0.00149 
 Estimation of a:     |----------|     max. parm. change 0.00044 
 Estimation of delta: |----------|     max. parm. change 4e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.901  | Deviance change =  7e-04 | max. parm. change =  0.001493  
---------------------------------------------------------------------- 
MML EM Iter. 26       |**********|  2015-06-13 13:24:15  0.0418 secs
 Estimation of b:     |----------|     max. parm. change 0.00134 
 Estimation of a:     |----------|     max. parm. change 0.00039 
 Estimation of delta: |----------|     max. parm. change 4e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.9  | Deviance change =  6e-04 | max. parm. change =  0.001336  
---------------------------------------------------------------------- 
MML EM Iter. 27       |**********|  2015-06-13 13:24:15  0.0422 secs
 Estimation of b:     |----------|     max. parm. change 0.00119 
 Estimation of a:     |----------|     max. parm. change 0.00035 
 Estimation of delta: |----------|     max. parm. change 4e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.9  | Deviance change =  5e-04 | max. parm. change =  0.001185  
---------------------------------------------------------------------- 
MML EM Iter. 28       |**********|  2015-06-13 13:24:15  0.0407 secs
 Estimation of b:     |----------|     max. parm. change 0.00106 
 Estimation of a:     |----------|     max. parm. change 0.00031 
 Estimation of delta: |----------|     max. parm. change 3e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.899  | Deviance change =  4e-04 | max. parm. change =  0.001056  
---------------------------------------------------------------------- 
MML EM Iter. 29       |**********|  2015-06-13 13:24:15  0.0414 secs
 Estimation of b:     |----------|     max. parm. change 0.00094 
 Estimation of a:     |----------|     max. parm. change 0.00028 
 Estimation of delta: |----------|     max. parm. change 3e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3861.899  | Deviance change =  3e-04 | max. parm. change =  0.000945  
---------------------------------------------------------------------------------------------------------- 
Parameter summary
   item   N     p      b est.b     a est.a thresh itemcluster delta est.delta
A1   A1 328 0.851 -2.020     1 0.995     1 -2.009           1 0.166         1
A2   A2 328 0.738 -1.247     2 0.995     1 -1.240           1 0.166         1
A3   A3 328 0.567 -0.311     3 0.995     1 -0.309           1 0.166         1
A4   A4 328 0.460  0.205     4 0.995     1  0.204           1 0.166         1
B1   B1 328 0.713 -1.099     5 0.995     1 -1.093           2 0.000         2
B2   B2 328 0.506 -0.031     6 0.995     1 -0.031           2 0.000         2
B3   B3 328 0.909 -2.679     7 0.995     1 -2.664           2 0.000         2
B4   B4 328 0.683 -0.927     8 0.995     1 -0.922           2 0.000         2
C1   C1 328 0.933 -2.967     9 0.995     1 -2.951           3 0.304         3
C2   C2 328 0.713 -1.076    10 0.995     1 -1.070           3 0.304         3
C3   C3 328 0.872 -2.444    11 0.995     1 -2.430           3 0.304         3
C4   C4 328 0.735 -1.391    12 0.995     1 -1.384           3 0.304         3

Dependency parameters
  cluster delta est.delta copula.type       items
1       1 0.166         1  bound.mixt A1-A2-A3-A4
2       2 0.000         2  bound.mixt B1-B2-B3-B4
3       3 0.304         3  bound.mixt C1-C2-C3-C4

EAP Reliability: 0.592 

Generalized logistic link function
alpha1= 0  alpha2= 0  

-----------------------------------------------------------------
Start: 2015-06-13 13:24:14 
End: 2015-06-13 13:24:15 
Time difference of 1.365633 secs
Difference: 1.365633 
-----------------------------------------------------------------
> 
> # estimate Rasch model
> mod2 <- rasch.copula2( dat=dat , itemcluster=itemcluster , 
+         delta=rep(0,3) , est.delta=rep(0,3 ) )
-----------------------------------------------------------------
Marginal Maximum Likelihood Estimation 
Raschtype Copula Model with generalized logistic link function: Estimation of alpha1 and alpha2 
Function 'rasch.copula2'
-----------------------------------------------------------------
---------------------------------------------------------------------- 
MML EM Iter. 1        |**********|  2015-06-13 13:24:15  
 Estimation of b:     |----------|     max. parm. change 0.31243 
 Estimation of a:     |----------|     max. parm. change 0.04489 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3943.756  | Deviance change =  -3942.756 | max. parm. change =  0.312431  
---------------------------------------------------------------------- 
MML EM Iter. 2        |**********|  2015-06-13 13:24:15  0.033 secs
 Estimation of b:     |----------|     max. parm. change 0.05723 
 Estimation of a:     |----------|     max. parm. change 0.02001 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3939.925  | Deviance change =  3.8304 | max. parm. change =  0.057229  
---------------------------------------------------------------------- 
MML EM Iter. 3        |**********|  2015-06-13 13:24:15  0.0335 secs
 Estimation of b:     |----------|     max. parm. change 0.03227 
 Estimation of a:     |----------|     max. parm. change 0.01095 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3939.067  | Deviance change =  0.8588 | max. parm. change =  0.032271  
---------------------------------------------------------------------- 
MML EM Iter. 4        |**********|  2015-06-13 13:24:15  0.0338 secs
 Estimation of b:     |----------|     max. parm. change 0.01697 
 Estimation of a:     |----------|     max. parm. change 0.00609 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3938.823  | Deviance change =  0.2437 | max. parm. change =  0.016965  
---------------------------------------------------------------------- 
MML EM Iter. 5        |**********|  2015-06-13 13:24:15  0.0343 secs
 Estimation of b:     |----------|     max. parm. change 0.00897 
 Estimation of a:     |----------|     max. parm. change 0.00342 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3938.752  | Deviance change =  0.0707 | max. parm. change =  0.008969  
---------------------------------------------------------------------- 
MML EM Iter. 6        |**********|  2015-06-13 13:24:15  0.0347 secs
 Estimation of b:     |----------|     max. parm. change 0.00471 
 Estimation of a:     |----------|     max. parm. change 0.00197 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3938.731  | Deviance change =  0.0209 | max. parm. change =  0.004709  
---------------------------------------------------------------------- 
MML EM Iter. 7        |**********|  2015-06-13 13:24:15  0.0416 secs
 Estimation of b:     |----------|     max. parm. change 0.0025 
 Estimation of a:     |----------|     max. parm. change 0.00118 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3938.725  | Deviance change =  0.0064 | max. parm. change =  0.0025  
---------------------------------------------------------------------- 
MML EM Iter. 8        |**********|  2015-06-13 13:24:15  0.0338 secs
 Estimation of b:     |----------|     max. parm. change 0.00142 
 Estimation of a:     |----------|     max. parm. change 0.00073 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3938.723  | Deviance change =  0.0021 | max. parm. change =  0.001419  
---------------------------------------------------------------------- 
MML EM Iter. 9        |**********|  2015-06-13 13:24:15  0.034 secs
 Estimation of b:     |----------|     max. parm. change 0.00101 
 Estimation of a:     |----------|     max. parm. change 0.00048 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3938.722  | Deviance change =  8e-04 | max. parm. change =  0.001008  
---------------------------------------------------------------------- 
MML EM Iter. 10       |**********|  2015-06-13 13:24:15  0.0347 secs
 Estimation of b:     |----------|     max. parm. change 0.00076 
 Estimation of a:     |----------|     max. parm. change 0.00033 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  3938.722  | Deviance change =  3e-04 | max. parm. change =  0.000759  
---------------------------------------------------------------------------------------------------------- 
Parameter summary
   item   N     p      b est.b    a est.a thresh itemcluster delta est.delta
A1   A1 328 0.851 -1.931     1 1.09     1 -2.105           1     0         0
A2   A2 328 0.738 -1.169     2 1.09     1 -1.274           1     0         0
A3   A3 328 0.567 -0.310     3 1.09     1 -0.338           1     0         0
A4   A4 328 0.460  0.179     4 1.09     1  0.195           1     0         0
B1   B1 328 0.713 -1.033     5 1.09     1 -1.126           2     0         0
B2   B2 328 0.506 -0.030     6 1.09     1 -0.033           2     0         0
B3   B3 328 0.909 -2.509     7 1.09     1 -2.735           2     0         0
B4   B4 328 0.683 -0.872     8 1.09     1 -0.950           2     0         0
C1   C1 328 0.933 -2.850     9 1.09     1 -3.106           3     0         0
C2   C2 328 0.713 -1.033    10 1.09     1 -1.126           3     0         0
C3   C3 328 0.872 -2.119    11 1.09     1 -2.310           3     0         0
C4   C4 328 0.735 -1.152    12 1.09     1 -1.255           3     0         0

Dependency parameters
  cluster delta est.delta copula.type       items
1       1     0         0  bound.mixt A1-A2-A3-A4
2       2     0         0  bound.mixt B1-B2-B3-B4
3       3     0         0  bound.mixt C1-C2-C3-C4

EAP Reliability: 0.662 

Generalized logistic link function
alpha1= 0  alpha2= 0  

-----------------------------------------------------------------
Start: 2015-06-13 13:24:15 
End: 2015-06-13 13:24:15 
Time difference of 0.3794091 secs
Difference: 0.3794091 
-----------------------------------------------------------------
> summary(mod1)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 
Date of Analysis: 2015-06-13 13:24:15 
Time difference of 1.365633 secs
Computation Time: 1.365633 

Marginal Maximum Likelihood Estimation 
Raschtype Copula Model with generalized logistic link function: Estimation of alpha1 and alpha2 
Function rasch.copula2
alpha1= 0  alpha2= 0  
-----------------------------------------------------------------
Deviance =  3861.9 
Number of persons =  328  ( 185  Response Patterns)
Number of estimated parameters =  16 
Number of iterations =  29 
AIC  =  3893.9  | penalty = 32 
AICc =  3895.65  | penalty = 33.75 (bias corrected AIC)
BIC  =  3954.59  | penalty = 92.69 
CAIC =  3970.59  | penalty = 108.69 (consistent AIC) 

Trait Distribution ( 21  Knots )
 Mean= 0  SD= 1 

EAP Reliability: 0.592 

-----------------------------------------------------------------
Item Parameter 
   item   N     p      b est.b     a est.a thresh itemcluster delta est.delta
A1   A1 328 0.851 -2.020     1 0.995     1 -2.009           1 0.166         1
A2   A2 328 0.738 -1.247     2 0.995     1 -1.240           1 0.166         1
A3   A3 328 0.567 -0.311     3 0.995     1 -0.309           1 0.166         1
A4   A4 328 0.460  0.205     4 0.995     1  0.204           1 0.166         1
B1   B1 328 0.713 -1.099     5 0.995     1 -1.093           2 0.000         2
B2   B2 328 0.506 -0.031     6 0.995     1 -0.031           2 0.000         2
B3   B3 328 0.909 -2.679     7 0.995     1 -2.664           2 0.000         2
B4   B4 328 0.683 -0.927     8 0.995     1 -0.922           2 0.000         2
C1   C1 328 0.933 -2.967     9 0.995     1 -2.951           3 0.304         3
C2   C2 328 0.713 -1.076    10 0.995     1 -1.070           3 0.304         3
C3   C3 328 0.872 -2.444    11 0.995     1 -2.430           3 0.304         3
C4   C4 328 0.735 -1.391    12 0.995     1 -1.384           3 0.304         3

Dependency parameters
  cluster delta est.delta copula.type       items
1       1 0.166         1  bound.mixt A1-A2-A3-A4
2       2 0.000         2  bound.mixt B1-B2-B3-B4
3       3 0.304         3  bound.mixt C1-C2-C3-C4
> summary(mod2)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 
Date of Analysis: 2015-06-13 13:24:15 
Time difference of 0.3794091 secs
Computation Time: 0.3794091 

Marginal Maximum Likelihood Estimation 
Raschtype Copula Model with generalized logistic link function: Estimation of alpha1 and alpha2 
Function rasch.copula2
alpha1= 0  alpha2= 0  
-----------------------------------------------------------------
Deviance =  3938.72 
Number of persons =  328  ( 185  Response Patterns)
Number of estimated parameters =  13 
Number of iterations =  10 
AIC  =  3964.72  | penalty = 26 
AICc =  3965.88  | penalty = 27.16 (bias corrected AIC)
BIC  =  4014.03  | penalty = 75.31 
CAIC =  4027.03  | penalty = 88.31 (consistent AIC) 

Trait Distribution ( 21  Knots )
 Mean= 0  SD= 1 

EAP Reliability: 0.662 

-----------------------------------------------------------------
Item Parameter 
   item   N     p      b est.b    a est.a thresh itemcluster delta est.delta
A1   A1 328 0.851 -1.931     1 1.09     1 -2.105           1     0         0
A2   A2 328 0.738 -1.169     2 1.09     1 -1.274           1     0         0
A3   A3 328 0.567 -0.310     3 1.09     1 -0.338           1     0         0
A4   A4 328 0.460  0.179     4 1.09     1  0.195           1     0         0
B1   B1 328 0.713 -1.033     5 1.09     1 -1.126           2     0         0
B2   B2 328 0.506 -0.030     6 1.09     1 -0.033           2     0         0
B3   B3 328 0.909 -2.509     7 1.09     1 -2.735           2     0         0
B4   B4 328 0.683 -0.872     8 1.09     1 -0.950           2     0         0
C1   C1 328 0.933 -2.850     9 1.09     1 -3.106           3     0         0
C2   C2 328 0.713 -1.033    10 1.09     1 -1.126           3     0         0
C3   C3 328 0.872 -2.119    11 1.09     1 -2.310           3     0         0
C4   C4 328 0.735 -1.152    12 1.09     1 -1.255           3     0         0

Dependency parameters
  cluster delta est.delta copula.type       items
1       1     0         0  bound.mixt A1-A2-A3-A4
2       2     0         0  bound.mixt B1-B2-B3-B4
3       3     0         0  bound.mixt C1-C2-C3-C4
> 
> ## Not run: 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: 11 items nested within 2 item clusters (testlets)
> ##D #    with 2 resp. 3 dependent and 6 independent items
> ##D #############################################################################
> ##D 
> ##D set.seed(5698)
> ##D I <- 11                             # number of items
> ##D n <- 3000                           # number of persons
> ##D b <- seq(-2,2, len=I)               # item difficulties
> ##D theta <- rnorm( n , sd = 1 )        # person abilities
> ##D # define item clusters
> ##D itemcluster <- rep(0,I)
> ##D itemcluster[ c(3,5 )] <- 1
> ##D itemcluster[c(2,4,9)] <- 2
> ##D # residual correlations
> ##D rho <- c( .7 , .5 )
> ##D 
> ##D # simulate data
> ##D dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> ##D colnames(dat) <- paste("I" , seq(1,ncol(dat)) , sep="")
> ##D 
> ##D # estimate Rasch copula model
> ##D mod1 <- rasch.copula2( dat , itemcluster = itemcluster )
> ##D summary(mod1)
> ##D 
> ##D # both item clusters have Cook-Johnson copula as dependency
> ##D mod1c <- rasch.copula2( dat , itemcluster = itemcluster ,
> ##D 			copula.type ="cook.johnson")
> ##D summary(mod1c)
> ##D 
> ##D # first item boundary mixture and second item Cook-Johnson copula
> ##D mod1d <- rasch.copula2( dat , itemcluster = itemcluster ,
> ##D 			copula.type = c( "bound.mixt" , "cook.johnson" ) )
> ##D summary(mod1d)
> ##D 
> ##D # compare result with Rasch model estimation in rasch.copula2
> ##D # delta must be set to zero
> ##D mod2 <- rasch.copula2( dat , itemcluster = itemcluster , delta = c(0,0) ,
> ##D             est.delta = c(0,0) )
> ##D summary(mod2)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 3: 12 items nested within 3 item clusters (testlets)
> ##D #   Cluster 1 -> Items 1-4; Cluster 2 -> Items 6-9;  Cluster 3 -> Items 10-12
> ##D #############################################################################
> ##D 
> ##D set.seed(967)
> ##D I <- 12                             # number of items
> ##D n <- 450                            # number of persons
> ##D b <- seq(-2,2, len=I)               # item difficulties
> ##D b <- sample(b)                      # sample item difficulties
> ##D theta <- rnorm( n , sd = 1 )        # person abilities
> ##D # itemcluster
> ##D itemcluster <- rep(0,I)
> ##D itemcluster[ 1:4 ] <- 1
> ##D itemcluster[ 6:9 ] <- 2
> ##D itemcluster[ 10:12 ] <- 3
> ##D # residual correlations
> ##D rho <- c( .35 , .25 , .30 )
> ##D 
> ##D # simulate data
> ##D dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> ##D colnames(dat) <- paste("I" , seq(1,ncol(dat)) , sep="")
> ##D 
> ##D # estimate Rasch copula model 
> ##D mod1 <- rasch.copula2( dat , itemcluster = itemcluster )
> ##D summary(mod1)
> ##D 
> ##D # person parameter estimation assuming the Rasch copula model
> ##D pmod1 <- person.parameter.rasch.copula(raschcopula.object = mod1 )
> ##D 
> ##D # Rasch model estimation
> ##D mod2 <- rasch.copula2( dat , itemcluster = itemcluster , 
> ##D              delta = rep(0,3) , est.delta = rep(0,3) )
> ##D summary(mod1)
> ##D summary(mod2) 
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 4: Two-dimensional copula model
> ##D #############################################################################
> ##D 
> ##D set.seed(5698)
> ##D I <- 9
> ##D n <- 1500                           # number of persons
> ##D b <- seq(-2,2, len=I)               # item difficulties
> ##D theta0 <- rnorm( n , sd = sqrt( .6 ) )
> ##D 
> ##D #*** Dimension 1
> ##D theta <- theta0 + rnorm( n , sd = sqrt( .4 ) )        # person abilities
> ##D # itemcluster
> ##D itemcluster <- rep(0,I)
> ##D itemcluster[ c(3,5 )] <- 1
> ##D itemcluster[c(2,4,9)] <- 2
> ##D itemcluster1 <- itemcluster
> ##D # residual correlations
> ##D rho <- c( .7 , .5 )
> ##D # simulate data
> ##D dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> ##D colnames(dat) <- paste("A" , seq(1,ncol(dat)) , sep="")
> ##D dat1 <- dat
> ##D # estimate model of dimension 1
> ##D mod0a <- rasch.copula2( dat1 , itemcluster = itemcluster1)
> ##D summary(mod0a)
> ##D 
> ##D #*** Dimension 2
> ##D theta <- theta0 + rnorm( n , sd = sqrt( .8 ) )        # person abilities
> ##D # itemcluster
> ##D itemcluster <- rep(0,I)
> ##D itemcluster[ c(3,7,8 )] <- 1
> ##D itemcluster[c(4,6)] <- 2
> ##D itemcluster2 <- itemcluster
> ##D # residual correlations
> ##D rho <- c( .2, .4 )
> ##D # simulate data
> ##D dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> ##D colnames(dat) <- paste("B" , seq(1,ncol(dat)) , sep="")
> ##D dat2 <- dat
> ##D # estimate model of dimension 2
> ##D mod0b <- rasch.copula2( dat2 , itemcluster = itemcluster2)
> ##D summary(mod0b)
> ##D 
> ##D # both dimensions
> ##D dat <- cbind( dat1 , dat2 )
> ##D itemcluster2 <- ifelse( itemcluster2 > 0 , itemcluster2 +2 , 0 )
> ##D itemcluster <- c( itemcluster1 , itemcluster2 )
> ##D dims <- rep( 1:2 , each=I)
> ##D 
> ##D # estimate two-dimensional copula model
> ##D mod1 <- rasch.copula3( dat , itemcluster=itemcluster , dims=dims , est.a=dims ,
> ##D             theta.k = seq(-5,5,len=15) )
> ##D summary(mod1)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 5: Subset of data Simulated Example 2 
> ##D #############################################################################
> ##D 
> ##D set.seed(5698)
> ##D I <- 11                             # number of items
> ##D n <- 3000                           # number of persons
> ##D b <- seq(-2,2, len=I)               # item difficulties
> ##D theta <- rnorm( n , sd = 1.3 )        # person abilities
> ##D # define item clusters
> ##D itemcluster <- rep(0,I)
> ##D itemcluster[ c(3,5)] <- 1
> ##D itemcluster[c(2,4,9)] <- 2
> ##D # residual correlations
> ##D rho <- c( .7 , .5 )
> ##D # simulate data
> ##D dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> ##D colnames(dat) <- paste("I" , seq(1,ncol(dat)) , sep="")
> ##D 
> ##D # select subdataset with only one dependent item cluster
> ##D item.sel <- scan( what="character" , nlines=1 )
> ##D     I1 I6 I7 I8 I10 I11 I3 I5
> ##D dat1 <- dat[,item.sel]
> ##D 
> ##D #******************
> ##D #*** Model 1a: estimate Copula model in sirt
> ##D itemcluster <- rep(0,8)
> ##D itemcluster[c(7,8)] <- 1
> ##D mod1a <- rasch.copula2( dat3 , itemcluster=itemcluster )        
> ##D summary(mod1a)
> ##D 
> ##D #******************
> ##D #*** Model 1b: estimate Copula model in mirt
> ##D library(mirt)
> ##D #*** redefine dataset for estimation in mirt
> ##D dat2 <- dat1[ , itemcluster == 0 ]
> ##D dat2 <- as.data.frame(dat2)
> ##D # combine items 3 and 5
> ##D dat2$C35 <- dat1[,"I3"] + 2*dat1[,"I5"]
> ##D table( dat2$C35 , paste0( dat1[,"I3"],dat1[,"I5"]) )
> ##D #* define mirt model
> ##D mirtmodel <- mirt::mirt.model("
> ##D       F = 1-7
> ##D       CONSTRAIN = (1-7,a1)
> ##D       " )
> ##D #-- Copula function with two dependent items
> ##D # define item category function for pseudo-items like C35
> ##D P.copula2 <- function(par,Theta, ncat){
> ##D      b1 <- par[1]
> ##D      b2 <- par[2]
> ##D      a1 <- par[3]
> ##D      ldelta <- par[4]
> ##D      P1 <- plogis( a1*(Theta - b1 ) )
> ##D      P2 <- plogis( a1*(Theta - b2 ) )
> ##D      Q1 <- 1-P1
> ##D      Q2 <- 1-P2
> ##D      # define vector-wise minimum function
> ##D      minf2 <- function( x1 , x2 ){
> ##D          ifelse( x1 < x2 , x1 , x2 )
> ##D                                 }     
> ##D      # distribution under independence
> ##D      F00 <- Q1*Q2
> ##D      F10 <- Q1*Q2 + P1*Q2
> ##D      F01 <- Q1*Q2 + Q1*P2
> ##D      F11 <- 1+0*Q1
> ##D      F_ind <- c(F00,F10,F01,F11)
> ##D      # distribution under maximal dependence
> ##D      F00 <- minf2(Q1,Q2)
> ##D      F10 <- Q2              # = minf2(1,Q2)
> ##D      F01 <- Q1              # = minf2(Q1,1)
> ##D      F11 <- 1+0*Q1          # = minf2(1,1)
> ##D      F_dep <- c(F00,F10,F01,F11)
> ##D      # compute mixture distribution
> ##D      delta <- plogis(ldelta)     
> ##D      F_tot <- (1-delta)*F_ind + delta * F_dep
> ##D      # recalculate probabilities of mixture distribution
> ##D      L1 <- length(Q1)
> ##D      v1 <- 1:L1
> ##D      F00 <- F_tot[v1]
> ##D      F10 <- F_tot[v1+L1]
> ##D      F01 <- F_tot[v1+2*L1]     
> ##D      F11 <- F_tot[v1+3*L1]          
> ##D      P00 <- F00
> ##D      P10 <- F10 - F00
> ##D      P01 <- F01 - F00
> ##D      P11 <- 1 - F10 - F01 + F00                  
> ##D      prob_tot <- c( P00 , P10 , P01 , P11 )
> ##D      return(prob_tot)
> ##D         }
> ##D # create item
> ##D copula2 <- mirt::createItem(name="copula2", par=c(b1 = 0 , b2 = 0.2 , a1=1 , ldelta=0) , 
> ##D                 est=c(TRUE,TRUE,TRUE,TRUE) , P=P.copula2 ,
> ##D                 lbound=c(-Inf,-Inf,0,-Inf) , ubound=c(Inf,Inf,Inf,Inf) )
> ##D # define item types
> ##D itemtype <- c( rep("2PL",6), "copula2" )
> ##D customItems <- list("copula2"=copula2)
> ##D # parameter table
> ##D mod.pars <- mirt::mirt(dat2, 1, itemtype=itemtype, 
> ##D                 customItems=customItems, pars = 'values')
> ##D # estimate model
> ##D mod1b <- mirt::mirt(dat2, mirtmodel , itemtype=itemtype , customItems=customItems, 
> ##D                 verbose = TRUE , pars=mod.pars , 
> ##D                 technical=list(customTheta=as.matrix(seq(-4,4,len=21)) ) )                
> ##D # estimated coefficients
> ##D cmod <- sirt::mirt.wrapper.coef(mod)$coef
> ##D 
> ##D # compare common item discrimination
> ##D round( c("sirt"=mod1a$item$a[1] , "mirt"=cmod$a1[1] ) , 4 )
> ##D   ##     sirt   mirt 
> ##D   ##   1.2845 1.2862 
> ##D # compare delta parameter
> ##D round( c("sirt"=mod1a$item$delta[7] , "mirt"= plogis( cmod$ldelta[7] ) ) , 4 )
> ##D   ##     sirt   mirt 
> ##D   ##   0.6298 0.6297 
> ##D # compare thresholds a*b
> ##D dfr <- cbind( "sirt"=mod1a$item$thresh ,
> ##D                "mirt"= c(- cmod$d[-7],cmod$b1[7]*cmod$a1[1]  , cmod$b2[7]*cmod$a1[1]))
> ##D round(dfr,4)         
> ##D   ##           sirt    mirt
> ##D   ##   [1,] -1.9236 -1.9231
> ##D   ##   [2,] -0.0565 -0.0562
> ##D   ##   [3,]  0.3993  0.3996
> ##D   ##   [4,]  0.8058  0.8061
> ##D   ##   [5,]  1.5293  1.5295
> ##D   ##   [6,]  1.9569  1.9572
> ##D   ##   [7,] -1.1414 -1.1404
> ##D   ##   [8,] -0.4005 -0.3996
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.copula", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.evm.pcm")
> ### * rasch.evm.pcm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.evm.pcm
> ### Title: Estimation of the Partial Credit Model using the Eigenvector
> ###   Method
> ### Aliases: rasch.evm.pcm summary.rasch.evm.pcm coef.rasch.evm.pcm
> ###   vcov.rasch.evm.pcm
> ### Keywords: Eigenvector method Pairwise estimation summary coef vcov
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset Liking for Science
> #############################################################################
> 
> data(data.liking.science)
> dat <- data.liking.science
> 
> # estimate partial credit model using 10 Jackknife units
> mod1 <- rasch.evm.pcm( dat , jackunits=10 )
*** Create pairwise comparison matrix 
*** Perform eigenvector method 
> summary(mod1)
------------------------------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Partial Credit Model (estimated with eigenvector method) 

Number of groups: 1 
Number of persons: 75 
Weighted number of persons: 75 
Number of items: 24 
Number of items per parameter: M = 24 | SD = 0 | Min = 24 | Max = 24
Number of parameters: 48 

------------------------------------------------------------------------------------
Item Parameters 

   parmlabel item itemlabel category parmindex    est    se est_jack
1  LS01_Cat1    1      LS01        1         1 -2.599 0.577   -2.511
2  LS01_Cat2    1      LS01        2         2  0.824 0.192    1.030
3  LS02_Cat1    2      LS02        1         3 -0.975 0.250   -0.943
4  LS02_Cat2    2      LS02        2         4 -0.320 0.193   -0.131
5  LS03_Cat1    3      LS03        1         5 -0.970 0.321   -0.856
6  LS03_Cat2    3      LS03        2         6  1.617 0.214    1.444
7  LS04_Cat1    4      LS04        1         7  0.465 0.267    0.646
8  LS04_Cat2    4      LS04        2         8  3.194 0.290    3.439
9  LS05_Cat1    5      LS05        1         9  1.460 0.363    1.433
10 LS05_Cat2    5      LS05        2        10  1.230 0.361    1.095
11 LS06_Cat1    6      LS06        1        11 -0.913 0.173   -0.899
12 LS06_Cat2    6      LS06        2        12  1.265 0.328    1.123
13 LS07_Cat1    7      LS07        1        13  0.117 0.092    0.192
14 LS07_Cat2    7      LS07        2        14  1.821 0.280    1.957
15 LS08_Cat1    8      LS08        1        15  0.440 0.258    0.438
16 LS08_Cat2    8      LS08        2        16  2.755 0.470    2.605
17 LS09_Cat1    9      LS09        1        17  0.031 0.225    0.104
18 LS09_Cat2    9      LS09        2        18  1.157 0.242    1.223
19 LS10_Cat1   10      LS10        1        19 -2.704 0.598   -2.926
20 LS10_Cat2   10      LS10        2        20 -0.676 0.321   -0.446
21 LS11_Cat1   11      LS11        1        21 -2.799 0.940   -2.286
22 LS11_Cat2   11      LS11        2        22  0.008 0.203    0.180
23 LS13_Cat1   12      LS13        1        23 -0.366 0.472   -0.718
24 LS13_Cat2   12      LS13        2        24 -1.289 0.295   -1.250
25 LS14_Cat1   13      LS14        1        25 -0.665 0.202   -0.777
26 LS14_Cat2   13      LS14        2        26  1.351 0.117    1.363
27 LS15_Cat1   14      LS15        1        27 -1.337 0.321   -1.342
28 LS15_Cat2   14      LS15        2        28  0.222 0.283    0.414
29 LS16_Cat1   15      LS16        1        29 -0.740 0.262   -0.648
30 LS16_Cat2   15      LS16        2        30  1.586 0.265    1.541
31 LS17_Cat1   16      LS17        1        31 -0.992 0.286   -0.759
32 LS17_Cat2   16      LS17        2        32  1.052 0.131    1.064
33 LS18_Cat1   17      LS18        1        33 -0.821 0.633   -2.090
34 LS18_Cat2   17      LS18        2        34 -2.583 0.527   -2.215
35 LS19_Cat1   18      LS19        1        35 -1.690 0.585   -2.587
36 LS19_Cat2   18      LS19        2        36 -1.976 0.522   -1.707
37 LS20_Cat1   19      LS20        1        37  0.768 0.274    0.713
38 LS20_Cat2   19      LS20        2        38  2.076 0.439    2.106
39 LS21_Cat1   20      LS21        1        39 -1.344 0.389   -1.370
40 LS21_Cat2   20      LS21        2        40 -0.345 0.187   -0.160
41 LS22_Cat1   21      LS22        1        41 -0.827 0.355   -0.591
42 LS22_Cat2   21      LS22        2        42  0.820 0.211    0.853
43 LS23_Cat1   22      LS23        1        43  1.402 0.314    1.275
44 LS23_Cat2   22      LS23        2        44  1.001 0.592    0.744
45 LS24_Cat1   23      LS24        1        45 -0.884 0.382   -1.053
46 LS24_Cat2   23      LS24        2        46  0.254 0.293    0.339
47 LS25_Cat1   24      LS25        1        47 -0.433 0.316   -0.496
48 LS25_Cat2   24      LS25        2        48  1.330 0.182    1.435
> 
> ## Not run: 
> ##D # compare results with TAM
> ##D library(TAM)
> ##D mod2 <- TAM::tam.mml( dat )
> ##D r1 <- mod2$xsi$xsi
> ##D r1 <- r1 - mean(r1)
> ##D # item parameters are similar
> ##D dfr <- data.frame( "b_TAM"=r1 , mod1$item[,c( "est","est_jack") ] )
> ##D round( dfr , 3 )
> ##D   ##      b_TAM    est est_jack
> ##D   ##  1  -2.496 -2.599   -2.511
> ##D   ##  2   0.687  0.824    1.030
> ##D   ##  3  -0.871 -0.975   -0.943
> ##D   ##  4  -0.360 -0.320   -0.131
> ##D   ##  5  -0.833 -0.970   -0.856
> ##D   ##  6   1.298  1.617    1.444
> ##D   ##  7   0.476  0.465    0.646
> ##D   ##  8   2.808  3.194    3.439
> ##D   ##  9   1.611  1.460    1.433
> ##D   ##  10  2.396  1.230    1.095
> ##D   ##  [...]
> ##D 
> ##D # partial credit model in eRm package
> ##D library(eRm)
> ##D mod3 <- eRm::PCM(X=dat)
> ##D summary(mod3)
> ##D eRm::plotINFO(mod3)      # plot item and test information
> ##D eRm::plotICC(mod3)       # plot ICCs
> ##D eRm::plotPImap(mod3)     # plot person-item maps
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Garner and Engelhard (2002) toy example dichotomous data
> ##D #############################################################################
> ##D 
> ##D dat <- scan()
> ##D    1 0 1 1   1 1 0 0   1 0 0 0   0 1 1 1   1 1 1 0   
> ##D    1 1 0 1   1 1 1 1   1 0 1 0   1 1 1 1   1 1 0 0
> ##D 
> ##D dat <- matrix( dat , 10 , 4 , byrow=TRUE)
> ##D colnames(dat) <- paste0("I" , 1:4 )
> ##D 
> ##D # estimate Rasch model with no jackknifing
> ##D mod1 <- rasch.evm.pcm( dat , jackunits=0 )
> ##D 
> ##D # paired comparison matrix
> ##D mod1$B
> ##D   ##          I1_Cat1 I2_Cat1 I3_Cat1 I4_Cat1
> ##D   ##  I1_Cat1       0       3       4       5
> ##D   ##  I2_Cat1       1       0       3       3
> ##D   ##  I3_Cat1       1       2       0       2
> ##D   ##  I4_Cat1       1       1       1       0
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: Garner and Engelhard (2002) toy example polytomous data
> ##D #############################################################################
> ##D 
> ##D dat <- scan()
> ##D    2 2 1 1 1   2 1 2 0 0   1 0 0 0 0   0 1 1 2 0   1 2 2 1 1   
> ##D    2 2 0 2 1   2 2 1 1 0   1 0 1 0 0   2 1 2 2 2   2 1 0 0 1
> ##D 
> ##D dat <- matrix( dat , 10 , 5 , byrow=TRUE)
> ##D colnames(dat) <- paste0("I" , 1:5 )
> ##D 
> ##D # estimate partial credit model with no jackknifing
> ##D mod1 <- rasch.evm.pcm( dat , jackunits=0 , powB=3 )
> ##D 
> ##D # paired comparison matrix
> ##D mod1$B
> ##D   ##          I1_Cat1 I1_Cat2 I2_Cat1 I2_Cat2 I3_Cat1 I3_Cat2 I4_Cat1 I4_Cat2 I5_Cat1 I5_Cat2
> ##D   ##  I1_Cat1       0       0       2       0       1       1       2       1       2       1
> ##D   ##  I1_Cat2       0       0       0       3       2       2       2       2       2       3
> ##D   ##  I2_Cat1       1       0       0       0       1       1       2       0       2       1
> ##D   ##  I2_Cat2       0       1       0       0       1       2       0       3       1       3
> ##D   ##  I3_Cat1       1       1       1       1       0       0       1       2       3       1
> ##D   ##  I3_Cat2       0       1       0       2       0       0       1       1       1       1
> ##D   ##  I4_Cat1       0       1       0       0       0       2       0       0       1       2
> ##D   ##  I4_Cat2       1       0       0       2       1       1       0       0       1       1
> ##D   ##  I5_Cat1       0       1       0       1       2       1       1       2       0       0
> ##D   ##  I5_Cat2       0       0       0       1       0       0       0       0       0       0
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 4: Partial credit model for dataset data.mg from CDM package
> ##D #############################################################################
> ##D 
> ##D library(CDM)
> ##D data(data.mg,package="CDM")
> ##D dat <- data.mg[ , paste0("I",1:11) ]
> ##D 
> ##D #*** Model 1: estimate partial credit model
> ##D mod1 <- rasch.evm.pcm( dat )
> ##D # item parameters
> ##D round( mod1$b , 3 )
> ##D   ##        Cat1   Cat2  Cat3
> ##D   ##  I1  -1.537     NA    NA
> ##D   ##  I2  -2.360     NA    NA
> ##D   ##  I3  -0.574     NA    NA
> ##D   ##  I4  -0.971 -2.086    NA
> ##D   ##  I5  -0.104  0.201    NA
> ##D   ##  I6   0.470  0.806    NA
> ##D   ##  I7  -1.027  0.756 1.969
> ##D   ##  I8   0.897     NA    NA
> ##D   ##  I9   0.766     NA    NA
> ##D   ##  I10  0.069     NA    NA
> ##D   ##  I11 -1.122  1.159 2.689
> ##D 
> ##D #*** Model 2: estimate PCM with pairwise package
> ##D library(pairwise)
> ##D mod2 <- pairwise::pair(daten=dat)
> ##D summary(mod2)
> ##D plot(mod2)
> ##D # compute standard errors
> ##D semod2 <- pairwise::pairSE(daten=dat,  nsample = 20)
> ##D semod2
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 5: Differential item functioning for dataset data.mg
> ##D #############################################################################
> ##D 
> ##D library(CDM)
> ##D data(data.mg,package="CDM")
> ##D dat <- data.mg[ data.mg$group %in% c(2,3,11) , ]
> ##D # define items
> ##D items <- paste0("I",1:11)
> ##D # estimate model
> ##D mod1 <- rasch.evm.pcm( dat[,items] , weights= dat$weight , group= dat$group )
> ##D summary(mod1)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 6: Differential item functioning for Rasch model
> ##D #############################################################################
> ##D 
> ##D # simulate some data
> ##D set.seed(9776)
> ##D N <- 1000	# number of persons
> ##D I <- 10		# number of items
> ##D # simulate data for first group
> ##D b <- seq(-1.5,1.5,len=I)
> ##D dat1 <- sim.raschtype( rnorm(N) , b )
> ##D # simulate data for second group
> ##D b1 <- b
> ##D b1[4] <- b1[4] + .5 # introduce DIF for fourth item
> ##D dat2 <- sim.raschtype( rnorm(N,mean=.3) , b1 )
> ##D dat <- rbind(dat1 , dat2 )
> ##D group <- rep( 1:2 , each=N )
> ##D # estimate model
> ##D mod1 <- rasch.evm.pcm( dat , group= group )
> ##D summary(mod1)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.evm.pcm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.jml")
> ### * rasch.jml
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.jml
> ### Title: Joint Maximum Likelihood (JML) Estimation of the Rasch Model
> ### Aliases: rasch.jml summary.rasch.jml
> ### Keywords: Joint maximum likelihood (JML) summary
> 
> ### ** Examples
> 
> #############################################################################
> # SIMULATED EXAMPLE 1: Simulated data from the Rasch model
> #############################################################################
> set.seed(789)
> N <- 500    # number of persons
> I <- 11     # number of items
> b <- seq( -2 , 2 , length=I )
> dat <- sim.raschtype( rnorm( N ) , b )
> colnames(dat) <- paste( "I" , 1:I , sep="")
> 
> # JML estimation of the Rasch model
> mod1 <- rasch.jml( dat )
---------------------------------------------------------------------------------------------------------- 
Joint Maximum Likelihood Estimation 
Rasch Model 
---------------------------------------------------------------------------------------------------------- 
PROX Iter. 1 : max. parm. change =  2.175534 
PROX Iter. 2 : max. parm. change =  0.016726 
PROX Iter. 3 : max. parm. change =  0.062482 
PROX Iter. 4 : max. parm. change =  0.002079 
...............................
JML Iteration 1 
  Item parameters |---
  MLE estimation  |---
  Deviance =  4995.95741
  Max. parm. change =  0.118328 
...............................
JML Iteration 2 
  Item parameters |---
  MLE estimation  |--
  Deviance =  4994.17114 | Deviance change =  1.78627
  Max. parm. change =  0.073792 
...............................
JML Iteration 3 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.10329 | Deviance change =  0.06785
  Max. parm. change =  0.01478 
...............................
JML Iteration 4 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.1006 | Deviance change =  0.00269
  Max. parm. change =  0.00295 
...............................
JML Iteration 5 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.10051 | Deviance change =  9e-05
  Max. parm. change =  0.00059 
...............................
JML Iteration 6 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.10049 | Deviance change =  2e-05
  Max. parm. change =  0.000118 
...............................
JML Iteration 7 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.10049 | Deviance change =  0
  Max. parm. change =  2.4e-05 
...............................
JML Iteration 8 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.10049 | Deviance change =  0
  Max. parm. change =  5e-06 
Convergence reached in 8 JML Iterations 
---------------------------------------------------------------------------------------------------------- 

> summary(mod1)
---------------------------------------------------------------------------------------------------------- 
Joint Maximum Likelihood Estimation 
Rasch Model 
---------------------------------------------------------------------------------------------------------- 
Deviance =  4994.1 
 
Item Parameter 

      N     p itemdiff itemdiff.correction    se discr infit outfit
I1  494 0.858   -2.348              -2.134 0.144 1.002 0.990  0.998
I2  494 0.802   -1.836              -1.669 0.128 0.956 1.029  1.107
I3  494 0.764   -1.545              -1.404 0.120 0.955 1.035  1.042
I4  494 0.654   -0.836              -0.760 0.108 1.017 0.987  0.987
I5  494 0.562   -0.320              -0.291 0.104 1.004 1.001  0.988
I6  494 0.480    0.118               0.108 0.103 1.024 0.995  0.954
I7  494 0.402    0.538               0.489 0.105 1.138 0.947  0.883
I8  494 0.370    0.716               0.651 0.106 0.836 1.075  1.100
I9  494 0.244    1.492               1.357 0.118 1.076 0.954  0.858
I10 494 0.218    1.679               1.526 0.122 1.114 0.917  0.803
I11 494 0.130    2.460               2.236 0.148 0.912 1.067  1.286
> 
> # MML estimation with rasch.mml2 function
> mod2 <- rasch.mml2( dat )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:16 
   Deviance = 6039.5555
    Maximum b parameter change =  0.299167  
...........................................................
Iteration 2     2015-06-13 13:24:16 
   Deviance = 6008.922 | Deviance change = 30.633555
    Maximum b parameter change =  0.000966  
...........................................................
Iteration 3     2015-06-13 13:24:16 
   Deviance = 6008.8762 | Deviance change = 0.045716
    Maximum b parameter change =  0.004647  
...........................................................
Iteration 4     2015-06-13 13:24:16 
   Deviance = 6008.8705 | Deviance change = 0.005786
    Maximum b parameter change =  0.000435  
...........................................................
Iteration 5     2015-06-13 13:24:16 
   Deviance = 6008.8697 | Deviance change = 0.00076
    Maximum b parameter change =  0.000649  
...........................................................
Iteration 6     2015-06-13 13:24:16 
   Deviance = 6008.8696 | Deviance change = 0.000136
    Maximum b parameter change =  0.000146  
...........................................................
Iteration 7     2015-06-13 13:24:16 
   Deviance = 6008.8695 | Deviance change = 2.7e-05
    Maximum b parameter change =  0.000119  
...........................................................
Iteration 8     2015-06-13 13:24:16 
   Deviance = 6008.8695 | Deviance change = 9e-06
    Maximum b parameter change =  4.6e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:16 
End: 2015-06-13 13:24:16 
Time difference of 0.06391597 secs
Difference: 0.06391597 
------------------------------------------------------------
> summary(mod2)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:16 
Time difference of 0.06391597 secs
Computation time: 0.06391597 

Call:
rasch.mml2(dat = dat)

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Rasch Type Model with Fixed Discrimination, Guessing and Slipping Parameters 
alpha1= 0  alpha2= 0  
Moments: 
   M   SD  Var 
0.00 1.81 3.29 

------------------------------------------------------------
Number of iterations = 8 
Deviance =  6008.87  | Log Likelihood =  -3004.43 
Number of persons =  500 
Number of estimated parameters =  12 
AIC  =  6032.87  | penalty = 24    | AIC = -2*LL + 2*p  
AICc =  6033.51  | penalty = 24.64    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  6083.44  | penalty = 74.58    | BIC = -2*LL + log(n)*p  
CAIC =  6095.44  | penalty = 86.58   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 0.937 
 Skewness= 0
Item Difficulty Distribution ( 11  Items )
 Mean= 0.007  SD= 1.38 
Distribution of Items Administered ( 11  Items )
 Mean= 11  SD= 0 

EAP Reliability: 0.616
------------------------------------------------------------
Item Parameter 
   item   N     p      b est.b a est.a thresh c est.c d est.d emp.discrim
1    I1 500 0.858 -2.086     1 1     0 -2.086 0     0 1     0       0.397
2    I2 500 0.802 -1.635     2 1     0 -1.635 0     0 1     0       0.409
3    I3 500 0.764 -1.379     3 1     0 -1.379 0     0 1     0       0.410
4    I4 500 0.654 -0.752     4 1     0 -0.752 0     0 1     0       0.475
5    I5 500 0.562 -0.294     5 1     0 -0.294 0     0 1     0       0.488
6    I6 500 0.480  0.097     6 1     0  0.097 0     0 1     0       0.497
7    I7 500 0.402  0.472     7 1     0  0.472 0     0 1     0       0.495
8    I8 500 0.370  0.632     8 1     0  0.632 0     0 1     0       0.411
9    I9 500 0.244  1.329     9 1     0  1.329 0     0 1     0       0.464
10  I10 500 0.218  1.497    10 1     0  1.497 0     0 1     0       0.467
11  I11 500 0.130  2.197    11 1     0  2.197 0     0 1     0       0.299
   alpha1 alpha2
1       0      0
2       0      0
3       0      0
4       0      0
5       0      0
6       0      0
7       0      0
8       0      0
9       0      0
10      0      0
11      0      0
> 
> # Pairwise method of Fischer
> mod3 <- rasch.pairwise( dat )
PL Iter. 1 : max. parm. change =  0.18054 
PL Iter. 2 : max. parm. change =  0.105369 
PL Iter. 3 : max. parm. change =  0.060723 
PL Iter. 4 : max. parm. change =  0.034704 
PL Iter. 5 : max. parm. change =  0.01972 
PL Iter. 6 : max. parm. change =  0.011161 
PL Iter. 7 : max. parm. change =  0.006297 
PL Iter. 8 : max. parm. change =  0.003545 
PL Iter. 9 : max. parm. change =  0.001991 
PL Iter. 10 : max. parm. change =  0.001117 
PL Iter. 11 : max. parm. change =  0.000626 
PL Iter. 12 : max. parm. change =  0.00035 
PL Iter. 13 : max. parm. change =  0.000196 
PL Iter. 14 : max. parm. change =  0.000109 
PL Iter. 15 : max. parm. change =  6.1e-05 
PL Iter. 16 : max. parm. change =  3.4e-05 
PL Iter. 17 : max. parm. change =  1.9e-05 
PL Iter. 18 : max. parm. change =  1.1e-05 
> summary(mod3)
------------------------------------------- 
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:16 
Time difference of 0.003473043 secs
Computation Time: 0.003473043 

  Function 'rasch.pairwise' 
------------------------------------------- 
Pairwise likelihood estimation 
Rasch Model 
------------------------------------------- 
Item Parameters 
      N     p      b itemcluster
I1  500 0.858 -2.225           0
I2  500 0.802 -1.685           0
I3  500 0.764 -1.512           0
I4  500 0.654 -0.908           0
I5  500 0.562 -0.364           0
I6  500 0.480  0.014           0
I7  500 0.402  0.353           0
I8  500 0.370  0.563           0
I9  500 0.244  1.231           0
I10 500 0.218  1.398           0
I11 500 0.130  2.042           0
> 
> # JML estimation in TAM
> library(TAM)
> mod4 <- TAM::tam.jml2( resp=dat )
....................................................
Iteration 1     2015-06-13 13:24:16
 MLE/WLE estimation        |----
 Item parameter estimation |----
  Deviance = 5010.0348
  Maximum MLE/WLE change: 0.55821
  Maximum item parameter change: 0.452565
....................................................
Iteration 2     2015-06-13 13:24:16
 MLE/WLE estimation        |----
 Item parameter estimation |---
  Deviance = 4998.4607 | Deviance change: 11.5741
  Maximum MLE/WLE change: 0.27174
  Maximum item parameter change: 0.078472
....................................................
Iteration 3     2015-06-13 13:24:16
 MLE/WLE estimation        |---
 Item parameter estimation |--
  Deviance = 4997.9015 | Deviance change: 0.5592
  Maximum MLE/WLE change: 0.051905
  Maximum item parameter change: 0.01549
....................................................
Iteration 4     2015-06-13 13:24:16
 MLE/WLE estimation        |--
 Item parameter estimation |--
  Deviance = 4997.8505 | Deviance change: 0.0511
  Maximum MLE/WLE change: 0.010375
  Maximum item parameter change: 0.003109
....................................................
Iteration 5     2015-06-13 13:24:16
 MLE/WLE estimation        |--
 Item parameter estimation |--
  Deviance = 4997.8426 | Deviance change: 0.0079
  Maximum MLE/WLE change: 0.002089
  Maximum item parameter change: 0.000626
....................................................
Iteration 6     2015-06-13 13:24:16
 MLE/WLE estimation        |--
 Item parameter estimation |--
  Deviance = 4997.8411 | Deviance change: 0.0015
  Maximum MLE/WLE change: 0.000425
  Maximum item parameter change: 0.000137
....................................................
Iteration 7     2015-06-13 13:24:16
 MLE/WLE estimation        |--
 Item parameter estimation |-
  Deviance = 4997.8408 | Deviance change: 3e-04
  Maximum MLE/WLE change: 8.2e-05
  Maximum item parameter change: 7e-05

 MLE/WLE estimation        |-------

 Item fit calculation 
....................................................

Start:  2015-06-13 13:24:16
End:  2015-06-13 13:24:16 
Time difference of 0.04551101 secs

> 
> #******
> # item parameter constraints in JML estimation
> # fix item difficulties: b[4]=-.76 and b[6]= .10
> constraints <- matrix( cbind( 4 , -.76 ,
+                               6 , .10 ) , 
+                   ncol=2 , byrow=TRUE )
> mod4 <- rasch.jml( dat , constraints = constraints )
---------------------------------------------------------------------------------------------------------- 
Joint Maximum Likelihood Estimation 
Rasch Model 
---------------------------------------------------------------------------------------------------------- 
...............................
JML Iteration 1 
  Item parameters |---
  MLE estimation  |----
  Deviance =  5013.10891
  Max. parm. change =  0.22511 
...............................
JML Iteration 2 
  Item parameters |---
  MLE estimation  |---
  Deviance =  4995.33262 | Deviance change =  17.77629
  Max. parm. change =  0.246741 
...............................
JML Iteration 3 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.68854 | Deviance change =  0.64408
  Max. parm. change =  0.048656 
...............................
JML Iteration 4 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.60166 | Deviance change =  0.08688
  Max. parm. change =  0.015189 
...............................
JML Iteration 5 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.55917 | Deviance change =  0.0425
  Max. parm. change =  0.007671 
...............................
JML Iteration 6 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.53358 | Deviance change =  0.02558
  Max. parm. change =  0.005207 
...............................
JML Iteration 7 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.51797 | Deviance change =  0.01562
  Max. parm. change =  0.003922 
...............................
JML Iteration 8 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.50843 | Deviance change =  0.00954
  Max. parm. change =  0.003038 
...............................
JML Iteration 9 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.5026 | Deviance change =  0.00583
  Max. parm. change =  0.00237 
...............................
JML Iteration 10 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.49904 | Deviance change =  0.00356
  Max. parm. change =  0.001852 
...............................
JML Iteration 11 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.49686 | Deviance change =  0.00218
  Max. parm. change =  0.001448 
...............................
JML Iteration 12 
  Item parameters |--
  MLE estimation  |--
  Deviance =  4994.49554 | Deviance change =  0.00133
  Max. parm. change =  0.001132 
...............................
JML Iteration 13 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49508 | Deviance change =  0.00046
  Max. parm. change =  0.000885 
...............................
JML Iteration 14 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49444 | Deviance change =  0.00064
  Max. parm. change =  0.000692 
...............................
JML Iteration 15 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49406 | Deviance change =  0.00039
  Max. parm. change =  0.000541 
...............................
JML Iteration 16 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49382 | Deviance change =  0.00024
  Max. parm. change =  0.000423 
...............................
JML Iteration 17 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49367 | Deviance change =  0.00015
  Max. parm. change =  0.000331 
...............................
JML Iteration 18 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49358 | Deviance change =  9e-05
  Max. parm. change =  0.000258 
...............................
JML Iteration 19 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49353 | Deviance change =  5e-05
  Max. parm. change =  0.000202 
...............................
JML Iteration 20 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.4935 | Deviance change =  3e-05
  Max. parm. change =  0.000158 
...............................
JML Iteration 21 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49348 | Deviance change =  2e-05
  Max. parm. change =  0.000123 
...............................
JML Iteration 22 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49346 | Deviance change =  1e-05
  Max. parm. change =  9.7e-05 
...............................
JML Iteration 23 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49346 | Deviance change =  1e-05
  Max. parm. change =  7.5e-05 
...............................
JML Iteration 24 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49345 | Deviance change =  0
  Max. parm. change =  5.9e-05 
...............................
JML Iteration 25 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49345 | Deviance change =  0
  Max. parm. change =  4.6e-05 
...............................
JML Iteration 26 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49345 | Deviance change =  0
  Max. parm. change =  3.6e-05 
...............................
JML Iteration 27 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49345 | Deviance change =  0
  Max. parm. change =  2.8e-05 
...............................
JML Iteration 28 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49345 | Deviance change =  0
  Max. parm. change =  2.2e-05 
...............................
JML Iteration 29 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49345 | Deviance change =  0
  Max. parm. change =  1.7e-05 
...............................
JML Iteration 30 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49345 | Deviance change =  0
  Max. parm. change =  1.3e-05 
...............................
JML Iteration 31 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49345 | Deviance change =  0
  Max. parm. change =  1.1e-05 
...............................
JML Iteration 32 
  Item parameters |-
  MLE estimation  |-
  Deviance =  4994.49345 | Deviance change =  0
  Max. parm. change =  8e-06 
Convergence reached in 32 JML Iterations 
---------------------------------------------------------------------------------------------------------- 

> summary(mod4)
---------------------------------------------------------------------------------------------------------- 
Joint Maximum Likelihood Estimation 
Rasch Model 
---------------------------------------------------------------------------------------------------------- 
Deviance =  4994.49 
 
Item Parameter 

      N     p itemdiff itemdiff.correction    se discr infit outfit
I1  494 0.858   -2.320              -2.109 0.144 1.003 0.990  0.996
I2  494 0.802   -1.808              -1.644 0.128 0.957 1.028  1.105
I3  494 0.764   -1.517              -1.379 0.120 0.956 1.034  1.041
I4  494 0.654   -0.760              -0.691    NA 1.037 0.975  0.977
I5  494 0.562   -0.294              -0.267 0.104 1.005 1.000  0.987
I6  494 0.480    0.100               0.091    NA 1.026 0.994  0.953
I7  494 0.402    0.564               0.513 0.105 1.140 0.946  0.883
I8  494 0.370    0.742               0.674 0.106 0.837 1.075  1.099
I9  494 0.244    1.517               1.379 0.118 1.076 0.953  0.857
I10 494 0.218    1.704               1.549 0.122 1.114 0.917  0.803
I11 494 0.130    2.485               2.259 0.148 0.913 1.066  1.283
> # For constrained item parameters, it this not obvious
> # how to calculate a 'right correction' of item parameter bias
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.jml", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.jml.biascorr")
> ### * rasch.jml.biascorr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.jml.biascorr
> ### Title: Bias Correction of Item Parameters for Joint Maximum Likelihood
> ###   Estimation in the Rasch model
> ### Aliases: rasch.jml.biascorr
> ### Keywords: Joint maximum likelihood (JML)
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset Reading
> #############################################################################
> data(data.read)
> dat <- data( data.read )
> 
> # estimate Rasch model
> mod <- rasch.jml( data.read  )
---------------------------------------------------------------------------------------------------------- 
Joint Maximum Likelihood Estimation 
Rasch Model 
---------------------------------------------------------------------------------------------------------- 
PROX Iter. 1 : max. parm. change =  2.827409 
PROX Iter. 2 : max. parm. change =  0.045532 
PROX Iter. 3 : max. parm. change =  0.007808 
...............................
JML Iteration 1 
  Item parameters |---
  MLE estimation  |---
  Deviance =  3210.42459
  Max. parm. change =  0.146783 
...............................
JML Iteration 2 
  Item parameters |--
  MLE estimation  |--
  Deviance =  3210.24989 | Deviance change =  0.17469
  Max. parm. change =  0.049637 
...............................
JML Iteration 3 
  Item parameters |--
  MLE estimation  |--
  Deviance =  3210.24791 | Deviance change =  0.00198
  Max. parm. change =  0.005345 
...............................
JML Iteration 4 
  Item parameters |-
  MLE estimation  |-
  Deviance =  3210.24789 | Deviance change =  2e-05
  Max. parm. change =  0.000575 
...............................
JML Iteration 5 
  Item parameters |-
  MLE estimation  |-
  Deviance =  3210.24789 | Deviance change =  0
  Max. parm. change =  6.2e-05 
...............................
JML Iteration 6 
  Item parameters |-
  MLE estimation  |-
  Deviance =  3210.24789 | Deviance change =  0
  Max. parm. change =  7e-06 
Convergence reached in 6 JML Iterations 
---------------------------------------------------------------------------------------------------------- 

> 
> # JML with analytical bias correction
> res1 <- rasch.jml.biascorr( jmlobj=mod  )
> print( res1$b.biascorr , digits= 3 )
     b.JML b.JMLcorr b.analytcorr1 b.analytcorr2
1  -2.0086   -1.8412        -1.908        -1.922
2  -1.1121   -1.0194        -1.078        -1.088
3  -0.0718   -0.0658        -0.150        -0.127
4   0.5457    0.5002         0.393         0.431
5  -0.9504   -0.8712        -0.937        -0.936
6   0.2786    0.2554         0.176         0.197
7  -2.6840   -2.4604        -2.536        -2.561
8  -0.7570   -0.6939        -0.762        -0.754
9  -3.0832   -2.8262        -2.891        -2.933
10 -0.9504   -0.8712        -0.937        -0.932
11 -2.2284   -2.0427        -2.106        -2.135
12 -1.0915   -1.0005        -1.069        -1.061
>   ##        b.JML b.JMLcorr b.analytcorr1 b.analytcorr2
>   ##   1  -2.0086   -1.8412        -1.908        -1.922
>   ##   2  -1.1121   -1.0194        -1.078        -1.088
>   ##   3  -0.0718   -0.0658        -0.150        -0.127
>   ##   4   0.5457    0.5002         0.393         0.431
>   ##   5  -0.9504   -0.8712        -0.937        -0.936
>   ##  [...]
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.jml.biascorr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.jml.jackknife1")
> ### * rasch.jml.jackknife1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.jml.jackknife1
> ### Title: Jackknifing the IRT Model Estimated by Joint Maximum Likelihood
> ###   (JML)
> ### Aliases: rasch.jml.jackknife1
> ### Keywords: Joint maximum likelihood (JML)
> 
> ### ** Examples
> 
> #############################################################################
> # SIMULATED EXAMPLE 1: Simulated data from the Rasch model
> #############################################################################
> set.seed(7655)
> N <- 5000    # number of persons
> I <- 11      # number of items
> b <- seq( -2 , 2 , length=I )
> dat <- sim.raschtype( rnorm( N ) , b )
> colnames(dat) <- paste( "I" , 1:I , sep="")
> 
> # estimate the Rasch model with JML
> mod <- rasch.jml( dat  )
---------------------------------------------------------------------------------------------------------- 
Joint Maximum Likelihood Estimation 
Rasch Model 
---------------------------------------------------------------------------------------------------------- 
PROX Iter. 1 : max. parm. change =  2.006105 
PROX Iter. 2 : max. parm. change =  0.041504 
PROX Iter. 3 : max. parm. change =  0.049329 
PROX Iter. 4 : max. parm. change =  0.005099 
...............................
JML Iteration 1 
  Item parameters |---
  MLE estimation  |---
  Deviance =  49940.1783
  Max. parm. change =  0.116421 
...............................
JML Iteration 2 
  Item parameters |---
  MLE estimation  |--
  Deviance =  49921.8595 | Deviance change =  18.3188
  Max. parm. change =  0.073415 
...............................
JML Iteration 3 
  Item parameters |--
  MLE estimation  |--
  Deviance =  49921.15001 | Deviance change =  0.7095
  Max. parm. change =  0.014785 
...............................
JML Iteration 4 
  Item parameters |--
  MLE estimation  |--
  Deviance =  49921.12128 | Deviance change =  0.02873
  Max. parm. change =  0.002978 
...............................
JML Iteration 5 
  Item parameters |-
  MLE estimation  |-
  Deviance =  49921.1203 | Deviance change =  0.00098
  Max. parm. change =  0.000602 
...............................
JML Iteration 6 
  Item parameters |-
  MLE estimation  |-
  Deviance =  49921.12007 | Deviance change =  0.00024
  Max. parm. change =  0.000122 
...............................
JML Iteration 7 
  Item parameters |-
  MLE estimation  |-
  Deviance =  49921.12006 | Deviance change =  1e-05
  Max. parm. change =  2.5e-05 
...............................
JML Iteration 8 
  Item parameters |-
  MLE estimation  |-
  Deviance =  49921.12006 | Deviance change =  0
  Max. parm. change =  5e-06 
Convergence reached in 8 JML Iterations 
---------------------------------------------------------------------------------------------------------- 

> summary(mod)
---------------------------------------------------------------------------------------------------------- 
Joint Maximum Likelihood Estimation 
Rasch Model 
---------------------------------------------------------------------------------------------------------- 
Deviance =  49921.12 
 
Item Parameter 

       N     p itemdiff itemdiff.correction    se discr infit outfit
I1  4916 0.851   -2.310              -2.100 0.045 0.944 1.047  1.219
I2  4916 0.795   -1.815              -1.650 0.040 1.000 0.997  1.019
I3  4916 0.726   -1.310              -1.191 0.037 0.979 1.013  1.041
I4  4916 0.656   -0.873              -0.794 0.035 1.027 0.984  0.981
I5  4916 0.577   -0.418              -0.380 0.033 1.091 0.955  0.967
I6  4916 0.504   -0.018              -0.016 0.033 0.975 1.008  1.024
I7  4916 0.428    0.399               0.363 0.033 1.010 0.995  0.996
I8  4916 0.346    0.866               0.787 0.034 1.009 0.991  1.014
I9  4916 0.271    1.333               1.212 0.037 1.037 0.974  0.965
I10 4916 0.205    1.819               1.654 0.040 1.010 0.987  1.002
I11 4916 0.157    2.242               2.038 0.044 0.960 1.032  1.089
> 
> # re-estimate the Rasch model using Jackknife
> mod2 <- rasch.jml.jackknife1( mod )
Joint Maximum Likelihood Estimation 
Jackknife Estimation
11 Jackknife Units are used
|--------------------PROGRESS--------------------| 
|------------------------------------------------|

       N     p  b.JML b.JMLcorr b.jack est.bias b.JMLse
I1  4916 0.851 -2.310    -2.100 -2.064   -0.246   0.045
I2  4916 0.795 -1.815    -1.650 -1.604   -0.211   0.040
I3  4916 0.726 -1.310    -1.191 -1.168   -0.142   0.037
I4  4916 0.656 -0.873    -0.794 -0.779   -0.095   0.035
I5  4916 0.577 -0.418    -0.380 -0.368   -0.050   0.033
I6  4916 0.504 -0.018    -0.016 -0.019    0.001   0.033
I7  4916 0.428  0.399     0.363  0.355    0.044   0.033
I8  4916 0.346  0.866     0.787  0.764    0.102   0.034
I9  4916 0.271  1.333     1.212  1.176    0.158   0.037
I10 4916 0.205  1.819     1.654  1.604    0.215   0.040
I11 4916 0.157  2.242     2.038  1.984    0.258   0.044
>   ##   
>   ##   Joint Maximum Likelihood Estimation 
>   ##   Jackknife Estimation
>   ##   11 Jackknife Units are used
>   ##   |--------------------PROGRESS--------------------| 
>   ##   |------------------------------------------------|
>   ##   
>   ##          N     p  b.JML b.JMLcorr b.jack b.jackse b.JMLse
>   ##   I1  4929 0.853 -2.345    -2.131 -2.078    0.079   0.045
>   ##   I2  4929 0.786 -1.749    -1.590 -1.541    0.075   0.039
>   ##   I3  4929 0.723 -1.298    -1.180 -1.144    0.065   0.036
>   ##   I4  4929 0.657 -0.887    -0.806 -0.782    0.059   0.035
>   ##   I5  4929 0.576 -0.420    -0.382 -0.367    0.055   0.033
>   ##   I6  4929 0.492  0.041     0.038  0.043    0.054   0.033
>   ##   I7  4929 0.409  0.502     0.457  0.447    0.056   0.034
>   ##   I8  4929 0.333  0.939     0.854  0.842    0.058   0.035
>   ##   I9  4929 0.264  1.383     1.257  1.229    0.065   0.037
>   ##   I10 4929 0.210  1.778     1.617  1.578    0.071   0.040
>   ##   I11 4929 0.154  2.266     2.060  2.011    0.077   0.044
> #-> Item parameters obtained by jackknife seem to be acceptable.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.jml.jackknife1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.mirtlc")
> ### * rasch.mirtlc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.mirtlc
> ### Title: Multidimensional Latent Class 1PL and 2PL Model
> ### Aliases: rasch.mirtlc summary.rasch.mirtlc logLik.rasch.mirtlc
> ###   anova.rasch.mirtlc IRT.irfprob.rasch.mirtlc
> ###   IRT.likelihood.rasch.mirtlc IRT.posterior.rasch.mirtlc
> ###   IRT.modelfit.rasch.mirtlc summary.IRT.modelfit.rasch.mirtlc
> ### Keywords: Multidimensional latent class Rasch model summary
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Reading data
> #############################################################################
> data( data.read )
> dat <- data.read
> 
> #***************
> # latent class models
> 
> # latent class model with 1 class
> mod1 <- rasch.mirtlc( dat , Nclasses = 1 )
...........................................................
Iteration 1     2015-06-13 13:24:17 
   Deviance = 4364.7087 | Deviance change = -4363.708666  START 1 (Seed 0)
    Maximum item parameter change = 0.117399
    Maximum probability distribution change = 0
    Maximum theta parameter change = 0
...........................................................
Iteration 2     2015-06-13 13:24:17 
   Deviance = 4198.4043 | Deviance change = 166.30437  START 1 (Seed 0)
    Maximum item parameter change = 0
    Maximum probability distribution change = 0
    Maximum theta parameter change = 0
...........................................................
Iteration 3     2015-06-13 13:24:17 
   Deviance = 4198.4043 | Deviance change = 0  START 1 (Seed 0)
    Maximum item parameter change = 0
    Maximum probability distribution change = 0
    Maximum theta parameter change = 0
> summary(mod1)
---------------------------------------------------------------------------------------------------------- 
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:17 
Time difference of 0.003763914 secs
Computation time: 0.003763914 

Multidimensional Item Response Latent Class Model 

Latent Class Model with 1 Classes  -  1 Group(s)
---------------------------------------------------------------------------------------------------------- 
Number of iterations = 2 
Deviance =  4198.4  | Log Likelihood =  -2099.2 
Number of persons =  328 
Number of estimated item parameters =  12 
Number of estimated distribution parameters =  0 
Number of estimated parameters =  12 
AIC  =  4222.4  | penalty = 24    | AIC = -2*LL + 2*p  
AICc =  4223.39  | penalty = 24.99    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  4267.92  | penalty = 69.52    | BIC = -2*LL + log(n)*p  
CAIC =  4279.92  | penalty = 81.52   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

---------------------------------------------------------------------------------------------------------- 
Trait Distribution
Class1 
     1 
---------------------------------------------------------------------------------------------------------- 
Item Parameters 
Item Probabilities
   Class1
A1  0.851
A2  0.738
A3  0.567
A4  0.460
B1  0.713
B2  0.506
B3  0.909
B4  0.683
C1  0.933
C2  0.713
C3  0.872
C4  0.735
> 
> # latent class model with 2 classes
> mod2 <- rasch.mirtlc( dat , Nclasses = 2 )
...........................................................
Iteration 1     2015-06-13 13:24:17 
   Deviance = 4152.3339 | Deviance change = -4151.333915  START 1 (Seed 0)
    Maximum item parameter change = 0.153696
    Maximum probability distribution change = 0.146421
    Maximum theta parameter change = 0
...........................................................
Iteration 2     2015-06-13 13:24:17 
   Deviance = 3940.4669 | Deviance change = 211.867015  START 1 (Seed 0)
    Maximum item parameter change = 0.027056
    Maximum probability distribution change = 0.017059
    Maximum theta parameter change = 0
...........................................................
Iteration 3     2015-06-13 13:24:17 
   Deviance = 3929.5276 | Deviance change = 10.939327  START 1 (Seed 0)
    Maximum item parameter change = 0.013196
    Maximum probability distribution change = 0.014431
    Maximum theta parameter change = 0
...........................................................
Iteration 4     2015-06-13 13:24:17 
   Deviance = 3925.7056 | Deviance change = 3.822009  START 1 (Seed 0)
    Maximum item parameter change = 0.007784
    Maximum probability distribution change = 0.011559
    Maximum theta parameter change = 0
...........................................................
Iteration 5     2015-06-13 13:24:17 
   Deviance = 3923.9741 | Deviance change = 1.731419  START 1 (Seed 0)
    Maximum item parameter change = 0.006321
    Maximum probability distribution change = 0.009182
    Maximum theta parameter change = 0
...........................................................
Iteration 6     2015-06-13 13:24:17 
   Deviance = 3923.0871 | Deviance change = 0.887011  START 1 (Seed 0)
    Maximum item parameter change = 0.005265
    Maximum probability distribution change = 0.007343
    Maximum theta parameter change = 0
...........................................................
Iteration 7     2015-06-13 13:24:17 
   Deviance = 3922.577 | Deviance change = 0.510165  START 1 (Seed 0)
    Maximum item parameter change = 0.004251
    Maximum probability distribution change = 0.005899
    Maximum theta parameter change = 0
...........................................................
Iteration 8     2015-06-13 13:24:17 
   Deviance = 3922.2628 | Deviance change = 0.314123  START 1 (Seed 0)
    Maximum item parameter change = 0.003407
    Maximum probability distribution change = 0.004747
    Maximum theta parameter change = 0
...........................................................
Iteration 9     2015-06-13 13:24:17 
   Deviance = 3922.0636 | Deviance change = 0.19922  START 1 (Seed 0)
    Maximum item parameter change = 0.002731
    Maximum probability distribution change = 0.003822
    Maximum theta parameter change = 0
...........................................................
Iteration 10     2015-06-13 13:24:17 
   Deviance = 3921.9358 | Deviance change = 0.127873  START 1 (Seed 0)
    Maximum item parameter change = 0.002193
    Maximum probability distribution change = 0.00308
    Maximum theta parameter change = 0
...........................................................
Iteration 11     2015-06-13 13:24:18 
   Deviance = 3921.8532 | Deviance change = 0.082542  START 1 (Seed 0)
    Maximum item parameter change = 0.001765
    Maximum probability distribution change = 0.002483
    Maximum theta parameter change = 0
...........................................................
Iteration 12     2015-06-13 13:24:18 
   Deviance = 3921.7997 | Deviance change = 0.053465  START 1 (Seed 0)
    Maximum item parameter change = 0.001422
    Maximum probability distribution change = 0.002002
    Maximum theta parameter change = 0
...........................................................
Iteration 13     2015-06-13 13:24:18 
   Deviance = 3921.765 | Deviance change = 0.034721  START 1 (Seed 0)
    Maximum item parameter change = 0.001148
    Maximum probability distribution change = 0.001616
    Maximum theta parameter change = 0
...........................................................
Iteration 14     2015-06-13 13:24:18 
   Deviance = 3921.7424 | Deviance change = 0.022598  START 1 (Seed 0)
    Maximum item parameter change = 0.000927
    Maximum probability distribution change = 0.001306
    Maximum theta parameter change = 0
...........................................................
Iteration 15     2015-06-13 13:24:18 
   Deviance = 3921.7277 | Deviance change = 0.014735  START 1 (Seed 0)
    Maximum item parameter change = 0.00075
    Maximum probability distribution change = 0.001055
    Maximum theta parameter change = 0
...........................................................
Iteration 16     2015-06-13 13:24:18 
   Deviance = 3921.7181 | Deviance change = 0.009623  START 1 (Seed 0)
    Maximum item parameter change = 0.000607
    Maximum probability distribution change = 0.000853
    Maximum theta parameter change = 0
...........................................................
Iteration 17     2015-06-13 13:24:18 
   Deviance = 3921.7118 | Deviance change = 0.006293  START 1 (Seed 0)
    Maximum item parameter change = 0.000491
    Maximum probability distribution change = 0.00069
    Maximum theta parameter change = 0
...........................................................
Iteration 18     2015-06-13 13:24:18 
   Deviance = 3921.7077 | Deviance change = 0.00412  START 1 (Seed 0)
    Maximum item parameter change = 0.000398
    Maximum probability distribution change = 0.000559
    Maximum theta parameter change = 0
...........................................................
Iteration 19     2015-06-13 13:24:18 
   Deviance = 3921.705 | Deviance change = 0.0027  START 1 (Seed 0)
    Maximum item parameter change = 0.000322
    Maximum probability distribution change = 0.000453
    Maximum theta parameter change = 0
...........................................................
Iteration 20     2015-06-13 13:24:18 
   Deviance = 3921.7032 | Deviance change = 0.001771  START 1 (Seed 0)
    Maximum item parameter change = 0.000261
    Maximum probability distribution change = 0.000367
    Maximum theta parameter change = 0
...........................................................
Iteration 21     2015-06-13 13:24:18 
   Deviance = 3921.702 | Deviance change = 0.001162  START 1 (Seed 0)
    Maximum item parameter change = 0.000212
    Maximum probability distribution change = 0.000297
    Maximum theta parameter change = 0
...........................................................
Iteration 22     2015-06-13 13:24:18 
   Deviance = 3921.7013 | Deviance change = 0.000763  START 1 (Seed 0)
    Maximum item parameter change = 0.000172
    Maximum probability distribution change = 0.000241
    Maximum theta parameter change = 0
...........................................................
Iteration 23     2015-06-13 13:24:18 
   Deviance = 3921.7008 | Deviance change = 0.000501  START 1 (Seed 0)
    Maximum item parameter change = 0.000139
    Maximum probability distribution change = 0.000195
    Maximum theta parameter change = 0
...........................................................
Iteration 24     2015-06-13 13:24:18 
   Deviance = 3921.7004 | Deviance change = 0.000329  START 1 (Seed 0)
    Maximum item parameter change = 0.000113
    Maximum probability distribution change = 0.000158
    Maximum theta parameter change = 0
...........................................................
Iteration 25     2015-06-13 13:24:18 
   Deviance = 3921.7002 | Deviance change = 0.000217  START 1 (Seed 0)
    Maximum item parameter change = 9.2e-05
    Maximum probability distribution change = 0.000128
    Maximum theta parameter change = 0
...........................................................
Iteration 26     2015-06-13 13:24:18 
   Deviance = 3921.7001 | Deviance change = 0.000142  START 1 (Seed 0)
    Maximum item parameter change = 7.4e-05
    Maximum probability distribution change = 0.000104
    Maximum theta parameter change = 0
...........................................................
Iteration 27     2015-06-13 13:24:18 
   Deviance = 3921.7 | Deviance change = 9.4e-05  START 1 (Seed 0)
    Maximum item parameter change = 6e-05
    Maximum probability distribution change = 8.4e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 28     2015-06-13 13:24:18 
   Deviance = 3921.6999 | Deviance change = 6.2e-05  START 1 (Seed 0)
    Maximum item parameter change = 4.9e-05
    Maximum probability distribution change = 6.8e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 29     2015-06-13 13:24:18 
   Deviance = 3921.6999 | Deviance change = 4.1e-05  START 1 (Seed 0)
    Maximum item parameter change = 4e-05
    Maximum probability distribution change = 5.5e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 30     2015-06-13 13:24:18 
   Deviance = 3921.6998 | Deviance change = 2.7e-05  START 1 (Seed 0)
    Maximum item parameter change = 3.2e-05
    Maximum probability distribution change = 4.5e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 31     2015-06-13 13:24:18 
   Deviance = 3921.6998 | Deviance change = 1.8e-05  START 1 (Seed 0)
    Maximum item parameter change = 2.6e-05
    Maximum probability distribution change = 3.7e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 32     2015-06-13 13:24:18 
   Deviance = 3921.6998 | Deviance change = 1.2e-05  START 1 (Seed 0)
    Maximum item parameter change = 2.1e-05
    Maximum probability distribution change = 3e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 33     2015-06-13 13:24:18 
   Deviance = 3921.6998 | Deviance change = 8e-06  START 1 (Seed 0)
    Maximum item parameter change = 1.7e-05
    Maximum probability distribution change = 2.4e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 34     2015-06-13 13:24:18 
   Deviance = 3921.6998 | Deviance change = 5e-06  START 1 (Seed 0)
    Maximum item parameter change = 1.4e-05
    Maximum probability distribution change = 1.9e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 35     2015-06-13 13:24:18 
   Deviance = 3921.6998 | Deviance change = 3e-06  START 1 (Seed 0)
    Maximum item parameter change = 1.1e-05
    Maximum probability distribution change = 1.6e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 36     2015-06-13 13:24:18 
   Deviance = 3921.6998 | Deviance change = 2e-06  START 1 (Seed 0)
    Maximum item parameter change = 9e-06
    Maximum probability distribution change = 1.3e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 37     2015-06-13 13:24:18 
   Deviance = 3921.6998 | Deviance change = 1e-06  START 1 (Seed 0)
    Maximum item parameter change = 7e-06
    Maximum probability distribution change = 1e-05
    Maximum theta parameter change = 0
...........................................................
Iteration 38     2015-06-13 13:24:18 
   Deviance = 3921.6998 | Deviance change = 1e-06  START 1 (Seed 0)
    Maximum item parameter change = 6e-06
    Maximum probability distribution change = 8e-06
    Maximum theta parameter change = 0
> summary(mod2)
---------------------------------------------------------------------------------------------------------- 
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:18 
Time difference of 0.04334188 secs
Computation time: 0.04334188 

Multidimensional Item Response Latent Class Model 

Latent Class Model with 2 Classes  -  1 Group(s)
---------------------------------------------------------------------------------------------------------- 
Number of iterations = 38 
Deviance =  3921.7  | Log Likelihood =  -1960.85 
Number of persons =  328 
Number of estimated item parameters =  24 
Number of estimated distribution parameters =  1 
Number of estimated parameters =  25 
AIC  =  3971.7  | penalty = 50    | AIC = -2*LL + 2*p  
AICc =  3976  | penalty = 54.3    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  4066.53  | penalty = 144.83    | BIC = -2*LL + log(n)*p  
CAIC =  4091.53  | penalty = 169.83   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

---------------------------------------------------------------------------------------------------------- 
Trait Distribution
Class1 Class2 
 0.444  0.556 
---------------------------------------------------------------------------------------------------------- 
Item Parameters 
Item Probabilities
   Class1 Class2
A1  0.698  0.972
A2  0.468  0.953
A3  0.304  0.777
A4  0.267  0.614
B1  0.565  0.832
B2  0.362  0.621
B3  0.818  0.980
B4  0.462  0.859
C1  0.849  1.000
C2  0.481  0.898
C3  0.747  0.971
C4  0.573  0.864
> 
> ## Not run: 
> ##D # latent class model with 3 classes
> ##D mod3 <- rasch.mirtlc( dat , Nclasses = 3 , seed = - 30)  
> ##D summary(mod3)
> ##D 
> ##D # extract individual likelihood
> ##D lmod3 <- IRT.likelihood(mod3)
> ##D str(lmod3)
> ##D # extract likelihood value
> ##D logLik(mod3)
> ##D # extract item response functions
> ##D IRT.irfprob(mod3)
> ##D 
> ##D # compare models 1, 2 and 3
> ##D anova(mod2,mod3)
> ##D IRT.compareModels(mod1,mod2,mod3)
> ##D # avsolute and relative model fit
> ##D smod2 <- IRT.modelfit(mod2)
> ##D smod3 <- IRT.modelfit(mod3)
> ##D summary(smod2)
> ##D IRT.compareModels(smod2,smod3)
> ##D 
> ##D # latent class model with 4 classes and 3 starts with different seeds
> ##D mod4 <- rasch.mirtlc( dat , Nclasses = 4 ,seed= -30 ,  nstarts=3 )   
> ##D # display different solutions
> ##D sort(mod4$devL)
> ##D summary(mod4)
> ##D 
> ##D # latent class multiple group model
> ##D # define group identifier
> ##D group <- rep( 1 , nrow(dat))
> ##D group[ 1:150 ] <- 2
> ##D mod5 <- rasch.mirtlc( dat , Nclasses = 3 , group = group )  
> ##D summary(mod5)
> ##D 
> ##D #*************
> ##D # Unidimensional IRT models with ordered trait
> ##D 
> ##D # 1PL model with 3 classes
> ##D mod11 <- rasch.mirtlc( dat , Nclasses = 3 , modeltype="MLC1" , mmliter=30)
> ##D summary(mod11)
> ##D 
> ##D # 1PL model with 11 classes
> ##D mod12 <- rasch.mirtlc( dat , Nclasses = 11 ,modeltype="MLC1", mmliter=30)
> ##D summary(mod12)
> ##D 
> ##D # 1PL model with 11 classes and fixed specified theta values
> ##D mod13 <- rasch.mirtlc( dat ,  modeltype="MLC1" , 
> ##D              theta.k = seq( -4 , 4 , len=11 ) , mmliter=100)
> ##D summary(mod13)
> ##D 
> ##D # 1PL model with fixed theta values and normal distribution
> ##D mod14 <- rasch.mirtlc( dat ,  modeltype="MLC1" , mmliter=30 , 
> ##D              theta.k = seq( -4 , 4 , len=11 ) , distribution.trait="normal")
> ##D summary(mod14)
> ##D 
> ##D # 1PL model with a smoothed trait distribution (up to 3 moments)
> ##D mod15 <- rasch.mirtlc( dat ,  modeltype="MLC1" , mmliter=30 , 
> ##D              theta.k = seq( -4, 4 , len=11 ) ,  distribution.trait="smooth3")
> ##D summary(mod15)
> ##D 
> ##D # 2PL with 3 classes
> ##D mod16 <- rasch.mirtlc( dat , Nclasses=3 , modeltype="MLC2" , mmliter=30 )
> ##D summary(mod16)
> ##D 
> ##D # 2PL with fixed theta and smoothed distribution
> ##D mod17 <- rasch.mirtlc( dat, theta.k=seq(-4,4,len=12) , mmliter=30 ,
> ##D              modeltype="MLC2" , distribution.trait="smooth4"  )
> ##D summary(mod17)
> ##D 
> ##D # 1PL multiple group model with 8 classes
> ##D # define group identifier
> ##D group <- rep( 1 , nrow(dat))
> ##D group[ 1:150 ] <- 2
> ##D mod21 <- rasch.mirtlc( dat , Nclasses = 8 , modeltype="MLC1" , group=group )
> ##D summary(mod21)
> ##D 
> ##D #***************
> ##D # multidimensional latent class IRT models
> ##D 
> ##D # define vector of dimensions
> ##D dimensions <- rep( 1:3 , each = 4 )
> ##D 
> ##D # 3-dimensional model with 8 classes and seed 145
> ##D mod31 <- rasch.mirtlc( dat , Nclasses = 8 , mmliter=30 , 
> ##D              modeltype="MLC1" , seed = 145 , dimensions = dimensions )
> ##D summary(mod31)
> ##D 
> ##D # try the model above with different starting values
> ##D mod31s <- rasch.mirtlc( dat , Nclasses = 8 ,
> ##D              modeltype="MLC1" , seed = -30 , nstarts=30 , dimensions = dimensions )
> ##D summary(mod31s)     
> ##D 
> ##D # estimation with fixed theta vectors
> ##D # => 4^3 = 216 classes
> ##D theta.k <- seq(-4 , 4 , len=6 )
> ##D theta.k <- as.matrix( expand.grid( theta.k , theta.k , theta.k ) )
> ##D mod32 <- rasch.mirtlc( dat ,  dimensions=dimensions , 
> ##D               theta.k= theta.k , modeltype="MLC1"  )
> ##D summary(mod32)
> ##D 
> ##D # 3-dimensional 2PL model
> ##D mod33 <- rasch.mirtlc( dat, dimensions=dimensions, theta.k= theta.k, modeltype="MLC2")
> ##D summary(mod33)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: Skew trait distribution
> ##D #############################################################################
> ##D set.seed(789)
> ##D N <- 1000   # number of persons
> ##D I <- 20     # number of items
> ##D theta <- sqrt( exp( rnorm( N ) ) )
> ##D theta <- theta - mean(theta )
> ##D # calculate skewness of theta distribution
> ##D mean( theta^3 ) / sd(theta)^3
> ##D # simulate item responses
> ##D dat <- sim.raschtype( theta , b=seq(-2,2,len=I ) )
> ##D 
> ##D # normal distribution
> ##D mod1 <- rasch.mirtlc( dat , theta.k=seq(-4,4,len=15)  , modeltype="MLC1",
> ##D                distribution.trait="normal" , mmliter=30)
> ##D 
> ##D # allow for skew distribution with smoothed distribution
> ##D mod2 <- rasch.mirtlc( dat , theta.k=seq(-4,4,len=15)  , modeltype="MLC1",
> ##D                distribution.trait="smooth3" , mmliter=30)
> ##D 
> ##D # nonparametric distribution
> ##D mod3 <- rasch.mirtlc( dat , theta.k=seq(-4,4,len=15)  , modeltype="MLC1", mmliter=30)
> ##D 
> ##D summary(mod1)
> ##D summary(mod2)            
> ##D summary(mod3)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: Stouffer-Toby dataset data.si02 with 5 items
> ##D #############################################################################
> ##D 
> ##D data(dat.si02)
> ##D dat <- data.si02$data
> ##D weights <- data.si02$weights   # extract weights
> ##D 
> ##D # Model 1: 2 classes Rasch model
> ##D mod1 <- rasch.mirtlc( dat , Nclasses=2 , modeltype="MLC1" , weights = weights , 
> ##D                  ref.item = 4 , nstarts=5)
> ##D summary(mod1)
> ##D 
> ##D # Model 2: 3 classes Rasch model: not all parameters are identified
> ##D mod2 <- rasch.mirtlc( dat , Nclasses=3 , modeltype="MLC1" , weights = weights , 
> ##D                 ref.item = 4 , nstarts=5)
> ##D summary(mod2)
> ##D 
> ##D # Model 3: Latent class model with 2 classes
> ##D mod3 <- rasch.mirtlc( dat , Nclasses=2 , modeltype="LC" , weights = weights , nstarts=5)
> ##D summary(mod3)
> ##D 
> ##D # Model 4: Rasch model with normal distribution
> ##D mod4 <- rasch.mirtlc( dat ,  modeltype="MLC1" , weights=weights , 
> ##D             theta.k = seq( -6 , 6 , len=21 ) , distribution.trait="normal" , ref.item=4)
> ##D summary(mod4)
> ## End(Not run)
> 
> #############################################################################
> # SIMULATED EXAMPLE 4: 5 classes, 3 dimensions and 27 items
> #############################################################################
> 
> set.seed(979)
> I <- 9
> N <- 5000
> b <- seq( - 1.5, 1.5 , len=I)
> b <- rep(b,3)
> # define class locations
> theta.k <- c(-3.0, -4.1, -2.8 , 1.7 , 2.3 , 1.8 ,
+    0.2 , 0.4 , -0.1 ,   2.6 , 0.1, -0.9, -1.1 ,-0.7 , 0.9 )
> 
> Nclasses <- 5
> theta.k0 <- theta.k <- matrix( theta.k , Nclasses , 3 , byrow=TRUE )
> pi.k <- c(.20,.25,.25,.10,.15)
> theta <- theta.k[ rep( 1:Nclasses , round(N*pi.k) ) , ]
> dimensions <- rep( 1:3 , each=I)
> # simulate item responses
> dat <- matrix( NA , nrow=N , ncol=I*3)
> for (ii in 1:(3*I) ){   
+     dat[,ii] <- 1 * ( runif(N) < plogis( theta[, dimensions[ii] ] - b[ ii] ) )
+             }
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
Warning in runif(N) < plogis(theta[, dimensions[ii]] - b[ii]) :
  longer object length is not a multiple of shorter object length
> colnames(dat) <- paste0( rep( LETTERS[1:3] , each=I ) , 1:(3*I) )
> 
> # estimate model
> mod1 <- rasch.mirtlc( dat , Nclasses=Nclasses , dimensions=dimensions ,  modeltype="MLC1" , 
+               ref.item= c(5,14,23) , glob.conv=.0005, conv1=.0005)
...........................................................
Iteration 1     2015-06-13 13:24:18 
   Deviance = 137277.7442 | Deviance change = -137276.7442  START 1 (Seed 0)
    Maximum item parameter change = NA
    Maximum probability distribution change = 0.130726
    Maximum theta parameter change = 1
...........................................................
Iteration 2     2015-06-13 13:24:18 
   Deviance = 131907.2749 | Deviance change = 5370.469299  START 1 (Seed 0)
    Maximum item parameter change = 0.277724
    Maximum probability distribution change = 0.032782
    Maximum theta parameter change = 0.83427
...........................................................
Iteration 3     2015-06-13 13:24:18 
   Deviance = 130531.3179 | Deviance change = 1375.957042  START 1 (Seed 0)
    Maximum item parameter change = 0.205389
    Maximum probability distribution change = 0.027437
    Maximum theta parameter change = 0.447039
...........................................................
Iteration 4     2015-06-13 13:24:18 
   Deviance = 129589.7353 | Deviance change = 941.582557  START 1 (Seed 0)
    Maximum item parameter change = 0.106493
    Maximum probability distribution change = 0.029532
    Maximum theta parameter change = 0.319228
...........................................................
Iteration 5     2015-06-13 13:24:18 
   Deviance = 128814.428 | Deviance change = 775.307289  START 1 (Seed 0)
    Maximum item parameter change = 0.079795
    Maximum probability distribution change = 0.021971
    Maximum theta parameter change = 0.308086
...........................................................
Iteration 6     2015-06-13 13:24:18 
   Deviance = 128278.3884 | Deviance change = 536.039638  START 1 (Seed 0)
    Maximum item parameter change = 0.075683
    Maximum probability distribution change = 0.013003
    Maximum theta parameter change = 0.207255
...........................................................
Iteration 7     2015-06-13 13:24:18 
   Deviance = 128084.912 | Deviance change = 193.476384  START 1 (Seed 0)
    Maximum item parameter change = 0.0501
    Maximum probability distribution change = 0.008434
    Maximum theta parameter change = 0.104821
...........................................................
Iteration 8     2015-06-13 13:24:18 
   Deviance = 128034.9946 | Deviance change = 49.917396  START 1 (Seed 0)
    Maximum item parameter change = 0.025162
    Maximum probability distribution change = 0.00596
    Maximum theta parameter change = 0.052408
...........................................................
Iteration 9     2015-06-13 13:24:18 
   Deviance = 128016.9236 | Deviance change = 18.070968  START 1 (Seed 0)
    Maximum item parameter change = 0.011999
    Maximum probability distribution change = 0.004336
    Maximum theta parameter change = 0.047044
...........................................................
Iteration 10     2015-06-13 13:24:18 
   Deviance = 128006.4464 | Deviance change = 10.477188  START 1 (Seed 0)
    Maximum item parameter change = 0.009959
    Maximum probability distribution change = 0.003298
    Maximum theta parameter change = 0.040901
...........................................................
Iteration 11     2015-06-13 13:24:18 
   Deviance = 127999.3101 | Deviance change = 7.136306  START 1 (Seed 0)
    Maximum item parameter change = 0.008509
    Maximum probability distribution change = 0.00258
    Maximum theta parameter change = 0.034507
...........................................................
Iteration 12     2015-06-13 13:24:18 
   Deviance = 127994.3356 | Deviance change = 4.974552  START 1 (Seed 0)
    Maximum item parameter change = 0.007075
    Maximum probability distribution change = 0.002046
    Maximum theta parameter change = 0.028565
...........................................................
Iteration 13     2015-06-13 13:24:18 
   Deviance = 127990.8722 | Deviance change = 3.46335  START 1 (Seed 0)
    Maximum item parameter change = 0.005789
    Maximum probability distribution change = 0.001631
    Maximum theta parameter change = 0.023372
...........................................................
Iteration 14     2015-06-13 13:24:18 
   Deviance = 127988.4645 | Deviance change = 2.407694  START 1 (Seed 0)
    Maximum item parameter change = 0.004692
    Maximum probability distribution change = 0.001303
    Maximum theta parameter change = 0.018984
...........................................................
Iteration 15     2015-06-13 13:24:18 
   Deviance = 127986.7885 | Deviance change = 1.676046  START 1 (Seed 0)
    Maximum item parameter change = 0.003781
    Maximum probability distribution change = 0.001041
    Maximum theta parameter change = 0.015348
...........................................................
Iteration 16     2015-06-13 13:24:18 
   Deviance = 127985.6173 | Deviance change = 1.171159  START 1 (Seed 0)
    Maximum item parameter change = 0.003038
    Maximum probability distribution change = 0.000848
    Maximum theta parameter change = 0.012372
...........................................................
Iteration 17     2015-06-13 13:24:18 
   Deviance = 127984.7944 | Deviance change = 0.822975  START 1 (Seed 0)
    Maximum item parameter change = 0.002436
    Maximum probability distribution change = 0.000701
    Maximum theta parameter change = 0.009954
...........................................................
Iteration 18     2015-06-13 13:24:18 
   Deviance = 127984.212 | Deviance change = 0.582354  START 1 (Seed 0)
    Maximum item parameter change = 0.001952
    Maximum probability distribution change = 0.000578
    Maximum theta parameter change = 0.008001
...........................................................
Iteration 19     2015-06-13 13:24:18 
   Deviance = 127983.7966 | Deviance change = 0.415383  START 1 (Seed 0)
    Maximum item parameter change = 0.001563
    Maximum probability distribution change = 0.000476
    Maximum theta parameter change = 0.006428
...........................................................
Iteration 20     2015-06-13 13:24:18 
   Deviance = 127983.4977 | Deviance change = 0.29887  START 1 (Seed 0)
    Maximum item parameter change = 0.001252
    Maximum probability distribution change = 0.000392
    Maximum theta parameter change = 0.005164
...........................................................
Iteration 21     2015-06-13 13:24:18 
   Deviance = 127983.2807 | Deviance change = 0.217015  START 1 (Seed 0)
    Maximum item parameter change = 0.001004
    Maximum probability distribution change = 0.000322
    Maximum theta parameter change = 0.00415
...........................................................
Iteration 22     2015-06-13 13:24:18 
   Deviance = 127983.1217 | Deviance change = 0.159068  START 1 (Seed 0)
    Maximum item parameter change = 0.000805
    Maximum probability distribution change = 0.000264
    Maximum theta parameter change = 0.003336
...........................................................
Iteration 23     2015-06-13 13:24:18 
   Deviance = 127983.004 | Deviance change = 0.117699  START 1 (Seed 0)
    Maximum item parameter change = 0.000646
    Maximum probability distribution change = 0.000216
    Maximum theta parameter change = 0.002683
...........................................................
Iteration 24     2015-06-13 13:24:18 
   Deviance = 127982.9161 | Deviance change = 0.087902  START 1 (Seed 0)
    Maximum item parameter change = 0.000519
    Maximum probability distribution change = 0.000177
    Maximum theta parameter change = 0.002159
...........................................................
Iteration 25     2015-06-13 13:24:18 
   Deviance = 127982.8498 | Deviance change = 0.06624  START 1 (Seed 0)
    Maximum item parameter change = 0.000417
    Maximum probability distribution change = 0.000145
    Maximum theta parameter change = 0.001738
...........................................................
Iteration 26     2015-06-13 13:24:18 
   Deviance = 127982.7995 | Deviance change = 0.050343  START 1 (Seed 0)
    Maximum item parameter change = 0.000336
    Maximum probability distribution change = 0.000118
    Maximum theta parameter change = 0.0014
...........................................................
Iteration 27     2015-06-13 13:24:18 
   Deviance = 127982.7609 | Deviance change = 0.038567  START 1 (Seed 0)
    Maximum item parameter change = 0.00027
    Maximum probability distribution change = 9.7e-05
    Maximum theta parameter change = 0.001129
...........................................................
Iteration 28     2015-06-13 13:24:18 
   Deviance = 127982.7312 | Deviance change = 0.029762  START 1 (Seed 0)
    Maximum item parameter change = 0.000218
    Maximum probability distribution change = 7.9e-05
    Maximum theta parameter change = 0.000911
...........................................................
Iteration 29     2015-06-13 13:24:18 
   Deviance = 127982.708 | Deviance change = 0.023121  START 1 (Seed 0)
    Maximum item parameter change = 0.000176
    Maximum probability distribution change = 6.4e-05
    Maximum theta parameter change = 0.000735
...........................................................
Iteration 30     2015-06-13 13:24:18 
   Deviance = 127982.69 | Deviance change = 0.018068  START 1 (Seed 0)
    Maximum item parameter change = 0.000142
    Maximum probability distribution change = 5.2e-05
    Maximum theta parameter change = 0.000593
...........................................................
Iteration 31     2015-06-13 13:24:18 
   Deviance = 127982.6758 | Deviance change = 0.014195  START 1 (Seed 0)
    Maximum item parameter change = 0.000114
    Maximum probability distribution change = 4.3e-05
    Maximum theta parameter change = 0.000479
> 
> round( cbind( mod1$theta.k , mod1$pi.k ) , 3 )
       [,1]   [,2]   [,3]  [,4]
[1,] -2.776 -3.791 -2.667 0.250
[2,] -0.989 -0.605  0.957 0.151
[3,]  0.332  0.418 -0.046 0.246
[4,]  2.601  0.171 -0.854 0.101
[5,]  1.791  2.330  1.844 0.252
>   ##          [,1]   [,2]   [,3]  [,4]
>   ##   [1,] -2.776 -3.791 -2.667 0.250
>   ##   [2,] -0.989 -0.605  0.957 0.151
>   ##   [3,]  0.332  0.418 -0.046 0.246
>   ##   [4,]  2.601  0.171 -0.854 0.101
>   ##   [5,]  1.791  2.330  1.844 0.252
> cbind( theta.k , pi.k )
                    pi.k
[1,] -3.0 -4.1 -2.8 0.20
[2,]  1.7  2.3  1.8 0.25
[3,]  0.2  0.4 -0.1 0.25
[4,]  2.6  0.1 -0.9 0.10
[5,] -1.1 -0.7  0.9 0.15
>   ##                       pi.k
>   ##   [1,] -3.0 -4.1 -2.8 0.20
>   ##   [2,]  1.7  2.3  1.8 0.25
>   ##   [3,]  0.2  0.4 -0.1 0.25
>   ##   [4,]  2.6  0.1 -0.9 0.10
>   ##   [5,] -1.1 -0.7  0.9 0.15
> 
> # plot class locations
> plot( 1:3 , mod1$theta.k[1,] , xlim=c(1,3) , ylim=c(-5,3) , col=1 , pch=1 , type="n" , 
+     axes=FALSE, xlab="Dimension" , ylab="Location")
> axis(1 , 1:3 ) ;  axis(2) ; axis(4)
> for (cc in 1:Nclasses){ # cc <- 1
+     lines(1:3, mod1$theta.k[cc,] , col=cc , lty=cc )
+     points(1:3, mod1$theta.k[cc,] , col=cc ,  pch =cc )
+             }
> 
> ## Not run: 
> ##D #------ 
> ##D # estimate model with gdm function in CDM package
> ##D library(CDM) 
> ##D # define Q-matrix
> ##D Qmatrix <- matrix(0,3*I,3)
> ##D Qmatrix[ cbind( 1:(3*I) , rep(1:3 , each=I) ) ] <- 1
> ##D 
> ##D set.seed(9176)
> ##D # random starting values for theta locations
> ##D theta.k <- matrix( 2*rnorm(5*3) , 5 , 3 )
> ##D colnames(theta.k) <- c("Dim1","Dim2","Dim3")
> ##D # try possibly different starting values
> ##D 
> ##D # estimate model in CDM
> ##D b.constraint  <- cbind( c(5,14,23) , 1 , 0 )
> ##D mod2 <- CDM::gdm( dat , theta.k = theta.k , b.constraint=b.constraint, skillspace="est",
> ##D                irtmodel="1PL",  Qmatrix=Qmatrix)
> ##D summary(mod2)
> ##D 
> ##D #------ 
> ##D # estimate model with MultiLCIRT package
> ##D library(MultiLCIRT)
> ##D 
> ##D # define matrix to allocate each item to one dimension
> ##D multi1 <- matrix( 1:(3*I) , nrow=3 , byrow=TRUE )
> ##D # define reference items in item-dimension allocation matrix
> ##D multi1[ 1 , c(1,5)  ] <- c(5,1)
> ##D multi1[ 2 , c(10,14) - 9  ] <- c(14,9)
> ##D multi1[ 3 , c(19,23) - 18 ] <- c(23,19)
> ##D 
> ##D # Rasch model with 5 latent classes (random start: start=1)
> ##D mod3 <- MultiLCIRT::est_multi_poly(S=dat,k=5,       # k=5 ability levels
> ##D                 start=1,link=1,multi=multi1,tol=10^-5 , 
> ##D                 output=TRUE , disp=TRUE , fort=TRUE)
> ##D # estimated location points and class probabilities in MultiLCIRT
> ##D cbind( t( mod3$Th ) , mod3$piv )
> ##D # compare results with rasch.mirtlc
> ##D cbind( mod1$theta.k  , mod1$pi.k )
> ##D # simulated data parameters
> ##D cbind( theta.k , pi.k )
> ##D 
> ##D #----
> ##D # estimate model with cutomized input in mirt
> ##D library(mirt)
> ##D #-- define Theta design matrix for 5 classes
> ##D Theta <- diag(5)
> ##D Theta <- cbind( Theta , Theta , Theta )
> ##D r1 <- rownames(Theta) <- paste0("C",1:5)
> ##D colnames(Theta) <- c( paste0(r1 , "D1") , paste0(r1 , "D2") , paste0(r1 , "D3") )
> ##D   ##      C1D1 C2D1 C3D1 C4D1 C5D1 C1D2 C2D2 C3D2 C4D2 C5D2 C1D3 C2D3 C3D3 C4D3 C5D3
> ##D   ##   C1    1    0    0    0    0    1    0    0    0    0    1    0    0    0    0
> ##D   ##   C2    0    1    0    0    0    0    1    0    0    0    0    1    0    0    0
> ##D   ##   C3    0    0    1    0    0    0    0    1    0    0    0    0    1    0    0
> ##D   ##   C4    0    0    0    1    0    0    0    0    1    0    0    0    0    1    0
> ##D   ##   C5    0    0    0    0    1    0    0    0    0    1    0    0    0    0    1
> ##D #-- define mirt model
> ##D I <- ncol(dat)  # I = 27
> ##D mirtmodel <- mirt::mirt.model("
> ##D         C1D1 = 1-9 \n C2D1 = 1-9 \n  C3D1 = 1-9 \n  C4D1 = 1-9  \n  C5D1 = 1-9
> ##D         C1D2 = 10-18 \n C2D2 = 10-18 \n  C3D2 = 10-18 \n  C4D2 = 10-18  \n  C5D2 = 10-18
> ##D         C1D3 = 19-27 \n C2D3 = 19-27 \n  C3D3 = 19-27 \n  C4D3 = 19-27  \n  C5D3 = 19-27  
> ##D         CONSTRAIN = (1-9,a1),(1-9,a2),(1-9,a3),(1-9,a4),(1-9,a5),
> ##D                     (10-18,a6),(10-18,a7),(10-18,a8),(10-18,a9),(10-18,a10),
> ##D                     (19-27,a11),(19-27,a12),(19-27,a13),(19-27,a14),(19-27,a15) 
> ##D                 ")           
> ##D #-- get initial parameter values
> ##D mod.pars <- mirt::mirt(dat, model=mirtmodel ,  pars = "values")
> ##D #-- redefine initial parameter values
> ##D # set all d parameters initially to zero
> ##D ind <- which( ( mod.pars$name == "d" ) )
> ##D mod.pars[ ind ,"value" ]  <- 0
> ##D # fix item difficulties of reference items to zero
> ##D mod.pars[ ind[ c(5,14,23) ] , "est"] <- FALSE
> ##D mod.pars[ind,]
> ##D # initial item parameters of cluster locations (a1,...,a15)
> ##D ind <- which( ( mod.pars$name %in% paste0("a", c(1,6,11) ) ) & ( mod.pars$est ) )
> ##D mod.pars[ind,"value"] <- -2
> ##D ind <- which( ( mod.pars$name %in% paste0("a", c(1,6,11)+1 ) ) & ( mod.pars$est ) )
> ##D mod.pars[ind,"value"] <- -1
> ##D ind <- which( ( mod.pars$name %in% paste0("a", c(1,6,11)+2 ) ) & ( mod.pars$est ) )
> ##D mod.pars[ind,"value"] <- 0
> ##D ind <- which( ( mod.pars$name %in% paste0("a", c(1,6,11)+3 ) ) & ( mod.pars$est ) )
> ##D mod.pars[ind,"value"] <- 1
> ##D ind <- which( ( mod.pars$name %in% paste0("a", c(1,6,11)+4 ) ) & ( mod.pars$est ) )
> ##D mod.pars[ind,"value"] <- 0
> ##D #-- define prior for latent class analysis
> ##D lca_prior <- function(Theta,Etable){
> ##D   TP <- nrow(Theta)
> ##D   if ( is.null(Etable) ){ prior <- rep( 1/TP , TP ) }    
> ##D   if ( ! is.null(Etable) ){  
> ##D     prior <- ( rowSums(Etable[ , seq(1,2*I,2)]) + rowSums(Etable[,seq(2,2*I,2)]) )/I
> ##D                  }
> ##D   prior <- prior / sum(prior)  
> ##D   return(prior)
> ##D }
> ##D 
> ##D #-- estimate model in mirt
> ##D mod4 <- mirt::mirt(dat, mirtmodel , pars = mod.pars , verbose=TRUE , 
> ##D               technical = list( customTheta=Theta , customPriorFun = lca_prior ,
> ##D                     MAXQUAD = 1E20) )                                   
> ##D # correct number of estimated parameters
> ##D mod4@nest <- as.integer(sum(mod.pars$est) + nrow(Theta)-1 ) 
> ##D # extract coefficients
> ##D # source.all(pfsirt)
> ##D cmod4 <- mirt.wrapper.coef(mod4)
> ##D 
> ##D # estimated item difficulties
> ##D dfr <- data.frame( "sim"=b , "mirt"=-cmod4$coef$d , "sirt"=mod1$item$thresh )
> ##D round( dfr , 4 )
> ##D   ##         sim    mirt    sirt
> ##D   ##   1  -1.500 -1.3782 -1.3382
> ##D   ##   2  -1.125 -1.0059 -0.9774
> ##D   ##   3  -0.750 -0.6157 -0.6016
> ##D   ##   4  -0.375 -0.2099 -0.2060
> ##D   ##   5   0.000  0.0000  0.0000
> ##D   ##   6   0.375  0.5085  0.4984
> ##D   ##   7   0.750  0.8661  0.8504
> ##D   ##   8   1.125  1.3079  1.2847
> ##D   ##   9   1.500  1.5891  1.5620
> ##D   ##   [...]
> ##D 
> ##D #-- reordering estimated latent clusters to make solutions comparable
> ##D #* extract estimated cluster locations from sirt
> ##D order.sirt <- c(1,5,3,4,2)  # sort(order.sirt)
> ##D round(mod1$trait[,1:3],3)
> ##D dfr <- data.frame( "sim"=theta.k , mod1$trait[order.sirt,1:3] )
> ##D colnames(dfr)[4:6] <- paste0("sirt",1:3)
> ##D #* extract estimated cluster locations from mirt
> ##D c4 <- cmod4$coef[ , paste0("a",1:15) ]
> ##D c4 <- apply( c4 ,2 , FUN = function(ll){ ll[ ll!= 0 ][1] } )
> ##D trait.loc <- matrix(c4,5,3)
> ##D order.mirt <- c(1,4,3,5,2)  # sort(order.mirt)
> ##D dfr <- cbind( dfr , trait.loc[ order.mirt , ] )
> ##D colnames(dfr)[7:9] <- paste0("mirt",1:3)
> ##D # compare estimated cluster locations
> ##D round(dfr,3)
> ##D   ##     sim.1 sim.2 sim.3  sirt1  sirt2  sirt3  mirt1  mirt2  mirt3
> ##D   ##   1  -3.0  -4.1  -2.8 -2.776 -3.791 -2.667 -2.856 -4.023 -2.741
> ##D   ##   5   1.7   2.3   1.8  1.791  2.330  1.844  1.817  2.373  1.869
> ##D   ##   3   0.2   0.4  -0.1  0.332  0.418 -0.046  0.349  0.421 -0.051
> ##D   ##   4   2.6   0.1  -0.9  2.601  0.171 -0.854  2.695  0.166 -0.876
> ##D   ##   2  -1.1  -0.7   0.9 -0.989 -0.605  0.957 -1.009 -0.618  0.962
> ##D #* compare estimated cluster sizes
> ##D dfr <- data.frame( "sim" = pi.k , "sirt"=mod1$pi.k[order.sirt,1]  , 
> ##D             "mirt"=mod4@Prior[[1]][ order.mirt] )
> ##D round(dfr,4)
> ##D   ##      sim   sirt   mirt
> ##D   ##   1 0.20 0.2502 0.2500
> ##D   ##   2 0.25 0.2522 0.2511
> ##D   ##   3 0.25 0.2458 0.2494
> ##D   ##   4 0.10 0.1011 0.0986
> ##D   ##   5 0.15 0.1507 0.1509
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 5: Dataset data.si04 from Bartolucci et al. (2012)
> ##D #############################################################################
> ##D 
> ##D data(data.si04)
> ##D 
> ##D # define reference items
> ##D ref.item <- c(7,17,25,44,64)
> ##D dimensions <- data.si04$itempars$dim
> ##D 
> ##D # estimate a Rasch latent class with 9 classes
> ##D mod1 <- rasch.mirtlc( data.si04$data , Nclasses=9 , dimensions=dimensions ,  modeltype="MLC1" , 
> ##D         ref.item=ref.item , glob.conv=.005, conv1=.005 , nstarts=1 , mmliter=200 )
> ##D 
> ##D # compare estimated distribution with simulated distribution
> ##D round( cbind( mod1$theta.k , mod1$pi.k ) , 4 ) # estimated
> ##D   ##            [,1]    [,2]    [,3]    [,4]    [,5]   [,6]
> ##D   ##    [1,] -3.6043 -5.1323 -5.3022 -6.8255 -4.3611 0.1341
> ##D   ##    [2,]  0.2083 -2.7422 -2.8754 -5.3416 -2.5085 0.1573
> ##D   ##    [3,] -2.8641 -4.0272 -5.0580 -0.0340 -0.9113 0.1163
> ##D   ##    [4,] -0.3575 -2.0081 -1.7431  1.2992 -0.1616 0.0751
> ##D   ##    [5,]  2.9329  0.3662 -1.6516 -3.0284  0.1844 0.1285
> ##D   ##    [6,]  1.5092 -2.0461 -4.3093  1.0481  1.0806 0.1094
> ##D   ##    [7,]  3.9899  3.1955 -4.0010  1.8879  2.2988 0.1460
> ##D   ##    [8,]  4.3062  0.7080 -1.2324  1.4351  2.0893 0.1332
> ##D   ##    [9,]  5.0855  4.1214 -0.9141  2.2744  1.5314 0.0000
> ##D 
> ##D round(d2,4) # simulated
> ##D   ##         class      A      B      C      D      E     pi
> ##D   ##    [1,]     1 -3.832 -5.399 -5.793 -7.042 -4.511 0.1323
> ##D   ##    [2,]     2 -2.899 -4.217 -5.310 -0.055 -0.915 0.1162
> ##D   ##    [3,]     3 -0.376 -2.137 -1.847  1.273 -0.078 0.0752
> ##D   ##    [4,]     4  0.208 -2.934 -3.011 -5.526 -2.511 0.1583
> ##D   ##    [5,]     5  1.536 -2.137 -4.606  1.045  1.143 0.1092
> ##D   ##    [6,]     6  2.042 -0.573 -0.404 -4.331 -1.044 0.0471
> ##D   ##    [7,]     7  3.853  0.841 -2.993 -2.746  0.803 0.0822
> ##D   ##    [8,]     8  4.204  3.296 -4.328  1.892  2.419 0.1453
> ##D   ##    [9,]     9  4.466  0.700 -1.334  1.439  2.161 0.1343
> ## End(Not run)            
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.mirtlc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.mml")
> ### * rasch.mml
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.mml2
> ### Title: Estimation of the Generalized Logistic Item Response Model,
> ###   Ramsay's Quotient Model, Nonparametric Item Response Model,
> ###   Pseudo-Likelihood Estimation and a Missing Data Item Response Model
> ### Aliases: rasch.mml2 summary.rasch.mml plot.rasch.mml logLik.rasch.mml
> ###   anova.rasch.mml IRT.irfprob.rasch.mml IRT.likelihood.rasch.mml
> ###   IRT.posterior.rasch.mml IRT.modelfit.rasch.mml
> ###   summary.IRT.modelfit.rasch.mml
> ### Keywords: Marginal maximum likelihood (MML) Ramsay's quotient model
> ###   Nonparametric item response theory Pseudo-likelihood estimation
> ###   summary plot
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Reading dataset
> #############################################################################
> 
> data(data.read)
> dat <- data.read
> I <- ncol(dat) # number of items
> 
> # Rasch model
> mod1 <- rasch.mml2( dat )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:18 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:24:18 
   Deviance = 3942.478 | Deviance change = 13.465952
    Maximum b parameter change =  0.054894  
...........................................................
Iteration 3     2015-06-13 13:24:18 
   Deviance = 3940.2892 | Deviance change = 2.188817
    Maximum b parameter change =  0.042995  
...........................................................
Iteration 4     2015-06-13 13:24:18 
   Deviance = 3939.4559 | Deviance change = 0.833271
    Maximum b parameter change =  0.022889  
...........................................................
Iteration 5     2015-06-13 13:24:18 
   Deviance = 3939.0706 | Deviance change = 0.38535
    Maximum b parameter change =  0.015712  
...........................................................
Iteration 6     2015-06-13 13:24:18 
   Deviance = 3938.8854 | Deviance change = 0.185235
    Maximum b parameter change =  0.010687  
...........................................................
Iteration 7     2015-06-13 13:24:18 
   Deviance = 3938.7952 | Deviance change = 0.090117
    Maximum b parameter change =  0.007515  
...........................................................
Iteration 8     2015-06-13 13:24:18 
   Deviance = 3938.7511 | Deviance change = 0.044171
    Maximum b parameter change =  0.005289  
...........................................................
Iteration 9     2015-06-13 13:24:18 
   Deviance = 3938.7293 | Deviance change = 0.021762
    Maximum b parameter change =  0.003736  
...........................................................
Iteration 10     2015-06-13 13:24:18 
   Deviance = 3938.7186 | Deviance change = 0.010757
    Maximum b parameter change =  0.00264  
...........................................................
Iteration 11     2015-06-13 13:24:18 
   Deviance = 3938.7132 | Deviance change = 0.005327
    Maximum b parameter change =  0.001867  
...........................................................
Iteration 12     2015-06-13 13:24:18 
   Deviance = 3938.7106 | Deviance change = 0.002639
    Maximum b parameter change =  0.001321  
...........................................................
Iteration 13     2015-06-13 13:24:18 
   Deviance = 3938.7093 | Deviance change = 0.001306
    Maximum b parameter change =  0.000934  
...........................................................
Iteration 14     2015-06-13 13:24:18 
   Deviance = 3938.7086 | Deviance change = 0.000645
    Maximum b parameter change =  0.000661  
...........................................................
Iteration 15     2015-06-13 13:24:18 
   Deviance = 3938.7083 | Deviance change = 0.000317
    Maximum b parameter change =  0.000468  
...........................................................
Iteration 16     2015-06-13 13:24:18 
   Deviance = 3938.7082 | Deviance change = 0.000155
    Maximum b parameter change =  0.000331  
...........................................................
Iteration 17     2015-06-13 13:24:18 
   Deviance = 3938.7081 | Deviance change = 7.5e-05
    Maximum b parameter change =  0.000234  
...........................................................
Iteration 18     2015-06-13 13:24:18 
   Deviance = 3938.7081 | Deviance change = 3.5e-05
    Maximum b parameter change =  0.000166  
...........................................................
Iteration 19     2015-06-13 13:24:18 
   Deviance = 3938.708 | Deviance change = 1.6e-05
    Maximum b parameter change =  0.000117  
...........................................................
Iteration 20     2015-06-13 13:24:18 
   Deviance = 3938.708 | Deviance change = 7e-06
    Maximum b parameter change =  8.3e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:18 
End: 2015-06-13 13:24:18 
Time difference of 0.117151 secs
Difference: 0.117151 
------------------------------------------------------------
> summary(mod1)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:18 
Time difference of 0.117151 secs
Computation time: 0.117151 

Call:
rasch.mml2(dat = dat)

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Rasch Type Model with Fixed Discrimination, Guessing and Slipping Parameters 
alpha1= 0  alpha2= 0  
Moments: 
   M   SD  Var 
0.00 1.81 3.29 

------------------------------------------------------------
Number of iterations = 20 
Deviance =  3938.71  | Log Likelihood =  -1969.35 
Number of persons =  328 
Number of estimated parameters =  13 
AIC  =  3964.71  | penalty = 26    | AIC = -2*LL + 2*p  
AICc =  3965.87  | penalty = 27.16    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  4014.02  | penalty = 75.31    | BIC = -2*LL + log(n)*p  
CAIC =  4027.02  | penalty = 88.31   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 1.091 
 Skewness= 0
Item Difficulty Distribution ( 12  Items )
 Mean= -1.347  SD= 1.041 
Distribution of Items Administered ( 12  Items )
 Mean= 12  SD= 0 

EAP Reliability: 0.663
------------------------------------------------------------
Item Parameter 
   item   N     p      b est.b a est.a thresh c est.c d est.d emp.discrim
1    A1 328 0.851 -2.105     1 1     0 -2.105 0     0 1     0       0.419
2    A2 328 0.738 -1.274     2 1     0 -1.274 0     0 1     0       0.553
3    A3 328 0.567 -0.338     3 1     0 -0.338 0     0 1     0       0.543
4    A4 328 0.460  0.195     4 1     0  0.195 0     0 1     0       0.474
5    B1 328 0.713 -1.126     5 1     0 -1.126 0     0 1     0       0.413
6    B2 328 0.506 -0.033     6 1     0 -0.033 0     0 1     0       0.426
7    B3 328 0.909 -2.735     7 1     0 -2.735 0     0 1     0       0.362
8    B4 328 0.683 -0.950     8 1     0 -0.950 0     0 1     0       0.525
9    C1 328 0.933 -3.106     9 1     0 -3.106 0     0 1     0       0.427
10   C2 328 0.713 -1.126    10 1     0 -1.126 0     0 1     0       0.538
11   C3 328 0.872 -2.310    11 1     0 -2.310 0     0 1     0       0.422
12   C4 328 0.735 -1.255    12 1     0 -1.255 0     0 1     0       0.451
   alpha1 alpha2
1       0      0
2       0      0
3       0      0
4       0      0
5       0      0
6       0      0
7       0      0
8       0      0
9       0      0
10      0      0
11      0      0
12      0      0
> plot( mod1 )    # plot all items
> # title 'Rasch model', display curves from -3 to 3 only for items 1, 5 and 8
> plot(mod1, main="Rasch model Items 1, 5 and 8", xlim=c(-3,3) , items=c(1,5,8) )
> 
> # Rasch model with constraints on item difficulties
> # set item parameters of A1 and C3 equal to -2
> constraints <- data.frame( c("A1","C3") , c(-2,-2) )
> mod1a <- rasch.mml2( dat , constraints=constraints)
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:18 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:24:18 
   Deviance = 3940.6758 | Deviance change = 15.268157
    Maximum b parameter change =  0.020077  
...........................................................
Iteration 3     2015-06-13 13:24:18 
   Deviance = 3939.854 | Deviance change = 0.821816
    Maximum b parameter change =  0.015394  
...........................................................
Iteration 4     2015-06-13 13:24:18 
   Deviance = 3939.7406 | Deviance change = 0.113438
    Maximum b parameter change =  0.008255  
...........................................................
Iteration 5     2015-06-13 13:24:18 
   Deviance = 3939.6858 | Deviance change = 0.054751
    Maximum b parameter change =  0.006343  
...........................................................
Iteration 6     2015-06-13 13:24:18 
   Deviance = 3939.6418 | Deviance change = 0.043981
    Maximum b parameter change =  0.00551  
...........................................................
Iteration 7     2015-06-13 13:24:18 
   Deviance = 3939.6053 | Deviance change = 0.036514
    Maximum b parameter change =  0.004932  
...........................................................
Iteration 8     2015-06-13 13:24:18 
   Deviance = 3939.575 | Deviance change = 0.030343
    Maximum b parameter change =  0.004483  
...........................................................
Iteration 9     2015-06-13 13:24:18 
   Deviance = 3939.5498 | Deviance change = 0.025205
    Maximum b parameter change =  0.004079  
...........................................................
Iteration 10     2015-06-13 13:24:18 
   Deviance = 3939.5288 | Deviance change = 0.020941
    Maximum b parameter change =  0.003718  
...........................................................
Iteration 11     2015-06-13 13:24:18 
   Deviance = 3939.5114 | Deviance change = 0.017403
    Maximum b parameter change =  0.003389  
...........................................................
Iteration 12     2015-06-13 13:24:18 
   Deviance = 3939.497 | Deviance change = 0.014469
    Maximum b parameter change =  0.00309  
...........................................................
Iteration 13     2015-06-13 13:24:18 
   Deviance = 3939.4849 | Deviance change = 0.012033
    Maximum b parameter change =  0.002817  
...........................................................
Iteration 14     2015-06-13 13:24:18 
   Deviance = 3939.4749 | Deviance change = 0.01001
    Maximum b parameter change =  0.002569  
...........................................................
Iteration 15     2015-06-13 13:24:18 
   Deviance = 3939.4666 | Deviance change = 0.00833
    Maximum b parameter change =  0.002344  
...........................................................
Iteration 16     2015-06-13 13:24:18 
   Deviance = 3939.4597 | Deviance change = 0.006933
    Maximum b parameter change =  0.002138  
...........................................................
Iteration 17     2015-06-13 13:24:18 
   Deviance = 3939.4539 | Deviance change = 0.005773
    Maximum b parameter change =  0.00195  
...........................................................
Iteration 18     2015-06-13 13:24:18 
   Deviance = 3939.4491 | Deviance change = 0.004808
    Maximum b parameter change =  0.001779  
...........................................................
Iteration 19     2015-06-13 13:24:18 
   Deviance = 3939.4451 | Deviance change = 0.004005
    Maximum b parameter change =  0.001623  
...........................................................
Iteration 20     2015-06-13 13:24:18 
   Deviance = 3939.4417 | Deviance change = 0.003337
    Maximum b parameter change =  0.001481  
...........................................................
Iteration 21     2015-06-13 13:24:18 
   Deviance = 3939.439 | Deviance change = 0.002781
    Maximum b parameter change =  0.001352  
...........................................................
Iteration 22     2015-06-13 13:24:18 
   Deviance = 3939.4366 | Deviance change = 0.002318
    Maximum b parameter change =  0.001233  
...........................................................
Iteration 23     2015-06-13 13:24:18 
   Deviance = 3939.4347 | Deviance change = 0.001933
    Maximum b parameter change =  0.001126  
...........................................................
Iteration 24     2015-06-13 13:24:18 
   Deviance = 3939.4331 | Deviance change = 0.001612
    Maximum b parameter change =  0.001027  
...........................................................
Iteration 25     2015-06-13 13:24:18 
   Deviance = 3939.4318 | Deviance change = 0.001344
    Maximum b parameter change =  0.000938  
...........................................................
Iteration 26     2015-06-13 13:24:18 
   Deviance = 3939.4306 | Deviance change = 0.001121
    Maximum b parameter change =  0.000856  
...........................................................
Iteration 27     2015-06-13 13:24:18 
   Deviance = 3939.4297 | Deviance change = 0.000936
    Maximum b parameter change =  0.000781  
...........................................................
Iteration 28     2015-06-13 13:24:18 
   Deviance = 3939.4289 | Deviance change = 0.000781
    Maximum b parameter change =  0.000713  
...........................................................
Iteration 29     2015-06-13 13:24:18 
   Deviance = 3939.4283 | Deviance change = 0.000652
    Maximum b parameter change =  0.000651  
...........................................................
Iteration 30     2015-06-13 13:24:18 
   Deviance = 3939.4277 | Deviance change = 0.000545
    Maximum b parameter change =  0.000594  
...........................................................
Iteration 31     2015-06-13 13:24:18 
   Deviance = 3939.4273 | Deviance change = 0.000455
    Maximum b parameter change =  0.000542  
...........................................................
Iteration 32     2015-06-13 13:24:18 
   Deviance = 3939.4269 | Deviance change = 0.00038
    Maximum b parameter change =  0.000495  
...........................................................
Iteration 33     2015-06-13 13:24:18 
   Deviance = 3939.4266 | Deviance change = 0.000318
    Maximum b parameter change =  0.000452  
...........................................................
Iteration 34     2015-06-13 13:24:18 
   Deviance = 3939.4263 | Deviance change = 0.000266
    Maximum b parameter change =  0.000413  
...........................................................
Iteration 35     2015-06-13 13:24:18 
   Deviance = 3939.4261 | Deviance change = 0.000222
    Maximum b parameter change =  0.000377  
...........................................................
Iteration 36     2015-06-13 13:24:18 
   Deviance = 3939.4259 | Deviance change = 0.000186
    Maximum b parameter change =  0.000344  
...........................................................
Iteration 37     2015-06-13 13:24:18 
   Deviance = 3939.4257 | Deviance change = 0.000156
    Maximum b parameter change =  0.000314  
...........................................................
Iteration 38     2015-06-13 13:24:18 
   Deviance = 3939.4256 | Deviance change = 0.00013
    Maximum b parameter change =  0.000287  
...........................................................
Iteration 39     2015-06-13 13:24:18 
   Deviance = 3939.4255 | Deviance change = 0.000109
    Maximum b parameter change =  0.000262  
...........................................................
Iteration 40     2015-06-13 13:24:18 
   Deviance = 3939.4254 | Deviance change = 9.1e-05
    Maximum b parameter change =  0.000239  
...........................................................
Iteration 41     2015-06-13 13:24:18 
   Deviance = 3939.4253 | Deviance change = 7.7e-05
    Maximum b parameter change =  0.000218  
...........................................................
Iteration 42     2015-06-13 13:24:18 
   Deviance = 3939.4253 | Deviance change = 6.4e-05
    Maximum b parameter change =  0.000199  
...........................................................
Iteration 43     2015-06-13 13:24:18 
   Deviance = 3939.4252 | Deviance change = 5.4e-05
    Maximum b parameter change =  0.000182  
...........................................................
Iteration 44     2015-06-13 13:24:18 
   Deviance = 3939.4252 | Deviance change = 4.5e-05
    Maximum b parameter change =  0.000166  
...........................................................
Iteration 45     2015-06-13 13:24:18 
   Deviance = 3939.4251 | Deviance change = 3.8e-05
    Maximum b parameter change =  0.000152  
...........................................................
Iteration 46     2015-06-13 13:24:18 
   Deviance = 3939.4251 | Deviance change = 3.2e-05
    Maximum b parameter change =  0.000138  
...........................................................
Iteration 47     2015-06-13 13:24:18 
   Deviance = 3939.4251 | Deviance change = 2.7e-05
    Maximum b parameter change =  0.000126  
...........................................................
Iteration 48     2015-06-13 13:24:18 
   Deviance = 3939.425 | Deviance change = 2.3e-05
    Maximum b parameter change =  0.000115  
...........................................................
Iteration 49     2015-06-13 13:24:18 
   Deviance = 3939.425 | Deviance change = 1.9e-05
    Maximum b parameter change =  0.000105  
...........................................................
Iteration 50     2015-06-13 13:24:18 
   Deviance = 3939.425 | Deviance change = 1.6e-05
    Maximum b parameter change =  9.6e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:18 
End: 2015-06-13 13:24:18 
Time difference of 0.281424 secs
Difference: 0.281424 
------------------------------------------------------------
> summary(mod1a)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:18 
Time difference of 0.281424 secs
Computation time: 0.281424 

Call:
rasch.mml2(dat = dat, constraints = constraints)

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Rasch Type Model with Fixed Discrimination, Guessing and Slipping Parameters 
alpha1= 0  alpha2= 0  
Moments: 
   M   SD  Var 
0.00 1.81 3.29 

------------------------------------------------------------
Number of iterations = 50 
Deviance =  3939.43  | Log Likelihood =  -1969.71 
Number of persons =  328 
Number of estimated parameters =  11 
AIC  =  3961.43  | penalty = 22    | AIC = -2*LL + 2*p  
AICc =  3962.26  | penalty = 22.84    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  4003.15  | penalty = 63.72    | BIC = -2*LL + log(n)*p  
CAIC =  4014.15  | penalty = 74.72   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0.203 
 SD= 1.091 
 Skewness= 0
Item Difficulty Distribution ( 12  Items )
 Mean= -1.143  SD= 1.039 
Distribution of Items Administered ( 12  Items )
 Mean= 12  SD= 0 

EAP Reliability: 0.663
------------------------------------------------------------
Item Parameter 
   item   N     p      b est.b a est.a thresh c est.c d est.d emp.discrim
1    A1 328 0.851 -2.000     0 1     0 -2.000 0     0 1     0       0.412
2    A2 328 0.738 -1.071     2 1     0 -1.071 0     0 1     0       0.523
3    A3 328 0.567 -0.135     3 1     0 -0.135 0     0 1     0       0.560
4    A4 328 0.460  0.398     4 1     0  0.398 0     0 1     0       0.531
5    B1 328 0.713 -0.923     5 1     0 -0.923 0     0 1     0       0.386
6    B2 328 0.506  0.170     6 1     0  0.170 0     0 1     0       0.465
7    B3 328 0.909 -2.532     7 1     0 -2.532 0     0 1     0       0.340
8    B4 328 0.683 -0.747     8 1     0 -0.747 0     0 1     0       0.509
9    C1 328 0.933 -2.903     9 1     0 -2.903 0     0 1     0       0.369
10   C2 328 0.713 -0.923    10 1     0 -0.923 0     0 1     0       0.513
11   C3 328 0.872 -2.000     0 1     0 -2.000 0     0 1     0       0.395
12   C4 328 0.735 -1.052    12 1     0 -1.052 0     0 1     0       0.438
   alpha1 alpha2
1       0      0
2       0      0
3       0      0
4       0      0
5       0      0
6       0      0
7       0      0
8       0      0
9       0      0
10      0      0
11      0      0
12      0      0
> 
> # estimate equal item parameters for 1st and 11th item
> est.b <- 1:I
> est.b[11] <- 1
> mod1b <- rasch.mml2( dat , est.b = est.b )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 4745.4548
    Maximum b parameter change =  2.195468  
...........................................................
Iteration 2     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 4070.9813 | Deviance change = 674.4735
    Maximum b parameter change =  0.315345  
...........................................................
Iteration 3     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3998.287 | Deviance change = 72.694331
    Maximum b parameter change =  0.192208  
...........................................................
Iteration 4     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3968.1328 | Deviance change = 30.154201
    Maximum b parameter change =  0.134093  
...........................................................
Iteration 5     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3953.5878 | Deviance change = 14.544945
    Maximum b parameter change =  0.090916  
...........................................................
Iteration 6     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3946.115 | Deviance change = 7.472831
    Maximum b parameter change =  0.062991  
...........................................................
Iteration 7     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3942.5548 | Deviance change = 3.560211
    Maximum b parameter change =  0.041874  
...........................................................
Iteration 8     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3940.9043 | Deviance change = 1.650516
    Maximum b parameter change =  0.028264  
...........................................................
Iteration 9     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3940.134 | Deviance change = 0.770239
    Maximum b parameter change =  0.02028  
...........................................................
Iteration 10     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.7688 | Deviance change = 0.365198
    Maximum b parameter change =  0.014467  
...........................................................
Iteration 11     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.5931 | Deviance change = 0.175698
    Maximum b parameter change =  0.010269  
...........................................................
Iteration 12     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.5077 | Deviance change = 0.085463
    Maximum b parameter change =  0.007272  
...........................................................
Iteration 13     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.4658 | Deviance change = 0.041894
    Maximum b parameter change =  0.005144  
...........................................................
Iteration 14     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.4451 | Deviance change = 0.020643
    Maximum b parameter change =  0.003637  
...........................................................
Iteration 15     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.4349 | Deviance change = 0.010205
    Maximum b parameter change =  0.002572  
...........................................................
Iteration 16     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.4299 | Deviance change = 0.005053
    Maximum b parameter change =  0.001819  
...........................................................
Iteration 17     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.4274 | Deviance change = 0.002503
    Maximum b parameter change =  0.001286  
...........................................................
Iteration 18     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.4261 | Deviance change = 0.001239
    Maximum b parameter change =  0.00091  
...........................................................
Iteration 19     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.4255 | Deviance change = 0.000611
    Maximum b parameter change =  0.000644  
...........................................................
Iteration 20     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.4252 | Deviance change = 3e-04
    Maximum b parameter change =  0.000455  
...........................................................
Iteration 21     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.4251 | Deviance change = 0.000146
    Maximum b parameter change =  0.000322  
...........................................................
Iteration 22     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.425 | Deviance change = 7.1e-05
    Maximum b parameter change =  0.000228  
...........................................................
Iteration 23     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.425 | Deviance change = 3.3e-05
    Maximum b parameter change =  0.000161  
...........................................................
Iteration 24     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.425 | Deviance change = 1.5e-05
    Maximum b parameter change =  0.000114  
...........................................................
Iteration 25     2015-06-13 13:24:19 
Warning in abs(increment)/abs(old_increment) :
  longer object length is not a multiple of shorter object length
   Deviance = 3939.425 | Deviance change = 7e-06
    Maximum b parameter change =  8.1e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:18 
End: 2015-06-13 13:24:19 
Time difference of 0.345417 secs
Difference: 0.345417 
------------------------------------------------------------
> summary(mod1b)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:19 
Time difference of 0.345417 secs
Computation time: 0.345417 

Call:
rasch.mml2(dat = dat, est.b = est.b)

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Rasch Type Model with Fixed Discrimination, Guessing and Slipping Parameters 
alpha1= 0  alpha2= 0  
Moments: 
   M   SD  Var 
0.00 1.81 3.29 

------------------------------------------------------------
Number of iterations = 25 
Deviance =  3939.42  | Log Likelihood =  -1969.71 
Number of persons =  328 
Number of estimated parameters =  12 
AIC  =  3963.42  | penalty = 24    | AIC = -2*LL + 2*p  
AICc =  3964.42  | penalty = 24.99    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  4008.94  | penalty = 69.52    | BIC = -2*LL + log(n)*p  
CAIC =  4020.94  | penalty = 81.52   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 1.091 
 Skewness= 0
Item Difficulty Distribution ( 12  Items )
 Mean= -1.346  SD= 1.039 
Distribution of Items Administered ( 12  Items )
 Mean= 12  SD= 0 

EAP Reliability: 0.663
------------------------------------------------------------
Item Parameter 
   item   N     p      b est.b a est.a thresh c est.c d est.d emp.discrim
1    A1 328 0.851 -2.204     1 1     0 -2.204 0     0 1     0       0.419
2    A2 328 0.738 -1.274     2 1     0 -1.274 0     0 1     0       0.553
3    A3 328 0.567 -0.338     3 1     0 -0.338 0     0 1     0       0.543
4    A4 328 0.460  0.195     4 1     0  0.195 0     0 1     0       0.474
5    B1 328 0.713 -1.126     5 1     0 -1.126 0     0 1     0       0.413
6    B2 328 0.506 -0.033     6 1     0 -0.033 0     0 1     0       0.426
7    B3 328 0.909 -2.735     7 1     0 -2.735 0     0 1     0       0.362
8    B4 328 0.683 -0.950     8 1     0 -0.950 0     0 1     0       0.525
9    C1 328 0.933 -3.106     9 1     0 -3.106 0     0 1     0       0.427
10   C2 328 0.713 -1.126    10 1     0 -1.126 0     0 1     0       0.538
11   C3 328 0.872 -2.204     1 1     0 -2.204 0     0 1     0       0.422
12   C4 328 0.735 -1.255    12 1     0 -1.255 0     0 1     0       0.451
   alpha1 alpha2
1       0      0
2       0      0
3       0      0
4       0      0
5       0      0
6       0      0
7       0      0
8       0      0
9       0      0
10      0      0
11      0      0
12      0      0
> 
> # estimate Rasch model with skew trait distribution
> mod1c <- rasch.mml2( dat , distribution.trait="smooth3")
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:19 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:24:19 
   Deviance = 3942.8704 | Deviance change = 13.073602
    Maximum b parameter change =  0.050026  
...........................................................
Iteration 3     2015-06-13 13:24:19 
   Deviance = 3940.8687 | Deviance change = 2.001679
    Maximum b parameter change =  0.034211  
...........................................................
Iteration 4     2015-06-13 13:24:19 
   Deviance = 3939.8925 | Deviance change = 0.976168
    Maximum b parameter change =  0.023928  
...........................................................
Iteration 5     2015-06-13 13:24:19 
   Deviance = 3939.3861 | Deviance change = 0.506487
    Maximum b parameter change =  0.016941  
...........................................................
Iteration 6     2015-06-13 13:24:19 
   Deviance = 3939.1047 | Deviance change = 0.281361
    Maximum b parameter change =  0.012133  
...........................................................
Iteration 7     2015-06-13 13:24:19 
   Deviance = 3938.936 | Deviance change = 0.168645
    Maximum b parameter change =  0.008795  
...........................................................
Iteration 8     2015-06-13 13:24:19 
   Deviance = 3938.8267 | Deviance change = 0.109385
    Maximum b parameter change =  0.006459  
...........................................................
Iteration 9     2015-06-13 13:24:19 
   Deviance = 3938.7503 | Deviance change = 0.076322
    Maximum b parameter change =  0.004811  
...........................................................
Iteration 10     2015-06-13 13:24:19 
   Deviance = 3938.6938 | Deviance change = 0.056527
    Maximum b parameter change =  0.00367  
...........................................................
Iteration 11     2015-06-13 13:24:19 
   Deviance = 3938.6501 | Deviance change = 0.043743
    Maximum b parameter change =  0.002889  
...........................................................
Iteration 12     2015-06-13 13:24:19 
   Deviance = 3938.6152 | Deviance change = 0.034876
    Maximum b parameter change =  0.00233  
...........................................................
Iteration 13     2015-06-13 13:24:19 
   Deviance = 3938.5868 | Deviance change = 0.028354
    Maximum b parameter change =  0.001911  
...........................................................
Iteration 14     2015-06-13 13:24:19 
   Deviance = 3938.5635 | Deviance change = 0.023341
    Maximum b parameter change =  0.001598  
...........................................................
Iteration 15     2015-06-13 13:24:19 
   Deviance = 3938.5441 | Deviance change = 0.019373
    Maximum b parameter change =  0.00137  
...........................................................
Iteration 16     2015-06-13 13:24:19 
   Deviance = 3938.528 | Deviance change = 0.016171
    Maximum b parameter change =  0.001188  
...........................................................
Iteration 17     2015-06-13 13:24:19 
   Deviance = 3938.5144 | Deviance change = 0.013555
    Maximum b parameter change =  0.001039  
...........................................................
Iteration 18     2015-06-13 13:24:19 
   Deviance = 3938.503 | Deviance change = 0.011401
    Maximum b parameter change =  0.000916  
...........................................................
Iteration 19     2015-06-13 13:24:19 
   Deviance = 3938.4934 | Deviance change = 0.009617
    Maximum b parameter change =  0.000813  
...........................................................
Iteration 20     2015-06-13 13:24:19 
   Deviance = 3938.4852 | Deviance change = 0.008135
    Maximum b parameter change =  0.000725  
...........................................................
Iteration 21     2015-06-13 13:24:19 
   Deviance = 3938.4783 | Deviance change = 0.006899
    Maximum b parameter change =  0.00065  
...........................................................
Iteration 22     2015-06-13 13:24:19 
   Deviance = 3938.4725 | Deviance change = 0.005866
    Maximum b parameter change =  0.000585  
...........................................................
Iteration 23     2015-06-13 13:24:19 
   Deviance = 3938.4675 | Deviance change = 0.005001
    Maximum b parameter change =  0.000527  
...........................................................
Iteration 24     2015-06-13 13:24:19 
   Deviance = 3938.4632 | Deviance change = 0.004274
    Maximum b parameter change =  0.000477  
...........................................................
Iteration 25     2015-06-13 13:24:19 
   Deviance = 3938.4595 | Deviance change = 0.003662
    Maximum b parameter change =  0.000432  
...........................................................
Iteration 26     2015-06-13 13:24:19 
   Deviance = 3938.4564 | Deviance change = 0.003146
    Maximum b parameter change =  0.000392  
...........................................................
Iteration 27     2015-06-13 13:24:19 
   Deviance = 3938.4537 | Deviance change = 0.002709
    Maximum b parameter change =  0.000357  
...........................................................
Iteration 28     2015-06-13 13:24:19 
   Deviance = 3938.4513 | Deviance change = 0.00234
    Maximum b parameter change =  0.000325  
...........................................................
Iteration 29     2015-06-13 13:24:19 
   Deviance = 3938.4493 | Deviance change = 0.002025
    Maximum b parameter change =  0.000296  
...........................................................
Iteration 30     2015-06-13 13:24:19 
   Deviance = 3938.4476 | Deviance change = 0.001758
    Maximum b parameter change =  0.000269  
...........................................................
Iteration 31     2015-06-13 13:24:19 
   Deviance = 3938.446 | Deviance change = 0.00153
    Maximum b parameter change =  0.000246  
...........................................................
Iteration 32     2015-06-13 13:24:19 
   Deviance = 3938.4447 | Deviance change = 0.001334
    Maximum b parameter change =  0.000224  
...........................................................
Iteration 33     2015-06-13 13:24:19 
   Deviance = 3938.4435 | Deviance change = 0.001167
    Maximum b parameter change =  0.000205  
...........................................................
Iteration 34     2015-06-13 13:24:19 
   Deviance = 3938.4425 | Deviance change = 0.001022
    Maximum b parameter change =  0.000187  
...........................................................
Iteration 35     2015-06-13 13:24:19 
   Deviance = 3938.4416 | Deviance change = 0.000898
    Maximum b parameter change =  0.000171  
...........................................................
Iteration 36     2015-06-13 13:24:19 
   Deviance = 3938.4408 | Deviance change = 0.000791
    Maximum b parameter change =  0.000156  
...........................................................
Iteration 37     2015-06-13 13:24:19 
   Deviance = 3938.4401 | Deviance change = 0.000698
    Maximum b parameter change =  0.000142  
...........................................................
Iteration 38     2015-06-13 13:24:19 
   Deviance = 3938.4395 | Deviance change = 0.000617
    Maximum b parameter change =  0.00013  
...........................................................
Iteration 39     2015-06-13 13:24:19 
   Deviance = 3938.439 | Deviance change = 0.000547
    Maximum b parameter change =  0.000119  
...........................................................
Iteration 40     2015-06-13 13:24:19 
   Deviance = 3938.4385 | Deviance change = 0.000486
    Maximum b parameter change =  0.000109  
...........................................................
Iteration 41     2015-06-13 13:24:19 
   Deviance = 3938.438 | Deviance change = 0.000432
    Maximum b parameter change =  1e-04  
------------------------------------------------------------
Start: 2015-06-13 13:24:19 
End: 2015-06-13 13:24:19 
Time difference of 0.385941 secs
Difference: 0.385941 
------------------------------------------------------------
> summary(mod1c)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:19 
Time difference of 0.385941 secs
Computation time: 0.385941 

Call:
rasch.mml2(dat = dat, distribution.trait = "smooth3")

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Rasch Type Model with Fixed Discrimination, Guessing and Slipping Parameters 
alpha1= 0  alpha2= 0  
Moments: 
   M   SD  Var 
0.00 1.81 3.29 

------------------------------------------------------------
Number of iterations = 41 
Deviance =  3938.44  | Log Likelihood =  -1969.22 
Number of persons =  328 
Number of estimated parameters =  14 
AIC  =  3966.44  | penalty = 28    | AIC = -2*LL + 2*p  
AICc =  3967.78  | penalty = 29.34    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  4019.54  | penalty = 81.1    | BIC = -2*LL + log(n)*p  
CAIC =  4033.54  | penalty = 95.1   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 1.116 
 Skewness= 0.181
Item Difficulty Distribution ( 12  Items )
 Mean= -1.357  SD= 1.04 
Distribution of Items Administered ( 12  Items )
 Mean= 12  SD= 0 

EAP Reliability: 0.661
------------------------------------------------------------
Item Parameter 
   item   N     p      b est.b a est.a thresh c est.c d est.d emp.discrim
1    A1 328 0.851 -2.115     1 1     0 -2.115 0     0 1     0       0.410
2    A2 328 0.738 -1.287     2 1     0 -1.287 0     0 1     0       0.523
3    A3 328 0.567 -0.349     3 1     0 -0.349 0     0 1     0       0.561
4    A4 328 0.460  0.187     4 1     0  0.187 0     0 1     0       0.532
5    B1 328 0.713 -1.139     5 1     0 -1.139 0     0 1     0       0.386
6    B2 328 0.506 -0.043     6 1     0 -0.043 0     0 1     0       0.466
7    B3 328 0.909 -2.742     7 1     0 -2.742 0     0 1     0       0.336
8    B4 328 0.683 -0.963     8 1     0 -0.963 0     0 1     0       0.509
9    C1 328 0.933 -3.112     9 1     0 -3.112 0     0 1     0       0.364
10   C2 328 0.713 -1.139    10 1     0 -1.139 0     0 1     0       0.513
11   C3 328 0.872 -2.319    11 1     0 -2.319 0     0 1     0       0.393
12   C4 328 0.735 -1.268    12 1     0 -1.268 0     0 1     0       0.438
   alpha1 alpha2
1       0      0
2       0      0
3       0      0
4       0      0
5       0      0
6       0      0
7       0      0
8       0      0
9       0      0
10      0      0
11      0      0
12      0      0
> 
> # 2PL model
> mod2 <- rasch.mml2( dat , est.a = 1:I )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:19 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
    Maximum a parameter change = 0.179056
...........................................................
Iteration 2     2015-06-13 13:24:19 
   Deviance = 3932.6605 | Deviance change = 23.283488
    Maximum b parameter change =  0.164255  
    Maximum a parameter change = 0.100263
...........................................................
Iteration 3     2015-06-13 13:24:19 
   Deviance = 3925.6262 | Deviance change = 7.034286
    Maximum b parameter change =  0.124259  
    Maximum a parameter change = 0.082788
...........................................................
Iteration 4     2015-06-13 13:24:19 
   Deviance = 3921.946 | Deviance change = 3.680179
    Maximum b parameter change =  0.105658  
    Maximum a parameter change = 0.08511
...........................................................
Iteration 5     2015-06-13 13:24:19 
   Deviance = 3919.6984 | Deviance change = 2.24764
    Maximum b parameter change =  0.102686  
    Maximum a parameter change = 0.089018
...........................................................
Iteration 6     2015-06-13 13:24:19 
   Deviance = 3918.092 | Deviance change = 1.606391
    Maximum b parameter change =  0.096286  
    Maximum a parameter change = 0.092056
...........................................................
Iteration 7     2015-06-13 13:24:19 
   Deviance = 3916.8161 | Deviance change = 1.275871
    Maximum b parameter change =  0.088139  
    Maximum a parameter change = 0.094078
...........................................................
Iteration 8     2015-06-13 13:24:19 
   Deviance = 3915.7459 | Deviance change = 1.070213
    Maximum b parameter change =  0.079338  
    Maximum a parameter change = 0.094998
...........................................................
Iteration 9     2015-06-13 13:24:19 
   Deviance = 3914.8286 | Deviance change = 0.917339
    Maximum b parameter change =  0.070572  
    Maximum a parameter change = 0.094796
...........................................................
Iteration 10     2015-06-13 13:24:19 
   Deviance = 3914.0385 | Deviance change = 0.790111
    Maximum b parameter change =  0.062256  
    Maximum a parameter change = 0.093529
...........................................................
Iteration 11     2015-06-13 13:24:19 
   Deviance = 3913.3596 | Deviance change = 0.678899
    Maximum b parameter change =  0.054618  
    Maximum a parameter change = 0.091315
...........................................................
Iteration 12     2015-06-13 13:24:19 
   Deviance = 3912.7791 | Deviance change = 0.580504
    Maximum b parameter change =  0.04776  
    Maximum a parameter change = 0.088316
...........................................................
Iteration 13     2015-06-13 13:24:19 
   Deviance = 3912.2853 | Deviance change = 0.493774
    Maximum b parameter change =  0.041702  
    Maximum a parameter change = 0.084718
...........................................................
Iteration 14     2015-06-13 13:24:19 
   Deviance = 3911.8673 | Deviance change = 0.417991
    Maximum b parameter change =  0.036413  
    Maximum a parameter change = 0.080696
...........................................................
Iteration 15     2015-06-13 13:24:19 
   Deviance = 3911.5149 | Deviance change = 0.352373
    Maximum b parameter change =  0.031828  
    Maximum a parameter change = 0.076415
...........................................................
Iteration 16     2015-06-13 13:24:19 
   Deviance = 3911.2189 | Deviance change = 0.295993
    Maximum b parameter change =  0.027871  
    Maximum a parameter change = 0.072011
...........................................................
Iteration 17     2015-06-13 13:24:19 
   Deviance = 3910.9711 | Deviance change = 0.247863
    Maximum b parameter change =  0.024464  
    Maximum a parameter change = 0.067585
...........................................................
Iteration 18     2015-06-13 13:24:19 
   Deviance = 3910.7641 | Deviance change = 0.206986
    Maximum b parameter change =  0.021528  
    Maximum a parameter change = 0.063218
...........................................................
Iteration 19     2015-06-13 13:24:19 
   Deviance = 3910.5917 | Deviance change = 0.172412
    Maximum b parameter change =  0.018995  
    Maximum a parameter change = 0.058964
...........................................................
Iteration 20     2015-06-13 13:24:19 
   Deviance = 3910.4484 | Deviance change = 0.143281
    Maximum b parameter change =  0.016802  
    Maximum a parameter change = 0.054857
...........................................................
Iteration 21     2015-06-13 13:24:20 
   Deviance = 3910.3296 | Deviance change = 0.118815
    Maximum b parameter change =  0.014897  
    Maximum a parameter change = 0.050923
...........................................................
Iteration 22     2015-06-13 13:24:20 
   Deviance = 3910.2312 | Deviance change = 0.098331
    Maximum b parameter change =  0.013237  
    Maximum a parameter change = 0.047174
...........................................................
Iteration 23     2015-06-13 13:24:20 
   Deviance = 3910.15 | Deviance change = 0.08123
    Maximum b parameter change =  0.011784  
    Maximum a parameter change = 0.04362
...........................................................
Iteration 24     2015-06-13 13:24:20 
   Deviance = 3910.083 | Deviance change = 0.066993
    Maximum b parameter change =  0.010508  
    Maximum a parameter change = 0.040262
...........................................................
Iteration 25     2015-06-13 13:24:20 
   Deviance = 3910.0279 | Deviance change = 0.055168
    Maximum b parameter change =  0.009384  
    Maximum a parameter change = 0.0371
...........................................................
Iteration 26     2015-06-13 13:24:20 
   Deviance = 3909.9825 | Deviance change = 0.04537
    Maximum b parameter change =  0.00839  
    Maximum a parameter change = 0.034131
...........................................................
Iteration 27     2015-06-13 13:24:20 
   Deviance = 3909.9452 | Deviance change = 0.037268
    Maximum b parameter change =  0.007509  
    Maximum a parameter change = 0.031357
...........................................................
Iteration 28     2015-06-13 13:24:20 
   Deviance = 3909.9146 | Deviance change = 0.030582
    Maximum b parameter change =  0.006727  
    Maximum a parameter change = 0.028767
...........................................................
Iteration 29     2015-06-13 13:24:20 
   Deviance = 3909.8896 | Deviance change = 0.025074
    Maximum b parameter change =  0.006031  
    Maximum a parameter change = 0.026354
...........................................................
Iteration 30     2015-06-13 13:24:20 
   Deviance = 3909.869 | Deviance change = 0.020541
    Maximum b parameter change =  0.00541  
    Maximum a parameter change = 0.024115
...........................................................
Iteration 31     2015-06-13 13:24:20 
   Deviance = 3909.8522 | Deviance change = 0.016818
    Maximum b parameter change =  0.004856  
    Maximum a parameter change = 0.022041
...........................................................
Iteration 32     2015-06-13 13:24:20 
   Deviance = 3909.8384 | Deviance change = 0.013761
    Maximum b parameter change =  0.00436  
    Maximum a parameter change = 0.020123
...........................................................
Iteration 33     2015-06-13 13:24:20 
   Deviance = 3909.8272 | Deviance change = 0.011256
    Maximum b parameter change =  0.003917  
    Maximum a parameter change = 0.018354
...........................................................
Iteration 34     2015-06-13 13:24:20 
   Deviance = 3909.818 | Deviance change = 0.009203
    Maximum b parameter change =  0.00352  
    Maximum a parameter change = 0.016724
...........................................................
Iteration 35     2015-06-13 13:24:20 
   Deviance = 3909.8105 | Deviance change = 0.007522
    Maximum b parameter change =  0.003164  
    Maximum a parameter change = 0.015228
...........................................................
Iteration 36     2015-06-13 13:24:20 
   Deviance = 3909.8043 | Deviance change = 0.006147
    Maximum b parameter change =  0.002846  
    Maximum a parameter change = 0.013854
...........................................................
Iteration 37     2015-06-13 13:24:20 
   Deviance = 3909.7993 | Deviance change = 0.005023
    Maximum b parameter change =  0.002559  
    Maximum a parameter change = 0.012595
...........................................................
Iteration 38     2015-06-13 13:24:20 
   Deviance = 3909.7952 | Deviance change = 0.004104
    Maximum b parameter change =  0.002303  
    Maximum a parameter change = 0.011443
...........................................................
Iteration 39     2015-06-13 13:24:20 
   Deviance = 3909.7918 | Deviance change = 0.003353
    Maximum b parameter change =  0.002072  
    Maximum a parameter change = 0.01039
...........................................................
Iteration 40     2015-06-13 13:24:20 
   Deviance = 3909.7891 | Deviance change = 0.002739
    Maximum b parameter change =  0.001865  
    Maximum a parameter change = 0.00943
...........................................................
Iteration 41     2015-06-13 13:24:20 
   Deviance = 3909.7869 | Deviance change = 0.002238
    Maximum b parameter change =  0.001679  
    Maximum a parameter change = 0.008554
...........................................................
Iteration 42     2015-06-13 13:24:20 
   Deviance = 3909.785 | Deviance change = 0.001829
    Maximum b parameter change =  0.001511  
    Maximum a parameter change = 0.007756
...........................................................
Iteration 43     2015-06-13 13:24:20 
   Deviance = 3909.7835 | Deviance change = 0.001494
    Maximum b parameter change =  0.001361  
    Maximum a parameter change = 0.00703
...........................................................
Iteration 44     2015-06-13 13:24:20 
   Deviance = 3909.7823 | Deviance change = 0.001221
    Maximum b parameter change =  0.001226  
    Maximum a parameter change = 0.006369
...........................................................
Iteration 45     2015-06-13 13:24:20 
   Deviance = 3909.7813 | Deviance change = 0.000999
    Maximum b parameter change =  0.001104  
    Maximum a parameter change = 0.005769
...........................................................
Iteration 46     2015-06-13 13:24:20 
   Deviance = 3909.7805 | Deviance change = 0.000817
    Maximum b parameter change =  0.000995  
    Maximum a parameter change = 0.005223
...........................................................
Iteration 47     2015-06-13 13:24:20 
   Deviance = 3909.7798 | Deviance change = 0.000668
    Maximum b parameter change =  0.000896  
    Maximum a parameter change = 0.004729
...........................................................
Iteration 48     2015-06-13 13:24:20 
   Deviance = 3909.7793 | Deviance change = 0.000546
    Maximum b parameter change =  0.000807  
    Maximum a parameter change = 0.00428
...........................................................
Iteration 49     2015-06-13 13:24:20 
   Deviance = 3909.7788 | Deviance change = 0.000447
    Maximum b parameter change =  0.000728  
    Maximum a parameter change = 0.003873
...........................................................
Iteration 50     2015-06-13 13:24:20 
   Deviance = 3909.7785 | Deviance change = 0.000366
    Maximum b parameter change =  0.000656  
    Maximum a parameter change = 0.003503
...........................................................
Iteration 51     2015-06-13 13:24:20 
   Deviance = 3909.7782 | Deviance change = 3e-04
    Maximum b parameter change =  0.000591  
    Maximum a parameter change = 0.003169
...........................................................
Iteration 52     2015-06-13 13:24:20 
   Deviance = 3909.7779 | Deviance change = 0.000246
    Maximum b parameter change =  0.000533  
    Maximum a parameter change = 0.002866
...........................................................
Iteration 53     2015-06-13 13:24:20 
   Deviance = 3909.7777 | Deviance change = 0.000202
    Maximum b parameter change =  0.00048  
    Maximum a parameter change = 0.002592
...........................................................
Iteration 54     2015-06-13 13:24:20 
   Deviance = 3909.7776 | Deviance change = 0.000165
    Maximum b parameter change =  0.000433  
    Maximum a parameter change = 0.002344
...........................................................
Iteration 55     2015-06-13 13:24:20 
   Deviance = 3909.7774 | Deviance change = 0.000136
    Maximum b parameter change =  0.000391  
    Maximum a parameter change = 0.002119
...........................................................
Iteration 56     2015-06-13 13:24:20 
   Deviance = 3909.7773 | Deviance change = 0.000112
    Maximum b parameter change =  0.000352  
    Maximum a parameter change = 0.001916
...........................................................
Iteration 57     2015-06-13 13:24:20 
   Deviance = 3909.7772 | Deviance change = 9.2e-05
    Maximum b parameter change =  0.000318  
    Maximum a parameter change = 0.001732
...........................................................
Iteration 58     2015-06-13 13:24:20 
   Deviance = 3909.7771 | Deviance change = 7.6e-05
    Maximum b parameter change =  0.000287  
    Maximum a parameter change = 0.001566
...........................................................
Iteration 59     2015-06-13 13:24:20 
   Deviance = 3909.7771 | Deviance change = 6.2e-05
    Maximum b parameter change =  0.000258  
    Maximum a parameter change = 0.001415
...........................................................
Iteration 60     2015-06-13 13:24:20 
   Deviance = 3909.777 | Deviance change = 5.1e-05
    Maximum b parameter change =  0.000233  
    Maximum a parameter change = 0.001279
...........................................................
Iteration 61     2015-06-13 13:24:20 
   Deviance = 3909.777 | Deviance change = 4.2e-05
    Maximum b parameter change =  0.00021  
    Maximum a parameter change = 0.001156
...........................................................
Iteration 62     2015-06-13 13:24:20 
   Deviance = 3909.777 | Deviance change = 3.5e-05
    Maximum b parameter change =  0.00019  
    Maximum a parameter change = 0.001045
...........................................................
Iteration 63     2015-06-13 13:24:20 
   Deviance = 3909.7769 | Deviance change = 2.9e-05
    Maximum b parameter change =  0.000171  
    Maximum a parameter change = 0.000944
...........................................................
Iteration 64     2015-06-13 13:24:20 
   Deviance = 3909.7769 | Deviance change = 2.4e-05
    Maximum b parameter change =  0.000155  
    Maximum a parameter change = 0.000854
...........................................................
Iteration 65     2015-06-13 13:24:20 
   Deviance = 3909.7769 | Deviance change = 2e-05
    Maximum b parameter change =  0.000139  
    Maximum a parameter change = 0.000771
...........................................................
Iteration 66     2015-06-13 13:24:20 
   Deviance = 3909.7769 | Deviance change = 1.6e-05
    Maximum b parameter change =  0.000126  
    Maximum a parameter change = 0.000697
...........................................................
Iteration 67     2015-06-13 13:24:20 
   Deviance = 3909.7769 | Deviance change = 1.4e-05
    Maximum b parameter change =  0.000114  
    Maximum a parameter change = 0.00063
...........................................................
Iteration 68     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 1.1e-05
    Maximum b parameter change =  0.000103  
    Maximum a parameter change = 0.000569
...........................................................
Iteration 69     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 1e-05
    Maximum b parameter change =  9.3e-05  
    Maximum a parameter change = 0.000514
...........................................................
Iteration 70     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 8e-06
    Maximum b parameter change =  8.4e-05  
    Maximum a parameter change = 0.000465
...........................................................
Iteration 71     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 7e-06
    Maximum b parameter change =  7.5e-05  
    Maximum a parameter change = 0.00042
...........................................................
Iteration 72     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 6e-06
    Maximum b parameter change =  6.8e-05  
    Maximum a parameter change = 0.00038
...........................................................
Iteration 73     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 5e-06
    Maximum b parameter change =  6.1e-05  
    Maximum a parameter change = 0.000343
...........................................................
Iteration 74     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 4e-06
    Maximum b parameter change =  5.6e-05  
    Maximum a parameter change = 0.00031
...........................................................
Iteration 75     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 3e-06
    Maximum b parameter change =  5e-05  
    Maximum a parameter change = 0.00028
...........................................................
Iteration 76     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 3e-06
    Maximum b parameter change =  4.5e-05  
    Maximum a parameter change = 0.000253
...........................................................
Iteration 77     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 2e-06
    Maximum b parameter change =  4.1e-05  
    Maximum a parameter change = 0.000229
...........................................................
Iteration 78     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 2e-06
    Maximum b parameter change =  3.7e-05  
    Maximum a parameter change = 0.000207
...........................................................
Iteration 79     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 2e-06
    Maximum b parameter change =  3.3e-05  
    Maximum a parameter change = 0.000187
...........................................................
Iteration 80     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  3e-05  
    Maximum a parameter change = 0.000169
...........................................................
Iteration 81     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  2.7e-05  
    Maximum a parameter change = 0.000153
...........................................................
Iteration 82     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  2.5e-05  
    Maximum a parameter change = 0.000138
...........................................................
Iteration 83     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  2.2e-05  
    Maximum a parameter change = 0.000125
...........................................................
Iteration 84     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  2e-05  
    Maximum a parameter change = 0.000113
...........................................................
Iteration 85     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  1.8e-05  
    Maximum a parameter change = 0.000102
...........................................................
Iteration 86     2015-06-13 13:24:20 
   Deviance = 3909.7768 | Deviance change = 1e-06
    Maximum b parameter change =  1.6e-05  
    Maximum a parameter change = 9.2e-05
------------------------------------------------------------
Start: 2015-06-13 13:24:19 
End: 2015-06-13 13:24:20 
Time difference of 0.811414 secs
Difference: 0.811414 
------------------------------------------------------------
> summary(mod2)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:20 
Time difference of 0.811414 secs
Computation time: 0.811414 

Call:
rasch.mml2(dat = dat, est.a = 1:I)

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Rasch Type Model with Fixed Discrimination, Guessing and Slipping Parameters 
alpha1= 0  alpha2= 0  
Moments: 
   M   SD  Var 
0.00 1.81 3.29 

------------------------------------------------------------
Number of iterations = 86 
Deviance =  3909.78  | Log Likelihood =  -1954.89 
Number of persons =  328 
Number of estimated parameters =  24 
AIC  =  3957.78  | penalty = 48    | AIC = -2*LL + 2*p  
AICc =  3961.74  | penalty = 51.96    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  4048.81  | penalty = 139.03    | BIC = -2*LL + log(n)*p  
CAIC =  4072.81  | penalty = 163.03   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 1 
 Skewness= 0
Item Difficulty Distribution ( 12  Items )
 Mean= -1.111  SD= 0.796 
Distribution of Items Administered ( 12  Items )
 Mean= 12  SD= 0 

EAP Reliability: 0.672
------------------------------------------------------------
Item Parameter 
   item   N     p      b est.b     a est.a thresh c est.c d est.d emp.discrim
1    A1 328 0.851 -2.045     1 1.005     1 -2.054 0     0 1     0       0.370
2    A2 328 0.738 -0.996     2 1.428     2 -1.422 0     0 1     0       0.546
3    A3 328 0.567 -0.309     3 1.127     3 -0.348 0     0 1     0       0.518
4    A4 328 0.460  0.211     4 0.852     4  0.180 0     0 1     0       0.461
5    B1 328 0.713 -1.662     5 0.592     5 -0.983 0     0 1     0       0.316
6    B2 328 0.506 -0.045     6 0.639     6 -0.029 0     0 1     0       0.344
7    B3 328 0.909 -2.384     7 1.170     7 -2.789 0     0 1     0       0.343
8    B4 328 0.683 -0.884     8 1.077     8 -0.951 0     0 1     0       0.474
9    C1 328 0.933 -1.684     9 3.211     9 -5.408 0     0 1     0       0.506
10   C2 328 0.713 -0.862    10 1.492    10 -1.287 0     0 1     0       0.581
11   C3 328 0.872 -1.544    11 1.885    11 -2.909 0     0 1     0       0.498
12   C4 328 0.735 -1.124    12 1.138    12 -1.278 0     0 1     0       0.485
   alpha1 alpha2
1       0      0
2       0      0
3       0      0
4       0      0
5       0      0
6       0      0
7       0      0
8       0      0
9       0      0
10      0      0
11      0      0
12      0      0
> plot(mod2)	# plot 2PL item response curves
> 
> # extract individual likelihood
> llmod2 <- IRT.likelihood(mod2)
> str(llmod2)
 num [1:328, 1:21] 1.08e-30 1.25e-20 1.15e-28 4.21e-33 1.04e-18 ...
 - attr(*, "theta")= num [1:21, 1] -6 -5.4 -4.8 -4.2 -3.6 ...
 - attr(*, "prob.theta")= num [1:21, 1] 3.65e-09 1.11e-07 2.38e-06 3.54e-05 3.67e-04 ...
 - attr(*, "G")= int 1
> 
> ## Not run: 
> ##D library(CDM)	
> ##D # model comparisons
> ##D CDM::IRT.compareModels(mod1, mod1c, mod2 )
> ##D anova(mod1,mod2)
> ##D 
> ##D # assess model fit
> ##D smod1 <- IRT.modelfit(mod1)
> ##D smod2 <- IRT.modelfit(mod2)
> ##D IRT.compareModels(smod1, smod2)	
> ##D 
> ##D # set some bounds for a and b parameters 
> ##D mod2a <- rasch.mml2( dat , est.a=1:I , min.a = .7 , max.a=2 , min.b = -2 )
> ##D summary(mod2a)
> ##D 
> ##D # 3PL model
> ##D mod3 <- rasch.mml2( dat , est.a = 1:I , est.c = 1:I , 
> ##D               mmliter = 400 # maximal 400 iterations
> ##D                  )
> ##D summary(mod3)
> ##D 
> ##D # 3PL model with fixed guessing paramters of .25 and equal slopes
> ##D mod4 <- rasch.mml2( dat , fixed.c = rep( .25 , I )   )
> ##D summary(mod4)
> ##D 
> ##D # 3PL model with equal guessing paramters for all items
> ##D mod5 <- rasch.mml2( dat , est.c = rep(1, I )   )
> ##D summary(mod5)
> ##D 
> ##D # difficulty + guessing model
> ##D mod6 <- rasch.mml2( dat , est.c = 1:I   )
> ##D summary(mod6)
> ##D 
> ##D # 4PL model
> ##D mod7 <- rasch.mml2( dat , est.a = 1:I , est.c=1:I , est.d = 1:I  ,
> ##D             min.d = .95 , max.c = .25)  
> ##D         # set minimal d and maximal c parameter to .95 and .25
> ##D summary(mod7)
> ##D 
> ##D # constrained 4PL model
> ##D # equal slope, guessing and slipping parameters
> ##D mod8 <- rasch.mml2( dat ,est.c=rep(1,I) , est.d = rep(1,I) )
> ##D summary(mod8)
> ##D 
> ##D # estimation of an item response model with an
> ##D # uniform theta distribution
> ##D theta.k <- seq( 0.01 , .99 , len=20 )
> ##D trait.weights <- rep( 1/length(theta.k) , length(theta.k) )
> ##D mod9 <- rasch.mml2( dat , theta.k=theta.k , trait.weights = trait.weights ,
> ##D               normal.trait=FALSE , est.a = 1:12  )
> ##D summary(mod9)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Longitudinal data
> ##D #############################################################################
> ##D 
> ##D data(data.long)
> ##D dat <- data.long[,-1]
> ##D 
> ##D # define Q loading matrix
> ##D Qmatrix <- matrix( 0 , 12 , 2 )
> ##D Qmatrix[1:6,1] <- 1 # T1 items
> ##D Qmatrix[7:12,2] <- 1    # T2 items
> ##D 
> ##D # define restrictions on item difficulties
> ##D est.b <- c(1,2,3,4,5,6,   3,4,5,6,7,8) 
> ##D mu.fixed <- cbind(1,0) 
> ##D     # set first mean to 0 for identification reasons
> ##D 
> ##D # Model 1: 2-dimensional Rasch model
> ##D mod1 <- rasch.mml2( dat , Qmatrix=Qmatrix , miterstep=4,
> ##D             est.b = est.b   ,  mu.fixed = mu.fixed , mmliter=30 )
> ##D summary(mod1)
> ##D plot(mod1)
> ##D ##     Plot function is only applicable for unidimensional models
> ## End(Not run)
> 
> #############################################################################
> # SIMULATED EXAMPLE 3
> #  one group, estimation of alpha parameter in the generalized logistic model
> #############################################################################
> 
> # simulate theta values
> set.seed(786)
> N <- 1000                  # number of persons
> theta <- rnorm( N , sd =1.5 ) # N persons with SD 1.5
> b <- seq( -2 , 2 , len=15)
> 
> # simulate data
> dat <- sim.raschtype( theta = theta , b = b , alpha1 = 0 , alpha2 = -0.3 )
> 
> #  estimating alpha parameters
> mod1 <- rasch.mml2( dat , est.alpha = TRUE , mmliter=30 )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: Estimation of alpha1 and alpha2 
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:20 
   Deviance = 16690.0457
    Maximum b parameter change =  0.289577  
    alpha1=0.1 | alpha2=0.033 | max alpha change 0.1
...........................................................
Iteration 2     2015-06-13 13:24:20 
   Deviance = 16552.2616 | Deviance change = 137.784101
    Maximum b parameter change =  0.048075  
    alpha1=0.157 | alpha2=0.018 | max alpha change 0.0570283
...........................................................
Iteration 3     2015-06-13 13:24:20 
   Deviance = 16532.3236 | Deviance change = 19.938075
    Maximum b parameter change =  0.028116  
    alpha1=0.182 | alpha2=-0.001 | max alpha change 0.0245855
...........................................................
Iteration 4     2015-06-13 13:24:20 
   Deviance = 16524.7053 | Deviance change = 7.618305
    Maximum b parameter change =  0.023143  
    alpha1=0.187 | alpha2=-0.022 | max alpha change 0.0202953
...........................................................
Iteration 5     2015-06-13 13:24:20 
   Deviance = 16522.0627 | Deviance change = 2.642572
    Maximum b parameter change =  0.029076  
    alpha1=0.183 | alpha2=-0.042 | max alpha change 0.0200785
...........................................................
Iteration 6     2015-06-13 13:24:20 
   Deviance = 16520.4445 | Deviance change = 1.618202
    Maximum b parameter change =  0.027204  
    alpha1=0.177 | alpha2=-0.057 | max alpha change 0.0152685
...........................................................
Iteration 7     2015-06-13 13:24:20 
   Deviance = 16519.1024 | Deviance change = 1.342056
    Maximum b parameter change =  0.024004  
    alpha1=0.17 | alpha2=-0.07 | max alpha change 0.0128255
...........................................................
Iteration 8     2015-06-13 13:24:20 
   Deviance = 16517.9616 | Deviance change = 1.140843
    Maximum b parameter change =  0.021683  
    alpha1=0.161 | alpha2=-0.081 | max alpha change 0.0110451
...........................................................
Iteration 9     2015-06-13 13:24:20 
   Deviance = 16516.9562 | Deviance change = 1.005353
    Maximum b parameter change =  0.019722  
    alpha1=0.153 | alpha2=-0.091 | max alpha change 0.0098339
...........................................................
Iteration 10     2015-06-13 13:24:20 
   Deviance = 16516.0566 | Deviance change = 0.899641
    Maximum b parameter change =  0.018122  
    alpha1=0.144 | alpha2=-0.1 | max alpha change 0.0089939
...........................................................
Iteration 11     2015-06-13 13:24:20 
   Deviance = 16515.2428 | Deviance change = 0.813755
    Maximum b parameter change =  0.016807  
    alpha1=0.136 | alpha2=-0.108 | max alpha change 0.0084197
...........................................................
Iteration 12     2015-06-13 13:24:20 
   Deviance = 16514.5008 | Deviance change = 0.741988
    Maximum b parameter change =  0.015712  
    alpha1=0.128 | alpha2=-0.116 | max alpha change 0.0082114
...........................................................
Iteration 13     2015-06-13 13:24:20 
   Deviance = 16513.8201 | Deviance change = 0.680698
    Maximum b parameter change =  0.014789  
    alpha1=0.12 | alpha2=-0.124 | max alpha change 0.0079469
...........................................................
Iteration 14     2015-06-13 13:24:20 
   Deviance = 16513.1928 | Deviance change = 0.627309
    Maximum b parameter change =  0.013999  
    alpha1=0.112 | alpha2=-0.131 | max alpha change 0.0076534
...........................................................
Iteration 15     2015-06-13 13:24:20 
   Deviance = 16512.6129 | Deviance change = 0.57996
    Maximum b parameter change =  0.013311  
    alpha1=0.105 | alpha2=-0.138 | max alpha change 0.0073477
...........................................................
Iteration 16     2015-06-13 13:24:20 
   Deviance = 16512.0756 | Deviance change = 0.537313
    Maximum b parameter change =  0.012705  
    alpha1=0.098 | alpha2=-0.145 | max alpha change 0.0070396
...........................................................
Iteration 17     2015-06-13 13:24:20 
   Deviance = 16511.5771 | Deviance change = 0.498425
    Maximum b parameter change =  0.012162  
    alpha1=0.091 | alpha2=-0.151 | max alpha change 0.0067358
...........................................................
Iteration 18     2015-06-13 13:24:20 
   Deviance = 16511.1145 | Deviance change = 0.462648
    Maximum b parameter change =  0.01167  
    alpha1=0.085 | alpha2=-0.158 | max alpha change 0.0064397
...........................................................
Iteration 19     2015-06-13 13:24:20 
   Deviance = 16510.685 | Deviance change = 0.429533
    Maximum b parameter change =  0.011219  
    alpha1=0.079 | alpha2=-0.164 | max alpha change 0.0061622
...........................................................
Iteration 20     2015-06-13 13:24:20 
   Deviance = 16510.2862 | Deviance change = 0.398765
    Maximum b parameter change =  0.010799  
    alpha1=0.073 | alpha2=-0.17 | max alpha change 0.0059643
...........................................................
Iteration 21     2015-06-13 13:24:20 
   Deviance = 16509.9161 | Deviance change = 0.370105
    Maximum b parameter change =  0.010407  
    alpha1=0.067 | alpha2=-0.176 | max alpha change 0.0057714
...........................................................
Iteration 22     2015-06-13 13:24:20 
   Deviance = 16509.5727 | Deviance change = 0.343373
    Maximum b parameter change =  0.01004  
    alpha1=0.062 | alpha2=-0.181 | max alpha change 0.005583
...........................................................
Iteration 23     2015-06-13 13:24:20 
   Deviance = 16509.2543 | Deviance change = 0.318447
    Maximum b parameter change =  0.009694  
    alpha1=0.057 | alpha2=-0.187 | max alpha change 0.005399
...........................................................
Iteration 24     2015-06-13 13:24:20 
   Deviance = 16508.9591 | Deviance change = 0.295209
    Maximum b parameter change =  0.009364  
    alpha1=0.052 | alpha2=-0.192 | max alpha change 0.0052193
...........................................................
Iteration 25     2015-06-13 13:24:20 
   Deviance = 16508.6855 | Deviance change = 0.273555
    Maximum b parameter change =  0.009049  
    alpha1=0.047 | alpha2=-0.197 | max alpha change 0.0050439
...........................................................
Iteration 26     2015-06-13 13:24:20 
   Deviance = 16508.4321 | Deviance change = 0.253388
    Maximum b parameter change =  0.008747  
    alpha1=0.043 | alpha2=-0.202 | max alpha change 0.0048729
...........................................................
Iteration 27     2015-06-13 13:24:20 
   Deviance = 16508.1975 | Deviance change = 0.234621
    Maximum b parameter change =  0.008456  
    alpha1=0.038 | alpha2=-0.207 | max alpha change 0.0047062
...........................................................
Iteration 28     2015-06-13 13:24:20 
   Deviance = 16507.9803 | Deviance change = 0.217171
    Maximum b parameter change =  0.008175  
    alpha1=0.034 | alpha2=-0.211 | max alpha change 0.004544
...........................................................
Iteration 29     2015-06-13 13:24:20 
   Deviance = 16507.7794 | Deviance change = 0.200965
    Maximum b parameter change =  0.007904  
    alpha1=0.03 | alpha2=-0.215 | max alpha change 0.0043863
...........................................................
Iteration 30     2015-06-13 13:24:20 
   Deviance = 16507.5934 | Deviance change = 0.185945
    Maximum b parameter change =  0.007642  
    alpha1=0.027 | alpha2=-0.22 | max alpha change 0.004233
------------------------------------------------------------
Start: 2015-06-13 13:24:20 
End: 2015-06-13 13:24:20 
Time difference of 0.3375819 secs
Difference: 0.3375819 
------------------------------------------------------------
> summary(mod1)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:20 
Time difference of 0.3375819 secs
Computation time: 0.3375819 

Call:
rasch.mml2(dat = dat, mmliter = 30, est.alpha = TRUE)

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Rasch Type Model with Fixed Discrimination, Guessing and Slipping Parameters 
alpha1= 0.027  alpha2= -0.22  
Moments: 
    M    SD   Var 
-0.25  2.31  5.32 

------------------------------------------------------------
Number of iterations = 30 
Deviance =  16507.59  | Log Likelihood =  -8253.8 
Number of persons =  1000 
Number of estimated parameters =  18 
AIC  =  16543.59  | penalty = 36    | AIC = -2*LL + 2*p  
AICc =  16544.29  | penalty = 36.7    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  16631.93  | penalty = 124.34    | BIC = -2*LL + log(n)*p  
CAIC =  16649.93  | penalty = 142.34   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 1.403 
 Skewness= 0
Item Difficulty Distribution ( 15  Items )
 Mean= -0.047  SD= 1.218 
Distribution of Items Administered ( 15  Items )
 Mean= 15  SD= 0 

EAP Reliability: 0.8
------------------------------------------------------------
Item Parameter 
    item    N     p      b est.b a est.a thresh c est.c d est.d emp.discrim
1  I0001 1000 0.799 -1.814     1 1     0 -1.814 0     0 1     0       0.509
2  I0002 1000 0.777 -1.632     2 1     0 -1.632 0     0 1     0       0.451
3  I0003 1000 0.748 -1.430     3 1     0 -1.430 0     0 1     0       0.515
4  I0004 1000 0.715 -1.213     4 1     0 -1.213 0     0 1     0       0.533
5  I0005 1000 0.673 -0.938     5 1     0 -0.938 0     0 1     0       0.541
6  I0006 1000 0.613 -0.586     6 1     0 -0.586 0     0 1     0       0.560
7  I0007 1000 0.571 -0.342     7 1     0 -0.342 0     0 1     0       0.547
8  I0008 1000 0.522 -0.063     8 1     0 -0.063 0     0 1     0       0.552
9  I0009 1000 0.484  0.154     9 1     0  0.154 0     0 1     0       0.542
10 I0010 1000 0.422  0.529    10 1     0  0.529 0     0 1     0       0.500
11 I0011 1000 0.387  0.713    11 1     0  0.713 0     0 1     0       0.548
12 I0012 1000 0.331  1.077    12 1     0  1.077 0     0 1     0       0.515
13 I0013 1000 0.311  1.235    13 1     0  1.235 0     0 1     0       0.470
14 I0014 1000 0.249  1.707    14 1     0  1.707 0     0 1     0       0.414
15 I0015 1000 0.225  1.895    15 1     0  1.895 0     0 1     0       0.418
   alpha1 alpha2
1   0.027  -0.22
2   0.027  -0.22
3   0.027  -0.22
4   0.027  -0.22
5   0.027  -0.22
6   0.027  -0.22
7   0.027  -0.22
8   0.027  -0.22
9   0.027  -0.22
10  0.027  -0.22
11  0.027  -0.22
12  0.027  -0.22
13  0.027  -0.22
14  0.027  -0.22
15  0.027  -0.22
> plot(mod1)
> 
> ## Not run: 
> ##D # fixed alpha parameters
> ##D mod1b <- rasch.mml2( dat , est.alpha = FALSE , alpha1=0 , alpha2=-.3 )
> ##D summary(mod1b)
> ##D 
> ##D # estimation with equal alpha parameters
> ##D mod1c <- rasch.mml2( dat , est.alpha = TRUE , equal.alpha=TRUE )
> ##D summary(mod1c)
> ##D 
> ##D # Ramsay QM
> ##D mod2a <- rasch.mml2( dat , irtmodel ="ramsay.qm" )
> ##D summary(mod2a)
> ## End(Not run)
> 
> # Ramsay QM with estimated K parameters
> mod2b <- rasch.mml2( dat , irtmodel ="ramsay.qm" , est.K=1:15 , mmliter=30)
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Quotient Model (Ramsay, 1989) 
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:20 
   Deviance = 17084.8566
    Maximum b parameter change =  0.405562  
    Maximum K parameter change = 0.043151
...........................................................
Iteration 2     2015-06-13 13:24:20 
   Deviance = 16944.9665 | Deviance change = 139.890053
    Maximum b parameter change =  0.202629  
    Maximum K parameter change = 0.029853
...........................................................
Iteration 3     2015-06-13 13:24:21 
   Deviance = 16870.9715 | Deviance change = 73.995003
    Maximum b parameter change =  0.225494  
    Maximum K parameter change = 0.028534
...........................................................
Iteration 4     2015-06-13 13:24:21 
   Deviance = 16811.7387 | Deviance change = 59.232796
    Maximum b parameter change =  0.175456  
    Maximum K parameter change = 0.026408
...........................................................
Iteration 5     2015-06-13 13:24:21 
   Deviance = 16766.8918 | Deviance change = 44.846893
    Maximum b parameter change =  0.130988  
    Maximum K parameter change = 0.023535
...........................................................
Iteration 6     2015-06-13 13:24:21 
   Deviance = 16733.9252 | Deviance change = 32.966587
    Maximum b parameter change =  0.099038  
    Maximum K parameter change = 0.020234
...........................................................
Iteration 7     2015-06-13 13:24:21 
   Deviance = 16710.0614 | Deviance change = 23.86381
    Maximum b parameter change =  0.081082  
    Maximum K parameter change = 0.01685
...........................................................
Iteration 8     2015-06-13 13:24:21 
   Deviance = 16692.9675 | Deviance change = 17.093925
    Maximum b parameter change =  0.066919  
    Maximum K parameter change = 0.013655
...........................................................
Iteration 9     2015-06-13 13:24:21 
   Deviance = 16680.8089 | Deviance change = 12.158624
    Maximum b parameter change =  0.053893  
    Maximum K parameter change = 0.01082
...........................................................
Iteration 10     2015-06-13 13:24:21 
   Deviance = 16672.1875 | Deviance change = 8.621414
    Maximum b parameter change =  0.042487  
    Maximum K parameter change = 0.008415
...........................................................
Iteration 11     2015-06-13 13:24:21 
   Deviance = 16666.0688 | Deviance change = 6.118636
    Maximum b parameter change =  0.033626  
    Maximum K parameter change = 0.00644
...........................................................
Iteration 12     2015-06-13 13:24:21 
   Deviance = 16661.7065 | Deviance change = 4.362297
    Maximum b parameter change =  0.028407  
    Maximum K parameter change = 0.004917
...........................................................
Iteration 13     2015-06-13 13:24:21 
   Deviance = 16658.5712 | Deviance change = 3.135352
    Maximum b parameter change =  0.02419  
    Maximum K parameter change = 0.004293
...........................................................
Iteration 14     2015-06-13 13:24:21 
   Deviance = 16656.2936 | Deviance change = 2.277591
    Maximum b parameter change =  0.02081  
    Maximum K parameter change = 0.003708
...........................................................
Iteration 15     2015-06-13 13:24:21 
   Deviance = 16654.6166 | Deviance change = 1.676964
    Maximum b parameter change =  0.018035  
    Maximum K parameter change = 0.003176
...........................................................
Iteration 16     2015-06-13 13:24:21 
   Deviance = 16653.3634 | Deviance change = 1.253197
    Maximum b parameter change =  0.015716  
    Maximum K parameter change = 0.002697
...........................................................
Iteration 17     2015-06-13 13:24:21 
   Deviance = 16652.4119 | Deviance change = 0.951535
    Maximum b parameter change =  0.013762  
    Maximum K parameter change = 0.002272
...........................................................
Iteration 18     2015-06-13 13:24:21 
   Deviance = 16651.6772 | Deviance change = 0.734636
    Maximum b parameter change =  0.01212  
    Maximum K parameter change = 0.001901
...........................................................
Iteration 19     2015-06-13 13:24:21 
   Deviance = 16651.101 | Deviance change = 0.576261
    Maximum b parameter change =  0.010704  
    Maximum K parameter change = 0.001577
...........................................................
Iteration 20     2015-06-13 13:24:21 
   Deviance = 16650.642 | Deviance change = 0.458992
    Maximum b parameter change =  0.009499  
    Maximum K parameter change = 0.001298
...........................................................
Iteration 21     2015-06-13 13:24:21 
   Deviance = 16650.2713 | Deviance change = 0.370697
    Maximum b parameter change =  0.008446  
    Maximum K parameter change = 0.001059
...........................................................
Iteration 22     2015-06-13 13:24:21 
   Deviance = 16649.9684 | Deviance change = 0.302937
    Maximum b parameter change =  0.007522  
    Maximum K parameter change = 0.000856
...........................................................
Iteration 23     2015-06-13 13:24:21 
   Deviance = 16649.7182 | Deviance change = 0.250122
    Maximum b parameter change =  0.006717  
    Maximum K parameter change = 0.000715
...........................................................
Iteration 24     2015-06-13 13:24:21 
   Deviance = 16649.51 | Deviance change = 0.208237
    Maximum b parameter change =  0.006018  
    Maximum K parameter change = 0.000635
...........................................................
Iteration 25     2015-06-13 13:24:21 
   Deviance = 16649.3355 | Deviance change = 0.17453
    Maximum b parameter change =  0.005391  
    Maximum K parameter change = 0.000566
...........................................................
Iteration 26     2015-06-13 13:24:21 
   Deviance = 16649.1885 | Deviance change = 0.147004
    Maximum b parameter change =  0.004844  
    Maximum K parameter change = 0.000518
...........................................................
Iteration 27     2015-06-13 13:24:21 
   Deviance = 16649.0641 | Deviance change = 0.124334
    Maximum b parameter change =  0.004358  
    Maximum K parameter change = 0.000474
...........................................................
Iteration 28     2015-06-13 13:24:21 
   Deviance = 16648.9587 | Deviance change = 0.105409
    Maximum b parameter change =  0.003927  
    Maximum K parameter change = 0.000434
...........................................................
Iteration 29     2015-06-13 13:24:21 
   Deviance = 16648.8691 | Deviance change = 0.089574
    Maximum b parameter change =  0.003539  
    Maximum K parameter change = 0.000398
...........................................................
Iteration 30     2015-06-13 13:24:21 
   Deviance = 16648.793 | Deviance change = 0.076186
    Maximum b parameter change =  0.003196  
    Maximum K parameter change = 0.000364
------------------------------------------------------------
Start: 2015-06-13 13:24:20 
End: 2015-06-13 13:24:21 
Time difference of 0.3413341 secs
Difference: 0.3413341 
------------------------------------------------------------
> summary(mod2b)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:21 
Time difference of 0.3413341 secs
Computation time: 0.3413341 

Call:
rasch.mml2(dat = dat, mmliter = 30, est.K = 1:15, irtmodel = "ramsay.qm")

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Quotient Model (Ramsay, 1989) 
------------------------------------------------------------
Number of iterations = 30 
Deviance =  16648.79  | Log Likelihood =  -8324.4 
Number of persons =  1000 
Number of estimated parameters =  31 
AIC  =  16710.79  | penalty = 62    | AIC = -2*LL + 2*p  
AICc =  16712.84  | penalty = 64.05    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  16862.93  | penalty = 214.14    | BIC = -2*LL + log(n)*p  
CAIC =  16893.93  | penalty = 245.14   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 1 
 Skewness= 0      Note: log theta distribution is parametrized!
Item Difficulty Distribution ( 15  Items )
 Mean= -0.185  SD= 0.313 
Distribution of Items Administered ( 15  Items )
 Mean= 15  SD= 0 

EAP Reliability: 0.75
------------------------------------------------------------
Item Parameter 
    item    N     p      K est.K     b  log_b est.b guess.K emp.discrim
1  I0001 1000 0.799  1.726     1 0.486 -0.722     1   0.367       0.532
2  I0002 1000 0.777  1.081     2 0.817 -0.202     2   0.480       0.423
3  I0003 1000 0.748  1.882     3 0.599 -0.512     3   0.347       0.523
4  I0004 1000 0.715  2.307     4 0.604 -0.504     4   0.302       0.543
5  I0005 1000 0.673  2.629     5 0.662 -0.413     5   0.276       0.535
6  I0006 1000 0.613  3.986     6 0.632 -0.459     6   0.201       0.576
7  I0007 1000 0.571  3.858     7 0.757 -0.279     7   0.206       0.545
8  I0008 1000 0.522  4.825     8 0.777 -0.252     8   0.172       0.553
9  I0009 1000 0.484  4.998     9 0.872 -0.137     9   0.167       0.529
10 I0010 1000 0.422  5.268    10 1.064  0.062    10   0.160       0.474
11 I0011 1000 0.387  7.935    11 0.908 -0.096    11   0.112       0.538
12 I0012 1000 0.331 10.833    12 0.917 -0.087    12   0.085       0.505
13 I0013 1000 0.311  8.565    13 1.160  0.148    13   0.105       0.441
14 I0014 1000 0.249  9.827    14 1.395  0.333    14   0.092       0.386
15 I0015 1000 0.225 11.391    15 1.407  0.341    15   0.081       0.383
> plot(mod2b)
> 
> ## Not run: 
> ##D # nonparametric estimation of monotone item response curves
> ##D mod3a <- rasch.mml2( dat , irtmodel ="npirt" , mmliter =100 ,
> ##D             theta.k = seq( -3 , 3 , len=10) ) # evaluations at 10 theta grid points
> ##D # nonparametric ICC of first 4 items
> ##D round( t(mod3a$pjk)[1:4,] , 3 ) 
> ##D summary(mod3a)
> ##D plot(mod3a)
> ##D 
> ##D # nonparametric IRT estimation without monotonicity assumption
> ##D mod3b <- rasch.mml2( dat , irtmodel ="npirt" , mmliter =10 ,
> ##D             theta.k = seq( -3 , 3 , len=10) , npirt.monotone=FALSE) 
> ##D plot(mod3b)
> ##D             
> ##D # B-Spline estimation of ICCs
> ##D library(splines)
> ##D mod3c <- rasch.mml2( dat , irtmodel ="npirt" , 
> ##D              npformula = "y~bs(theta,df=3)" , theta.k = seq(-3,3,len=15) )
> ##D summary(mod3c)
> ##D round( t(mod3c$pjk)[1:6,] , 3 )
> ##D plot(mod3c)
> ##D 
> ##D # estimation of quadratic item response functions: ~ theta + I( theta^2) 
> ##D mod3d <- rasch.mml2( dat , irtmodel ="npirt" , 
> ##D              npformula = "y~theta + I(theta^2)" )
> ##D summary(mod3d)
> ##D plot(mod3d)
> ##D 
> ##D # estimation of a stepwise ICC function
> ##D # ICCs are constant on the theta domains: [-Inf,-1], [-1,1], [1,Inf]
> ##D mod3e <- rasch.mml2( dat , irtmodel ="npirt" , 
> ##D              npformula = "y~I(theta>-1 )+I(theta>1)" )
> ##D summary(mod3e)
> ##D plot(mod3e , xlim=c(-2.5,2.5) )
> ##D 
> ##D # 2PL model
> ##D mod4 <- rasch.mml2( dat ,  est.a=1:15)
> ##D summary(mod4)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 4
> ##D #  two groups, estimation of generalized logistic model
> ##D #############################################################################
> ##D 
> ##D # simulate generalized logistic Rasch model in two groups
> ##D set.seed(8765)
> ##D N1 <- 1000     # N1=1000 persons in group 1
> ##D N2 <- 500      # N2= 500 persons in group 2
> ##D dat1 <- sim.raschtype( theta = rnorm( N1 , sd = 1.5 )  , b = b , 
> ##D 			alpha1 = -0.3 , alpha2=0)
> ##D dat2 <- sim.raschtype( theta = rnorm( N2 , mean=-.5 , sd =.75)  , 
> ##D 			b = b , alpha1 = -0.3 , alpha2=0)
> ##D dat1 <- rbind( dat1 , dat2 )
> ##D group <- c( rep(1,N1) , rep(2,N2))
> ##D 
> ##D mod1 <-  rasch.mml2( dat1 , parm.conv=.0001 , group=group , est.alpha = TRUE )
> ##D summary(mod1)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 5: Multidimensional model
> ##D #############################################################################
> ##D 
> ##D #***
> ##D # (1) simulate data
> ##D set.seed(785)
> ##D library(mvtnorm)
> ##D N <- 500
> ##D theta <- mvtnorm::rmvnorm( N,mean=c(0,0), sigma=matrix( c(1.45,.5,.5,1.7) , 2 , 2 ))
> ##D I <- 10
> ##D # 10 items load on the first dimension
> ##D p1 <- plogis( outer( theta[,1] , seq( -2 , 2 , len=I ) , "-" ) )
> ##D resp1 <- 1 * ( p1 > matrix( runif( N*I ) , nrow=N , ncol=I ) )
> ##D # 10 items load on the second dimension
> ##D p1 <- plogis( outer( theta[,2] , seq( -2 , 2 , len=I ) , "-" ) )
> ##D resp2 <- 1 * ( p1 > matrix( runif( N*I ) , nrow=N , ncol=I ) )
> ##D #Combine the two sets of items into one response matrix
> ##D resp <- cbind(resp1,resp2)
> ##D colnames(resp) <- paste("I" , 1:(2*I), sep="")
> ##D dat <- resp
> ##D 
> ##D # define Q-matrix
> ##D Qmatrix <- matrix( 0 , 2*I , 2 )
> ##D Qmatrix[1:I,1] <- 1
> ##D Qmatrix[1:I+I,2] <- 1
> ##D 
> ##D #***
> ##D # (2) estimation of models
> ##D # 2-dimensional Rasch model
> ##D mod1 <- rasch.mml2( dat , Qmatrix=Qmatrix )
> ##D summary(mod1)
> ##D 
> ##D # 2-dimensional 2PL model
> ##D mod2 <- rasch.mml2( dat , Qmatrix=Qmatrix , est.a = 1:(2*I) )               
> ##D summary(mod2)
> ##D 
> ##D # estimation with some fixed variances and covariances
> ##D # set variance of 1st dimension to 1 and 
> ##D #  covariance to zero
> ##D variance.fixed <- matrix( cbind(c(1,1) , c(1,2) , c(1,0)) , 
> ##D              byrow=FALSE , ncol= 3 )
> ##D mod3 <- rasch.mml2( dat , Qmatrix=Qmatrix , variance.fixed = variance.fixed )
> ##D summary(mod3)
> ##D 
> ##D # constraints on item difficulties
> ##D #  useful for example in longitudinal linking
> ##D est.b <- c( 1:I , 1:I )     
> ##D     # equal indices correspond to equally estimated item parameters
> ##D mu.fixed <- cbind( 1 , 0 )
> ##D mod4 <- rasch.mml2( dat, Qmatrix=Qmatrix, est.b = est.b , mu.fixed = mu.fixed )
> ##D summary(mod4) 
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 6: Two booklets with same items but with item context effects. 
> ##D # Therefore, item slopes and item difficulties are assumed to be shifted in the 
> ##D # second design group.
> ##D #############################################################################
> ##D 
> ##D #***
> ##D # simulate data
> ##D set.seed(987)
> ##D I <- 10     # number of items
> ##D # define person design groups 1 and 2
> ##D n1 <- 700
> ##D n2 <- 1500
> ##D # item difficulties group 1
> ##D b1 <- seq(-1.5,1.5,length=I)
> ##D # item slopes group 1
> ##D a1 <- rep(1, I)
> ##D # simulate data group 1
> ##D dat1 <- sim.raschtype( rnorm(n1) , b=b1 , fixed.a=a1 )
> ##D colnames(dat1) <- paste0("I" , 1:I , "des1" )
> ##D # group 2
> ##D b2 <- b1 - .15
> ##D a2 <- 1.1*a1
> ##D # Item parameters are slightly transformed in the second group
> ##D # compared to the first group. This indicates possible item context effects.
> ##D 
> ##D # simulate data group 2
> ##D dat2 <- sim.raschtype( rnorm(n2) , b=b2 , fixed.a=a2 )
> ##D colnames(dat2) <- paste0("I" , 1:I , "des2" )
> ##D # define joint dataset
> ##D dat <- matrix( NA , nrow=n1+n2 , ncol=2*I)
> ##D colnames(dat) <- c( colnames(dat1) , colnames(dat2) )
> ##D dat[ 1:n1 , 1:I ] <- dat1
> ##D dat[ n1 + 1:n2 , I + 1:I ] <- dat2
> ##D # define group identifier
> ##D group <- c( rep(1,n1) , rep(2,n2) )
> ##D 
> ##D #***
> ##D # Model 1: Rasch model two groups
> ##D itemindex <- rep( 1:I , 2 )
> ##D mod1 <- rasch.mml2( dat , group=group , est.b=itemindex )
> ##D summary(mod1)
> ##D 
> ##D #***
> ##D # Model 2: two item slope groups and designmatrix for intercepts
> ##D designmatrix <- matrix( 0 , 2*I , I+1)
> ##D designmatrix[ ( 1:I )+ I,1:I] <- designmatrix[1:I ,1:I] <- diag(I)
> ##D designmatrix[ ( 1:I )+ I,I+1] <- 1
> ##D mod2 <- rasch.mml2( dat , est.a=rep(1:2,each=I) , designmatrix=designmatrix )
> ##D summary(mod2)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 7: PIRLS dataset with missing responses
> ##D #############################################################################
> ##D 
> ##D data(data.pirlsmissing)
> ##D items <- grep( "R31" , colnames(data.pirlsmissing) , value=TRUE )
> ##D dat <- data.pirlsmissing
> ##D 
> ##D #****
> ##D # Model 1: recode missing responses as missing (missing are ignorable)
> ##D 
> ##D # data recoding
> ##D dat1 <- dat
> ##D dat1[ dat1 == 9 ] <- NA
> ##D # estimate Rasch model
> ##D mod1 <- rasch.mml2( dat1[,items] , weights= dat$studwgt , group=dat$country )
> ##D summary(mod1)
> ##D ##   Mean= 0 0.341 -0.134 0.219 
> ##D ##   SD= 1.142 1.166 1.197 0.959 
> ##D 
> ##D #****
> ##D # Model 2: recode missing responses as wrong
> ##D 
> ##D # data recoding
> ##D dat2 <- dat
> ##D dat2[ dat2 == 9 ] <- 0
> ##D # estimate Rasch model
> ##D mod2 <- rasch.mml2( dat2[,items] , weights= dat$studwgt , group=dat$country )
> ##D summary(mod2)
> ##D   ##   Mean= 0 0.413 -0.172 0.446 
> ##D   ##   SD= 1.199 1.263 1.32 0.996 
> ##D 
> ##D #****
> ##D # Model 3: recode missing responses as rho * P_i( theta ) and 
> ##D #          apply pseudo-log-likelihood estimation
> ##D # Missing item responses are predicted by the model implied probability
> ##D # P_i( theta ) where theta is the ability estimate when ignoring missings (Model 1)
> ##D # and rho is an adjustment parameter. rho=0 is equivalent to Model 2 (treating
> ##D # missing as wrong) and rho=1 is equivalent to Model 1 (treating missing as ignorable).
> ##D 
> ##D # data recoding
> ##D dat3 <- dat
> ##D # simulate theta estimate from posterior distribution
> ##D theta <- rnorm( nrow(dat3) , mean = mod1$person$EAP , sd=mod1$person$SE.EAP )
> ##D rho <- .3   # define a rho parameter value of .3
> ##D for (ii in items){
> ##D     ind <- which( dat[,ii] == 9 )
> ##D     dat3[ind,ii] <- rho*plogis( theta[ind] - mod1$item$b[ which( items == ii ) ] )
> ##D                 }
> ##D 
> ##D # estimate Rasch model
> ##D mod3 <- rasch.mml2( dat3[,items] , weights= dat$studwgt , group=dat$country )
> ##D summary(mod3)
> ##D   ##   Mean= 0 0.392 -0.153 0.38 
> ##D   ##   SD= 1.154 1.209 1.246 0.973 
> ##D 
> ##D #****
> ##D # Model 4: simulate missing responses as rho * P_i( theta )
> ##D # The definition is the same as in Model 3. But it is now assumed
> ##D # that the missing responses are 'latent responses'.
> ##D set.seed(789)
> ##D 
> ##D # data recoding
> ##D dat4 <- dat
> ##D # simulate theta estimate from posterior distribution
> ##D theta <- rnorm( nrow(dat4) , mean = mod1$person$EAP , sd=mod1$person$SE.EAP )
> ##D rho <- .3   # define a rho parameter value of .3
> ##D for (ii in items){
> ##D     ind <- which( dat[,ii] == 9 )
> ##D     p3 <- rho*plogis( theta[ind] - mod1$item$b[ which( items == ii ) ] )
> ##D     dat4[ ind , ii ] <- 1*(runif( length(ind) , 0 , 1 ) < p3)    
> ##D                 }
> ##D 
> ##D # estimate Rasch model
> ##D mod4 <- rasch.mml2( dat4[,items] , weights= dat$studwgt , group=dat$country )
> ##D summary(mod4)
> ##D   ##   Mean= 0 0.396 -0.156 0.382 
> ##D   ##   SD= 1.16 1.216 1.253 0.979 
> ##D 
> ##D #****
> ##D # Model 5: recode missing responses for multiple choice items with four alternatives
> ##D #          to 1/4 and apply pseudo-log-likelihood estimation.
> ##D #          Missings for constructed response items are treated as incorrect.
> ##D 
> ##D # data recoding
> ##D dat5 <- dat
> ##D items_mc <- items[ substring( items , 7,7) == "M" ]
> ##D items_cr <- items[ substring( items , 7,7) == "C" ]
> ##D for (ii in items_mc){
> ##D     ind <- which( dat[,ii] == 9 )
> ##D     dat5[ind,ii] <- 1/4
> ##D                 }
> ##D for (ii in items_cr){
> ##D     ind <- which( dat[,ii] == 9 )
> ##D     dat5[ind,ii] <- 0
> ##D                 }
> ##D 
> ##D # estimate Rasch model
> ##D mod5 <- rasch.mml2( dat5[,items] , weights= dat$studwgt , group=dat$country )
> ##D summary(mod5)
> ##D   ##   Mean= 0 0.411 -0.165 0.435 
> ##D   ##   SD= 1.19 1.245 1.293 0.995 
> ##D 
> ##D #*** For the following analyses, we ignore sample weights and the
> ##D #    country grouping.
> ##D data(data.pirlsmissing)
> ##D items <- grep( "R31" , colnames(data.pirlsmissing) , value=TRUE )
> ##D dat <- data.pirlsmissing
> ##D dat1 <- dat
> ##D dat1[ dat1 == 9 ] <- 0
> ##D 
> ##D #*** Model 6: estimate item difficulties assuming incorrect missing data treatment
> ##D mod6 <- rasch.mml2( dat1[,items] , mmliter=50 )
> ##D summary(mod6)
> ##D 
> ##D #*** Model 7: reestimate model with constrained item difficulties
> ##D I <- length(items)
> ##D constraints <- cbind( 1:I , mod6$item$b )
> ##D mod7 <- rasch.mml2( dat1[,items] , constraints=constraints , mmliter=50 )
> ##D summary(mod7)
> ##D 
> ##D #*** Model 8: score all missings responses as missing items
> ##D dat2 <- dat[,items]
> ##D dat2[ dat2 == 9 ] <- NA
> ##D mod8 <- rasch.mml2( dat2 , constraints=constraints , mmliter=50 , mu.fixed=NULL )
> ##D summary(mod8)
> ##D 
> ##D #*** Model 9: estimate missing data model 'missing1' assuming a missingness
> ##D #       parameter delta.miss of zero
> ##D dat2 <-  dat[,items]    # note that missing item responses must be defined by 9
> ##D mod9 <- rasch.mml2( dat2 , constraints=constraints , irtmodel="missing1" , 
> ##D             theta.k=seq(-5,5,len=10) , delta.miss= 0 , mitermax= 4 , mmliter=200 , 
> ##D             mu.fixed=NULL )        
> ##D summary(mod9)
> ##D 
> ##D #*** Model 10: estimate missing data model with a large negative missing delta parameter
> ##D #       => This model is equivalent to treating missing responses as wrong
> ##D mod10 <- rasch.mml2( dat2 , constraints=constraints , irtmodel="missing1" , 
> ##D              theta.k=seq(-5 , 5 , len=10) , delta.miss= -10 , mitermax= 4 , mmliter=200 , 
> ##D              mu.fixed=NULL )        
> ##D summary(mod10)
> ##D 
> ##D #*** Model 11: choose a missingness delta parameter of -1
> ##D mod11 <- rasch.mml2( dat2 , constraints=constraints , irtmodel="missing1" , 
> ##D              theta.k=seq(-5 , 5 , len=10) , delta.miss= -1 , mitermax= 4 , 
> ##D              mmliter=200 , mu.fixed=NULL )        
> ##D summary(mod11)
> ##D 
> ##D #*** Model 12: estimate delta parameter
> ##D mod12 <- rasch.mml2( dat2 , constraints=constraints , irtmodel="missing1" , 
> ##D              theta.k=seq(-5 , 5 , len=10) , delta.miss= 0 , mitermax= 4 , 
> ##D              mmliter=200 , est.delta=TRUE , mu.fixed=NULL )        
> ##D summary(mod12)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.mml", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.pairwise")
> ### * rasch.pairwise
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.pairwise
> ### Title: Pairwise Estimation Method of the Rasch Model
> ### Aliases: rasch.pairwise summary.rasch.pairwise
> ### Keywords: Pairwise conditional maximum likelihood (PCML) Minchi method
> ###   summary
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Reading data set | pairwise estimation Rasch model
> #############################################################################
> 
> data(data.read)
> mod <- rasch.pairwise( data.read )
PL Iter. 1 : max. parm. change =  0.217208 
PL Iter. 2 : max. parm. change =  0.11382 
PL Iter. 3 : max. parm. change =  0.059343 
PL Iter. 4 : max. parm. change =  0.030867 
PL Iter. 5 : max. parm. change =  0.016041 
PL Iter. 6 : max. parm. change =  0.008334 
PL Iter. 7 : max. parm. change =  0.004331 
PL Iter. 8 : max. parm. change =  0.002251 
PL Iter. 9 : max. parm. change =  0.00117 
PL Iter. 10 : max. parm. change =  0.000609 
PL Iter. 11 : max. parm. change =  0.000317 
PL Iter. 12 : max. parm. change =  0.000165 
PL Iter. 13 : max. parm. change =  8.6e-05 
PL Iter. 14 : max. parm. change =  4.5e-05 
PL Iter. 15 : max. parm. change =  2.3e-05 
PL Iter. 16 : max. parm. change =  1.2e-05 
PL Iter. 17 : max. parm. change =  6e-06 
PL Iter. 18 : max. parm. change =  3e-06 
> summary(mod)
------------------------------------------- 
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:21 
Time difference of 0.003911972 secs
Computation Time: 0.003911972 

  Function 'rasch.pairwise' 
------------------------------------------- 
Pairwise likelihood estimation 
Rasch Model 
------------------------------------------- 
Item Parameters 
     N     p      b itemcluster
A1 328 0.851 -2.020           0
A2 328 0.738 -1.110           0
A3 328 0.567 -0.168           0
A4 328 0.460  0.344           0
B1 328 0.713 -0.941           0
B2 328 0.506  0.092           0
B3 328 0.909 -2.554           0
B4 328 0.683 -0.772           0
C1 328 0.933 -3.087           0
C2 328 0.713 -0.914           0
C3 328 0.872 -2.074           0
C4 328 0.735 -1.028           0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.pairwise", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.pairwise.itemcluster")
> ### * rasch.pairwise.itemcluster
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.pairwise.itemcluster
> ### Title: Pairwise Estimation of the Rasch Model for Locally Dependent
> ###   Items
> ### Aliases: rasch.pairwise.itemcluster
> ### Keywords: Pairwise conditional maximum likelihood (PCML) Local
> ###   dependence
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Example with locally dependent items
> #      12 Items: Cluster 1 -> Items 1,...,4
> #                Cluster 2 -> Items 6,...,9
> #                Cluster 3 -> Items 10,11,12
> #############################################################################	
> 
> set.seed(7896)
> I <- 12                             # number of items
> n <- 5000                           # number of persons
> b <- seq(-2,2, len=I)               # item difficulties
> bsamp <- b <- sample(b)             # sample item difficulties
> theta <- rnorm( n , sd = 1 )        # person abilities
> # itemcluster
> itemcluster <- rep(0,I)
> itemcluster[ 1:4 ] <- 1
> itemcluster[ 6:9 ] <- 2
> itemcluster[ 10:12 ] <- 3
> # residual correlations
> rho <- c( .55 , .25 , .45 )
> 
> # simulate data
> dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> colnames(dat) <- paste("I" , seq(1,ncol(dat)) , sep="")
> 
> # estimation with pairwise Rasch model
> mod3 <- rasch.pairwise( dat )
PL Iter. 1 : max. parm. change =  0.251608 
PL Iter. 2 : max. parm. change =  0.143112 
PL Iter. 3 : max. parm. change =  0.080644 
PL Iter. 4 : max. parm. change =  0.045188 
PL Iter. 5 : max. parm. change =  0.025243 
PL Iter. 6 : max. parm. change =  0.014153 
PL Iter. 7 : max. parm. change =  0.008087 
PL Iter. 8 : max. parm. change =  0.004603 
PL Iter. 9 : max. parm. change =  0.002612 
PL Iter. 10 : max. parm. change =  0.001478 
PL Iter. 11 : max. parm. change =  0.000835 
PL Iter. 12 : max. parm. change =  0.000471 
PL Iter. 13 : max. parm. change =  0.000265 
PL Iter. 14 : max. parm. change =  0.000149 
PL Iter. 15 : max. parm. change =  8.4e-05 
PL Iter. 16 : max. parm. change =  4.7e-05 
PL Iter. 17 : max. parm. change =  2.6e-05 
PL Iter. 18 : max. parm. change =  1.5e-05 
PL Iter. 19 : max. parm. change =  8e-06 
> summary(mod3)
------------------------------------------- 
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:21 
Time difference of 0.01148891 secs
Computation Time: 0.01148891 

  Function 'rasch.pairwise' 
------------------------------------------- 
Pairwise likelihood estimation 
Rasch Model 
------------------------------------------- 
Item Parameters 
       N     p      b itemcluster
I1  5000 0.394  0.495           0
I2  5000 0.533 -0.281           0
I3  5000 0.686 -1.117           0
I4  5000 0.796 -1.937           0
I5  5000 0.201  1.537           0
I6  5000 0.307  0.889           0
I7  5000 0.851 -2.240           0
I8  5000 0.747 -1.437           0
I9  5000 0.613 -0.664           0
I10 5000 0.251  1.173           0
I11 5000 0.467 -0.107           0
I12 5000 0.160  1.932           0
> 
> # use item cluster in rasch pairwise estimation
> mod <- rasch.pairwise.itemcluster( dat = dat , itemcluster = itemcluster )
PL Iter. 1 : max. parm. change =  0.22143 
PL Iter. 2 : max. parm. change =  0.088479 
PL Iter. 3 : max. parm. change =  0.045132 
PL Iter. 4 : max. parm. change =  0.025318 
PL Iter. 5 : max. parm. change =  0.015615 
PL Iter. 6 : max. parm. change =  0.011684 
PL Iter. 7 : max. parm. change =  0.010075 
PL Iter. 8 : max. parm. change =  0.008499 
PL Iter. 9 : max. parm. change =  0.00708 
PL Iter. 10 : max. parm. change =  0.005857 
PL Iter. 11 : max. parm. change =  0.004828 
PL Iter. 12 : max. parm. change =  0.004087 
PL Iter. 13 : max. parm. change =  0.003622 
PL Iter. 14 : max. parm. change =  0.003216 
PL Iter. 15 : max. parm. change =  0.002861 
PL Iter. 16 : max. parm. change =  0.002548 
PL Iter. 17 : max. parm. change =  0.002272 
PL Iter. 18 : max. parm. change =  0.002029 
PL Iter. 19 : max. parm. change =  0.001813 
PL Iter. 20 : max. parm. change =  0.001622 
PL Iter. 21 : max. parm. change =  0.001452 
PL Iter. 22 : max. parm. change =  0.001301 
PL Iter. 23 : max. parm. change =  0.001167 
PL Iter. 24 : max. parm. change =  0.001047 
PL Iter. 25 : max. parm. change =  0.00094 
PL Iter. 26 : max. parm. change =  0.000844 
PL Iter. 27 : max. parm. change =  0.000759 
PL Iter. 28 : max. parm. change =  0.000682 
PL Iter. 29 : max. parm. change =  0.000613 
PL Iter. 30 : max. parm. change =  0.000552 
PL Iter. 31 : max. parm. change =  0.000497 
PL Iter. 32 : max. parm. change =  0.000447 
PL Iter. 33 : max. parm. change =  0.000403 
PL Iter. 34 : max. parm. change =  0.000363 
PL Iter. 35 : max. parm. change =  0.000327 
PL Iter. 36 : max. parm. change =  0.000294 
PL Iter. 37 : max. parm. change =  0.000265 
PL Iter. 38 : max. parm. change =  0.000239 
PL Iter. 39 : max. parm. change =  0.000215 
PL Iter. 40 : max. parm. change =  0.000194 
PL Iter. 41 : max. parm. change =  0.000175 
PL Iter. 42 : max. parm. change =  0.000158 
PL Iter. 43 : max. parm. change =  0.000142 
PL Iter. 44 : max. parm. change =  0.000128 
PL Iter. 45 : max. parm. change =  0.000116 
PL Iter. 46 : max. parm. change =  0.000104 
PL Iter. 47 : max. parm. change =  9.4e-05 
PL Iter. 48 : max. parm. change =  8.5e-05 
PL Iter. 49 : max. parm. change =  7.7e-05 
PL Iter. 50 : max. parm. change =  6.9e-05 
PL Iter. 51 : max. parm. change =  6.2e-05 
PL Iter. 52 : max. parm. change =  5.6e-05 
PL Iter. 53 : max. parm. change =  5.1e-05 
PL Iter. 54 : max. parm. change =  4.6e-05 
PL Iter. 55 : max. parm. change =  4.1e-05 
PL Iter. 56 : max. parm. change =  3.7e-05 
PL Iter. 57 : max. parm. change =  3.4e-05 
PL Iter. 58 : max. parm. change =  3e-05 
PL Iter. 59 : max. parm. change =  2.7e-05 
PL Iter. 60 : max. parm. change =  2.5e-05 
PL Iter. 61 : max. parm. change =  2.2e-05 
PL Iter. 62 : max. parm. change =  2e-05 
PL Iter. 63 : max. parm. change =  1.8e-05 
PL Iter. 64 : max. parm. change =  1.6e-05 
PL Iter. 65 : max. parm. change =  1.5e-05 
PL Iter. 66 : max. parm. change =  1.3e-05 
PL Iter. 67 : max. parm. change =  1.2e-05 
PL Iter. 68 : max. parm. change =  1.1e-05 
PL Iter. 69 : max. parm. change =  1e-05 
> summary(mod)
------------------------------------------- 
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:21 
Time difference of 0.01438999 secs
Computation Time: 0.01438999 

  Function 'rasch.pairwise.itemcluster' 
------------------------------------------- 
Pairwise likelihood estimation 
Rasch Model 
------------------------------------------- 
Item Parameters 
       N     p      b itemcluster
I1  5000 0.394  0.405           1
I2  5000 0.533 -0.291           1
I3  5000 0.686 -1.030           1
I4  5000 0.796 -1.745           1
I5  5000 0.201  1.510           0
I6  5000 0.307  0.852           2
I7  5000 0.851 -2.158           2
I8  5000 0.747 -1.402           2
I9  5000 0.613 -0.662           2
I10 5000 0.251  1.169           3
I11 5000 0.467  0.039           3
I12 5000 0.160  1.823           3
> 
> ## Not run: 
> ##D # Rasch MML estimation
> ##D mod4 <- rasch.mml2( dat )
> ##D summary(mod4)
> ##D 
> ##D # Rasch Copula estimation
> ##D mod5 <- rasch.copula2( dat , itemcluster = itemcluster )
> ##D summary(mod5)
> ##D 
> ##D # compare different item parameter estimates
> ##D M1 <- cbind( "true.b"=bsamp ,  "b.rasch" = mod4$item$b ,
> ##D         "b.rasch.copula" =  mod5$item$thresh , 
> ##D         "b.rasch.pairwise" = mod3$b  ,
> ##D         "b.rasch.pairwise.cluster" = mod$b 
> ##D       )
> ##D # center item difficulties
> ##D M1 <- scale( M1  , scale=FALSE )
> ##D round( M1 , 3 )
> ##D round( apply( M1 , 2 , sd ) , 3 )
> ##D 
> ##D #  Below the output of the example is presented.
> ##D #  It is surprising that the rasch.pairwise.itemcluster is pretty close
> ##D #  to the estimate in the Rasch copula model.
> ##D 
> ##D   ##   > M1 <- scale( M1  , scale=F )
> ##D   ##   > round( M1 , 3 )
> ##D   ##       true.b b.rasch b.rasch.copula b.rasch.pairwise b.rasch.pairwise.cluster
> ##D   ##   I1   0.545   0.561          0.526            0.628                    0.524
> ##D   ##   I2  -0.182  -0.168         -0.174           -0.121                   -0.156
> ##D   ##   I3  -0.909  -0.957         -0.867           -0.971                   -0.899
> ##D   ##   I4  -1.636  -1.726         -1.625           -1.765                   -1.611
> ##D   ##   I5   1.636   1.751          1.648            1.694                    1.649
> ##D   ##   I6   0.909   0.892          0.836            0.898                    0.827
> ##D   ##   I7  -2.000  -2.134         -2.020           -2.051                   -2.000
> ##D   ##   I8  -1.273  -1.355         -1.252           -1.303                   -1.271
> ##D   ##   I9  -0.545  -0.637         -0.589           -0.581                   -0.598
> ##D   ##   I10  1.273   1.378          1.252            1.308                    1.276
> ##D   ##   I11  0.182   0.241          0.226            0.109                    0.232
> ##D   ##   I12  2.000   2.155          2.039            2.154                    2.026
> ##D   ##   > round( apply( M1 , 2 , sd ) , 3 )
> ##D   ##                     true.b                  b.rasch           b.rasch.copula       
> ##D   ##                      1.311                    1.398                    1.310   
> ##D   ##      b.rasch.pairwise    b.rasch.pairwise.cluster 
> ##D   ##                 1.373                       1.310   
> ## End(Not run)
> 
> # set item parameters of first item to 0 and of second item to -0.7
> b.fixed <- cbind( c(1,2) , c(0,-.7) )
> mod5 <- rasch.pairwise.itemcluster( dat = dat , b.fixed=b.fixed, 
+              itemcluster = itemcluster )
PL Iter. 1 : max. parm. change =  0.352982 
PL Iter. 2 : max. parm. change =  0.13382 
PL Iter. 3 : max. parm. change =  0.083611 
PL Iter. 4 : max. parm. change =  0.055139 
PL Iter. 5 : max. parm. change =  0.039879 
PL Iter. 6 : max. parm. change =  0.032291 
PL Iter. 7 : max. parm. change =  0.027857 
PL Iter. 8 : max. parm. change =  0.023943 
PL Iter. 9 : max. parm. change =  0.020596 
PL Iter. 10 : max. parm. change =  0.017783 
PL Iter. 11 : max. parm. change =  0.01544 
PL Iter. 12 : max. parm. change =  0.013495 
PL Iter. 13 : max. parm. change =  0.01188 
PL Iter. 14 : max. parm. change =  0.010956 
PL Iter. 15 : max. parm. change =  0.010388 
PL Iter. 16 : max. parm. change =  0.009832 
PL Iter. 17 : max. parm. change =  0.009292 
PL Iter. 18 : max. parm. change =  0.008773 
PL Iter. 19 : max. parm. change =  0.008275 
PL Iter. 20 : max. parm. change =  0.007801 
PL Iter. 21 : max. parm. change =  0.007447 
PL Iter. 22 : max. parm. change =  0.007112 
PL Iter. 23 : max. parm. change =  0.006783 
PL Iter. 24 : max. parm. change =  0.006464 
PL Iter. 25 : max. parm. change =  0.006156 
PL Iter. 26 : max. parm. change =  0.005858 
PL Iter. 27 : max. parm. change =  0.005572 
PL Iter. 28 : max. parm. change =  0.005297 
PL Iter. 29 : max. parm. change =  0.005034 
PL Iter. 30 : max. parm. change =  0.004785 
PL Iter. 31 : max. parm. change =  0.004606 
PL Iter. 32 : max. parm. change =  0.00443 
PL Iter. 33 : max. parm. change =  0.004258 
PL Iter. 34 : max. parm. change =  0.004089 
PL Iter. 35 : max. parm. change =  0.003925 
PL Iter. 36 : max. parm. change =  0.003765 
PL Iter. 37 : max. parm. change =  0.00361 
PL Iter. 38 : max. parm. change =  0.003459 
PL Iter. 39 : max. parm. change =  0.003313 
PL Iter. 40 : max. parm. change =  0.003171 
PL Iter. 41 : max. parm. change =  0.003035 
PL Iter. 42 : max. parm. change =  0.002903 
PL Iter. 43 : max. parm. change =  0.002776 
PL Iter. 44 : max. parm. change =  0.002653 
PL Iter. 45 : max. parm. change =  0.002535 
PL Iter. 46 : max. parm. change =  0.002422 
PL Iter. 47 : max. parm. change =  0.002313 
PL Iter. 48 : max. parm. change =  0.002208 
PL Iter. 49 : max. parm. change =  0.002108 
PL Iter. 50 : max. parm. change =  0.002011 
PL Iter. 51 : max. parm. change =  0.001919 
PL Iter. 52 : max. parm. change =  0.00183 
PL Iter. 53 : max. parm. change =  0.001745 
PL Iter. 54 : max. parm. change =  0.001664 
PL Iter. 55 : max. parm. change =  0.001586 
PL Iter. 56 : max. parm. change =  0.001512 
PL Iter. 57 : max. parm. change =  0.001441 
PL Iter. 58 : max. parm. change =  0.001373 
PL Iter. 59 : max. parm. change =  0.001308 
PL Iter. 60 : max. parm. change =  0.001246 
PL Iter. 61 : max. parm. change =  0.001187 
PL Iter. 62 : max. parm. change =  0.00113 
PL Iter. 63 : max. parm. change =  0.001077 
PL Iter. 64 : max. parm. change =  0.001025 
PL Iter. 65 : max. parm. change =  0.000976 
PL Iter. 66 : max. parm. change =  0.000929 
PL Iter. 67 : max. parm. change =  0.000884 
PL Iter. 68 : max. parm. change =  0.000842 
PL Iter. 69 : max. parm. change =  0.000801 
PL Iter. 70 : max. parm. change =  0.000763 
PL Iter. 71 : max. parm. change =  0.000726 
PL Iter. 72 : max. parm. change =  0.000691 
PL Iter. 73 : max. parm. change =  0.000657 
PL Iter. 74 : max. parm. change =  0.000625 
PL Iter. 75 : max. parm. change =  0.000595 
PL Iter. 76 : max. parm. change =  0.000566 
PL Iter. 77 : max. parm. change =  0.000538 
PL Iter. 78 : max. parm. change =  0.000512 
PL Iter. 79 : max. parm. change =  0.000487 
PL Iter. 80 : max. parm. change =  0.000464 
PL Iter. 81 : max. parm. change =  0.000441 
PL Iter. 82 : max. parm. change =  0.000419 
PL Iter. 83 : max. parm. change =  0.000399 
PL Iter. 84 : max. parm. change =  0.000379 
PL Iter. 85 : max. parm. change =  0.000361 
PL Iter. 86 : max. parm. change =  0.000343 
PL Iter. 87 : max. parm. change =  0.000326 
PL Iter. 88 : max. parm. change =  0.00031 
PL Iter. 89 : max. parm. change =  0.000295 
PL Iter. 90 : max. parm. change =  0.000281 
PL Iter. 91 : max. parm. change =  0.000267 
PL Iter. 92 : max. parm. change =  0.000254 
PL Iter. 93 : max. parm. change =  0.000241 
PL Iter. 94 : max. parm. change =  0.00023 
PL Iter. 95 : max. parm. change =  0.000218 
PL Iter. 96 : max. parm. change =  0.000208 
PL Iter. 97 : max. parm. change =  0.000197 
PL Iter. 98 : max. parm. change =  0.000188 
PL Iter. 99 : max. parm. change =  0.000178 
PL Iter. 100 : max. parm. change =  0.00017 
PL Iter. 101 : max. parm. change =  0.000161 
PL Iter. 102 : max. parm. change =  0.000153 
PL Iter. 103 : max. parm. change =  0.000146 
PL Iter. 104 : max. parm. change =  0.000139 
PL Iter. 105 : max. parm. change =  0.000132 
PL Iter. 106 : max. parm. change =  0.000125 
PL Iter. 107 : max. parm. change =  0.000119 
PL Iter. 108 : max. parm. change =  0.000113 
PL Iter. 109 : max. parm. change =  0.000108 
PL Iter. 110 : max. parm. change =  0.000102 
PL Iter. 111 : max. parm. change =  9.7e-05 
PL Iter. 112 : max. parm. change =  9.3e-05 
PL Iter. 113 : max. parm. change =  8.8e-05 
PL Iter. 114 : max. parm. change =  8.4e-05 
PL Iter. 115 : max. parm. change =  8e-05 
PL Iter. 116 : max. parm. change =  7.6e-05 
PL Iter. 117 : max. parm. change =  7.2e-05 
PL Iter. 118 : max. parm. change =  6.8e-05 
PL Iter. 119 : max. parm. change =  6.5e-05 
PL Iter. 120 : max. parm. change =  6.2e-05 
PL Iter. 121 : max. parm. change =  5.9e-05 
PL Iter. 122 : max. parm. change =  5.6e-05 
PL Iter. 123 : max. parm. change =  5.3e-05 
PL Iter. 124 : max. parm. change =  5.1e-05 
PL Iter. 125 : max. parm. change =  4.8e-05 
PL Iter. 126 : max. parm. change =  4.6e-05 
PL Iter. 127 : max. parm. change =  4.3e-05 
PL Iter. 128 : max. parm. change =  4.1e-05 
PL Iter. 129 : max. parm. change =  3.9e-05 
PL Iter. 130 : max. parm. change =  3.7e-05 
PL Iter. 131 : max. parm. change =  3.5e-05 
PL Iter. 132 : max. parm. change =  3.4e-05 
PL Iter. 133 : max. parm. change =  3.2e-05 
PL Iter. 134 : max. parm. change =  3e-05 
PL Iter. 135 : max. parm. change =  2.9e-05 
PL Iter. 136 : max. parm. change =  2.8e-05 
PL Iter. 137 : max. parm. change =  2.6e-05 
PL Iter. 138 : max. parm. change =  2.5e-05 
PL Iter. 139 : max. parm. change =  2.4e-05 
PL Iter. 140 : max. parm. change =  2.3e-05 
PL Iter. 141 : max. parm. change =  2.1e-05 
PL Iter. 142 : max. parm. change =  2e-05 
PL Iter. 143 : max. parm. change =  1.9e-05 
PL Iter. 144 : max. parm. change =  1.8e-05 
PL Iter. 145 : max. parm. change =  1.7e-05 
PL Iter. 146 : max. parm. change =  1.7e-05 
PL Iter. 147 : max. parm. change =  1.6e-05 
PL Iter. 148 : max. parm. change =  1.5e-05 
PL Iter. 149 : max. parm. change =  1.4e-05 
PL Iter. 150 : max. parm. change =  1.4e-05 
PL Iter. 151 : max. parm. change =  1.3e-05 
PL Iter. 152 : max. parm. change =  1.2e-05 
PL Iter. 153 : max. parm. change =  1.2e-05 
PL Iter. 154 : max. parm. change =  1.1e-05 
PL Iter. 155 : max. parm. change =  1.1e-05 
PL Iter. 156 : max. parm. change =  1e-05 
PL Iter. 157 : max. parm. change =  1e-05 
> # difference between estimations 'mod' and 'mod5'
> dfr <- cbind( mod5$item$b , mod$item$b )
> plot( mod5$item$b , mod$item$b , pch=16)
> apply( dfr , 1 , diff )
 [1] 0.4047414 0.4092052 0.4068605 0.4068781 0.4067486 0.4067820 0.4069888
 [8] 0.4069634 0.4069169 0.4068047 0.4068932 0.4065681
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.pairwise.itemcluster", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.pml")
> ### * rasch.pml
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.pml2
> ### Title: Pairwise Marginal Likelihood Estimation for the Probit Rasch
> ###   Model
> ### Aliases: rasch.pml2 rasch.pml3 summary.rasch.pml
> ### Keywords: Pairwise marginal maximum likelihood (PMML) Local dependence
> ###   summary
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Reading data set
> #############################################################################
> 
> data(data.read)
> dat <- data.read
> 
> #******
> # Model 1: Rasch model with PML estimation
> mod1 <- rasch.pml3( dat )
---------------------------------------------------------------------------------------------------------- 
Pairwise Marginal Likelihood Estimation 
Raschtype Model with probit link 
---------------------------------------------------------------------------------------------------------- 
---------------------------------------------------------------------- 
PML EM Iter. 1        |**********|  2015-06-13 13:24:21  
 Estimation of b:     |----------|     max. parm. change 0.4527 
 Estimation of sigma: |----------|     max. parm. change 0.2 
Pseudolikelihood =  46884.93 | max. parm. change =  0.452698  
---------------------------------------------------------------------- 
PML EM Iter. 2        |**********|  2015-06-13 13:24:21  0.0244 secs
 Estimation of b:     |----------|     max. parm. change 0.07556 
 Estimation of sigma: |----------|     max. parm. change 0.10091 
Pseudolikelihood =  45800.98 | max. parm. change =  0.100915  
---------------------------------------------------------------------- 
PML EM Iter. 3        |**********|  2015-06-13 13:24:21  0.0237 secs
 Estimation of b:     |----------|     max. parm. change 0.08076 
 Estimation of sigma: |----------|     max. parm. change 0.03615 
Pseudolikelihood =  45730.23 | max. parm. change =  0.080764  
---------------------------------------------------------------------- 
PML EM Iter. 4        |**********|  2015-06-13 13:24:21  0.0244 secs
 Estimation of b:     |----------|     max. parm. change 0.03003 
 Estimation of sigma: |----------|     max. parm. change 0.01717 
Pseudolikelihood =  45703.74 | max. parm. change =  0.03003  
---------------------------------------------------------------------- 
PML EM Iter. 5        |**********|  2015-06-13 13:24:21  0.0234 secs
 Estimation of b:     |----------|     max. parm. change 0.01479 
 Estimation of sigma: |----------|     max. parm. change 0.00832 
Pseudolikelihood =  45698.1 | max. parm. change =  0.014793  
---------------------------------------------------------------------- 
PML EM Iter. 6        |**********|  2015-06-13 13:24:21  0.0239 secs
 Estimation of b:     |----------|     max. parm. change 0.0071 
 Estimation of sigma: |----------|     max. parm. change 0.00398 
Pseudolikelihood =  45696.77 | max. parm. change =  0.0071  
---------------------------------------------------------------------- 
PML EM Iter. 7        |**********|  2015-06-13 13:24:21  0.0242 secs
 Estimation of b:     |----------|     max. parm. change 0.00338 
 Estimation of sigma: |----------|     max. parm. change 0.00189 
Pseudolikelihood =  45696.47 | max. parm. change =  0.003382  
---------------------------------------------------------------------- 
PML EM Iter. 8        |**********|  2015-06-13 13:24:21  0.0235 secs
 Estimation of b:     |----------|     max. parm. change 0.0016 
 Estimation of sigma: |----------|     max. parm. change 0.00089 
Pseudolikelihood =  45696.4 | max. parm. change =  0.001603  
---------------------------------------------------------------------- 
PML EM Iter. 9        |**********|  2015-06-13 13:24:21  0.0243 secs
 Estimation of b:     |----------|     max. parm. change 0.00076 
 Estimation of sigma: |----------|     max. parm. change 0.00042 
Pseudolikelihood =  45696.38 | max. parm. change =  0.000758  
---------------------------------------------------------------------- 
PML EM Iter. 10       |**********|  2015-06-13 13:24:21  0.0243 secs
 Estimation of b:     |----------|     max. parm. change 0.00036 
 Estimation of sigma: |----------|     max. parm. change 2e-04 
Pseudolikelihood =  45696.38 | max. parm. change =  0.000358  
---------------------------------------------------------------------- 
PML EM Iter. 11       |**********|  2015-06-13 13:24:21  0.0326 secs
 Estimation of b:     |----------|     max. parm. change 0.00017 
 Estimation of sigma: |----------|     max. parm. change 9e-05 
Pseudolikelihood =  45696.38 | max. parm. change =  0.000169  
---------------------------------------------------------------------- 
PML EM Iter. 12       |**********|  2015-06-13 13:24:21  0.0237 secs
 Estimation of b:     |----------|     max. parm. change 8e-05 
 Estimation of sigma: |----------|     max. parm. change 4e-05 
Pseudolikelihood =  45696.38 | max. parm. change =  8e-05  
---------------------------------------------------------------------------------------------------------- 
Item Parameter Summary
 Estimated 12 Item Parameters

   item   N     p      b est.b a est.a sigma est.sigma b.logit a.logit
A1   A1 328 0.851 -1.228     1 1     0  0.63         1  -2.089   1.701
A2   A2 328 0.738 -0.754     2 1     0  0.63         1  -1.282   1.701
A3   A3 328 0.567 -0.200     3 1     0  0.63         1  -0.340   1.701
A4   A4 328 0.460  0.117     4 1     0  0.63         1   0.199   1.701
B1   B1 328 0.713 -0.664     5 1     0  0.63         1  -1.130   1.701
B2   B2 328 0.506 -0.019     6 1     0  0.63         1  -0.032   1.701
B3   B3 328 0.909 -1.574     7 1     0  0.63         1  -2.677   1.701
B4   B4 328 0.683 -0.563     8 1     0  0.63         1  -0.957   1.701
C1   C1 328 0.933 -1.776     9 1     0  0.63         1  -3.021   1.701
C2   C2 328 0.713 -0.666    10 1     0  0.63         1  -1.134   1.701
C3   C3 328 0.872 -1.343    11 1     0  0.63         1  -2.284   1.701
C4   C4 328 0.735 -0.740    12 1     0  0.63         1  -1.259   1.701
   sigma.logit
A1       1.072
A2       1.072
A3       1.072
A4       1.072
B1       1.072
B2       1.072
B3       1.072
B4       1.072
C1       1.072
C2       1.072
C3       1.072
C4       1.072
---------------------------------------------------------------------------------------------------------- 
Trait SD (Probit Link): 0.63 
Trait SD (Logit Link) : 1.072 
---------------------------------------------------------------------------------------------------------- 
---------------------------------------------------------------------------------------------------------- 
Start: 2015-06-13 13:24:21 
End: 2015-06-13 13:24:21 
Time difference of 0.3156462 secs
Difference: 0.3156462 
---------------------------------------------------------------------------------------------------------- 
> summary(mod1)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:21 
Time difference of 0.3156462 secs
Computation Time: 0.3156462 

  Function rasch.pml3  
-----------------------------------------------------------------
Pairwise Marginal Likelihood Estimation 
Link function: probit 
-----------------------------------------------------------------
Pseudolikelihood objective function =  45696.38 
Number of persons =  328 
Number of estimated parameters =  13 
Number of used item pairs in PML estimation =  66 
PLIC =  45771.68  ; penalty = 75.31  | PLIC = -2*PL + log(n)*p 
      (Pseudolikelihood information criterion)
-----------------------------------------------------------------
Item Parameter Summary
 Estimated 12 Item Parameters

   item   N     p      b est.b a est.a sigma est.sigma b.logit a.logit
A1   A1 328 0.851 -1.228     1 1     0  0.63         1  -2.089   1.701
A2   A2 328 0.738 -0.754     2 1     0  0.63         1  -1.282   1.701
A3   A3 328 0.567 -0.200     3 1     0  0.63         1  -0.340   1.701
A4   A4 328 0.460  0.117     4 1     0  0.63         1   0.199   1.701
B1   B1 328 0.713 -0.664     5 1     0  0.63         1  -1.130   1.701
B2   B2 328 0.506 -0.019     6 1     0  0.63         1  -0.032   1.701
B3   B3 328 0.909 -1.574     7 1     0  0.63         1  -2.677   1.701
B4   B4 328 0.683 -0.563     8 1     0  0.63         1  -0.957   1.701
C1   C1 328 0.933 -1.776     9 1     0  0.63         1  -3.021   1.701
C2   C2 328 0.713 -0.666    10 1     0  0.63         1  -1.134   1.701
C3   C3 328 0.872 -1.343    11 1     0  0.63         1  -2.284   1.701
C4   C4 328 0.735 -0.740    12 1     0  0.63         1  -1.259   1.701
   sigma.logit
A1       1.072
A2       1.072
A3       1.072
A4       1.072
B1       1.072
B2       1.072
B3       1.072
B4       1.072
C1       1.072
C2       1.072
C3       1.072
C4       1.072
-----------------------------------------------------------------
Trait SD (Probit Link): 0.63 
Trait SD (Logit Link) : 1.072 

Green-Yang Reliability 
omega = 0.693 
-----------------------------------------------------------------
> 
> #******
> # Model 2: Excluding item pairs with local dependence 
> #          from bivariate composite likelihood
> itemcluster <- rep( 1:3 , each=4)
> mod2 <- rasch.pml3( dat , itemcluster = itemcluster )
---------------------------------------------------------------------------------------------------------- 
Pairwise Marginal Likelihood Estimation 
Raschtype Model with probit link 
---------------------------------------------------------------------------------------------------------- 
---------------------------------------------------------------------- 
PML EM Iter. 1        |**********|  2015-06-13 13:24:21  
 Estimation of b:     |----------|     max. parm. change 0.44417 
 Estimation of sigma: |----------|     max. parm. change 0.2 
Pseudolikelihood =  34317.79 | max. parm. change =  0.444169  
---------------------------------------------------------------------- 
PML EM Iter. 2        |**********|  2015-06-13 13:24:21  0.0241 secs
 Estimation of b:     |----------|     max. parm. change 0.0895 
 Estimation of sigma: |----------|     max. parm. change 0.14834 
Pseudolikelihood =  33497.45 | max. parm. change =  0.148345  
---------------------------------------------------------------------- 
PML EM Iter. 3        |**********|  2015-06-13 13:24:21  0.0232 secs
 Estimation of b:     |----------|     max. parm. change 0.11287 
 Estimation of sigma: |----------|     max. parm. change 0.05246 
Pseudolikelihood =  33402.89 | max. parm. change =  0.112874  
---------------------------------------------------------------------- 
PML EM Iter. 4        |**********|  2015-06-13 13:24:21  0.0234 secs
 Estimation of b:     |----------|     max. parm. change 0.03892 
 Estimation of sigma: |----------|     max. parm. change 0.02467 
Pseudolikelihood =  33361.12 | max. parm. change =  0.038923  
---------------------------------------------------------------------- 
PML EM Iter. 5        |**********|  2015-06-13 13:24:21  0.0239 secs
 Estimation of b:     |----------|     max. parm. change 0.01894 
 Estimation of sigma: |----------|     max. parm. change 0.01156 
Pseudolikelihood =  33353.2 | max. parm. change =  0.018942  
---------------------------------------------------------------------- 
PML EM Iter. 6        |**********|  2015-06-13 13:24:21  0.0245 secs
 Estimation of b:     |----------|     max. parm. change 0.0087 
 Estimation of sigma: |----------|     max. parm. change 0.00527 
Pseudolikelihood =  33351.49 | max. parm. change =  0.008695  
---------------------------------------------------------------------- 
PML EM Iter. 7        |**********|  2015-06-13 13:24:21  0.0239 secs
 Estimation of b:     |----------|     max. parm. change 0.00394 
 Estimation of sigma: |----------|     max. parm. change 0.00237 
Pseudolikelihood =  33351.14 | max. parm. change =  0.003936  
---------------------------------------------------------------------- 
PML EM Iter. 8        |**********|  2015-06-13 13:24:21  0.0297 secs
 Estimation of b:     |----------|     max. parm. change 0.00176 
 Estimation of sigma: |----------|     max. parm. change 0.00106 
Pseudolikelihood =  33351.07 | max. parm. change =  0.001765  
---------------------------------------------------------------------- 
PML EM Iter. 9        |**********|  2015-06-13 13:24:22  0.0234 secs
 Estimation of b:     |----------|     max. parm. change 0.00079 
 Estimation of sigma: |----------|     max. parm. change 0.00047 
Pseudolikelihood =  33351.05 | max. parm. change =  0.000788  
---------------------------------------------------------------------- 
PML EM Iter. 10       |**********|  2015-06-13 13:24:22  0.0243 secs
 Estimation of b:     |----------|     max. parm. change 0.00035 
 Estimation of sigma: |----------|     max. parm. change 0.00021 
Pseudolikelihood =  33351.05 | max. parm. change =  0.000351  
---------------------------------------------------------------------- 
PML EM Iter. 11       |**********|  2015-06-13 13:24:22  0.0235 secs
 Estimation of b:     |----------|     max. parm. change 0.00016 
 Estimation of sigma: |----------|     max. parm. change 9e-05 
Pseudolikelihood =  33351.05 | max. parm. change =  0.000156  
---------------------------------------------------------------------- 
PML EM Iter. 12       |**********|  2015-06-13 13:24:22  0.0239 secs
 Estimation of b:     |----------|     max. parm. change 7e-05 
 Estimation of sigma: |----------|     max. parm. change 4e-05 
Pseudolikelihood =  33351.05 | max. parm. change =  6.9e-05  
---------------------------------------------------------------------------------------------------------- 
Item Parameter Summary
 Estimated 12 Item Parameters

   item   N     p      b est.b a est.a sigma est.sigma itemcluster b.logit
A1   A1 328 0.851 -1.186     1 1     0 0.553         1           1  -2.018
A2   A2 328 0.738 -0.729     2 1     0 0.553         1           1  -1.240
A3   A3 328 0.567 -0.193     3 1     0 0.553         1           1  -0.329
A4   A4 328 0.460  0.114     4 1     0 0.553         1           1   0.193
B1   B1 328 0.713 -0.643     5 1     0 0.553         1           2  -1.094
B2   B2 328 0.506 -0.018     6 1     0 0.553         1           2  -0.030
B3   B3 328 0.909 -1.523     7 1     0 0.553         1           2  -2.591
B4   B4 328 0.683 -0.545     8 1     0 0.553         1           2  -0.927
C1   C1 328 0.933 -1.711     9 1     0 0.553         1           3  -2.910
C2   C2 328 0.713 -0.645    10 1     0 0.553         1           3  -1.097
C3   C3 328 0.872 -1.296    11 1     0 0.553         1           3  -2.204
C4   C4 328 0.735 -0.716    12 1     0 0.553         1           3  -1.218
   a.logit sigma.logit
A1   1.701       0.941
A2   1.701       0.941
A3   1.701       0.941
A4   1.701       0.941
B1   1.701       0.941
B2   1.701       0.941
B3   1.701       0.941
B4   1.701       0.941
C1   1.701       0.941
C2   1.701       0.941
C3   1.701       0.941
C4   1.701       0.941
---------------------------------------------------------------------------------------------------------- 
Trait SD (Probit Link): 0.553 
Trait SD (Logit Link) : 0.941 
---------------------------------------------------------------------------------------------------------- 
---------------------------------------------------------------------------------------------------------- 
Start: 2015-06-13 13:24:21 
End: 2015-06-13 13:24:22 
Time difference of 0.3114002 secs
Difference: 0.3114002 
---------------------------------------------------------------------------------------------------------- 
> summary(mod2)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:22 
Time difference of 0.3114002 secs
Computation Time: 0.3114002 

  Function rasch.pml3  
-----------------------------------------------------------------
Pairwise Marginal Likelihood Estimation 
Link function: probit 
-----------------------------------------------------------------
Pseudolikelihood objective function =  33351.05 
Number of persons =  328 
Number of estimated parameters =  13 
Number of used item pairs in PML estimation =  48 
PLIC =  33426.36  ; penalty = 75.31  | PLIC = -2*PL + log(n)*p 
      (Pseudolikelihood information criterion)
-----------------------------------------------------------------
Item Parameter Summary
 Estimated 12 Item Parameters

   item   N     p      b est.b a est.a sigma est.sigma itemcluster b.logit
A1   A1 328 0.851 -1.186     1 1     0 0.553         1           1  -2.018
A2   A2 328 0.738 -0.729     2 1     0 0.553         1           1  -1.240
A3   A3 328 0.567 -0.193     3 1     0 0.553         1           1  -0.329
A4   A4 328 0.460  0.114     4 1     0 0.553         1           1   0.193
B1   B1 328 0.713 -0.643     5 1     0 0.553         1           2  -1.094
B2   B2 328 0.506 -0.018     6 1     0 0.553         1           2  -0.030
B3   B3 328 0.909 -1.523     7 1     0 0.553         1           2  -2.591
B4   B4 328 0.683 -0.545     8 1     0 0.553         1           2  -0.927
C1   C1 328 0.933 -1.711     9 1     0 0.553         1           3  -2.910
C2   C2 328 0.713 -0.645    10 1     0 0.553         1           3  -1.097
C3   C3 328 0.872 -1.296    11 1     0 0.553         1           3  -2.204
C4   C4 328 0.735 -0.716    12 1     0 0.553         1           3  -1.218
   a.logit sigma.logit
A1   1.701       0.941
A2   1.701       0.941
A3   1.701       0.941
A4   1.701       0.941
B1   1.701       0.941
B2   1.701       0.941
B3   1.701       0.941
B4   1.701       0.941
C1   1.701       0.941
C2   1.701       0.941
C3   1.701       0.941
C4   1.701       0.941
-----------------------------------------------------------------
Trait SD (Probit Link): 0.553 
Trait SD (Logit Link) : 0.941 

Green-Yang Reliability 
omega = 0.64 
-----------------------------------------------------------------
> 
> ## Not run: 
> ##D #*****
> ##D # Model 3: Modelling error correlations: 
> ##D #          joint residual correlations for each itemcluster
> ##D error.corr <- diag(1,ncol(dat))
> ##D for ( ii in 1:3){
> ##D     ind.ii <- which( itemcluster == ii )
> ##D     error.corr[ ind.ii , ind.ii ] <- ii
> ##D         }
> ##D # estimate the model with error correlations
> ##D mod3 <- rasch.pml3( dat , error.corr = error.corr )
> ##D summary(mod3)
> ##D 
> ##D #****
> ##D # Model 4: model separate residual correlations        
> ##D I <- ncol(error.corr)
> ##D error.corr1 <- matrix( 1:(I*I) , ncol= I )
> ##D error.corr <- error.corr1 * ( error.corr > 0 )  
> ##D # estimate the model with error correlations
> ##D mod4 <- rasch.pml3( dat , error.corr = error.corr )
> ##D summary(mod4)
> ##D 
> ##D #****
> ##D # Model 5:  assume equal item difficulties:
> ##D # b_1 = b_7 and b_2 = b_12
> ##D # fix item difficulty of the 6th item to .1
> ##D est.b <- 1:I
> ##D est.b[7] <- 1; est.b[12] <- 2 ; est.b[6] <- 0
> ##D b.init <- rep( 0, I ) ; b.init[6] <- .1
> ##D mod5 <- rasch.pml3( dat , est.b =est.b , b.init=b.init)
> ##D summary(mod5)
> ##D 
> ##D #****
> ##D # Model 6: estimate three item slope groups
> ##D est.a <- rep(1:3 , each=4 )
> ##D mod6 <- rasch.pml3( dat , est.a =est.a , est.sigma=0)
> ##D summary(mod6)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: PISA reading
> ##D #############################################################################
> ##D 
> ##D data(data.pisaRead)
> ##D dat <- data.pisaRead$data
> ##D 
> ##D # select items
> ##D dat <- dat[ , substring(colnames(dat),1,1)=="R" ]
> ##D 
> ##D #******
> ##D # Model 1: Rasch model with PML estimation
> ##D mod1 <- rasch.pml3( as.matrix(dat) )
> ##D   ## Trait SD (Logit Link) : 1.419 
> ##D 
> ##D #******
> ##D # Model 2: Model correlations within testlets
> ##D error.corr <- diag(1,ncol(dat))
> ##D testlets <- paste( data.pisaRead$item$testlet )
> ##D itemcluster <- match( testlets , unique(testlets ) ) 
> ##D for ( ii in 1:(length(unique(testlets))) ){
> ##D     ind.ii <- which( itemcluster == ii )
> ##D     error.corr[ ind.ii , ind.ii ] <- ii
> ##D         }
> ##D # estimate the model with error correlations
> ##D mod2 <- rasch.pml3( dat , error.corr = error.corr )
> ##D   ## Trait SD (Logit Link) : 1.384
> ##D 
> ##D #****
> ##D # Model 3: model separate residual correlations        
> ##D I <- ncol(error.corr)
> ##D error.corr1 <- matrix( 1:(I*I) , ncol= I )
> ##D error.corr <- error.corr1 * ( error.corr > 0 )  
> ##D # estimate the model with error correlations
> ##D mod3 <- rasch.pml3( dat , error.corr = error.corr )
> ##D   ## Trait SD (Logit Link) : 1.384 
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 3: 10 locally independent items
> ##D #############################################################################
> ##D 
> ##D #**********
> ##D # simulate some data
> ##D set.seed(554)
> ##D N <- 500	# persons
> ##D I <- 10		# items
> ##D theta <- rnorm(N,sd=1.3 )	# trait SD of 1.3
> ##D b <- seq(-2 , 2 , length=I) # item difficulties
> ##D 
> ##D # simulate data from the Rasch model
> ##D dat <- sim.raschtype( theta = theta , b = b )
> ##D 
> ##D # estimation with rasch.pml and probit link
> ##D mod1 <- rasch.pml3( dat )
> ##D summary(mod1)
> ##D 
> ##D # estimation with rasch.mml2 function
> ##D mod2 <- rasch.mml3( dat )
> ##D 
> ##D # estimate item parameters for groups with five item parameters each
> ##D est.b <- rep( 1:(I/2) , each=2 )
> ##D mod3 <- rasch.pml3( dat , est.b=est.b )
> ##D summary(mod3)
> ##D 
> ##D # compare parameter estimates
> ##D summary(mod1)
> ##D summary(mod2)
> ##D summary(mod3)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 4: 11 items and 2 item clusters with 2 and 3 items
> ##D #############################################################################
> ##D 
> ##D set.seed(5698)
> ##D I <- 11                             # number of items
> ##D n <- 5000                           # number of persons
> ##D b <- seq(-2,2, len=I)               # item difficulties
> ##D theta <- rnorm( n , sd = 1 )        # person abilities
> ##D # itemcluster
> ##D itemcluster <- rep(0,I)
> ##D itemcluster[c(3,5)] <- 1
> ##D itemcluster[c(2,4,9)] <- 2
> ##D # residual correlations
> ##D rho <- c( .7 , .5 )
> ##D 
> ##D # simulate data (under the logit link)
> ##D dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> ##D colnames(dat) <- paste("I" , seq(1,ncol(dat)) , sep="")
> ##D 
> ##D #***
> ##D # Model 1: estimation using the Rasch model (with probit link)
> ##D mod1 <- rasch.pml3( dat )
> ##D #***
> ##D # Model 2: estimation when pairs of locally dependent items are eliminated
> ##D mod2 <- rasch.pml3( dat , itemcluster=itemcluster)
> ##D 
> ##D #***
> ##D # Model 3: Positive correlations within testlets
> ##D est.corrs <- diag( 1 , I )
> ##D est.corrs[ c(3,5) , c(3,5) ] <- 2
> ##D est.corrs[ c(2,4,9) , c(2,4,9) ] <- 3
> ##D mod3 <- rasch.pml3( dat , error.corr=est.corrs )
> ##D 
> ##D #***
> ##D # Model 4: Negative correlations between testlets
> ##D est.corrs <- diag( 1 , I )
> ##D est.corrs[ c(3,5) , c(2,4,9) ] <- 2
> ##D est.corrs[ c(2,4,9) , c(3,5) ] <- 2
> ##D mod4 <- rasch.pml3( dat , error.corr=est.corrs )
> ##D 
> ##D #***
> ##D # Model 5: sum constraint of zero within and between testlets
> ##D est.corrs <- matrix( 1:(I*I) ,  I , I )
> ##D cluster2 <- c(2,4,9)
> ##D est.corrs[ setdiff( 1:I , c(cluster2)) ,  ] <- 0
> ##D est.corrs[ , setdiff( 1:I , c(cluster2))  ] <- 0
> ##D # define an error constraint matrix
> ##D itempairs0 <- mod4$itempairs
> ##D IP <- nrow(itempairs0)
> ##D err.constraint <- matrix( 0 , IP , 1 )
> ##D err.constraint[ ( itempairs0$item1 %in% cluster2 )  
> ##D        & ( itempairs0$item2 %in% cluster2 )  , 1 ] <- 1
> ##D # set sum of error covariances to 1.2
> ##D err.constraintV <- matrix(3*.4,1,1)
> ##D 
> ##D mod5 <- rasch.pml3( dat , error.corr=est.corrs , 
> ##D          err.constraintM=err.constraint, err.constraintV=err.constraintV)
> ##D 
> ##D #****
> ##D # Model 6: Constraint on sum of all correlations
> ##D est.corrs <- matrix( 1:(I*I) ,  I , I )
> ##D # define an error constraint matrix
> ##D itempairs0 <- mod4$itempairs
> ##D IP <- nrow(itempairs0)
> ##D # define two side conditions
> ##D err.constraint <- matrix( 0 , IP , 2 )
> ##D err.constraintV <- matrix( 0 , 2 , 1)
> ##D # sum of all correlations is zero
> ##D err.constraint[  , 1 ] <- 1
> ##D err.constraintV[1,1] <- 0
> ##D # sum of items cluster c(1,2,3) is 0
> ##D cluster2 <- c(1,2,3)
> ##D err.constraint[ ( itempairs0$item1 %in%  cluster2 ) 
> ##D        & ( itempairs0$item2 %in% cluster2 )  , 2 ] <- 1
> ##D err.constraintV[2,1] <- 0
> ##D 
> ##D mod6 <- rasch.pml3( dat , error.corr=est.corrs , 
> ##D     err.constraintM=err.constraint,  err.constraintV=err.constraintV)
> ##D summary(mod6)
> ##D 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 5: 10 Items: Cluster 1 -> Items 1,2
> ##D #         Cluster 2 -> Items 3,4,5;   Cluster 3 -> Items 7,8,9
> ##D #############################################################################
> ##D 
> ##D set.seed(7650)
> ##D I <- 10                             # number of items
> ##D n <- 5000                           # number of persons
> ##D b <- seq(-2,2, len=I)               # item difficulties
> ##D bsamp <- b <- sample(b)             # sample item difficulties
> ##D theta <- rnorm( n , sd = 1 )        # person abilities
> ##D # define itemcluster
> ##D itemcluster <- rep(0,I)
> ##D itemcluster[ 1:2 ] <- 1
> ##D itemcluster[ 3:5 ] <- 2
> ##D itemcluster[ 7:9 ] <- 3
> ##D # define residual correlations
> ##D rho <- c( .55 , .35 , .45)
> ##D 
> ##D # simulate data
> ##D dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> ##D colnames(dat) <- paste("I" , seq(1,ncol(dat)) , sep="")
> ##D 
> ##D #***
> ##D # Model 1: residual correlation (equal within item clusters)
> ##D # define a matrix of integers for estimating error correlations
> ##D error.corr <- diag(1,ncol(dat))
> ##D for ( ii in 1:3){
> ##D     ind.ii <- which( itemcluster == ii )
> ##D     error.corr[ ind.ii , ind.ii ] <- ii
> ##D         }
> ##D # estimate the model
> ##D mod1 <- rasch.pml3( dat , error.corr = error.corr )
> ##D 
> ##D #***
> ##D # Model 2: residual correlation (different within item clusters)
> ##D # define again a matrix of integers for estimating error correlations
> ##D error.corr <- diag(1,ncol(dat))
> ##D for ( ii in 1:3){
> ##D     ind.ii <- which( itemcluster == ii )
> ##D     error.corr[ ind.ii , ind.ii ] <- ii
> ##D         }
> ##D I <- ncol(error.corr)
> ##D error.corr1 <- matrix( 1:(I*I) , ncol= I )
> ##D error.corr <- error.corr1 * ( error.corr > 0 )                
> ##D # estimate the model
> ##D mod2 <- rasch.pml3( dat , error.corr = error.corr )
> ##D 
> ##D #***
> ##D # Model 3: eliminate item pairs within itemclusters for PML estimation
> ##D mod3 <- rasch.pml3( dat , itemcluster = itemcluster )
> ##D 
> ##D #***
> ##D # Model 4: Rasch model ignoring dependency
> ##D mod4 <- rasch.pml3( dat )
> ##D 
> ##D # compare different models
> ##D summary(mod1)
> ##D summary(mod2)
> ##D summary(mod3)
> ##D summary(mod4) 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.pml", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.prox")
> ### * rasch.prox
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.prox
> ### Title: PROX Estimation Method for the Rasch Model
> ### Aliases: rasch.prox
> ### Keywords: PROX algorithm
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: PROX data.read
> #############################################################################
> 
> data(data.read)
> mod <- rasch.prox( data.read )
> mod$b       # item difficulties
         A1          A2          A3          A4          B1          B2 
-2.45493945 -1.47129174 -0.38516002  0.22673344 -1.29808410 -0.03481339 
         B3          B4          C1          C2          C3          C4 
-3.20730752 -1.09294800 -3.64572970 -1.29808410 -2.69987361 -1.44912858 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.prox", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rasch.va")
> ### * rasch.va
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rasch.va
> ### Title: Estimation of the Rasch Model with Variational Approximation
> ### Aliases: rasch.va
> ### Keywords: Variational approximation
> 
> ### ** Examples
> 
> #############################################################################
> # SIMULATED EXAMPLE 1: Rasch model
> #############################################################################
> set.seed(8706)
> N <- 5000
> I <- 20
> dat <- sim.raschtype( rnorm(N,sd=1.3) , b= seq(-2,2,len=I) )
> 
> # estimation via variational approximation
> mod1 <- rasch.va(dat)
...........................................................
Iteration 1     2015-06-13 13:24:22 
    Maximum b parameter change = 0.137099
    SD Trait = 1.088
...........................................................
Iteration 2     2015-06-13 13:24:22 
    Maximum b parameter change = 0.099617
    SD Trait = 1.033
...........................................................
Iteration 3     2015-06-13 13:24:22 
    Maximum b parameter change = 0.052009
    SD Trait = 1.087
...........................................................
Iteration 4     2015-06-13 13:24:22 
    Maximum b parameter change = 0.033119
    SD Trait = 1.13
...........................................................
Iteration 5     2015-06-13 13:24:22 
    Maximum b parameter change = 0.022358
    SD Trait = 1.16
...........................................................
Iteration 6     2015-06-13 13:24:22 
    Maximum b parameter change = 0.015309
    SD Trait = 1.18
...........................................................
Iteration 7     2015-06-13 13:24:22 
    Maximum b parameter change = 0.010511
    SD Trait = 1.194
...........................................................
Iteration 8     2015-06-13 13:24:22 
    Maximum b parameter change = 0.007218
    SD Trait = 1.204
...........................................................
Iteration 9     2015-06-13 13:24:22 
    Maximum b parameter change = 0.004956
    SD Trait = 1.21
...........................................................
Iteration 10     2015-06-13 13:24:22 
    Maximum b parameter change = 0.003404
    SD Trait = 1.214
...........................................................
Iteration 11     2015-06-13 13:24:22 
    Maximum b parameter change = 0.00234
    SD Trait = 1.217
...........................................................
Iteration 12     2015-06-13 13:24:22 
    Maximum b parameter change = 0.00161
    SD Trait = 1.219
...........................................................
Iteration 13     2015-06-13 13:24:22 
    Maximum b parameter change = 0.00111
    SD Trait = 1.221
...........................................................
Iteration 14     2015-06-13 13:24:22 
    Maximum b parameter change = 0.000767
    SD Trait = 1.222
> 
> # estimation via marginal maximum likelihood
> mod2 <- rasch.mml2(dat)
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:22 
   Deviance = 107026.3162
    Maximum b parameter change =  0.335709  
...........................................................
Iteration 2     2015-06-13 13:24:22 
   Deviance = 106139.8649 | Deviance change = 886.451285
    Maximum b parameter change =  0.043655  
...........................................................
Iteration 3     2015-06-13 13:24:22 
   Deviance = 106020.0777 | Deviance change = 119.787249
    Maximum b parameter change =  0.01856  
...........................................................
Iteration 4     2015-06-13 13:24:22 
   Deviance = 105938.5667 | Deviance change = 81.511005
    Maximum b parameter change =  0.015305  
...........................................................
Iteration 5     2015-06-13 13:24:22 
   Deviance = 105882.8937 | Deviance change = 55.672928
    Maximum b parameter change =  0.014194  
...........................................................
Iteration 6     2015-06-13 13:24:22 
   Deviance = 105849.5325 | Deviance change = 33.361269
    Maximum b parameter change =  0.013346  
...........................................................
Iteration 7     2015-06-13 13:24:22 
   Deviance = 105835.7315 | Deviance change = 13.800945
    Maximum b parameter change =  0.012566  
...........................................................
Iteration 8     2015-06-13 13:24:22 
   Deviance = 105834.2925 | Deviance change = 1.439058
    Maximum b parameter change =  0.003323  
...........................................................
Iteration 9     2015-06-13 13:24:22 
   Deviance = 105834.1417 | Deviance change = 0.150735
    Maximum b parameter change =  0.00125  
...........................................................
Iteration 10     2015-06-13 13:24:22 
   Deviance = 105834.1263 | Deviance change = 0.015455
    Maximum b parameter change =  0.000384  
...........................................................
Iteration 11     2015-06-13 13:24:22 
   Deviance = 105834.1248 | Deviance change = 0.001503
    Maximum b parameter change =  0.000137  
...........................................................
Iteration 12     2015-06-13 13:24:22 
   Deviance = 105834.1246 | Deviance change = 0.000115
    Maximum b parameter change =  4.9e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:22 
End: 2015-06-13 13:24:23 
Time difference of 0.59777 secs
Difference: 0.59777 
------------------------------------------------------------
> 
> # estmation via joint maximum likelihood
> mod3 <- rasch.jml(dat)
---------------------------------------------------------------------------------------------------------- 
Joint Maximum Likelihood Estimation 
Rasch Model 
---------------------------------------------------------------------------------------------------------- 
PROX Iter. 1 : max. parm. change =  1.75537 
PROX Iter. 2 : max. parm. change =  0.122822 
PROX Iter. 3 : max. parm. change =  0.01745 
PROX Iter. 4 : max. parm. change =  0.01457 
PROX Iter. 5 : max. parm. change =  0.002141 
...............................
JML Iteration 1 
  Item parameters |---
  MLE estimation  |---
  Deviance =  91372.55352
  Max. parm. change =  0.109176 
...............................
JML Iteration 2 
  Item parameters |---
  MLE estimation  |--
  Deviance =  91338.38928 | Deviance change =  34.16424
  Max. parm. change =  0.073061 
...............................
JML Iteration 3 
  Item parameters |--
  MLE estimation  |--
  Deviance =  91337.10276 | Deviance change =  1.28653
  Max. parm. change =  0.014428 
...............................
JML Iteration 4 
  Item parameters |--
  MLE estimation  |--
  Deviance =  91337.052 | Deviance change =  0.05076
  Max. parm. change =  0.002868 
...............................
JML Iteration 5 
  Item parameters |-
  MLE estimation  |-
  Deviance =  91337.05031 | Deviance change =  0.00168
  Max. parm. change =  0.000572 
...............................
JML Iteration 6 
  Item parameters |-
  MLE estimation  |-
  Deviance =  91337.04991 | Deviance change =  4e-04
  Max. parm. change =  0.000114 
...............................
JML Iteration 7 
  Item parameters |-
  MLE estimation  |-
  Deviance =  91337.04989 | Deviance change =  2e-05
  Max. parm. change =  2.3e-05 
...............................
JML Iteration 8 
  Item parameters |-
  MLE estimation  |-
  Deviance =  91337.04989 | Deviance change =  0
  Max. parm. change =  5e-06 
Convergence reached in 8 JML Iterations 
---------------------------------------------------------------------------------------------------------- 

> 
> # compare sigma
> round( c( mod1$sig , mod2$sd.trait ) , 3 )
[1] 1.222 1.314
> ## [1] 1.222 1.314
> 
> # compare b
> round( cbind( mod1$item$b , mod2$item$b , mod3$item$itemdiff) , 3 )
        [,1]   [,2]   [,3]
 [1,] -1.898 -1.967 -2.090
 [2,] -1.776 -1.841 -1.954
 [3,] -1.561 -1.618 -1.715
 [4,] -1.326 -1.375 -1.455
 [5,] -1.121 -1.163 -1.228
 [6,] -0.906 -0.940 -0.991
 [7,] -0.738 -0.766 -0.806
 [8,] -0.521 -0.541 -0.567
 [9,] -0.333 -0.346 -0.361
[10,] -0.131 -0.136 -0.139
[11,]  0.100  0.104  0.116
[12,]  0.302  0.313  0.337
[13,]  0.493  0.511  0.547
[14,]  0.682  0.707  0.755
[15,]  0.946  0.981  1.045
[16,]  1.151  1.193  1.271
[17,]  1.343  1.392  1.482
[18,]  1.533  1.589  1.692
[19,]  1.704  1.766  1.880
[20,]  1.914  1.983  2.113
> ##         [,1]   [,2]   [,3]
> ##  [1,] -1.898 -1.967 -2.090
> ##  [2,] -1.776 -1.841 -1.954
> ##  [3,] -1.561 -1.618 -1.715
> ##  [4,] -1.326 -1.375 -1.455
> ##  [5,] -1.121 -1.163 -1.228
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rasch.va", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("reliability.nonlinearSEM")
> ### * reliability.nonlinearSEM
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: reliability.nonlinearSEM
> ### Title: Estimation of Reliability for Confirmatory Factor Analyses Based
> ###   on Dichotomous Data
> ### Aliases: reliability.nonlinearSEM
> ### Keywords: Reliability
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Reading data set
> #############################################################################
> data(data.read)
> dat <- data.read
> I <- ncol(dat)
> 
> # define item clusters
> itemcluster <- rep( 1:3 , each=4)
> error.corr <- diag(1,ncol(dat))
> for ( ii in 1:3){
+     ind.ii <- which( itemcluster == ii )
+     error.corr[ ind.ii , ind.ii ] <- ii
+         }
> # estimate the model with error correlations
> mod1 <- rasch.pml3( dat , error.corr = error.corr)
---------------------------------------------------------------------------------------------------------- 
Pairwise Marginal Likelihood Estimation 
Raschtype Model with probit link 
---------------------------------------------------------------------------------------------------------- 
---------------------------------------------------------------------- 
PML EM Iter. 1        |**********|  2015-06-13 13:24:23  
 Estimation of b:     |----------|     max. parm. change 0.44533 
 Estimation of sigma: |----------|     max. parm. change 0.2 
 Estimation of eps:   |---------|     max. parm. change 0.3 
Pseudolikelihood =  45821.21 | max. parm. change =  0.445328  
---------------------------------------------------------------------- 
PML EM Iter. 2        |**********|  2015-06-13 13:24:23  0.0298 secs
 Estimation of b:     |----------|     max. parm. change 0.07515 
 Estimation of sigma: |----------|     max. parm. change 0.11856 
 Estimation of eps:   |---------|     max. parm. change 0.08417 
Pseudolikelihood =  45679.07 | max. parm. change =  0.118563  
---------------------------------------------------------------------- 
PML EM Iter. 3        |**********|  2015-06-13 13:24:23  0.0298 secs
 Estimation of b:     |----------|     max. parm. change 0.09117 
 Estimation of sigma: |----------|     max. parm. change 0.04982 
 Estimation of eps:   |---------|     max. parm. change 0.05104 
Pseudolikelihood =  45637.26 | max. parm. change =  0.091172  
---------------------------------------------------------------------- 
PML EM Iter. 4        |**********|  2015-06-13 13:24:23  0.0292 secs
 Estimation of b:     |----------|     max. parm. change 0.0404 
 Estimation of sigma: |----------|     max. parm. change 0.03106 
 Estimation of eps:   |---------|     max. parm. change 0.02826 
Pseudolikelihood =  45623.53 | max. parm. change =  0.0404  
---------------------------------------------------------------------- 
PML EM Iter. 5        |**********|  2015-06-13 13:24:23  0.0296 secs
 Estimation of b:     |----------|     max. parm. change 0.02518 
 Estimation of sigma: |----------|     max. parm. change 0.01903 
 Estimation of eps:   |---------|     max. parm. change 0.01683 
Pseudolikelihood =  45618.48 | max. parm. change =  0.025183  
---------------------------------------------------------------------- 
PML EM Iter. 6        |**********|  2015-06-13 13:24:23  0.0299 secs
 Estimation of b:     |----------|     max. parm. change 0.01503 
 Estimation of sigma: |----------|     max. parm. change 0.01146 
 Estimation of eps:   |---------|     max. parm. change 0.00993 
Pseudolikelihood =  45616.65 | max. parm. change =  0.015027  
---------------------------------------------------------------------- 
PML EM Iter. 7        |**********|  2015-06-13 13:24:23  0.0293 secs
 Estimation of b:     |----------|     max. parm. change 0.00892 
 Estimation of sigma: |----------|     max. parm. change 0.00682 
 Estimation of eps:   |---------|     max. parm. change 0.00584 
Pseudolikelihood =  45616.01 | max. parm. change =  0.00892  
---------------------------------------------------------------------- 
PML EM Iter. 8        |**********|  2015-06-13 13:24:23  0.0302 secs
 Estimation of b:     |----------|     max. parm. change 0.00526 
 Estimation of sigma: |----------|     max. parm. change 0.00402 
 Estimation of eps:   |---------|     max. parm. change 0.00342 
Pseudolikelihood =  45615.78 | max. parm. change =  0.005259  
---------------------------------------------------------------------- 
PML EM Iter. 9        |**********|  2015-06-13 13:24:23  0.0301 secs
 Estimation of b:     |----------|     max. parm. change 0.00309 
 Estimation of sigma: |----------|     max. parm. change 0.00236 
 Estimation of eps:   |---------|     max. parm. change 0.002 
Pseudolikelihood =  45615.7 | max. parm. change =  0.003086  
---------------------------------------------------------------------- 
PML EM Iter. 10       |**********|  2015-06-13 13:24:23  0.0393 secs
 Estimation of b:     |----------|     max. parm. change 0.00181 
 Estimation of sigma: |----------|     max. parm. change 0.00138 
 Estimation of eps:   |---------|     max. parm. change 0.00116 
Pseudolikelihood =  45615.67 | max. parm. change =  0.001805  
---------------------------------------------------------------------- 
PML EM Iter. 11       |**********|  2015-06-13 13:24:23  0.0311 secs
 Estimation of b:     |----------|     max. parm. change 0.00105 
 Estimation of sigma: |----------|     max. parm. change 8e-04 
 Estimation of eps:   |---------|     max. parm. change 0.00068 
Pseudolikelihood =  45615.66 | max. parm. change =  0.001054  
---------------------------------------------------------------------- 
PML EM Iter. 12       |**********|  2015-06-13 13:24:23  0.032 secs
 Estimation of b:     |----------|     max. parm. change 0.00061 
 Estimation of sigma: |----------|     max. parm. change 0.00047 
 Estimation of eps:   |---------|     max. parm. change 4e-04 
Pseudolikelihood =  45615.66 | max. parm. change =  0.000614  
---------------------------------------------------------------------- 
PML EM Iter. 13       |**********|  2015-06-13 13:24:23  0.0312 secs
 Estimation of b:     |----------|     max. parm. change 0.00036 
 Estimation of sigma: |----------|     max. parm. change 0.00027 
 Estimation of eps:   |---------|     max. parm. change 0.00023 
Pseudolikelihood =  45615.66 | max. parm. change =  0.000358  
---------------------------------------------------------------------- 
PML EM Iter. 14       |**********|  2015-06-13 13:24:23  0.0308 secs
 Estimation of b:     |----------|     max. parm. change 0.00021 
 Estimation of sigma: |----------|     max. parm. change 0.00016 
 Estimation of eps:   |---------|     max. parm. change 0.00013 
Pseudolikelihood =  45615.66 | max. parm. change =  0.000209  
---------------------------------------------------------------------- 
PML EM Iter. 15       |**********|  2015-06-13 13:24:23  0.0306 secs
 Estimation of b:     |----------|     max. parm. change 0.00012 
 Estimation of sigma: |----------|     max. parm. change 9e-05 
 Estimation of eps:   |---------|     max. parm. change 8e-05 
Pseudolikelihood =  45615.66 | max. parm. change =  0.000121  
---------------------------------------------------------------------- 
PML EM Iter. 16       |**********|  2015-06-13 13:24:23  0.0308 secs
 Estimation of b:     |----------|     max. parm. change 7e-05 
 Estimation of sigma: |----------|     max. parm. change 5e-05 
 Estimation of eps:   |---------|     max. parm. change 5e-05 
Pseudolikelihood =  45615.66 | max. parm. change =  7.1e-05  
---------------------------------------------------------------------------------------------------------- 
Item Parameter Summary
 Estimated 12 Item Parameters

   item   N     p      b est.b a est.a sigma est.sigma b.logit a.logit
A1   A1 328 0.851 -1.188     1 1     0 0.554         1  -2.021   1.701
A2   A2 328 0.738 -0.728     2 1     0 0.554         1  -1.239   1.701
A3   A3 328 0.567 -0.193     3 1     0 0.554         1  -0.328   1.701
A4   A4 328 0.460  0.113     4 1     0 0.554         1   0.193   1.701
B1   B1 328 0.713 -0.643     5 1     0 0.554         1  -1.094   1.701
B2   B2 328 0.506 -0.018     6 1     0 0.554         1  -0.030   1.701
B3   B3 328 0.909 -1.524     7 1     0 0.554         1  -2.592   1.701
B4   B4 328 0.683 -0.545     8 1     0 0.554         1  -0.927   1.701
C1   C1 328 0.933 -1.719     9 1     0 0.554         1  -2.924   1.701
C2   C2 328 0.713 -0.644    10 1     0 0.554         1  -1.095   1.701
C3   C3 328 0.872 -1.296    11 1     0 0.554         1  -2.205   1.701
C4   C4 328 0.735 -0.715    12 1     0 0.554         1  -1.217   1.701
   sigma.logit
A1       0.942
A2       0.942
A3       0.942
A4       0.942
B1       0.942
B2       0.942
B3       0.942
B4       0.942
C1       0.942
C2       0.942
C3       0.942
C4       0.942
---------------------------------------------------------------------------------------------------------- 
Trait SD (Probit Link): 0.554 
Trait SD (Logit Link) : 0.942 
---------------------------------------------------------------------------------------------------------- 
Residual Correlation Parameter Summary
 Estimated 3 Residual Correlation Parameters

      A1    A2    A3    A4    B1    B2    B3    B4    C1    C2    C3    C4
A1 1.000 0.226 0.226 0.226 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
A2 0.226 1.000 0.226 0.226 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
A3 0.226 0.226 1.000 0.226 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
A4 0.226 0.226 0.226 1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
B1 0.000 0.000 0.000 0.000 1.000 0.028 0.028 0.028 0.000 0.000 0.000 0.000
B2 0.000 0.000 0.000 0.000 0.028 1.000 0.028 0.028 0.000 0.000 0.000 0.000
B3 0.000 0.000 0.000 0.000 0.028 0.028 1.000 0.028 0.000 0.000 0.000 0.000
B4 0.000 0.000 0.000 0.000 0.028 0.028 0.028 1.000 0.000 0.000 0.000 0.000
C1 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000 0.476 0.476 0.476
C2 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.476 1.000 0.476 0.476
C3 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.476 0.476 1.000 0.476
C4 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.476 0.476 0.476 1.000
---------------------------------------------------------------------------------------------------------- 
---------------------------------------------------------------------------------------------------------- 
Start: 2015-06-13 13:24:23 
End: 2015-06-13 13:24:23 
Time difference of 0.5154691 secs
Difference: 0.5154691 
---------------------------------------------------------------------------------------------------------- 
> summary(mod1)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:23 
Time difference of 0.5154691 secs
Computation Time: 0.5154691 

  Function rasch.pml3  
-----------------------------------------------------------------
Pairwise Marginal Likelihood Estimation 
Link function: probit 
-----------------------------------------------------------------
Pseudolikelihood objective function =  45615.66 
Number of persons =  328 
Number of estimated parameters =  16 
Number of used item pairs in PML estimation =  66 
PLIC =  45708.35  ; penalty = 92.69  | PLIC = -2*PL + log(n)*p 
      (Pseudolikelihood information criterion)
-----------------------------------------------------------------
Item Parameter Summary
 Estimated 12 Item Parameters

   item   N     p      b est.b a est.a sigma est.sigma b.logit a.logit
A1   A1 328 0.851 -1.188     1 1     0 0.554         1  -2.021   1.701
A2   A2 328 0.738 -0.728     2 1     0 0.554         1  -1.239   1.701
A3   A3 328 0.567 -0.193     3 1     0 0.554         1  -0.328   1.701
A4   A4 328 0.460  0.113     4 1     0 0.554         1   0.193   1.701
B1   B1 328 0.713 -0.643     5 1     0 0.554         1  -1.094   1.701
B2   B2 328 0.506 -0.018     6 1     0 0.554         1  -0.030   1.701
B3   B3 328 0.909 -1.524     7 1     0 0.554         1  -2.592   1.701
B4   B4 328 0.683 -0.545     8 1     0 0.554         1  -0.927   1.701
C1   C1 328 0.933 -1.719     9 1     0 0.554         1  -2.924   1.701
C2   C2 328 0.713 -0.644    10 1     0 0.554         1  -1.095   1.701
C3   C3 328 0.872 -1.296    11 1     0 0.554         1  -2.205   1.701
C4   C4 328 0.735 -0.715    12 1     0 0.554         1  -1.217   1.701
   sigma.logit
A1       0.942
A2       0.942
A3       0.942
A4       0.942
B1       0.942
B2       0.942
B3       0.942
B4       0.942
C1       0.942
C2       0.942
C3       0.942
C4       0.942
-----------------------------------------------------------------
Trait SD (Probit Link): 0.554 
Trait SD (Logit Link) : 0.942 

Green-Yang Reliability 
omega = 0.615 
-----------------------------------------------------------------
-----------------------------------------------------------------
Residual Correlation Parameter Summary
 Estimated 3 Residual Correlation Parameters

      A1    A2    A3    A4    B1    B2    B3    B4    C1    C2    C3    C4
A1 1.000 0.226 0.226 0.226 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
A2 0.226 1.000 0.226 0.226 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
A3 0.226 0.226 1.000 0.226 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
A4 0.226 0.226 0.226 1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
B1 0.000 0.000 0.000 0.000 1.000 0.028 0.028 0.028 0.000 0.000 0.000 0.000
B2 0.000 0.000 0.000 0.000 0.028 1.000 0.028 0.028 0.000 0.000 0.000 0.000
B3 0.000 0.000 0.000 0.000 0.028 0.028 1.000 0.028 0.000 0.000 0.000 0.000
B4 0.000 0.000 0.000 0.000 0.028 0.028 0.028 1.000 0.000 0.000 0.000 0.000
C1 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000 0.476 0.476 0.476
C2 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.476 1.000 0.476 0.476
C3 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.476 0.476 1.000 0.476
C4 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.476 0.476 0.476 1.000
> 
> # extract item parameters
> thresh <- - matrix( mod1$item$a * mod1$item$b , I , 1 )
> A <- matrix( mod1$item$a * mod1$item$sigma , I , 1 )
> # extract estimated correlation matrix
> corM <- mod1$eps.corrM
> # compute standardized factor loadings
> facA <- 1 / sqrt( A^2 + 1 )
> resvar <- 1 - facA^2 
> covM <- outer( sqrt(resvar[,1]) , sqrt(resvar[,1] ) ) * corM
> facloadings <- A *facA
> 
> # estimate reliability
> rel1 <- reliability.nonlinearSEM( facloadings =facloadings , thresh =thresh , 
+            resid.cov=covM)
> rel1$omega.rel
[1] 0.6148853
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("reliability.nonlinearSEM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rm.facets")
> ### * rm.facets
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rm.facets
> ### Title: Rater Facets Models with Item/Rater Intercepts and Slopes
> ### Aliases: rm.facets summary.rm.facets logLik.rm.facets anova.rm.facets
> ###   IRT.irfprob.rm.facets IRT.likelihood.rm.facets
> ###   IRT.posterior.rm.facets IRT.modelfit.rm.facets
> ###   IRT.factor.scores.rm.facets summary.IRT.modelfit.rm.facets
> ### Keywords: Rater model Facets model summary
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Partial Credit Model and Generalized partial credit model 
> #                   5 items and 1 rater
> #############################################################################
> data(data.ratings1)
> dat <- data.ratings1
> 
> # select rater db01
> dat <- dat[ paste(dat$rater) == "db01" , ]
> 
> # Model 1: Partial Credit Model
> mod1 <- rm.facets( dat[ , paste0( "k",1:5) ] , pid=dat$idstud , maxiter=15)
...........................................................
Iteration 1     2015-06-13 13:24:23 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 423.5223
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 97
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.228 
...........................................................
Iteration 2     2015-06-13 13:24:23 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 370.5931 | Deviance change = 52.929251
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.454885
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.337 
...........................................................
Iteration 3     2015-06-13 13:24:23 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 368.0364 | Deviance change = 2.556701
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.300127
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.441 
...........................................................
Iteration 4     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 366.4011 | Deviance change = 1.635267
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.252908
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.53 
...........................................................
Iteration 5     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 365.3295 | Deviance change = 1.071603
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.214996
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.604 
...........................................................
Iteration 6     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 364.627 | Deviance change = 0.702467
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.182297
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.665 
...........................................................
Iteration 7     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 364.163 | Deviance change = 0.464091
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.15313
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.715 
...........................................................
Iteration 8     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 363.8488 | Deviance change = 0.314172
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.126702
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.756 
...........................................................
Iteration 9     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 363.6259 | Deviance change = 0.222869
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.102959
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.791 
...........................................................
Iteration 10     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 363.4604 | Deviance change = 0.165474
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.083848
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.821 
...........................................................
Iteration 11     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 363.3622 | Deviance change = 0.098223
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.06822
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.846 
...........................................................
Iteration 12     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 363.2997 | Deviance change = 0.062543
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.055095
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.867 
...........................................................
Iteration 13     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 363.2596 | Deviance change = 0.040117
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.046052
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.883 
...........................................................
Iteration 14     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 363.2336 | Deviance change = 0.025961
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.037061
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.896 
...........................................................
Iteration 15     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
   Deviance = 363.2167 | Deviance change = 0.016895
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.029396
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.906 
*********************************
Item Parameters
   item  N     M tau.Cat1 tau.Cat2 tau.Cat3 a  delta delta_cent
k1   k1 41 0.854   -0.994    1.769    5.299 1  1.766      0.986
k2   k2 41 0.951   -1.532    0.935    4.596 1  1.532      0.751
k3   k3 41 1.122   -2.637   -0.927    4.030 1  1.343      0.563
k4   k4 41 1.024   -1.405   -0.241       NA 1 -0.121     -0.901
k5   k5 41 1.146   -2.308   -1.235       NA 1 -0.618     -1.398
*********************************
Rater Parameters
  rater   N    M b a thresh
1     1 205 1.02 0 1      0
*********************************
EAP Reliability =  0.827 
> 
> # Model 2: Generalized Partial Credit Model
> mod2 <- rm.facets( dat[ , paste0( "k",1:5) ] ,  pid=dat$idstud  , 
+            est.a.item=TRUE , maxiter=15)
...........................................................
Iteration 1     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |----  4 Step(s) 
   Deviance = 423.5223
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 97
    Maximum a.item parameter change = 0.498888
 Trait M  = 0 
 Trait SD = 1.228 
...........................................................
Iteration 2     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |----  4 Step(s) 
   Deviance = 358.6966 | Deviance change = 64.825703
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.742362
    Maximum a.item parameter change = 0.240931
 Trait M  = 0 
 Trait SD = 1.336 
...........................................................
Iteration 3     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |----  4 Step(s) 
   Deviance = 346.751 | Deviance change = 11.945632
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.713613
    Maximum a.item parameter change = 0.171829
 Trait M  = 0 
 Trait SD = 1.427 
...........................................................
Iteration 4     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |---  3 Step(s) 
   Deviance = 339.2505 | Deviance change = 7.500477
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.66201
    Maximum a.item parameter change = 0.09835
 Trait M  = 0 
 Trait SD = 1.512 
...........................................................
Iteration 5     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |---  3 Step(s) 
   Deviance = 334.4893 | Deviance change = 4.76121
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.582939
    Maximum a.item parameter change = 0.056121
 Trait M  = 0 
 Trait SD = 1.604 
...........................................................
Iteration 6     2015-06-13 13:24:24 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |---  3 Step(s) 
   Deviance = 331.2418 | Deviance change = 3.247501
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.52177
    Maximum a.item parameter change = 0.041432
 Trait M  = 0 
 Trait SD = 1.696 
...........................................................
Iteration 7     2015-06-13 13:24:25 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |---  3 Step(s) 
   Deviance = 328.8556 | Deviance change = 2.386223
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.477898
    Maximum a.item parameter change = 0.03607
 Trait M  = 0 
 Trait SD = 1.783 
...........................................................
Iteration 8     2015-06-13 13:24:25 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |---  3 Step(s) 
   Deviance = 327.0344 | Deviance change = 1.821215
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.442903
    Maximum a.item parameter change = 0.032998
 Trait M  = 0 
 Trait SD = 1.862 
...........................................................
Iteration 9     2015-06-13 13:24:25 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |--  2 Step(s) 
   Deviance = 325.6213 | Deviance change = 1.413024
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.414081
    Maximum a.item parameter change = 0.030263
 Trait M  = 0 
 Trait SD = 1.932 
...........................................................
Iteration 10     2015-06-13 13:24:25 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |--  2 Step(s) 
   Deviance = 324.5085 | Deviance change = 1.112862
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.385586
    Maximum a.item parameter change = 0.027935
 Trait M  = 0 
 Trait SD = 1.996 
...........................................................
Iteration 11     2015-06-13 13:24:25 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |--  2 Step(s) 
   Deviance = 323.6236 | Deviance change = 0.884855
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.35921
    Maximum a.item parameter change = 0.025907
 Trait M  = 0 
 Trait SD = 2.053 
...........................................................
Iteration 12     2015-06-13 13:24:25 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |--  2 Step(s) 
   Deviance = 322.9138 | Deviance change = 0.709805
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.334967
    Maximum a.item parameter change = 0.024117
 Trait M  = 0 
 Trait SD = 2.104 
...........................................................
Iteration 13     2015-06-13 13:24:25 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |--  2 Step(s) 
   Deviance = 322.3397 | Deviance change = 0.574097
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.312689
    Maximum a.item parameter change = 0.022528
 Trait M  = 0 
 Trait SD = 2.15 
...........................................................
Iteration 14     2015-06-13 13:24:25 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |--  2 Step(s) 
   Deviance = 321.8718 | Deviance change = 0.467914
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.292206
    Maximum a.item parameter change = 0.02111
 Trait M  = 0 
 Trait SD = 2.192 
...........................................................
Iteration 15     2015-06-13 13:24:25 
  M steps tau.item parameter |----  4 Step(s) 
  M steps a.item parameter   |--  2 Step(s) 
   Deviance = 321.4877 | Deviance change = 0.384105
    Maximum b.rater parameter change = 0
    Maximum a.rater parameter change = 0
    Maximum tau.item parameter change = 0.273381
    Maximum a.item parameter change = 0.019824
 Trait M  = 0 
 Trait SD = 2.23 
*********************************
Item Parameters
   item  N     M tau.Cat1 tau.Cat2 tau.Cat3     a  delta delta_cent
k1   k1 41 0.854   -2.078    2.419    9.707 1.924  3.236      1.859
k2   k2 41 0.951   -2.891    0.936    7.852 1.797  2.617      1.241
k3   k3 41 1.122   -3.816   -1.610    5.357 1.360  1.786      0.409
k4   k4 41 1.024   -3.031   -0.847       NA 1.898 -0.423     -1.800
k5   k5 41 1.146   -1.151   -0.662       NA 0.112 -0.331     -1.708
*********************************
Rater Parameters
  rater   N    M b a thresh
1     1 205 1.02 0 1      0
*********************************
EAP Reliability =  0.891 
> 
> summary(mod1)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:24 
Time difference of 0.776437 secs
Computation time: 0.776437 

Rater Facet Model with Item/Rater Intercepts and Slopes 
-----------------------------------------------------------------
Number of iterations = 15 
Deviance =  363.22  | Log Likelihood =  -181.61 
Number of persons =  41 
Number of items   =  5 
Number of raters  =  1 
Number of estimated parameters =  14 
   Number of item parameters   =  13 
   Number of rater parameters  =  0 
   Number of distribution parameters  =  1 

AIC  =  391.22  | penalty = 28    | AIC = -2*LL + 2*p  
AICc =  407.37  | penalty = 44.15    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  415.21  | penalty = 51.99    | BIC = -2*LL + log(n)*p  
CAIC =  429.21  | penalty = 65.99   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution
Mean= 0  SD= 1.906

EAP Reliability = 0.827
-----------------------------------------------------------------
Item Parameters 
   item  N     M tau.Cat1 tau.Cat2 tau.Cat3 a  delta delta_cent
k1   k1 41 0.854   -0.994    1.769    5.299 1  1.766      0.986
k2   k2 41 0.951   -1.532    0.935    4.596 1  1.532      0.751
k3   k3 41 1.122   -2.637   -0.927    4.030 1  1.343      0.563
k4   k4 41 1.024   -1.405   -0.241       NA 1 -0.121     -0.901
k5   k5 41 1.146   -2.308   -1.235       NA 1 -0.618     -1.398
-----------------------------------------------------------------
Rater Parameters 
  rater   N    M b a thresh
1     1 205 1.02 0 1      0
> summary(mod2)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:25 
Time difference of 0.9159632 secs
Computation time: 0.9159632 

Rater Facet Model with Item/Rater Intercepts and Slopes 
-----------------------------------------------------------------
Number of iterations = 15 
Deviance =  321.49  | Log Likelihood =  -160.74 
Number of persons =  41 
Number of items   =  5 
Number of raters  =  1 
Number of estimated parameters =  18 
   Number of item parameters   =  17 
   Number of rater parameters  =  0 
   Number of distribution parameters  =  1 

AIC  =  357.49  | penalty = 36    | AIC = -2*LL + 2*p  
AICc =  388.58  | penalty = 67.09    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  388.33  | penalty = 66.84    | BIC = -2*LL + log(n)*p  
CAIC =  406.33  | penalty = 84.84   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution
Mean= 0  SD= 2.23

EAP Reliability = 0.891
-----------------------------------------------------------------
Item Parameters 
   item  N     M tau.Cat1 tau.Cat2 tau.Cat3     a  delta delta_cent
k1   k1 41 0.854   -2.078    2.419    9.707 1.924  3.236      1.859
k2   k2 41 0.951   -2.891    0.936    7.852 1.797  2.617      1.241
k3   k3 41 1.122   -3.816   -1.610    5.357 1.360  1.786      0.409
k4   k4 41 1.024   -3.031   -0.847       NA 1.898 -0.423     -1.800
k5   k5 41 1.146   -1.151   -0.662       NA 0.112 -0.331     -1.708
-----------------------------------------------------------------
Rater Parameters 
  rater   N    M b a thresh
1     1 205 1.02 0 1      0
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 2: Facets Model: 5 items, 7 raters
> ##D #############################################################################
> ##D 
> ##D data(data.ratings1)
> ##D dat <- data.ratings1
> ##D maxit <- 15    # maximum number of iterations, increase it in applications!
> ##D 
> ##D # Model 1: Partial Credit Model: no rater effects
> ##D mod1 <- rm.facets( dat[ , paste0( "k",1:5) ] , rater=dat$rater , 
> ##D              pid=dat$idstud  , est.b.rater=FALSE  , maxiter=maxit)
> ##D 
> ##D # Model 2: Partial Credit Model: intercept rater effects
> ##D mod2 <- rm.facets( dat[ , paste0( "k",1:5) ] , rater=dat$rater  , 
> ##D              pid=dat$idstud  , maxiter=maxit)
> ##D 
> ##D # extract individual likelihood
> ##D lmod1 <- IRT.likelihood(mod1)   
> ##D str(lmod1)
> ##D # likelihood value
> ##D logLik(mod1)
> ##D # extract item response functions
> ##D pmod1 <- IRT.irfprob(mod1)
> ##D str(pmod1)
> ##D # model comparison
> ##D anova(mod1,mod2)             
> ##D # absolute and relative model fit
> ##D smod1 <- IRT.modelfit(mod1)
> ##D summary(smod1)
> ##D smod2 <- IRT.modelfit(mod2)
> ##D summary(smod2)
> ##D IRT.compareModels( smod1 , smod2 )
> ##D # extract factor scores (EAP is the default)
> ##D IRT.factor.scores(mod2)
> ##D # extract WLEs
> ##D IRT.factor.scores(mod2 , type="WLE")
> ##D 
> ##D # Model 2a: compare results with TAM package
> ##D #   Results should be similar to Model 2
> ##D library(TAM)
> ##D mod2a <- TAM::tam.mml.mfr( resp= dat[ , paste0( "k",1:5) ] , 
> ##D              facets= dat[ , "rater" , drop=FALSE] ,
> ##D              pid= dat$pid , formulaA = ~ item*step + rater )
> ##D 
> ##D # Model 2b: Partial Credit Model: some fixed parameters
> ##D # fix rater parameters for raters 1, 4 and 5
> ##D b.rater.fixed <- rep(NA,7)
> ##D b.rater.fixed[ c(1,4,5) ] <- c(1,-.8,0)  # fixed parameters
> ##D # fix item parameters of first and second item
> ##D tau.item.fixed <- round( mod2$tau.item , 1 )    # use parameters from mod2
> ##D tau.item.fixed[ 3:5 , ] <- NA    # free item parameters of items 3, 4 and 5
> ##D mod2b <- rm.facets( dat[ , paste0( "k",1:5) ] , rater=dat$rater  , 
> ##D              b.rater.fixed=b.rater.fixed , tau.item.fixed=tau.item.fixed , 
> ##D              est.mean = TRUE , pid=dat$idstud  , maxiter=maxit)
> ##D summary(mod2b)             
> ##D              
> ##D # Model 3: estimated rater slopes
> ##D mod3 <- rm.facets( dat[ , paste0( "k",1:5) ] , rater=dat$rater , 
> ##D             est.a.rater=TRUE  , maxiter=maxit)
> ##D 
> ##D # Model 4: estimated item slopes
> ##D mod4 <- rm.facets( dat[ , paste0( "k",1:5) ] , rater=dat$rater , 
> ##D              pid=dat$idstud  ,  est.a.item=TRUE , maxiter=maxit)
> ##D 
> ##D # Model 5: estimated rater and item slopes
> ##D mod5 <- rm.facets( dat[ , paste0( "k",1:5) ] , rater=dat$rater , 
> ##D              pid=dat$idstud  , est.a.rater=TRUE , est.a.item=TRUE , maxiter=maxit)
> ##D summary(mod1)
> ##D summary(mod2)
> ##D summary(mod2a)
> ##D summary(mod3)
> ##D summary(mod4)
> ##D summary(mod5)
> ##D 
> ##D # Model 5a: Some fixed parameters in Model 5
> ##D # fix rater b parameters for raters 1, 4 and 5
> ##D b.rater.fixed <- rep(NA,7)
> ##D b.rater.fixed[ c(1,4,5) ] <- c(1,-.8,0)
> ##D # fix rater a parameters for first four raters
> ##D a.rater.fixed <- rep(NA,7)
> ##D a.rater.fixed[ c(1,2,3,4) ] <- c(1.1,0.9,.85,1)
> ##D # fix item b parameters of first item
> ##D tau.item.fixed <- matrix( NA , nrow=5 , ncol=3 )
> ##D tau.item.fixed[ 1 , ] <- c(-2,-1.5 , 1 )   
> ##D # fix item a parameters
> ##D a.item.fixed <- rep(NA,5)
> ##D a.item.fixed[ 1:4 ] <- 1
> ##D # estimate model
> ##D mod5a <- rm.facets( dat[ , paste0( "k",1:5) ] , rater=dat$rater , 
> ##D              pid=dat$idstud  , est.a.rater=TRUE , est.a.item=TRUE , 
> ##D              tau.item.fixed=tau.item.fixed , b.rater.fixed=b.rater.fixed , 
> ##D              a.rater.fixed=a.rater.fixed , a.item.fixed=a.item.fixed , 
> ##D              est.mean=TRUE , maxiter=maxit)
> ##D summary(mod5a)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rm.facets", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rm.sdt")
> ### * rm.sdt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rm.sdt
> ### Title: Hierachical Rater Model Based on Signal Detection Theory
> ###   (HRM-SDT)
> ### Aliases: rm.sdt summary.rm.sdt logLik.rm.sdt anova.rm.sdt
> ###   IRT.irfprob.rm.sdt IRT.likelihood.rm.sdt IRT.posterior.rm.sdt
> ###   IRT.modelfit.rm.sdt summary.IRT.modelfit.rm.sdt
> ###   IRT.factor.scores.rm.sdt plot.rm.sdt
> ### Keywords: Rater model Signal detection model summary plot
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Hierarchical rater model (HRM-SDT) data.ratings1
> #############################################################################
> data(data.ratings1)
> dat <- data.ratings1
> 
> ## Not run: 
> ##D # Model 1: Partial Credit Model: no rater effects
> ##D mod1 <- rm.sdt( dat[ , paste0( "k",1:5) ] , rater=dat$rater , 
> ##D             pid=dat$idstud , est.c.rater="n" , est.d.rater="n" , maxiter=15)
> ##D summary(mod1)
> ##D             
> ##D # Model 2: Generalized Partial Credit Model: no rater effects
> ##D mod2 <- rm.sdt( dat[ , paste0( "k",1:5) ] , rater=dat$rater , 
> ##D             pid=dat$idstud , est.c.rater="n" , est.d.rater="n" , 
> ##D             est.a.item =TRUE , d.start=100 , maxiter=15)
> ##D summary(mod2)
> ## End(Not run)
>             
> # Model 3: Equal effects in SDT
> mod3 <- rm.sdt( dat[ , paste0( "k",1:5) ] , rater=dat$rater , 
+             pid=dat$idstud , est.c.rater="e" , est.d.rater="e" , maxiter=15)
...........................................................
Iteration 1     2015-06-13 13:24:25 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |--  2 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 3081.4956
    Maximum c.rater parameter change = 0.575137
    Maximum d.rater parameter change = 0.012831
    Maximum tau.item parameter change = 1.703689
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.425 
...........................................................
Iteration 2     2015-06-13 13:24:25 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |--  2 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2797.4114 | Deviance change = 284.084166
    Maximum c.rater parameter change = 0.2881
    Maximum d.rater parameter change = 0.014201
    Maximum tau.item parameter change = 0.468429
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 1.867 
...........................................................
Iteration 3     2015-06-13 13:24:25 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2734.2666 | Deviance change = 63.144877
    Maximum c.rater parameter change = 0.20024
    Maximum d.rater parameter change = 0.037325
    Maximum tau.item parameter change = 0.324352
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 2.227 
...........................................................
Iteration 4     2015-06-13 13:24:26 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2708.9152 | Deviance change = 25.351383
    Maximum c.rater parameter change = 0.155164
    Maximum d.rater parameter change = 0.045569
    Maximum tau.item parameter change = 0.263203
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 2.498 
...........................................................
Iteration 5     2015-06-13 13:24:26 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2696.393 | Deviance change = 12.522219
    Maximum c.rater parameter change = 0.129841
    Maximum d.rater parameter change = 0.048473
    Maximum tau.item parameter change = 0.213096
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 2.693 
...........................................................
Iteration 6     2015-06-13 13:24:26 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2688.9805 | Deviance change = 7.412474
    Maximum c.rater parameter change = 0.114812
    Maximum d.rater parameter change = 0.048421
    Maximum tau.item parameter change = 0.172144
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 2.829 
...........................................................
Iteration 7     2015-06-13 13:24:26 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2683.9061 | Deviance change = 5.074415
    Maximum c.rater parameter change = 0.105083
    Maximum d.rater parameter change = 0.048349
    Maximum tau.item parameter change = 0.140224
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 2.922 
...........................................................
Iteration 8     2015-06-13 13:24:26 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2680.0333 | Deviance change = 3.87274
    Maximum c.rater parameter change = 0.098952
    Maximum d.rater parameter change = 0.049281
    Maximum tau.item parameter change = 0.112034
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 2.985 
...........................................................
Iteration 9     2015-06-13 13:24:26 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2676.8032 | Deviance change = 3.230084
    Maximum c.rater parameter change = 0.095035
    Maximum d.rater parameter change = 0.048285
    Maximum tau.item parameter change = 0.088806
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 3.027 
...........................................................
Iteration 10     2015-06-13 13:24:26 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2674.0314 | Deviance change = 2.771869
    Maximum c.rater parameter change = 0.09202
    Maximum d.rater parameter change = 0.047179
    Maximum tau.item parameter change = 0.074624
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 3.056 
...........................................................
Iteration 11     2015-06-13 13:24:27 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2671.5942 | Deviance change = 2.437147
    Maximum c.rater parameter change = 0.08978
    Maximum d.rater parameter change = 0.046721
    Maximum tau.item parameter change = 0.058019
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 3.075 
...........................................................
Iteration 12     2015-06-13 13:24:27 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2669.3886 | Deviance change = 2.205671
    Maximum c.rater parameter change = 0.087372
    Maximum d.rater parameter change = 0.045056
    Maximum tau.item parameter change = 0.05335
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 3.088 
...........................................................
Iteration 13     2015-06-13 13:24:27 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2667.4179 | Deviance change = 1.970704
    Maximum c.rater parameter change = 0.085106
    Maximum d.rater parameter change = 0.043409
    Maximum tau.item parameter change = 0.042824
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 3.095 
...........................................................
Iteration 14     2015-06-13 13:24:27 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2665.6349 | Deviance change = 1.782969
    Maximum c.rater parameter change = 0.083036
    Maximum d.rater parameter change = 0.042024
    Maximum tau.item parameter change = 0.034767
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 3.1 
...........................................................
Iteration 15     2015-06-13 13:24:27 
  M steps tau.item parameter   |----  4 Step(s) 
  M steps d.rater parameter    |---  3 Step(s) 
  M steps c.rater parameter    |----  4 Step(s) 
   Deviance = 2664.002 | Deviance change = 1.632845
    Maximum c.rater parameter change = 0.081175
    Maximum d.rater parameter change = 0.041086
    Maximum tau.item parameter change = 0.034164
    Maximum a.item parameter change = 0
 Trait M  = 0 
 Trait SD = 3.101 
*********************************
Item Parameters
   item   N     M tau.Cat1 tau.Cat2 tau.Cat3 a  latM latSD
k1   k1 274 1.573   -2.164   -2.275    0.303 1 1.476 1.085
k2   k2 274 1.336   -1.883   -0.865    2.638 1 1.249 1.022
k3   k3 274 1.529   -4.414   -3.754   -0.274 1 1.480 0.872
k4   k4 274 1.372   -1.519   -1.366    3.544 1 1.234 0.974
k5   k5 274 1.412   -2.506   -2.213    2.986 1 1.300 0.894
*********************************
Rater Parameters
   item.rater  N     M     d   c_1   c_2   c_3 c_1.trans c_2.trans c_3.trans
1     k1-db01 41 0.854 3.593 0.645 5.475 9.723     0.179     1.524     2.706
2     k1-db02 37 1.351 3.593 0.645 5.475 9.723     0.179     1.524     2.706
3     k1-db03 37 1.297 3.593 0.645 5.475 9.723     0.179     1.524     2.706
4     k1-db07 41 2.024 3.593 0.645 5.475 9.723     0.179     1.524     2.706
5     k1-db08 38 1.895 3.593 0.645 5.475 9.723     0.179     1.524     2.706
6     k1-db31 41 1.756 3.593 0.645 5.475 9.723     0.179     1.524     2.706
7     k1-db54 39 1.821 3.593 0.645 5.475 9.723     0.179     1.524     2.706
8     k2-db01 41 0.951 3.593 0.645 5.475 9.723     0.179     1.524     2.706
9     k2-db02 37 0.973 3.593 0.645 5.475 9.723     0.179     1.524     2.706
10    k2-db03 37 1.243 3.593 0.645 5.475 9.723     0.179     1.524     2.706
11    k2-db07 41 1.561 3.593 0.645 5.475 9.723     0.179     1.524     2.706
12    k2-db08 38 1.500 3.593 0.645 5.475 9.723     0.179     1.524     2.706
13    k2-db31 41 1.585 3.593 0.645 5.475 9.723     0.179     1.524     2.706
14    k2-db54 39 1.513 3.593 0.645 5.475 9.723     0.179     1.524     2.706
15    k3-db01 41 1.122 3.593 0.645 5.475 9.723     0.179     1.524     2.706
16    k3-db02 37 1.216 3.593 0.645 5.475 9.723     0.179     1.524     2.706
17    k3-db03 37 1.432 3.593 0.645 5.475 9.723     0.179     1.524     2.706
18    k3-db07 41 1.854 3.593 0.645 5.475 9.723     0.179     1.524     2.706
19    k3-db08 38 1.526 3.593 0.645 5.475 9.723     0.179     1.524     2.706
20    k3-db31 41 1.829 3.593 0.645 5.475 9.723     0.179     1.524     2.706
21    k3-db54 39 1.692 3.593 0.645 5.475 9.723     0.179     1.524     2.706
22    k4-db01 41 1.024 3.593 0.645 5.475 9.723     0.179     1.524     2.706
23    k4-db02 37 1.162 3.593 0.645 5.475 9.723     0.179     1.524     2.706
24    k4-db03 37 1.432 3.593 0.645 5.475 9.723     0.179     1.524     2.706
25    k4-db07 41 1.585 3.593 0.645 5.475 9.723     0.179     1.524     2.706
26    k4-db08 38 1.132 3.593 0.645 5.475 9.723     0.179     1.524     2.706
27    k4-db31 41 1.756 3.593 0.645 5.475 9.723     0.179     1.524     2.706
28    k4-db54 39 1.487 3.593 0.645 5.475 9.723     0.179     1.524     2.706
29    k5-db01 41 1.146 3.593 0.645 5.475 9.723     0.179     1.524     2.706
30    k5-db02 37 1.432 3.593 0.645 5.475 9.723     0.179     1.524     2.706
31    k5-db03 37 1.297 3.593 0.645 5.475 9.723     0.179     1.524     2.706
32    k5-db07 41 1.829 3.593 0.645 5.475 9.723     0.179     1.524     2.706
33    k5-db08 38 1.000 3.593 0.645 5.475 9.723     0.179     1.524     2.706
34    k5-db31 41 1.415 3.593 0.645 5.475 9.723     0.179     1.524     2.706
35    k5-db54 39 1.744 3.593 0.645 5.475 9.723     0.179     1.524     2.706
*********************************
EAP Reliability =  0.868 
> summary(mod3)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:27 
Time difference of 2.162963 secs
Computation time: 2.162963 

Hierarchical Rater Model: Signal Detection Model 
-----------------------------------------------------------------
Number of iterations = 15 
Deviance =  2664  | Log Likelihood =  -1332 
Number of persons =  135 
Number of items   =  5 
Number of raters  =  7 
Number of estimated parameters =  20 
  Distribution parameters  =  1 
  Item parameters  =  15 
  Rater parameters =  4 
AIC  =  2704  | penalty = 40    | AIC = -2*LL + 2*p  
AICc =  2711.37  | penalty = 47.37    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  2762.11  | penalty = 98.11    | BIC = -2*LL + log(n)*p  
CAIC =  2782.11  | penalty = 118.11   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

-----------------------------------------------------------------
Trait Distribution
 Mean= 0  SD= 3.101
EAP Reliability = 0.868
-----------------------------------------------------------------
Item Parameters 
  item   N     M tau.Cat1 tau.Cat2 tau.Cat3 a  latM latSD
1   k1 274 1.573   -2.164   -2.275    0.303 1 1.476 1.085
2   k2 274 1.336   -1.883   -0.865    2.638 1 1.249 1.022
3   k3 274 1.529   -4.414   -3.754   -0.274 1 1.480 0.872
4   k4 274 1.372   -1.519   -1.366    3.544 1 1.234 0.974
5   k5 274 1.412   -2.506   -2.213    2.986 1 1.300 0.894
-----------------------------------------------------------------
Rater Parameters 
   item.rater  N     M     d   c_1   c_2   c_3 c_1.trans c_2.trans c_3.trans
1     k1-db01 41 0.854 3.593 0.645 5.475 9.723     0.179     1.524     2.706
2     k1-db02 37 1.351 3.593 0.645 5.475 9.723     0.179     1.524     2.706
3     k1-db03 37 1.297 3.593 0.645 5.475 9.723     0.179     1.524     2.706
4     k1-db07 41 2.024 3.593 0.645 5.475 9.723     0.179     1.524     2.706
5     k1-db08 38 1.895 3.593 0.645 5.475 9.723     0.179     1.524     2.706
6     k1-db31 41 1.756 3.593 0.645 5.475 9.723     0.179     1.524     2.706
7     k1-db54 39 1.821 3.593 0.645 5.475 9.723     0.179     1.524     2.706
8     k2-db01 41 0.951 3.593 0.645 5.475 9.723     0.179     1.524     2.706
9     k2-db02 37 0.973 3.593 0.645 5.475 9.723     0.179     1.524     2.706
10    k2-db03 37 1.243 3.593 0.645 5.475 9.723     0.179     1.524     2.706
11    k2-db07 41 1.561 3.593 0.645 5.475 9.723     0.179     1.524     2.706
12    k2-db08 38 1.500 3.593 0.645 5.475 9.723     0.179     1.524     2.706
13    k2-db31 41 1.585 3.593 0.645 5.475 9.723     0.179     1.524     2.706
14    k2-db54 39 1.513 3.593 0.645 5.475 9.723     0.179     1.524     2.706
15    k3-db01 41 1.122 3.593 0.645 5.475 9.723     0.179     1.524     2.706
16    k3-db02 37 1.216 3.593 0.645 5.475 9.723     0.179     1.524     2.706
17    k3-db03 37 1.432 3.593 0.645 5.475 9.723     0.179     1.524     2.706
18    k3-db07 41 1.854 3.593 0.645 5.475 9.723     0.179     1.524     2.706
19    k3-db08 38 1.526 3.593 0.645 5.475 9.723     0.179     1.524     2.706
20    k3-db31 41 1.829 3.593 0.645 5.475 9.723     0.179     1.524     2.706
21    k3-db54 39 1.692 3.593 0.645 5.475 9.723     0.179     1.524     2.706
22    k4-db01 41 1.024 3.593 0.645 5.475 9.723     0.179     1.524     2.706
23    k4-db02 37 1.162 3.593 0.645 5.475 9.723     0.179     1.524     2.706
24    k4-db03 37 1.432 3.593 0.645 5.475 9.723     0.179     1.524     2.706
25    k4-db07 41 1.585 3.593 0.645 5.475 9.723     0.179     1.524     2.706
26    k4-db08 38 1.132 3.593 0.645 5.475 9.723     0.179     1.524     2.706
27    k4-db31 41 1.756 3.593 0.645 5.475 9.723     0.179     1.524     2.706
28    k4-db54 39 1.487 3.593 0.645 5.475 9.723     0.179     1.524     2.706
29    k5-db01 41 1.146 3.593 0.645 5.475 9.723     0.179     1.524     2.706
30    k5-db02 37 1.432 3.593 0.645 5.475 9.723     0.179     1.524     2.706
31    k5-db03 37 1.297 3.593 0.645 5.475 9.723     0.179     1.524     2.706
32    k5-db07 41 1.829 3.593 0.645 5.475 9.723     0.179     1.524     2.706
33    k5-db08 38 1.000 3.593 0.645 5.475 9.723     0.179     1.524     2.706
34    k5-db31 41 1.415 3.593 0.645 5.475 9.723     0.179     1.524     2.706
35    k5-db54 39 1.744 3.593 0.645 5.475 9.723     0.179     1.524     2.706
> 
> ## Not run: 
> ##D # Model 4: Rater effects in SDT
> ##D mod4 <- rm.sdt( dat[ , paste0( "k",1:5) ] , rater=dat$rater , 
> ##D             pid=dat$idstud , est.c.rater="r" , est.d.rater="r" , maxiter=15)
> ##D summary(mod4)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: HRM-SDT data.ratings3
> ##D #############################################################################
> ##D 
> ##D data(data.ratings3)
> ##D dat <- data.ratings3
> ##D dat <- dat[ dat$rater < 814 , ]
> ##D psych::describe(dat)
> ##D             
> ##D # Model 1: item- and rater-specific effects
> ##D mod1 <- rm.sdt( dat[ , paste0( "crit",c(2:4)) ] , rater=dat$rater , 
> ##D             pid=dat$idstud , est.c.rater="a" , est.d.rater="a" , maxiter=10)
> ##D summary(mod1)
> ##D plot(mod1)
> ##D 
> ##D # Model 2: Differing number of categories per variable
> ##D mod2 <- rm.sdt( dat[ , paste0( "crit",c(2:4,6)) ] , rater=dat$rater , 
> ##D             pid=dat$idstud , est.c.rater="a" , est.d.rater="a" , maxiter=10)
> ##D summary(mod2)
> ##D plot(mod2)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 3: Hierarchical rater model with discrete skill spaces
> ##D #############################################################################
> ##D 
> ##D data(data.ratings3)
> ##D dat <- data.ratings3
> ##D dat <- dat[ dat$rater < 814 , ]
> ##D psych::describe(dat)
> ##D 
> ##D # Model 1: Discrete theta skill space with values of 0,1,2 and 3
> ##D mod1 <- rm.sdt( dat[ , paste0( "crit",c(2:4)) ] , theta.k = 0:3 , rater=dat$rater , 
> ##D             pid=dat$idstud , est.c.rater="a" , est.d.rater="a" , skillspace="discrete" ,
> ##D             maxiter=20)
> ##D summary(mod1)
> ##D plot(mod1)
> ##D 
> ##D # Model 2: Modelling of one item by using a discrete skill space and
> ##D #          fixed item parameters
> ##D 
> ##D # fixed tau and a parameters
> ##D tau.item.fixed <- cbind( 1, 1:3,  100*cumsum( c( 0.5, 1.5, 2.5)) )
> ##D a.item.fixed <- cbind( 1, 100 )
> ##D # fit HRM-SDT 
> ##D mod2 <- rm.sdt( dat[ , "crit2" , drop=FALSE] , theta.k = 0:3 , rater=dat$rater , 
> ##D             tau.item.fixed=tau.item.fixed ,a.item.fixed=a.item.fixed, pid=dat$idstud, 
> ##D             est.c.rater="a", est.d.rater="a", skillspace="discrete", maxiter=20)
> ##D summary(mod2)            
> ##D plot(mod2)
> ## End(Not run)            
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rm.sdt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sia.sirt")
> ### * sia.sirt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sia.sirt
> ### Title: Statistical Implicative Analysis (SIA)
> ### Aliases: sia.sirt
> ### Keywords: Statistical implicative analysis Graphical modeling
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: SIA for data.read
> #############################################################################
> 
> data(data.read)
> dat <- data.read
> 
> res <- sia.sirt(dat , significance=.85 )
> 
> #*** plot results with igraph package
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> plot( res$igraph.obj ) # , vertex.shape="rectangle" , vertex.size=30 )
> 
> #*** plot results with qgraph package
> library(qgraph)
> qgraph::qgraph( res$adj.matrix )
> 
> ## Not run: 
> ##D #*** plot results with Rgraphviz package
> ##D # Rgraphviz can only be obtained from Bioconductor
> ##D # If it should be downloaded, select TRUE for the following lines
> ##D if (FALSE){
> ##D      source("http://bioconductor.org/biocLite.R")
> ##D      biocLite("Rgraphviz")
> ##D             }
> ##D # define graph
> ##D grmatrix <- res$graph.matr
> ##D res.graph <- new("graphNEL", nodes= res$graph.edges , edgemode="directed")
> ##D # add edges
> ##D RR <- nrow(grmatrix)
> ##D for (rr in 1:RR){
> ##D     res.graph <- Rgraphviz::addEdge(grmatrix[rr,1], grmatrix[rr,2], res.graph , 1)
> ##D                     }                                                          
> ##D # define cex sizes and shapes
> ##D V <- length(res$graph.edges)
> ##D size2 <- rep(16,V)
> ##D shape2 <- rep("rectangle" , V )
> ##D names(shape2) <- names(size2) <- res$graph.edges
> ##D # plot graph
> ##D Rgraphviz::plot( res.graph, nodeAttrs =list("fontsize" = size2 , "shape" = shape2) )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sia.sirt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:qgraph’, ‘package:igraph’

> nameEx("sim.qm.ramsay")
> ### * sim.qm.ramsay
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sim.qm.ramsay
> ### Title: Simulate from Ramsay's Quotient Model
> ### Aliases: sim.qm.ramsay
> ### Keywords: Simulating IRT models
> 
> ### ** Examples
> 
> #############################################################################
> # SIMULATED EXAMPLE 1: Estimate Ramsay Quotient Model with rasch.mml2
> #############################################################################
> 		
> set.seed(657)
> # simulate data according to the Ramsay model
> N <- 1000       # persons
> I <- 11         # items
> theta <- exp( rnorm( N ) )  # person ability
> b <- exp( seq(-2,2,len=I))  # item difficulty
> K <- rep( 3 , I )           # K parameter (=> guessing)
> 
> # apply simulation function
> dat <- sim.qm.ramsay( theta , b , K )
> 
> #***
> # analysis
> mmliter <- 50       # maximum number of iterations
> I <- ncol(dat)
> fixed.K <- rep( 3 , I ) 
> 
> # Ramsay QM with fixed K parameter (K=3 in fixed.K specification)
> mod1 <- rasch.mml2( dat , mmliter = mmliter , irtmodel = "ramsay.qm", 
+               fixed.K = fixed.K )                  
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Quotient Model (Ramsay, 1989) 
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:28 
   Deviance = 11906.8339
    Maximum b parameter change =  0.439097  
...........................................................
Iteration 2     2015-06-13 13:24:28 
   Deviance = 11797.3633 | Deviance change = 109.470624
    Maximum b parameter change =  0.173556  
...........................................................
Iteration 3     2015-06-13 13:24:28 
   Deviance = 11772.4611 | Deviance change = 24.902259
    Maximum b parameter change =  0.08181  
...........................................................
Iteration 4     2015-06-13 13:24:28 
   Deviance = 11761.1996 | Deviance change = 11.261436
    Maximum b parameter change =  0.046442  
...........................................................
Iteration 5     2015-06-13 13:24:28 
   Deviance = 11754.9093 | Deviance change = 6.290337
    Maximum b parameter change =  0.030363  
...........................................................
Iteration 6     2015-06-13 13:24:28 
   Deviance = 11751.2677 | Deviance change = 3.641563
    Maximum b parameter change =  0.021566  
...........................................................
Iteration 7     2015-06-13 13:24:28 
   Deviance = 11749.1522 | Deviance change = 2.115501
    Maximum b parameter change =  0.015963  
...........................................................
Iteration 8     2015-06-13 13:24:28 
   Deviance = 11747.9246 | Deviance change = 1.227647
    Maximum b parameter change =  0.011994  
...........................................................
Iteration 9     2015-06-13 13:24:28 
   Deviance = 11747.2131 | Deviance change = 0.711484
    Maximum b parameter change =  0.009069  
...........................................................
Iteration 10     2015-06-13 13:24:28 
   Deviance = 11746.8011 | Deviance change = 0.41195
    Maximum b parameter change =  0.006877  
...........................................................
Iteration 11     2015-06-13 13:24:28 
   Deviance = 11746.5628 | Deviance change = 0.238389
    Maximum b parameter change =  0.00522  
...........................................................
Iteration 12     2015-06-13 13:24:28 
   Deviance = 11746.4248 | Deviance change = 0.137928
    Maximum b parameter change =  0.003964  
...........................................................
Iteration 13     2015-06-13 13:24:28 
   Deviance = 11746.345 | Deviance change = 0.079819
    Maximum b parameter change =  0.00301  
...........................................................
Iteration 14     2015-06-13 13:24:28 
   Deviance = 11746.2988 | Deviance change = 0.046217
    Maximum b parameter change =  0.002286  
...........................................................
Iteration 15     2015-06-13 13:24:28 
   Deviance = 11746.272 | Deviance change = 0.026787
    Maximum b parameter change =  0.001735  
...........................................................
Iteration 16     2015-06-13 13:24:28 
   Deviance = 11746.2565 | Deviance change = 0.015549
    Maximum b parameter change =  0.001318  
...........................................................
Iteration 17     2015-06-13 13:24:28 
   Deviance = 11746.2474 | Deviance change = 0.009044
    Maximum b parameter change =  0.001  
...........................................................
Iteration 18     2015-06-13 13:24:28 
   Deviance = 11746.2421 | Deviance change = 0.005275
    Maximum b parameter change =  0.000759  
...........................................................
Iteration 19     2015-06-13 13:24:28 
   Deviance = 11746.2391 | Deviance change = 0.003088
    Maximum b parameter change =  0.000576  
...........................................................
Iteration 20     2015-06-13 13:24:28 
   Deviance = 11746.2372 | Deviance change = 0.001816
    Maximum b parameter change =  0.000437  
...........................................................
Iteration 21     2015-06-13 13:24:28 
   Deviance = 11746.2362 | Deviance change = 0.001074
    Maximum b parameter change =  0.000332  
...........................................................
Iteration 22     2015-06-13 13:24:28 
   Deviance = 11746.2355 | Deviance change = 0.00064
    Maximum b parameter change =  0.000252  
...........................................................
Iteration 23     2015-06-13 13:24:28 
   Deviance = 11746.2351 | Deviance change = 0.000385
    Maximum b parameter change =  0.000191  
...........................................................
Iteration 24     2015-06-13 13:24:28 
   Deviance = 11746.2349 | Deviance change = 0.000234
    Maximum b parameter change =  0.000145  
...........................................................
Iteration 25     2015-06-13 13:24:28 
   Deviance = 11746.2348 | Deviance change = 0.000145
    Maximum b parameter change =  0.00011  
...........................................................
Iteration 26     2015-06-13 13:24:28 
   Deviance = 11746.2347 | Deviance change = 9.1e-05
    Maximum b parameter change =  8.3e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:28 
End: 2015-06-13 13:24:28 
Time difference of 0.156064 secs
Difference: 0.156064 
------------------------------------------------------------
> summary(mod1)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:28 
Time difference of 0.156064 secs
Computation time: 0.156064 

Call:
rasch.mml2(dat = dat, mmliter = mmliter, fixed.K = fixed.K, irtmodel = "ramsay.qm")

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Quotient Model (Ramsay, 1989) 
------------------------------------------------------------
Number of iterations = 26 
Deviance =  11746.23  | Log Likelihood =  -5873.12 
Number of persons =  1000 
Number of estimated parameters =  12 
AIC  =  11770.23  | penalty = 24    | AIC = -2*LL + 2*p  
AICc =  11770.55  | penalty = 24.32    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  11829.13  | penalty = 82.89    | BIC = -2*LL + log(n)*p  
CAIC =  11841.13  | penalty = 94.89   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 1 
 Skewness= 0      Note: log theta distribution is parametrized!
Item Difficulty Distribution ( 11  Items )
 Mean= -0.061  SD= 1.324 
Distribution of Items Administered ( 11  Items )
 Mean= 11  SD= 0 

EAP Reliability: 0.715
------------------------------------------------------------
Item Parameter 
   item    N     p K est.K     b  log_b est.b guess.K emp.discrim
1   I01 1000 0.944 3     0 0.115 -2.167     1    0.25       0.455
2   I02 1000 0.889 3     0 0.184 -1.695     2    0.25       0.549
3   I03 1000 0.816 3     0 0.287 -1.249     3    0.25       0.567
4   I04 1000 0.730 3     0 0.433 -0.837     4    0.25       0.591
5   I05 1000 0.632 3     0 0.673 -0.395     5    0.25       0.551
6   I06 1000 0.540 3     0 1.016  0.016     6    0.25       0.498
7   I07 1000 0.469 3     0 1.546  0.436     7    0.25       0.394
8   I08 1000 0.402 3     0 2.209  0.792     8    0.25       0.361
9   I09 1000 0.378 3     0 2.982  1.093     9    0.25       0.239
10  I10 1000 0.315 3     0 5.091  1.628    10    0.25       0.161
11  I11 1000 0.297 3     0 5.515  1.707    11    0.25       0.181
> 
> # Ramsay QM with joint estimated K parameters
> mod2 <- rasch.mml2( dat , mmliter = mmliter , irtmodel = "ramsay.qm" , 
+              est.K = rep(1,I)  )                  
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Quotient Model (Ramsay, 1989) 
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:28 
   Deviance = 11906.8339
    Maximum b parameter change =  0.439097  
    Maximum K parameter change = 0.003956
...........................................................
Iteration 2     2015-06-13 13:24:28 
   Deviance = 11792.1203 | Deviance change = 114.713648
    Maximum b parameter change =  0.152551  
    Maximum K parameter change = 0.001308
...........................................................
Iteration 3     2015-06-13 13:24:28 
   Deviance = 11768.8095 | Deviance change = 23.310806
    Maximum b parameter change =  0.065516  
    Maximum K parameter change = 0.000216
...........................................................
Iteration 4     2015-06-13 13:24:28 
   Deviance = 11759.1955 | Deviance change = 9.614015
    Maximum b parameter change =  0.03756  
    Maximum K parameter change = 0.000182
...........................................................
Iteration 5     2015-06-13 13:24:28 
   Deviance = 11753.9871 | Deviance change = 5.208426
    Maximum b parameter change =  0.026672  
    Maximum K parameter change = 0.00033
...........................................................
Iteration 6     2015-06-13 13:24:28 
   Deviance = 11750.9568 | Deviance change = 3.030208
    Maximum b parameter change =  0.021181  
    Maximum K parameter change = 0.000381
...........................................................
Iteration 7     2015-06-13 13:24:28 
   Deviance = 11749.1486 | Deviance change = 1.808295
    Maximum b parameter change =  0.017413  
    Maximum K parameter change = 0.000386
...........................................................
Iteration 8     2015-06-13 13:24:28 
   Deviance = 11748.0522 | Deviance change = 1.096388
    Maximum b parameter change =  0.014457  
    Maximum K parameter change = 0.00037
...........................................................
Iteration 9     2015-06-13 13:24:28 
   Deviance = 11747.3784 | Deviance change = 0.67376
    Maximum b parameter change =  0.012036  
    Maximum K parameter change = 0.000342
...........................................................
Iteration 10     2015-06-13 13:24:28 
   Deviance = 11746.9592 | Deviance change = 0.419244
    Maximum b parameter change =  0.010024  
    Maximum K parameter change = 0.000308
...........................................................
Iteration 11     2015-06-13 13:24:28 
   Deviance = 11746.6952 | Deviance change = 0.26394
    Maximum b parameter change =  0.008347  
    Maximum K parameter change = 0.000273
...........................................................
Iteration 12     2015-06-13 13:24:28 
   Deviance = 11746.5272 | Deviance change = 0.167994
    Maximum b parameter change =  0.006947  
    Maximum K parameter change = 0.000239
...........................................................
Iteration 13     2015-06-13 13:24:28 
   Deviance = 11746.4192 | Deviance change = 0.108011
    Maximum b parameter change =  0.005778  
    Maximum K parameter change = 0.000207
...........................................................
Iteration 14     2015-06-13 13:24:28 
   Deviance = 11746.3491 | Deviance change = 0.070091
    Maximum b parameter change =  0.004803  
    Maximum K parameter change = 0.000177
...........................................................
Iteration 15     2015-06-13 13:24:28 
   Deviance = 11746.3033 | Deviance change = 0.045867
    Maximum b parameter change =  0.003991  
    Maximum K parameter change = 0.000151
...........................................................
Iteration 16     2015-06-13 13:24:28 
   Deviance = 11746.273 | Deviance change = 0.030244
    Maximum b parameter change =  0.003314  
    Maximum K parameter change = 0.000129
...........................................................
Iteration 17     2015-06-13 13:24:28 
   Deviance = 11746.2529 | Deviance change = 0.020079
    Maximum b parameter change =  0.002751  
    Maximum K parameter change = 0.000109
...........................................................
Iteration 18     2015-06-13 13:24:28 
   Deviance = 11746.2395 | Deviance change = 0.013414
    Maximum b parameter change =  0.002283  
    Maximum K parameter change = 9.2e-05
...........................................................
Iteration 19     2015-06-13 13:24:28 
   Deviance = 11746.2305 | Deviance change = 0.009013
    Maximum b parameter change =  0.001894  
    Maximum K parameter change = 7.7e-05
...........................................................
Iteration 20     2015-06-13 13:24:28 
   Deviance = 11746.2244 | Deviance change = 0.006087
    Maximum b parameter change =  0.00157  
    Maximum K parameter change = 6.4e-05
...........................................................
Iteration 21     2015-06-13 13:24:28 
   Deviance = 11746.2203 | Deviance change = 0.004132
    Maximum b parameter change =  0.001302  
    Maximum K parameter change = 5.4e-05
...........................................................
Iteration 22     2015-06-13 13:24:28 
   Deviance = 11746.2175 | Deviance change = 0.002818
    Maximum b parameter change =  0.001079  
    Maximum K parameter change = 4.5e-05
...........................................................
Iteration 23     2015-06-13 13:24:28 
   Deviance = 11746.2155 | Deviance change = 0.001931
    Maximum b parameter change =  0.000895  
    Maximum K parameter change = 3.8e-05
...........................................................
Iteration 24     2015-06-13 13:24:28 
   Deviance = 11746.2142 | Deviance change = 0.001329
    Maximum b parameter change =  0.000741  
    Maximum K parameter change = 3.1e-05
...........................................................
Iteration 25     2015-06-13 13:24:28 
   Deviance = 11746.2133 | Deviance change = 0.000919
    Maximum b parameter change =  0.000614  
    Maximum K parameter change = 2.6e-05
...........................................................
Iteration 26     2015-06-13 13:24:28 
   Deviance = 11746.2127 | Deviance change = 0.000639
    Maximum b parameter change =  0.000509  
    Maximum K parameter change = 2.2e-05
...........................................................
Iteration 27     2015-06-13 13:24:28 
   Deviance = 11746.2122 | Deviance change = 0.000447
    Maximum b parameter change =  0.000422  
    Maximum K parameter change = 1.8e-05
...........................................................
Iteration 28     2015-06-13 13:24:28 
   Deviance = 11746.2119 | Deviance change = 0.000314
    Maximum b parameter change =  0.000349  
    Maximum K parameter change = 1.5e-05
...........................................................
Iteration 29     2015-06-13 13:24:28 
   Deviance = 11746.2117 | Deviance change = 0.000222
    Maximum b parameter change =  0.000289  
    Maximum K parameter change = 1.2e-05
...........................................................
Iteration 30     2015-06-13 13:24:28 
   Deviance = 11746.2115 | Deviance change = 0.000158
    Maximum b parameter change =  0.00024  
    Maximum K parameter change = 1e-05
...........................................................
Iteration 31     2015-06-13 13:24:28 
   Deviance = 11746.2114 | Deviance change = 0.000114
    Maximum b parameter change =  0.000198  
    Maximum K parameter change = 9e-06
...........................................................
Iteration 32     2015-06-13 13:24:28 
   Deviance = 11746.2113 | Deviance change = 8.2e-05
    Maximum b parameter change =  0.000164  
    Maximum K parameter change = 7e-06
...........................................................
Iteration 33     2015-06-13 13:24:28 
   Deviance = 11746.2113 | Deviance change = 6e-05
    Maximum b parameter change =  0.000136  
    Maximum K parameter change = 6e-06
...........................................................
Iteration 34     2015-06-13 13:24:28 
   Deviance = 11746.2112 | Deviance change = 4.4e-05
    Maximum b parameter change =  0.000113  
    Maximum K parameter change = 5e-06
...........................................................
Iteration 35     2015-06-13 13:24:28 
   Deviance = 11746.2112 | Deviance change = 3.3e-05
    Maximum b parameter change =  9.3e-05  
    Maximum K parameter change = 4e-06
------------------------------------------------------------
Start: 2015-06-13 13:24:28 
End: 2015-06-13 13:24:28 
Time difference of 0.285569 secs
Difference: 0.285569 
------------------------------------------------------------
> summary(mod2)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:28 
Time difference of 0.285569 secs
Computation time: 0.285569 

Call:
rasch.mml2(dat = dat, mmliter = mmliter, est.K = rep(1, I), irtmodel = "ramsay.qm")

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Quotient Model (Ramsay, 1989) 
------------------------------------------------------------
Number of iterations = 35 
Deviance =  11746.21  | Log Likelihood =  -5873.11 
Number of persons =  1000 
Number of estimated parameters =  13 
AIC  =  11772.21  | penalty = 26    | AIC = -2*LL + 2*p  
AICc =  11772.58  | penalty = 26.37    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  11836.01  | penalty = 89.8    | BIC = -2*LL + log(n)*p  
CAIC =  11849.01  | penalty = 102.8   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 1 
 Skewness= 0      Note: log theta distribution is parametrized!
Item Difficulty Distribution ( 11  Items )
 Mean= -0.068  SD= 1.319 
Distribution of Items Administered ( 11  Items )
 Mean= 11  SD= 0 

EAP Reliability: 0.716
------------------------------------------------------------
Item Parameter 
   item    N     p     K est.K     b  log_b est.b guess.K emp.discrim
1   I01 1000 0.944 3.022     1 0.114 -2.168     1   0.249       0.455
2   I02 1000 0.889 3.022     1 0.183 -1.697     2   0.249       0.550
3   I03 1000 0.816 3.022     1 0.286 -1.251     3   0.249       0.566
4   I04 1000 0.730 3.022     1 0.431 -0.841     4   0.249       0.591
5   I05 1000 0.632 3.022     1 0.670 -0.400     5   0.249       0.552
6   I06 1000 0.540 3.022     1 1.010  0.010     6   0.249       0.498
7   I07 1000 0.469 3.022     1 1.535  0.429     7   0.249       0.394
8   I08 1000 0.402 3.022     1 2.189  0.784     8   0.249       0.362
9   I09 1000 0.378 3.022     1 2.951  1.082     9   0.249       0.238
10  I10 1000 0.315 3.022     1 5.018  1.613    10   0.249       0.161
11  I11 1000 0.297 3.022     1 5.431  1.692    11   0.249       0.182
> 
> ## Not run: 
> ##D # Ramsay QM with itemwise estimated K parameters
> ##D mod3 <- rasch.mml2( dat , mmliter = mmliter , irtmodel = "ramsay.qm" ,  
> ##D               est.K = 1:I  )                  
> ##D summary(mod3)
> ##D 
> ##D # Rasch model
> ##D mod4 <- rasch.mml2( dat )
> ##D summary(mod4)
> ##D 
> ##D # generalized logistic model
> ##D mod5 <- rasch.mml2( dat , est.alpha = TRUE , mmliter=mmliter)
> ##D summary(mod5) 
> ##D 
> ##D # 2PL model
> ##D mod6 <- rasch.mml2( dat , est.a = rep(1,I) )
> ##D summary(mod6) 
> ##D 
> ##D # Difficulty + Guessing (b+c) Model
> ##D mod7 <- rasch.mml2( dat , est.c = rep(1,I) )
> ##D summary(mod7) 
> ##D 
> ##D # estimate separate guessing (c) parameters
> ##D mod8 <- rasch.mml2( dat , est.c = 1:I  )
> ##D summary(mod8)
> ##D 
> ##D #*** estimate Model 1 with user defined function in mirt package
> ##D 
> ##D # create user defined function for Ramsay's quotient model
> ##D name <- 'ramsayqm'
> ##D par <- c("K" = 3 , "b" = 1 )
> ##D est <- c(TRUE, TRUE)
> ##D P.ramsay <- function(par,Theta){
> ##D      eps <- .01
> ##D      K <- par[1]
> ##D      b <- par[2]
> ##D      num <- exp( exp( Theta[,1] ) / b )
> ##D      denom <- K + num
> ##D      P1 <- num / denom
> ##D      P1 <- eps + ( 1 - 2*eps ) * P1 
> ##D      cbind(1-P1, P1)
> ##D }
> ##D 
> ##D # create item response function
> ##D ramsayqm <- mirt::createItem(name, par=par, est=est, P=P.ramsay)
> ##D # define parameters to be estimated
> ##D mod1m.pars <- mirt::mirt(dat, 1, rep( "ramsayqm",I) , 
> ##D                    customItems=list("ramsayqm"=ramsayqm), pars = "values")                
> ##D mod1m.pars[ mod1m.pars$name == "K" , "est" ] <- FALSE
> ##D # define Theta design matrix
> ##D Theta <- matrix( seq(-3,3,len=10) , ncol=1)
> ##D # estimate model
> ##D mod1m <- mirt::mirt(dat, 1, rep( "ramsayqm",I) , customItems=list("ramsayqm"=ramsayqm), 
> ##D                pars = mod1m.pars , verbose=TRUE , 
> ##D                technical = list( customTheta=Theta , NCYCLES=50) 
> ##D                 )
> ##D print(mod1m)                
> ##D summary(mod1m)
> ##D cmod1m <- mirt.wrapper.coef( mod1m )$coef
> ##D # compare simulated and estimated values
> ##D dfr <- cbind( b , cmod1m$b , exp(mod1$item$b ) ) 
> ##D colnames(dfr) <- c("simulated" , "mirt" , "sirt_rasch.mml2")
> ##D round( dfr , 2 )
> ##D   ##      simulated mirt sirt_rasch.mml2
> ##D   ## [1,]      0.14 0.11            0.11
> ##D   ## [2,]      0.20 0.17            0.18
> ##D   ## [3,]      0.30 0.27            0.29
> ##D   ## [4,]      0.45 0.42            0.43
> ##D   ## [5,]      0.67 0.65            0.67
> ##D   ## [6,]      1.00 1.00            1.01
> ##D   ## [7,]      1.49 1.53            1.54
> ##D   ## [8,]      2.23 2.21            2.21
> ##D   ## [9,]      3.32 3.00            2.98
> ##D   ##[10,]      4.95 5.22            5.09
> ##D   ##[11,]      7.39 5.62            5.51  
> ## End(Not run) 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sim.qm.ramsay", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sim.rasch.dep")
> ### * sim.rasch.dep
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sim.rasch.dep
> ### Title: Simulation of the Rasch Model with Locally Dependent Responses
> ### Aliases: sim.rasch.dep
> ### Keywords: Simulating IRT models
> 
> ### ** Examples
> 
> #############################################################################
> # SIMULATED EXAMPLE 1: 11 Items: 2 itemclusters with 2 resp. 3 dependent items
> #             and 6 independent items
> #############################################################################	
> 
> set.seed(7654)
> I <- 11                             # number of items
> n <- 1500                           # number of persons
> b <- seq(-2,2, len=I)               # item difficulties
> theta <- rnorm( n , sd = 1 )        # person abilities
> # itemcluster
> itemcluster <- rep(0,I)
> itemcluster[ c(3,5)] <- 1
> itemcluster[c(2,4,9)] <- 2
> # residual correlations
> rho <- c( .7 , .5 )
> 
> # simulate data
> dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> colnames(dat) <- paste("I" , seq(1,ncol(dat)) , sep="")
> 
> # estimate Rasch copula model
> mod1 <- rasch.copula2( dat , itemcluster = itemcluster )
-----------------------------------------------------------------
Marginal Maximum Likelihood Estimation 
Raschtype Copula Model with generalized logistic link function: Estimation of alpha1 and alpha2 
Function 'rasch.copula2'
-----------------------------------------------------------------
---------------------------------------------------------------------- 
MML EM Iter. 1        |**********|  2015-06-13 13:24:28  
 Estimation of b:     |----------|     max. parm. change 0.30771 
 Estimation of a:     |----------|     max. parm. change 0.03091 
 Estimation of delta: |----------|     max. parm. change 0.19802 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17477.52  | Deviance change =  -17476.52 | max. parm. change =  0.307707  
---------------------------------------------------------------------- 
MML EM Iter. 2        |**********|  2015-06-13 13:24:28  0.0327 secs
 Estimation of b:     |----------|     max. parm. change 0.08088 
 Estimation of a:     |----------|     max. parm. change 0.00306 
 Estimation of delta: |----------|     max. parm. change 0.04711 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17410.1  | Deviance change =  67.4222 | max. parm. change =  0.080882  
---------------------------------------------------------------------- 
MML EM Iter. 3        |**********|  2015-06-13 13:24:28  0.0334 secs
 Estimation of b:     |----------|     max. parm. change 0.03151 
 Estimation of a:     |----------|     max. parm. change 0.00171 
 Estimation of delta: |----------|     max. parm. change 0.00807 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.88  | Deviance change =  2.2179 | max. parm. change =  0.03151  
---------------------------------------------------------------------- 
MML EM Iter. 4        |**********|  2015-06-13 13:24:28  0.0331 secs
 Estimation of b:     |----------|     max. parm. change 0.01609 
 Estimation of a:     |----------|     max. parm. change 0.00227 
 Estimation of delta: |----------|     max. parm. change 0.00281 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.7  | Deviance change =  0.181 | max. parm. change =  0.016087  
---------------------------------------------------------------------- 
MML EM Iter. 5        |**********|  2015-06-13 13:24:28  0.0333 secs
 Estimation of b:     |----------|     max. parm. change 0.00662 
 Estimation of a:     |----------|     max. parm. change 0.00158 
 Estimation of delta: |----------|     max. parm. change 0.00105 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.64  | Deviance change =  0.0567 | max. parm. change =  0.006619  
---------------------------------------------------------------------- 
MML EM Iter. 6        |**********|  2015-06-13 13:24:28  0.0412 secs
 Estimation of b:     |----------|     max. parm. change 0.00471 
 Estimation of a:     |----------|     max. parm. change 0.00142 
 Estimation of delta: |----------|     max. parm. change 0.00041 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.61  | Deviance change =  0.0304 | max. parm. change =  0.004713  
---------------------------------------------------------------------- 
MML EM Iter. 7        |**********|  2015-06-13 13:24:28  0.0349 secs
 Estimation of b:     |----------|     max. parm. change 0.00288 
 Estimation of a:     |----------|     max. parm. change 0.00113 
 Estimation of delta: |----------|     max. parm. change 0.00011 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.59  | Deviance change =  0.0187 | max. parm. change =  0.002883  
---------------------------------------------------------------------- 
MML EM Iter. 8        |**********|  2015-06-13 13:24:29  0.0352 secs
 Estimation of b:     |----------|     max. parm. change 0.0023 
 Estimation of a:     |----------|     max. parm. change 0.00094 
 Estimation of delta: |----------|     max. parm. change 8e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.58  | Deviance change =  0.0121 | max. parm. change =  0.002296  
---------------------------------------------------------------------- 
MML EM Iter. 9        |**********|  2015-06-13 13:24:29  0.0367 secs
 Estimation of b:     |----------|     max. parm. change 0.0019 
 Estimation of a:     |----------|     max. parm. change 0.00077 
 Estimation of delta: |----------|     max. parm. change 5e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.57  | Deviance change =  0.0079 | max. parm. change =  0.001895  
---------------------------------------------------------------------- 
MML EM Iter. 10       |**********|  2015-06-13 13:24:29  0.0344 secs
 Estimation of b:     |----------|     max. parm. change 0.00154 
 Estimation of a:     |----------|     max. parm. change 0.00063 
 Estimation of delta: |----------|     max. parm. change 4e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.57  | Deviance change =  0.0052 | max. parm. change =  0.001538  
---------------------------------------------------------------------- 
MML EM Iter. 11       |**********|  2015-06-13 13:24:29  0.0346 secs
 Estimation of b:     |----------|     max. parm. change 0.00126 
 Estimation of a:     |----------|     max. parm. change 0.00052 
 Estimation of delta: |----------|     max. parm. change 3e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.56  | Deviance change =  0.0035 | max. parm. change =  0.001261  
---------------------------------------------------------------------- 
MML EM Iter. 12       |**********|  2015-06-13 13:24:29  0.0412 secs
 Estimation of b:     |----------|     max. parm. change 0.00102 
 Estimation of a:     |----------|     max. parm. change 0.00043 
 Estimation of delta: |----------|     max. parm. change 3e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.56  | Deviance change =  0.0023 | max. parm. change =  0.00102  
---------------------------------------------------------------------- 
MML EM Iter. 13       |**********|  2015-06-13 13:24:29  0.0333 secs
 Estimation of b:     |----------|     max. parm. change 0.00083 
 Estimation of a:     |----------|     max. parm. change 0.00035 
 Estimation of delta: |----------|     max. parm. change 2e-05 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17407.56  | Deviance change =  0.0015 | max. parm. change =  0.000835  
---------------------------------------------------------------------------------------------------------- 
Parameter summary
    item    N     p      b est.b     a est.a thresh itemcluster delta est.delta
I1    I1 1500 0.856 -2.075     1 1.016     1 -2.109           0 0.000         0
I2    I2 1500 0.798 -1.629     2 1.016     1 -1.655           2 0.570         2
I3    I3 1500 0.725 -1.153     3 1.016     1 -1.171           1 0.693         1
I4    I4 1500 0.666 -0.794     4 1.016     1 -0.807           2 0.570         2
I5    I5 1500 0.594 -0.457     5 1.016     1 -0.465           1 0.693         1
I6    I6 1500 0.507 -0.034     6 1.016     1 -0.035           0 0.000         0
I7    I7 1500 0.440  0.286     7 1.016     1  0.291           0 0.000         0
I8    I8 1500 0.329  0.845     8 1.016     1  0.859           0 0.000         0
I9    I9 1500 0.259  1.237     9 1.016     1  1.257           2 0.570         2
I10  I10 1500 0.227  1.448    10 1.016     1  1.472           0 0.000         0
I11  I11 1500 0.162  1.923    11 1.016     1  1.954           0 0.000         0

Dependency parameters
  cluster delta est.delta copula.type    items
1       1 0.693         1  bound.mixt    I3-I5
2       2 0.570         2  bound.mixt I2-I4-I9

EAP Reliability: 0.616 

Generalized logistic link function
alpha1= 0  alpha2= 0  

-----------------------------------------------------------------
Start: 2015-06-13 13:24:28 
End: 2015-06-13 13:24:29 
Time difference of 0.5005741 secs
Difference: 0.5005741 
-----------------------------------------------------------------
> summary(mod1)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 
Date of Analysis: 2015-06-13 13:24:29 
Time difference of 0.5005741 secs
Computation Time: 0.5005741 

Marginal Maximum Likelihood Estimation 
Raschtype Copula Model with generalized logistic link function: Estimation of alpha1 and alpha2 
Function rasch.copula2
alpha1= 0  alpha2= 0  
-----------------------------------------------------------------
Deviance =  17407.56 
Number of persons =  1500  ( 433  Response Patterns)
Number of estimated parameters =  14 
Number of iterations =  13 
AIC  =  17435.56  | penalty = 28 
AICc =  17435.84  | penalty = 28.28 (bias corrected AIC)
BIC  =  17509.94  | penalty = 102.39 
CAIC =  17523.94  | penalty = 116.39 (consistent AIC) 

Trait Distribution ( 21  Knots )
 Mean= 0  SD= 1 

EAP Reliability: 0.616 

-----------------------------------------------------------------
Item Parameter 
    item    N     p      b est.b     a est.a thresh itemcluster delta est.delta
I1    I1 1500 0.856 -2.075     1 1.016     1 -2.109           0 0.000         0
I2    I2 1500 0.798 -1.629     2 1.016     1 -1.655           2 0.570         2
I3    I3 1500 0.725 -1.153     3 1.016     1 -1.171           1 0.693         1
I4    I4 1500 0.666 -0.794     4 1.016     1 -0.807           2 0.570         2
I5    I5 1500 0.594 -0.457     5 1.016     1 -0.465           1 0.693         1
I6    I6 1500 0.507 -0.034     6 1.016     1 -0.035           0 0.000         0
I7    I7 1500 0.440  0.286     7 1.016     1  0.291           0 0.000         0
I8    I8 1500 0.329  0.845     8 1.016     1  0.859           0 0.000         0
I9    I9 1500 0.259  1.237     9 1.016     1  1.257           2 0.570         2
I10  I10 1500 0.227  1.448    10 1.016     1  1.472           0 0.000         0
I11  I11 1500 0.162  1.923    11 1.016     1  1.954           0 0.000         0

Dependency parameters
  cluster delta est.delta copula.type    items
1       1 0.693         1  bound.mixt    I3-I5
2       2 0.570         2  bound.mixt I2-I4-I9
> 
> # compare result with Rasch model estimation in rasch.copula
> # delta must be set to zero
> mod2 <- rasch.copula2( dat , itemcluster = itemcluster , delta = c(0,0) ,
+             est.delta = c(0,0)  )
-----------------------------------------------------------------
Marginal Maximum Likelihood Estimation 
Raschtype Copula Model with generalized logistic link function: Estimation of alpha1 and alpha2 
Function 'rasch.copula2'
-----------------------------------------------------------------
---------------------------------------------------------------------- 
MML EM Iter. 1        |**********|  2015-06-13 13:24:29  
 Estimation of b:     |----------|     max. parm. change 0.3124 
 Estimation of a:     |----------|     max. parm. change 0.04067 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17926.6  | Deviance change =  -17925.6 | max. parm. change =  0.312402  
---------------------------------------------------------------------- 
MML EM Iter. 2        |**********|  2015-06-13 13:24:29  0.0241 secs
 Estimation of b:     |----------|     max. parm. change 0.01646 
 Estimation of a:     |----------|     max. parm. change 0.01592 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17918.57  | Deviance change =  8.0262 | max. parm. change =  0.01646  
---------------------------------------------------------------------- 
MML EM Iter. 3        |**********|  2015-06-13 13:24:29  0.0247 secs
 Estimation of b:     |----------|     max. parm. change 0.02392 
 Estimation of a:     |----------|     max. parm. change 0.0119 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17916.92  | Deviance change =  1.6512 | max. parm. change =  0.02392  
---------------------------------------------------------------------- 
MML EM Iter. 4        |**********|  2015-06-13 13:24:29  0.0316 secs
 Estimation of b:     |----------|     max. parm. change 0.01809 
 Estimation of a:     |----------|     max. parm. change 0.00907 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17916  | Deviance change =  0.9226 | max. parm. change =  0.018092  
---------------------------------------------------------------------- 
MML EM Iter. 5        |**********|  2015-06-13 13:24:29  0.0271 secs
 Estimation of b:     |----------|     max. parm. change 0.01361 
 Estimation of a:     |----------|     max. parm. change 0.00692 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17915.47  | Deviance change =  0.5277 | max. parm. change =  0.013612  
---------------------------------------------------------------------- 
MML EM Iter. 6        |**********|  2015-06-13 13:24:29  0.0265 secs
 Estimation of b:     |----------|     max. parm. change 0.0103 
 Estimation of a:     |----------|     max. parm. change 0.00525 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17915.17  | Deviance change =  0.3021 | max. parm. change =  0.010301  
---------------------------------------------------------------------- 
MML EM Iter. 7        |**********|  2015-06-13 13:24:29  0.0259 secs
 Estimation of b:     |----------|     max. parm. change 0.00777 
 Estimation of a:     |----------|     max. parm. change 0.00397 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17915  | Deviance change =  0.1721 | max. parm. change =  0.007769  
---------------------------------------------------------------------- 
MML EM Iter. 8        |**********|  2015-06-13 13:24:29  0.0261 secs
 Estimation of b:     |----------|     max. parm. change 0.00584 
 Estimation of a:     |----------|     max. parm. change 0.00301 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17914.9  | Deviance change =  0.0979 | max. parm. change =  0.005843  
---------------------------------------------------------------------- 
MML EM Iter. 9        |**********|  2015-06-13 13:24:29  0.026 secs
 Estimation of b:     |----------|     max. parm. change 0.00442 
 Estimation of a:     |----------|     max. parm. change 0.00227 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17914.84  | Deviance change =  0.0558 | max. parm. change =  0.004418  
---------------------------------------------------------------------- 
MML EM Iter. 10       |**********|  2015-06-13 13:24:29  0.0261 secs
 Estimation of b:     |----------|     max. parm. change 0.00333 
 Estimation of a:     |----------|     max. parm. change 0.00172 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17914.81  | Deviance change =  0.0318 | max. parm. change =  0.00333  
---------------------------------------------------------------------- 
MML EM Iter. 11       |**********|  2015-06-13 13:24:29  0.0261 secs
 Estimation of b:     |----------|     max. parm. change 0.00251 
 Estimation of a:     |----------|     max. parm. change 0.00129 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17914.79  | Deviance change =  0.018 | max. parm. change =  0.002514  
---------------------------------------------------------------------- 
MML EM Iter. 12       |**********|  2015-06-13 13:24:29  0.03 secs
 Estimation of b:     |----------|     max. parm. change 0.0019 
 Estimation of a:     |----------|     max. parm. change 0.00098 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17914.78  | Deviance change =  0.0102 | max. parm. change =  0.001897  
---------------------------------------------------------------------- 
MML EM Iter. 13       |**********|  2015-06-13 13:24:29  0.0245 secs
 Estimation of b:     |----------|     max. parm. change 0.00143 
 Estimation of a:     |----------|     max. parm. change 0.00074 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17914.78  | Deviance change =  0.0058 | max. parm. change =  0.001434  
---------------------------------------------------------------------- 
MML EM Iter. 14       |**********|  2015-06-13 13:24:29  0.0237 secs
 Estimation of b:     |----------|     max. parm. change 0.00108 
 Estimation of a:     |----------|     max. parm. change 0.00056 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17914.77  | Deviance change =  0.0033 | max. parm. change =  0.00108  
---------------------------------------------------------------------- 
MML EM Iter. 15       |**********|  2015-06-13 13:24:29  0.0249 secs
 Estimation of b:     |----------|     max. parm. change 0.00081 
 Estimation of a:     |----------|     max. parm. change 0.00042 
 Estimation of delta: |----------|     max. parm. change 0 
 Estimation of alpha: |----------|     max. parm. change 0 
Deviance =  17914.77  | Deviance change =  0.0019 | max. parm. change =  0.000813  
---------------------------------------------------------------------------------------------------------- 
Parameter summary
    item    N     p      b est.b     a est.a thresh itemcluster delta est.delta
I1    I1 1500 0.856 -1.960     1 1.105     1 -2.165           0     0         0
I2    I2 1500 0.798 -1.527     2 1.105     1 -1.687           2     0         0
I3    I3 1500 0.725 -1.089     3 1.105     1 -1.203           1     0         0
I4    I4 1500 0.666 -0.778     4 1.105     1 -0.860           2     0         0
I5    I5 1500 0.594 -0.431     5 1.105     1 -0.476           1     0         0
I6    I6 1500 0.507 -0.031     6 1.105     1 -0.034           0     0         0
I7    I7 1500 0.440  0.272     7 1.105     1  0.300           0     0         0
I8    I8 1500 0.329  0.800     8 1.105     1  0.884           0     0         0
I9    I9 1500 0.259  1.175     9 1.105     1  1.298           2     0         0
I10  I10 1500 0.227  1.369    10 1.105     1  1.512           0     0         0
I11  I11 1500 0.162  1.815    11 1.105     1  2.005           0     0         0

Dependency parameters
  cluster delta est.delta copula.type    items
1       1     0         0  bound.mixt    I3-I5
2       2     0         0  bound.mixt I2-I4-I9

EAP Reliability: 0.682 

Generalized logistic link function
alpha1= 0  alpha2= 0  

-----------------------------------------------------------------
Start: 2015-06-13 13:24:29 
End: 2015-06-13 13:24:29 
Time difference of 0.4329739 secs
Difference: 0.4329739 
-----------------------------------------------------------------
> summary(mod2)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 
Date of Analysis: 2015-06-13 13:24:29 
Time difference of 0.4329739 secs
Computation Time: 0.4329739 

Marginal Maximum Likelihood Estimation 
Raschtype Copula Model with generalized logistic link function: Estimation of alpha1 and alpha2 
Function rasch.copula2
alpha1= 0  alpha2= 0  
-----------------------------------------------------------------
Deviance =  17914.77 
Number of persons =  1500  ( 433  Response Patterns)
Number of estimated parameters =  12 
Number of iterations =  15 
AIC  =  17938.77  | penalty = 24 
AICc =  17938.98  | penalty = 24.21 (bias corrected AIC)
BIC  =  18002.53  | penalty = 87.76 
CAIC =  18014.53  | penalty = 99.76 (consistent AIC) 

Trait Distribution ( 21  Knots )
 Mean= 0  SD= 1 

EAP Reliability: 0.682 

-----------------------------------------------------------------
Item Parameter 
    item    N     p      b est.b     a est.a thresh itemcluster delta est.delta
I1    I1 1500 0.856 -1.960     1 1.105     1 -2.165           0     0         0
I2    I2 1500 0.798 -1.527     2 1.105     1 -1.687           2     0         0
I3    I3 1500 0.725 -1.089     3 1.105     1 -1.203           1     0         0
I4    I4 1500 0.666 -0.778     4 1.105     1 -0.860           2     0         0
I5    I5 1500 0.594 -0.431     5 1.105     1 -0.476           1     0         0
I6    I6 1500 0.507 -0.031     6 1.105     1 -0.034           0     0         0
I7    I7 1500 0.440  0.272     7 1.105     1  0.300           0     0         0
I8    I8 1500 0.329  0.800     8 1.105     1  0.884           0     0         0
I9    I9 1500 0.259  1.175     9 1.105     1  1.298           2     0         0
I10  I10 1500 0.227  1.369    10 1.105     1  1.512           0     0         0
I11  I11 1500 0.162  1.815    11 1.105     1  2.005           0     0         0

Dependency parameters
  cluster delta est.delta copula.type    items
1       1     0         0  bound.mixt    I3-I5
2       2     0         0  bound.mixt I2-I4-I9
> 
> # estimate Rasch model with rasch.mml2 function
> mod3 <- rasch.mml2( dat )
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:29 
   Deviance = 18027.8626
    Maximum b parameter change =  0.314767  
...........................................................
Iteration 2     2015-06-13 13:24:29 
   Deviance = 17927.7815 | Deviance change = 100.08111
    Maximum b parameter change =  0.016842  
...........................................................
Iteration 3     2015-06-13 13:24:29 
   Deviance = 17919.2366 | Deviance change = 8.544904
    Maximum b parameter change =  0.020973  
...........................................................
Iteration 4     2015-06-13 13:24:29 
   Deviance = 17915.4426 | Deviance change = 3.793934
    Maximum b parameter change =  0.020076  
...........................................................
Iteration 5     2015-06-13 13:24:29 
   Deviance = 17914.8711 | Deviance change = 0.571532
    Maximum b parameter change =  0.005207  
...........................................................
Iteration 6     2015-06-13 13:24:29 
   Deviance = 17914.7871 | Deviance change = 0.083955
    Maximum b parameter change =  0.002918  
...........................................................
Iteration 7     2015-06-13 13:24:29 
   Deviance = 17914.7747 | Deviance change = 0.012399
    Maximum b parameter change =  0.000957  
...........................................................
Iteration 8     2015-06-13 13:24:29 
   Deviance = 17914.7729 | Deviance change = 0.001862
    Maximum b parameter change =  0.000485  
...........................................................
Iteration 9     2015-06-13 13:24:29 
   Deviance = 17914.7726 | Deviance change = 0.000283
    Maximum b parameter change =  0.000196  
...........................................................
Iteration 10     2015-06-13 13:24:29 
   Deviance = 17914.7725 | Deviance change = 5e-05
    Maximum b parameter change =  0.000103  
...........................................................
Iteration 11     2015-06-13 13:24:29 
   Deviance = 17914.7725 | Deviance change = 1.1e-05
    Maximum b parameter change =  5.2e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:29 
End: 2015-06-13 13:24:29 
Time difference of 0.1140852 secs
Difference: 0.1140852 
------------------------------------------------------------
> summary(mod3)
------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:29 
Time difference of 0.1140852 secs
Computation time: 0.1140852 

Call:
rasch.mml2(dat = dat)

Semiparametric Marginal Maximum Likelihood Estimation 
Function 'rasch.mml2' 

Rasch Type Model with Fixed Discrimination, Guessing and Slipping Parameters 
alpha1= 0  alpha2= 0  
Moments: 
   M   SD  Var 
0.00 1.81 3.29 

------------------------------------------------------------
Number of iterations = 11 
Deviance =  17914.77  | Log Likelihood =  -8957.39 
Number of persons =  1500 
Number of estimated parameters =  12 
AIC  =  17938.77  | penalty = 24    | AIC = -2*LL + 2*p  
AICc =  17938.98  | penalty = 24.21    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  18002.53  | penalty = 87.76    | BIC = -2*LL + log(n)*p  
CAIC =  18014.53  | penalty = 99.76   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

Trait Distribution ( 21  Knots )
 Mean= 0 
 SD= 1.106 
 Skewness= 0
Item Difficulty Distribution ( 11  Items )
 Mean= -0.039  SD= 1.371 
Distribution of Items Administered ( 11  Items )
 Mean= 11  SD= 0 

EAP Reliability: 0.683
------------------------------------------------------------
Item Parameter 
   item    N     p      b est.b a est.a thresh c est.c d est.d emp.discrim
1    I1 1500 0.856 -2.165     1 1     0 -2.165 0     0 1     0       0.336
2    I2 1500 0.798 -1.687     2 1     0 -1.687 0     0 1     0       0.500
3    I3 1500 0.725 -1.203     3 1     0 -1.203 0     0 1     0       0.516
4    I4 1500 0.666 -0.859     4 1     0 -0.859 0     0 1     0       0.543
5    I5 1500 0.594 -0.476     5 1     0 -0.476 0     0 1     0       0.551
6    I6 1500 0.507 -0.034     6 1     0 -0.034 0     0 1     0       0.472
7    I7 1500 0.440  0.300     7 1     0  0.300 0     0 1     0       0.503
8    I8 1500 0.329  0.884     8 1     0  0.884 0     0 1     0       0.477
9    I9 1500 0.259  1.298     9 1     0  1.298 0     0 1     0       0.505
10  I10 1500 0.227  1.512    10 1     0  1.512 0     0 1     0       0.442
11  I11 1500 0.162  2.005    11 1     0  2.005 0     0 1     0       0.404
   alpha1 alpha2
1       0      0
2       0      0
3       0      0
4       0      0
5       0      0
6       0      0
7       0      0
8       0      0
9       0      0
10      0      0
11      0      0
> 
> ## Not run: 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: 12 Items: Cluster 1 -> Items 1,...,4; 
> ##D #       Cluster 2 -> Items 6,...,9; Cluster 3 -> Items 10,11,12
> ##D #############################################################################
> ##D 
> ##D set.seed(7896)
> ##D I <- 12                             # number of items
> ##D n <- 450                            # number of persons
> ##D b <- seq(-2,2, len=I)               # item difficulties
> ##D b <- sample(b)                      # sample item difficulties
> ##D theta <- rnorm( n , sd = 1 )        # person abilities
> ##D # itemcluster
> ##D itemcluster <- rep(0,I)
> ##D itemcluster[ 1:4 ] <- 1
> ##D itemcluster[ 6:9 ] <- 2
> ##D itemcluster[ 10:12 ] <- 3
> ##D # residual correlations
> ##D rho <- c( .55 , .25 , .45 )
> ##D 
> ##D # simulate data
> ##D dat <- sim.rasch.dep( theta , b , itemcluster , rho )
> ##D colnames(dat) <- paste("I" , seq(1,ncol(dat)) , sep="")
> ##D 
> ##D # estimate Rasch copula model 
> ##D mod1 <- rasch.copula2( dat , itemcluster = itemcluster , numdiff.parm = .001 )
> ##D summary(mod1)
> ##D 
> ##D # Rasch model estimation
> ##D mod2 <- rasch.copula2( dat , itemcluster = itemcluster , 
> ##D             delta = rep(0,3) , est.delta = rep(0,3) )
> ##D summary(mod2)
> ##D 
> ##D # estimation with pairwise Rasch model
> ##D mod3 <- rasch.pairwise( dat )
> ##D summary(mod3) 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sim.rasch.dep", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sim.raschtype")
> ### * sim.raschtype
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sim.raschtype
> ### Title: Simulate from Generalized Logistic Item Response Model
> ### Aliases: sim.raschtype
> ### Keywords: Simulating IRT models
> 
> ### ** Examples
> 
> # Simulation of data from a Rasch model (alpha_1 = alpha_2 = 0)
> N <- 500    # number of persons
> I <- 11     # number of items
> b <- seq( -2 , 2 , length=I )
> dat <- sim.raschtype( rnorm( N ) , b )
> colnames(dat) <- paste( "I" , 1:I , sep="")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sim.raschtype", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sirt-package")
> ### * sirt-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sirt-package
> ### Title: Supplementary Item Response Theory Models
> ### Aliases: sirt-package sirt
> ### Keywords: package
> 
> ### ** Examples
> 
> ##  
> ##   |-----------------------------------------------------------------|
> ##   | sirt 0.40-4 (2013-11-26)                                        |
> ##   | Supplementary Item Response Theory                              |
> ##   | Maintainer: Alexander Robitzsch <a.robitzsch at bifie.at >      |
> ##   | https://sites.google.com/site/alexanderrobitzsch/software       |
> ##   |-----------------------------------------------------------------|
> ##     
> ##                       _/              _/   
> ##              _/_/_/      _/  _/_/  _/_/_/_/
> ##           _/_/      _/  _/_/        _/     
> ##              _/_/  _/  _/          _/      
> ##         _/_/_/    _/  _/            _/_/   
> ##   
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sirt-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("smirt")
> ### * smirt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: smirt
> ### Title: Multidimensional Noncompensatory, Compensatory and Partially
> ###   Compensatory Item Response Model
> ### Aliases: smirt summary.smirt logLik.smirt anova.smirt IRT.irfprob.smirt
> ###   IRT.likelihood.smirt IRT.posterior.smirt IRT.modelfit.smirt
> ###   summary.IRT.modelfit.smirt
> ### Keywords: Multidimensional item response model summary
> 
> ### ** Examples
> 
> #############################################################################
> ## SIMULATED EXAMPLE 1: Noncompensatory and compensatory IRT models
> #############################################################################
> set.seed(997)
> 
> # (1) simulate data from a two-dimensional noncompensatory
> #     item response model
> #   -> increase number of iterations in all models!
> 
> N <- 1000	# number of persons
> I <- 10		# number of items
> theta0 <- rnorm( N , sd= 1 )
> theta1 <- theta0 + rnorm(N , sd = .7 )
> theta2 <- theta0 + rnorm(N , sd = .7 )
> Q <- matrix( 1 , nrow=I,ncol=2 )
> Q[ 1:(I/2) , 2 ] <- 0
> Q[ I,1] <- 0
> b <- matrix( rnorm( I*2 ) , I , 2 )
> a <- matrix( 1 , I  , 2 )
> 
> # simulate data                                     
> prob <- dat <- matrix(0 , nrow=N , ncol=I )
> for (ii in 1:I){
+ prob[,ii] <- ( plogis( theta1 - b[ii,1]  ) )^Q[ii,1]
+ prob[,ii] <- prob[,ii] * ( plogis( theta2 - b[ii,2]  ) )^Q[ii,2]
+             }
> dat[ prob > matrix(runif( N*I),N,I) ] <- 1
> colnames(dat) <- paste0("I",1:I)
> 
> #***
> # Model 1: Noncompensatory 1PL model
> mod1 <- smirt(dat, Qmatrix=Q , maxiter=10 ) # change number of iterations
...........................................................
Iteration 1     2015-06-13 13:24:29 
  M steps b parameter   |----  4 Step(s) 
   Deviance = 11208.3048
    Maximum b parameter change = 0.96252
    Maximum a parameter change = 0
    Maximum c parameter change = 0
    Maximum d parameter change = 0
 Means:  0 0 
 Standard deviations:  1.113 1.145 
 Correlations  0.565 
...........................................................
Iteration 2     2015-06-13 13:24:29 
  M steps b parameter   |----  4 Step(s) 
   Deviance = 10736.1537 | Deviance change = 472.15111
    Maximum b parameter change = 0.203451
    Maximum a parameter change = 0
    Maximum c parameter change = 0
    Maximum d parameter change = 0
 Means:  0 0 
 Standard deviations:  1.138 1.179 
 Correlations  0.597 
...........................................................
Iteration 3     2015-06-13 13:24:30 
  M steps b parameter   |----  4 Step(s) 
   Deviance = 10713.9802 | Deviance change = 22.173554
    Maximum b parameter change = 0.14445
    Maximum a parameter change = 0
    Maximum c parameter change = 0
    Maximum d parameter change = 0
 Means:  0 0 
 Standard deviations:  1.145 1.196 
 Correlations  0.612 
...........................................................
Iteration 4     2015-06-13 13:24:30 
  M steps b parameter   |----  4 Step(s) 
   Deviance = 10705.414 | Deviance change = 8.566131
    Maximum b parameter change = 0.128924
    Maximum a parameter change = 0
    Maximum c parameter change = 0
    Maximum d parameter change = 0
 Means:  0 0 
 Standard deviations:  1.145 1.205 
 Correlations  0.622 
...........................................................
Iteration 5     2015-06-13 13:24:30 
  M steps b parameter   |----  4 Step(s) 
   Deviance = 10701.4159 | Deviance change = 3.99814
    Maximum b parameter change = 0.120661
    Maximum a parameter change = 0
    Maximum c parameter change = 0
    Maximum d parameter change = 0
 Means:  0 0 
 Standard deviations:  1.143 1.212 
 Correlations  0.628 
...........................................................
Iteration 6     2015-06-13 13:24:30 
  M steps b parameter   |----  4 Step(s) 
   Deviance = 10699.3403 | Deviance change = 2.075587
    Maximum b parameter change = 0.115721
    Maximum a parameter change = 0
    Maximum c parameter change = 0
    Maximum d parameter change = 0
 Means:  0 0 
 Standard deviations:  1.139 1.216 
 Correlations  0.633 
...........................................................
Iteration 7     2015-06-13 13:24:30 
  M steps b parameter   |----  4 Step(s) 
   Deviance = 10698.1357 | Deviance change = 1.204577
    Maximum b parameter change = 0.112597
    Maximum a parameter change = 0
    Maximum c parameter change = 0
    Maximum d parameter change = 0
 Means:  0 0 
 Standard deviations:  1.136 1.219 
 Correlations  0.637 
...........................................................
Iteration 8     2015-06-13 13:24:30 
  M steps b parameter   |----  4 Step(s) 
   Deviance = 10697.3487 | Deviance change = 0.787091
    Maximum b parameter change = 0.110411
    Maximum a parameter change = 0
    Maximum c parameter change = 0
    Maximum d parameter change = 0
 Means:  0 0 
 Standard deviations:  1.133 1.222 
 Correlations  0.641 
...........................................................
Iteration 9     2015-06-13 13:24:30 
  M steps b parameter   |----  4 Step(s) 
   Deviance = 10696.7749 | Deviance change = 0.573709
    Maximum b parameter change = 0.108525
    Maximum a parameter change = 0
    Maximum c parameter change = 0
    Maximum d parameter change = 0
 Means:  0 0 
 Standard deviations:  1.13 1.225 
 Correlations  0.644 
...........................................................
Iteration 10     2015-06-13 13:24:30 
  M steps b parameter   |----  4 Step(s) 
   Deviance = 10696.3204 | Deviance change = 0.454585
    Maximum b parameter change = 0.106458
    Maximum a parameter change = 0
    Maximum c parameter change = 0
    Maximum d parameter change = 0
 Means:  0 0 
 Standard deviations:  1.128 1.227 
 Correlations  0.647 
*********************************
Item Parameters
   item    N     p b.Dim1 b.Dim2 a.Dim1 a.Dim2 c d
1    I1 1000 0.695 -1.022     NA      1     NA 0 1
2    I2 1000 0.677 -0.919     NA      1     NA 0 1
3    I3 1000 0.454  0.240     NA      1     NA 0 1
4    I4 1000 0.631 -0.666     NA      1     NA 0 1
5    I5 1000 0.160  2.041     NA      1     NA 0 1
6    I6 1000 0.166  0.267  1.083      1      1 0 1
7    I7 1000 0.312 -0.118 -0.136      1      1 0 1
8    I8 1000 0.168  0.426  0.914      1      1 0 1
9    I9 1000 0.182 -0.288  1.239      1      1 0 1
10  I10 1000 0.548     NA -0.244     NA      1 0 1
*********************************
EAP Reliability =  0.625 0.528 
> summary(mod1)
-----------------------------------------------------------------
sirt 1.7-0 (2015-06-05) 

Date of Analysis: 2015-06-13 13:24:31 
Time difference of 1.185756 secs
Computation Time: 1.185756 

  Function 'smirt' 
   Noncompensatory item response model

    1000 Cases,  10 Items,  2 Dimension(s)
-----------------------------------------------------------------
Number of iterations = 10 
Deviance =  10696.32  | Log Likelihood =  -5348.16 
Number of persons =  1000 
Number of estimated parameters =  17 
  Number of estimated item parameters =  14 
               b parameters =  14 
               a parameters =  0 
               c parameters =  0 
               d parameters =  0 
            mu.i parameters =  0 
  Number of estimated distribution parameters =  3 
               Means =  0 
               Covariances =  3 
AIC  =  10730.32  | penalty = 34    | AIC = -2*LL + 2*p  
AICc =  10730.94  | penalty = 34.62    | AICc = -2*LL + 2*p + 2*p*(p+1)/(n-p-1)  (bias corrected AIC)
BIC  =  10813.75  | penalty = 117.43    | BIC = -2*LL + log(n)*p  
CAIC =  10830.75  | penalty = 134.43   | CAIC = -2*LL + [log(n)+1]*p  (consistent AIC)

-----------------------------------------------------------------

M Trait:
V1 V2 
 0  0 

SD Trait:
[1] 1.128 1.227

Correlations Trait: 
      [,1]  [,2]
[1,] 1.000 0.647
[2,] 0.647 1.000

EAP Reliability:
        V1    V2
[1,] 0.625 0.528
-----------------------------------------------------------------
Item Parameter 
   item    N     p b.Dim1 b.Dim2 a.Dim1 a.Dim2 c d
1    I1 1000 0.695 -1.022     NA      1     NA 0 1
2    I2 1000 0.677 -0.919     NA      1     NA 0 1
3    I3 1000 0.454  0.240     NA      1     NA 0 1
4    I4 1000 0.631 -0.666     NA      1     NA 0 1
5    I5 1000 0.160  2.041     NA      1     NA 0 1
6    I6 1000 0.166  0.267  1.083      1      1 0 1
7    I7 1000 0.312 -0.118 -0.136      1      1 0 1
8    I8 1000 0.168  0.426  0.914      1      1 0 1
9    I9 1000 0.182 -0.288  1.239      1      1 0 1
10  I10 1000 0.548     NA -0.244     NA      1 0 1
> 
> ## Not run: 
> ##D #***
> ##D # Model 2: Noncompensatory 2PL model
> ##D mod2 <- smirt(dat,Qmatrix=Q , est.a="2PL" , maxiter=15 )
> ##D summary(mod2)
> ##D 
> ##D # Model 2a: avoid convergence problems with increment.factor
> ##D mod2a <- smirt(dat,Qmatrix=Q , est.a="2PL" , maxiter=30 , increment.factor=1.03)
> ##D summary(mod2a)
> ##D 
> ##D #***
> ##D # Model 3: some fixed c and d parameters different from zero or one
> ##D c.init <- rep(0,I)
> ##D c.init[ c(3,7)] <- .2
> ##D d.init <- rep(1,I)
> ##D d.init[c(4,8)] <- .95
> ##D mod3 <- smirt( dat , Qmatrix=Q , c.init=c.init , d.init=d.init )
> ##D summary(mod3)
> ##D 
> ##D #***
> ##D # Model 4: some estimated c and d parameters (in parameter groups)
> ##D est.c <- c.init <- rep(0,I)
> ##D c.estpars <- c(3,6,7)
> ##D c.init[ c.estpars ] <- .2
> ##D est.c[c.estpars] <- 1
> ##D est.d <- rep(0,I)
> ##D d.init <- rep(1,I)
> ##D d.estpars <- c(6,9)
> ##D d.init[ d.estpars ] <- .95
> ##D est.d[ d.estpars ] <- d.estpars   # different d parameters
> ##D mod4 <- smirt(dat,Qmatrix=Q , est.c=est.c , c.init=c.init ,
> ##D             est.d=est.d , d.init=d.init  )
> ##D summary(mod4)
> ##D 
> ##D #***
> ##D # Model 5: Unidimensional 1PL model
> ##D Qmatrix <- matrix( 1 , nrow=I , ncol=1 )
> ##D mod5 <- smirt( dat , Qmatrix=Qmatrix )
> ##D summary(mod5)
> ##D 
> ##D #***
> ##D # Model 6: Unidimensional 2PL model
> ##D mod6 <- smirt( dat , Qmatrix=Qmatrix , est.a="2PL" )
> ##D summary(mod6)
> ##D 
> ##D #***
> ##D # Model 7: Compensatory model with between item dimensionality
> ##D # Note that the data is simulated under the noncompensatory condition
> ##D # Therefore Model 7 should have a worse model fit than Model 1
> ##D Q1 <- Q
> ##D Q1[ 6:10 , 1] <- 0
> ##D mod7 <- smirt(dat,Qmatrix=Q1 , irtmodel="comp" , maxiter=30)
> ##D summary(mod7)
> ##D 
> ##D #***
> ##D # Model 8: Compensatory model with within item dimensionality
> ##D # 		assuming zero correlation between dimensions
> ##D variance.fixed <- as.matrix( cbind( 1,2,0) )
> ##D # set the covariance between the first and second dimension to zero
> ##D mod8 <- smirt(dat,Qmatrix=Q , irtmodel="comp" , variance.fixed=variance.fixed ,
> ##D             maxiter=30)
> ##D summary(mod8)
> ##D 
> ##D #***
> ##D # Model 8b: 2PL model with starting values for a and b parameters
> ##D b.init <- rep(0,10)  # set all item difficulties initially to zero
> ##D # b.init <- NULL
> ##D a.init <- Q       # initialize a.init with Q-matrix
> ##D # provide starting values for slopes of first three items on Dimension 1
> ##D a.init[1:3,1] <- c( .55 , .32 , 1.3)   
> ##D 
> ##D mod8b <- smirt(dat,Qmatrix=Q , irtmodel="comp" , variance.fixed=variance.fixed ,
> ##D               b.init=b.init , a.init=a.init , maxiter=20 , est.a="2PL" )              
> ##D summary(mod8b)
> ##D 
> ##D #***
> ##D # Model 9: Unidimensional model with quadratic item response functions
> ##D # define theta
> ##D theta.k <- seq( - 6 , 6 , len=15 )
> ##D theta.k <- as.matrix( theta.k , ncol=1 )
> ##D # define design matrix
> ##D theta.kDES <- cbind( theta.k[,1] , theta.k[,1]^2 )
> ##D # define Q-matrix
> ##D Qmatrix <- matrix( 0 , I , 2 )
> ##D Qmatrix[,1] <- 1
> ##D Qmatrix[ c(3,6,7) , 2 ] <- 1
> ##D colnames(Qmatrix) <- c("F1" , "F1sq" )
> ##D # estimate model
> ##D mod9 <- smirt(dat,Qmatrix=Qmatrix , maxiter=50 , irtmodel="comp" , 
> ##D            theta.k=theta.k , theta.kDES=theta.kDES , est.a="2PL" )           
> ##D summary(mod9)
> ##D 
> ##D #***
> ##D # Model 10: Two-dimensional item response model with latent interaction
> ##D #           between dimensions
> ##D theta.k <- seq( - 6 , 6 , len=15 )
> ##D theta.k <- expand.grid( theta.k , theta.k )	# expand theta to 2 dimensions
> ##D # define design matrix
> ##D theta.kDES <- cbind( theta.k , theta.k[,1]*theta.k[,2] )
> ##D # define Q-matrix
> ##D Qmatrix <- matrix( 0 , I , 3 )
> ##D Qmatrix[,1] <- 1
> ##D Qmatrix[ 6:10 , c(2,3) ] <- 1
> ##D colnames(Qmatrix) <- c("F1" , "F2" , "F1iF2" )
> ##D # estimate model
> ##D mod10 <- smirt(dat,Qmatrix=Qmatrix ,irtmodel="comp" , theta.k=theta.k , 
> ##D             theta.kDES= theta.kDES , est.a="2PL" )           
> ##D summary(mod10)
> ##D 
> ##D #****
> ##D # Model 11: Example Quasi Monte Carlo integration
> ##D Qmatrix <- matrix( 1 , I , 1 )
> ##D mod11 <- smirt( dat , irtmodel="comp" , Qmatrix=Qmatrix , qmcnodes=1000 )
> ##D summary(mod11)
> ##D 
> ##D #############################################################################
> ##D ## EXAMPLE 2: Dataset Reading data.read
> ##D ##            Multidimensional models for dichotomous data
> ##D #############################################################################
> ##D 
> ##D data(data.read)
> ##D dat <- data.read
> ##D I <- ncol(dat)    # number of items
> ##D 
> ##D #***
> ##D # Model 1: 3-dimensional 2PL model
> ##D 
> ##D # define Q-matrix
> ##D Qmatrix <- matrix(0,nrow=I,ncol=3)
> ##D Qmatrix[1:4,1] <- 1
> ##D Qmatrix[5:8,2] <- 1
> ##D Qmatrix[9:12,3] <- 1
> ##D 
> ##D # estimate model
> ##D mod1 <- smirt( dat , Qmatrix=Qmatrix , irtmodel="comp" , est.a="2PL" ,
> ##D             qmcnodes=1000 , maxiter=20)
> ##D summary(mod1)
> ##D 
> ##D #***
> ##D # Model 2: 3-dimensional Rasch model
> ##D mod2 <- smirt( dat , Qmatrix=Qmatrix , irtmodel="comp" , 
> ##D               qmcnodes=1000 , maxiter=20)
> ##D summary(mod2)
> ##D 
> ##D #***
> ##D # Model 3: 3-dimensional 2PL model with uncorrelated dimensions
> ##D # fix entries in variance matrix
> ##D variance.fixed <- cbind( c(1,1,2) , c(2,3,3) , 0 )
> ##D # set the following covariances to zero: cov[1,2]=cov[1,3]=cov[2,3]=0
> ##D 
> ##D # estimate model
> ##D mod3 <- smirt( dat , Qmatrix=Qmatrix , irtmodel="comp" , est.a="2PL" , 
> ##D              variance.fixed=variance.fixed , qmcnodes=1000 , maxiter=20)
> ##D summary(mod3)
> ##D 
> ##D #***
> ##D # Model 4: Bifactor model with one general factor (g) and
> ##D #          uncorrelated specific factors
> ##D 
> ##D # define a new Q-matrix
> ##D Qmatrix1 <- cbind( 1 , Qmatrix )
> ##D # uncorrelated factors
> ##D variance.fixed <- cbind( c(1,1,1,2,2,3) , c(2,3,4,3,4,4) , 0 )
> ##D # The first dimension refers to the general factors while the other
> ##D # dimensions refer to the specific factors.
> ##D # The specification means that: 
> ##D # Cov[1,2]=Cov[1,3]=Cov[1,4]=Cov[2,3]=Cov[2,4]=Cov[3,4]=0 
> ##D 
> ##D # estimate model
> ##D mod4 <- smirt( dat , Qmatrix=Qmatrix1 , irtmodel="comp" , est.a="2PL" , 
> ##D              variance.fixed=variance.fixed , qmcnodes=1000 , maxiter=20)
> ##D summary(mod4)
> ##D 
> ##D #############################################################################
> ##D ## SIMULATED EXAMPLE 3: Partially compensatory model
> ##D #############################################################################
> ##D 
> ##D #**** simulate data
> ##D set.seed(7656)
> ##D I <- 10		 # number of items
> ##D N <- 2000        # number of subjects
> ##D Q <- matrix( 0 , 3*I,2)  # Q-matrix
> ##D Q[1:I,1] <- 1
> ##D Q[1:I + I ,2] <- 1
> ##D Q[1:I + 2*I ,1:2] <- 1
> ##D b <- matrix( runif( 3*I *2, -2 , 2 ) , nrow=3*I , 2 )
> ##D b <- b*Q
> ##D b <- round( b , 2 )
> ##D mui <- rep(0,3*I)
> ##D mui[ seq(2*I+1 , 3*I) ] <- 0.65
> ##D # generate data
> ##D dat <- matrix( NA , N , 3*I )
> ##D colnames(dat) <- paste0("It" , 1:(3*I) )
> ##D # simulate item responses
> ##D library(MASS)
> ##D theta <- MASS::mvrnorm(N , mu=c(0,0) , Sigma = matrix( c( 1.2 , .6,.6,1.6)  ,2 , 2 ) )
> ##D for (ii in 1:(3*I)){
> ##D     # define probability
> ##D     tmp1 <- exp( theta[,1] * Q[ii,1] - b[ii,1] +  theta[,2] * Q[ii,2] - b[ii,2] )
> ##D     # non-compensatory model
> ##D     nco1 <- ( 1 + exp( theta[,1] * Q[ii,1] - b[ii,1] ) ) * 
> ##D                   ( 1 + exp( theta[,2] * Q[ii,2] - b[ii,2] ) )
> ##D     co1 <- ( 1 + tmp1 )  
> ##D     p1 <- tmp1 / ( mui[ii] * nco1 + ( 1 - mui[ii] )*co1 )
> ##D     dat[,ii] <- 1 * ( runif(N) < p1 )
> ##D             }
> ##D 
> ##D #*** Model 1: Joint mu.i parameter for all items
> ##D est.mu.i <- rep(0,3*I)
> ##D est.mu.i[ seq(2*I+1,3*I)] <- 1
> ##D mod1 <- smirt( dat , Qmatrix = Q , irtmodel = "partcomp" , est.mu.i=est.mu.i)
> ##D summary(mod1)
> ##D 
> ##D #*** Model 2: Separate mu.i parameter for all items
> ##D est.mu.i[ seq(2*I+1,3*I)] <- 1:I
> ##D mod2 <- smirt( dat , Qmatrix = Q , irtmodel = "partcomp" , est.mu.i=est.mu.i)
> ##D summary(mod2)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("smirt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("stratified.cronbach.alpha")
> ### * stratified.cronbach.alpha
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: stratified.cronbach.alpha
> ### Title: Stratified Cronbach's Alpha
> ### Aliases: stratified.cronbach.alpha
> ### Keywords: Reliability
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: data.read
> #############################################################################
> 
> data( data.read )
> dat <- data.read
> I <- ncol(dat)
> 
> # apply function without defining item strata
> stratified.cronbach.alpha( data.read  )
  scale  I alpha mean.tot var.tot alpha.stratified
1 total 12 0.677     8.68   5.668            0.677
> 
> # define item strata
> itemstrata <- cbind( colnames(dat) , substring( colnames(dat) , 1 ,1 ) )
> stratified.cronbach.alpha( data.read , itemstrata=itemstrata )
  scale  I alpha mean.tot var.tot alpha.stratified
1 total 12 0.677    8.680   5.668            0.703
2     A  4 0.545    2.616   1.381               NA
3     B  4 0.381    2.811   1.059               NA
4     C  4 0.640    3.253   1.107               NA
>   ##   scale  I alpha mean.tot var.tot alpha.stratified
>   ## 1 total 12 0.677    8.680   5.668            0.703
>   ## 2     A  4 0.545    2.616   1.381               NA
>   ## 3     B  4 0.381    2.811   1.059               NA
>   ## 4     C  4 0.640    3.253   1.107               NA
> 
> ## Not run: 
> ##D #**************************
> ##D # reliability analysis in psych package
> ##D library(psych)
> ##D # Cronbach's alpha and item discriminations
> ##D psych::alpha( dat )
> ##D # McDonald's omega
> ##D psych::omega(dat , nfactors=1)     # 1 factor
> ##D   ##   Alpha:                 0.69 
> ##D   ##   Omega Total            0.69 
> ##D ##  => Note that alpha in this function is the standardized Cronbach's
> ##D ##     alpha, i.e. alpha computed for standardized variables.
> ##D psych::omega(dat , nfactors=2)     # 2 factors
> ##D   ##   Omega Total            0.72 
> ##D psych::omega(dat , nfactors=3)     # 3 factors  
> ##D   ##   Omega Total            0.74 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("stratified.cronbach.alpha", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tam2mirt")
> ### * tam2mirt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tam2mirt
> ### Title: Converting a fitted 'TAM' Object into a 'mirt' Object
> ### Aliases: tam2mirt
> ### Keywords: TAM mirt
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 	
> ##D library(TAM)
> ##D library(mirt)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 1: Estimations in TAM for data.read dataset
> ##D #############################################################################
> ##D 
> ##D data(data.read)
> ##D dat <- data.read
> ##D 
> ##D #**************************************
> ##D #*** Model 1: Rasch model
> ##D #**************************************
> ##D 
> ##D # estimation in TAM package
> ##D mod <- TAM::tam.mml( dat )
> ##D summary(mod)
> ##D # conversion to mirt
> ##D res <- tam2mirt(mod)
> ##D # generated lavaan syntax
> ##D cat(res$lavaan.syntax.fixed)
> ##D cat(res$lavaan.syntax.freed)
> ##D # extract object of class mirt
> ##D mres <- res$mirt
> ##D # print and parameter values
> ##D print(mres)
> ##D mirt::mod2values(mres)
> ##D # model fit
> ##D mirt::M2(mres)
> ##D # residual statistics
> ##D mirt::residuals(mres , type="Q3")
> ##D mirt::residuals(mres , type="LD")
> ##D # item fit
> ##D mirt::itemfit(mres)
> ##D # person fit
> ##D mirt::personfit(mres)
> ##D # compute several types of factor scores (quite slow)
> ##D f1 <- mirt::fscores(mres, method='WLE',response.pattern=dat[1:10,]) 
> ##D      # method = MAP and EAP also possible 
> ##D # item plot
> ##D mirt::itemplot(mres,"A3")    # item A3
> ##D mirt::itemplot(mres,4)       # fourth item
> ##D # some more plots
> ##D plot(mres,type="info")
> ##D plot(mres,type="score")
> ##D plot(mres,type="trace")
> ##D # compare estimates with estimated Rasch model in mirt
> ##D mres1 <- mirt::mirt(dat,1,"Rasch" )
> ##D print(mres1)
> ##D mirt.wrapper.coef(mres1)
> ##D 
> ##D #**************************************
> ##D #*** Model 2: 2PL model
> ##D #**************************************
> ##D 
> ##D # estimation in TAM
> ##D mod <- TAM::tam.mml.2pl( dat )
> ##D summary(mod)
> ##D # conversion to mirt
> ##D res <- tam2mirt(mod)
> ##D mres <- res$mirt
> ##D # lavaan syntax
> ##D cat(res$lavaan.syntax.fixed)
> ##D cat(res$lavaan.syntax.freed)
> ##D # parameter estimates
> ##D print(mres)
> ##D mod2values(mres)
> ##D mres@nest   # number of estimated parameters
> ##D # some plots
> ##D plot(mres,type="info")
> ##D plot(mres,type="score")
> ##D plot(mres,type="trace")
> ##D # model fit
> ##D mirt::M2(mres)
> ##D # residual statistics
> ##D mirt::residuals(mres , type="Q3")
> ##D mirt::residuals(mres , type="LD")
> ##D # item fit
> ##D mirt::itemfit(mres)
> ##D 
> ##D #**************************************
> ##D #*** Model 3: 3-dimensional Rasch model
> ##D #**************************************
> ##D 
> ##D # define Q-matrix
> ##D Q <- matrix( 0 , nrow=12 , ncol=3 )
> ##D Q[ cbind(1:12 , rep(1:3,each=4) ) ] <- 1
> ##D rownames(Q) <- colnames(dat)
> ##D colnames(Q) <- c("A","B","C")
> ##D # estimation in TAM
> ##D mod <- TAM::tam.mml( resp=dat , Q=Q , control=list(snodes=1000,maxiter=30) )
> ##D summary(mod)
> ##D # mirt conversion
> ##D res <- tam2mirt(mod)
> ##D mres <- res$mirt
> ##D # mirt syntax
> ##D cat(res$mirt.syntax)
> ##D   ##   Dim01=1,2,3,4
> ##D   ##   Dim02=5,6,7,8
> ##D   ##   Dim03=9,10,11,12
> ##D   ##   COV = Dim01*Dim01,Dim02*Dim02,Dim03*Dim03,Dim01*Dim02,Dim01*Dim03,Dim02*Dim03
> ##D   ##   MEAN = Dim01,Dim02,Dim03
> ##D # lavaan syntax
> ##D cat(res$lavaan.syntax.freed)
> ##D   ##   Dim01 =~ 1*A1+1*A2+1*A3+1*A4
> ##D   ##   Dim02 =~ 1*B1+1*B2+1*B3+1*B4
> ##D   ##   Dim03 =~ 1*C1+1*C2+1*C3+1*C4
> ##D   ##   A1 | t1_1*t1
> ##D   ##   A2 | t1_2*t1
> ##D   ##   A3 | t1_3*t1
> ##D   ##   A4 | t1_4*t1
> ##D   ##   B1 | t1_5*t1
> ##D   ##   B2 | t1_6*t1
> ##D   ##   B3 | t1_7*t1
> ##D   ##   B4 | t1_8*t1
> ##D   ##   C1 | t1_9*t1
> ##D   ##   C2 | t1_10*t1
> ##D   ##   C3 | t1_11*t1
> ##D   ##   C4 | t1_12*t1
> ##D   ##   Dim01 ~ 0*1
> ##D   ##   Dim02 ~ 0*1
> ##D   ##   Dim03 ~ 0*1
> ##D   ##   Dim01 ~~ Cov_11*Dim01
> ##D   ##   Dim02 ~~ Cov_22*Dim02
> ##D   ##   Dim03 ~~ Cov_33*Dim03
> ##D   ##   Dim01 ~~ Cov_12*Dim02
> ##D   ##   Dim01 ~~ Cov_13*Dim03
> ##D   ##   Dim02 ~~ Cov_23*Dim03 
> ##D # model fit
> ##D mirt::M2(mres)
> ##D # residual statistics
> ##D residuals(mres,type="LD")
> ##D # item fit
> ##D mirt::itemfit(mres)
> ##D 
> ##D #**************************************
> ##D #*** Model 4: 3-dimensional 2PL model
> ##D #**************************************
> ##D 
> ##D # estimation in TAM
> ##D mod <- TAM::tam.mml.2pl( resp=dat , Q=Q , control=list(snodes=1000,maxiter=30) )
> ##D summary(mod)
> ##D # mirt conversion
> ##D res <- tam2mirt(mod)
> ##D mres <- res$mirt
> ##D # generated lavaan syntax
> ##D cat(res$lavaan.syntax.fixed)
> ##D cat(res$lavaan.syntax.freed)
> ##D # write lavaan syntax on disk
> ##D   sink( "mod4_lav_freed.txt" , split=TRUE )
> ##D cat(res$lavaan.syntax.freed)
> ##D   sink()
> ##D # some statistics from mirt
> ##D print(mres)
> ##D summary(mres)
> ##D mirt::M2(mres)
> ##D mirt::residuals(mres)
> ##D mirt::itemfit(mres)
> ##D 
> ##D # estimate mirt model by using the generated lavaan syntax with freed parameters
> ##D res2 <- lavaan2mirt( dat , res$lavaan.syntax.freed ,
> ##D             technical=list(NCYCLES=3) , verbose=TRUE)  
> ##D                  # use only few cycles for illustrational purposes
> ##D mirt.wrapper.coef(res2$mirt)
> ##D summary(res2$mirt)
> ##D print(res2$mirt)
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 4: mirt conversions for polytomous dataset data.big5
> ##D #############################################################################
> ##D 
> ##D data(data.big5)
> ##D # select some items
> ##D items <- c( grep( "O" , colnames(data.big5) , value=TRUE )[1:6] ,
> ##D      grep( "N" , colnames(data.big5) , value=TRUE )[1:4] )
> ##D # O3 O8 O13 O18 O23 O28 N1 N6 N11 N16
> ##D dat <- data.big5[ , items ]
> ##D library(psych)
> ##D psych::describe(dat)
> ##D 
> ##D library(TAM)
> ##D #******************
> ##D #*** Model 1: Partial credit model in TAM
> ##D mod1 <- TAM::tam.mml( dat[,1:6] )
> ##D summary(mod1)
> ##D # convert to mirt object
> ##D mmod1 <- tam2mirt( mod1 )
> ##D rmod1 <- mmod1$mirt
> ##D # coefficients in mirt
> ##D coef(rmod1)
> ##D mirt.wrapper.coef(rmod1)
> ##D # model fit
> ##D mirt::M2(rmod1)
> ##D # item fit
> ##D mirt::itemfit(rmod1)
> ##D # plots
> ##D plot(rmod1,type="trace")
> ##D plot(rmod1, type = "trace", which.items = 1:4 )
> ##D mirt::itemplot(rmod1,"O3")
> ##D 
> ##D #******************
> ##D #*** Model 2: Generalized partial credit model in TAM
> ##D mod2 <- TAM::tam.mml.2pl( dat[,1:6] , irtmodel="GPCM" )
> ##D summary(mod2)
> ##D # convert to mirt object
> ##D mmod2 <- tam2mirt( mod2 )
> ##D rmod2 <- mmod2$mirt
> ##D # coefficients in mirt
> ##D mirt.wrapper.coef(rmod2)
> ##D # model fit
> ##D mirt::M2(rmod2)
> ##D # item fit
> ##D mirt::itemfit(rmod2)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tam2mirt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("testlet.marginalized")
> ### * testlet.marginalized
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: testlet.marginalized
> ### Title: Marginal Item Parameters from a Testlet (Bifactor) Model
> ### Aliases: testlet.marginalized
> ### Keywords: Testlet model Bifactor model
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Small numeric example for Rasch testlet model
> #############################################################################
> 
> # Rasch testlet model with 9 items contained into 3 testlets
> # the third testlet has essentially no dependence and therefore
> # no testlet variance
> testlet <- rep( 1:3 , each=3 )
> a1 <- rep(1 , 9 )   # item slopes first dimension
> d1 <- rep( c(-1.25,0,1.5) , 3 ) # item intercepts
> a.testlet <- rep( 1 , 9 )  # item slopes testlets
> var.testlet <- c( .8 , .2 , 0 )  # testlet variances
> 
> # apply function
> res <- testlet.marginalized( a1=a1 , d1=d1 , testlet=testlet , 
+             a.testlet=a.testlet , var.testlet=var.testlet )
> round( res , 2 )
  item testlet a1    d1 a.testlet var.testlet a1_marg d1_marg
1    1       1  1 -1.25         1         0.8    0.89   -1.11
2    2       1  1  0.00         1         0.8    0.89    0.00
3    3       1  1  1.50         1         0.8    0.89    1.33
4    4       2  1 -1.25         1         0.2    0.97   -1.21
5    5       2  1  0.00         1         0.2    0.97    0.00
6    6       2  1  1.50         1         0.2    0.97    1.45
7    7       3  1 -1.25         1         0.0    1.00   -1.25
8    8       3  1  0.00         1         0.0    1.00    0.00
9    9       3  1  1.50         1         0.0    1.00    1.50
>   ##    item testlet a1    d1 a.testlet var.testlet a1_marg d1_marg
>   ##  1    1       1  1 -1.25         1         0.8    0.89   -1.11
>   ##  2    2       1  1  0.00         1         0.8    0.89    0.00
>   ##  3    3       1  1  1.50         1         0.8    0.89    1.33
>   ##  4    4       2  1 -1.25         1         0.2    0.97   -1.21
>   ##  5    5       2  1  0.00         1         0.2    0.97    0.00
>   ##  6    6       2  1  1.50         1         0.2    0.97    1.45
>   ##  7    7       3  1 -1.25         1         0.0    1.00   -1.25
>   ##  8    8       3  1  0.00         1         0.0    1.00    0.00
>   ##  9    9       3  1  1.50         1         0.0    1.00    1.50
> 
> ## Not run: 
> ##D #############################################################################
> ##D # EXAMPLE 2: Dataset reading
> ##D #############################################################################
> ##D 
> ##D library(TAM)
> ##D data(data.read)
> ##D resp <- data.read
> ##D maxiter <-  100
> ##D 
> ##D # Model 1: Rasch testlet model with 3 testlets
> ##D dims <- substring( colnames(resp),1,1 )  # define dimensions
> ##D mod1 <- TAM::tam.fa( resp=resp , irtmodel="bifactor1" , dims=dims , 
> ##D                control=list(maxiter=maxiter) )
> ##D # marginal item parameters
> ##D res1 <- testlet.marginalized( mod1 )
> ##D 
> ##D #***
> ##D # Model 2: estimate bifactor model but assume that items 3 and 5 do not load on
> ##D #           specific factors
> ##D dims1 <- dims
> ##D dims1[c(3,5)] <- NA
> ##D mod2 <- TAM::tam.fa( resp=resp , irtmodel="bifactor2" , dims=dims1 , 
> ##D               control=list(maxiter=maxiter) ) 
> ##D res2 <- testlet.marginalized( mod2 )
> ##D res2
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("testlet.marginalized", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("testlet.yen.q3")
> ### * testlet.yen.q3
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: testlet.yen.q3
> ### Title: Q_3 Statistic of Yen (1984) for Testlets
> ### Aliases: testlet.yen.q3
> ### Keywords: Testlets Local dependence Q3
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: data.read. The 12 items are arranged in 4 testlets
> #############################################################################
> data(data.read)
> 
> # estimate the Rasch model
> mod <- rasch.mml2( data.read)
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:31 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:24:31 
   Deviance = 3942.478 | Deviance change = 13.465952
    Maximum b parameter change =  0.054894  
...........................................................
Iteration 3     2015-06-13 13:24:31 
   Deviance = 3940.2892 | Deviance change = 2.188817
    Maximum b parameter change =  0.042995  
...........................................................
Iteration 4     2015-06-13 13:24:31 
   Deviance = 3939.4559 | Deviance change = 0.833271
    Maximum b parameter change =  0.022889  
...........................................................
Iteration 5     2015-06-13 13:24:31 
   Deviance = 3939.0706 | Deviance change = 0.38535
    Maximum b parameter change =  0.015712  
...........................................................
Iteration 6     2015-06-13 13:24:31 
   Deviance = 3938.8854 | Deviance change = 0.185235
    Maximum b parameter change =  0.010687  
...........................................................
Iteration 7     2015-06-13 13:24:31 
   Deviance = 3938.7952 | Deviance change = 0.090117
    Maximum b parameter change =  0.007515  
...........................................................
Iteration 8     2015-06-13 13:24:31 
   Deviance = 3938.7511 | Deviance change = 0.044171
    Maximum b parameter change =  0.005289  
...........................................................
Iteration 9     2015-06-13 13:24:31 
   Deviance = 3938.7293 | Deviance change = 0.021762
    Maximum b parameter change =  0.003736  
...........................................................
Iteration 10     2015-06-13 13:24:31 
   Deviance = 3938.7186 | Deviance change = 0.010757
    Maximum b parameter change =  0.00264  
...........................................................
Iteration 11     2015-06-13 13:24:31 
   Deviance = 3938.7132 | Deviance change = 0.005327
    Maximum b parameter change =  0.001867  
...........................................................
Iteration 12     2015-06-13 13:24:31 
   Deviance = 3938.7106 | Deviance change = 0.002639
    Maximum b parameter change =  0.001321  
...........................................................
Iteration 13     2015-06-13 13:24:31 
   Deviance = 3938.7093 | Deviance change = 0.001306
    Maximum b parameter change =  0.000934  
...........................................................
Iteration 14     2015-06-13 13:24:31 
   Deviance = 3938.7086 | Deviance change = 0.000645
    Maximum b parameter change =  0.000661  
...........................................................
Iteration 15     2015-06-13 13:24:31 
   Deviance = 3938.7083 | Deviance change = 0.000317
    Maximum b parameter change =  0.000468  
...........................................................
Iteration 16     2015-06-13 13:24:31 
   Deviance = 3938.7082 | Deviance change = 0.000155
    Maximum b parameter change =  0.000331  
...........................................................
Iteration 17     2015-06-13 13:24:31 
   Deviance = 3938.7081 | Deviance change = 7.5e-05
    Maximum b parameter change =  0.000234  
...........................................................
Iteration 18     2015-06-13 13:24:31 
   Deviance = 3938.7081 | Deviance change = 3.5e-05
    Maximum b parameter change =  0.000166  
...........................................................
Iteration 19     2015-06-13 13:24:31 
   Deviance = 3938.708 | Deviance change = 1.6e-05
    Maximum b parameter change =  0.000117  
...........................................................
Iteration 20     2015-06-13 13:24:31 
   Deviance = 3938.708 | Deviance change = 7e-06
    Maximum b parameter change =  8.3e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:31 
End: 2015-06-13 13:24:31 
Time difference of 0.1081882 secs
Difference: 0.1081882 
------------------------------------------------------------
> mod$item
   item   N         p           b est.b a est.a      thresh c est.c d est.d
A1   A1 328 0.8506098 -2.10462446     1 1     0 -2.10462446 0     0 1     0
A2   A2 328 0.7378049 -1.27423306     2 1     0 -1.27423306 0     0 1     0
A3   A3 328 0.5670732 -0.33787421     3 1     0 -0.33787421 0     0 1     0
A4   A4 328 0.4603659  0.19529469     4 1     0  0.19529469 0     0 1     0
B1   B1 328 0.7134146 -1.12627676     5 1     0 -1.12627676 0     0 1     0
B2   B2 328 0.5060976 -0.03274894     6 1     0 -0.03274894 0     0 1     0
B3   B3 328 0.9085366 -2.73479623     7 1     0 -2.73479623 0     0 1     0
B4   B4 328 0.6829268 -0.95029468     8 1     0 -0.95029468 0     0 1     0
C1   C1 328 0.9329268 -3.10593410     9 1     0 -3.10593410 0     0 1     0
C2   C2 328 0.7134146 -1.12627058    10 1     0 -1.12627058 0     0 1     0
C3   C3 328 0.8719512 -2.30964600    11 1     0 -2.30964600 0     0 1     0
C4   C4 328 0.7347561 -1.25534472    12 1     0 -1.25534472 0     0 1     0
   emp.discrim alpha1 alpha2
A1       0.419      0      0
A2       0.553      0      0
A3       0.543      0      0
A4       0.474      0      0
B1       0.413      0      0
B2       0.426      0      0
B3       0.362      0      0
B4       0.525      0      0
C1       0.427      0      0
C2       0.538      0      0
C3       0.422      0      0
C4       0.451      0      0
> 
> # estmate WLEs
> mod.wle <- wle.rasch( dat = data.read , b = mod$item$b )
WLE Reliability = 0.567 
> 
> # Yen's Q3 statistic
> mod.q3 <- yen.q3( dat = data.read , theta = mod.wle$theta , b = mod$item$b )
Yen's Q3 Statistic based on an estimated theta score 
*** 12 Items | 66 item pairs
*** Q3 Descriptives
     M     SD    Min    10%    25%    50%    75%    90%    Max 
-0.085  0.110 -0.261 -0.194 -0.152 -0.107 -0.051  0.041  0.412 
> 
> # Yen's Q3 statistic with testlets
> items <- colnames(data.read)
> testlet.matrix <- cbind( substring(  items,1,1) , items )
> mod.testletq3 <- testlet.yen.q3( q3.res=mod.q3,testlet.matrix=testlet.matrix)

Mean Q3 Testlets: 0.0245 

  Testlet N.Items Mean.Q3    mean
1       A       4 -0.0208 -0.0853
2       B       4 -0.0552 -0.0853
3       C       4  0.1495 -0.0853


Mean Q3 between testlets 

       A      B      C
A -0.021 -0.096 -0.156
B -0.096 -0.055 -0.128
C -0.156 -0.128  0.150
> mod.testletq3
$testlet.q3
  Testlet N.Items     Mean.Q3        mean
1       A       4 -0.02082019 -0.08530862
2       B       4 -0.05520797 -0.08530862
3       C       4  0.14953233 -0.08530862

$testlet.q3.korr
            A           B          C
A -0.02082019 -0.09555350 -0.1560061
B -0.09555350 -0.05520797 -0.1279025
C -0.15600610 -0.12790252  0.1495323

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("testlet.yen.q3", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tetrachoric2")
> ### * tetrachoric2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tetrachoric2
> ### Title: Tetrachoric Correlation Matrix
> ### Aliases: tetrachoric2
> ### Keywords: Tetrachoric correlation
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: data.read
> #############################################################################
> 
> data(data.read)
> 
> # tetrachoric correlation from psych package
> library(psych)
> t0 <- psych::tetrachoric( data.read )$rho
Warning in cor.smooth(mat) :
  Matrix was not positive definite, smoothing was done

> # Olsson method (maximum likelihood estimation)
> t1 <- tetrachoric2( data.read )$rho
Warning in psych::cor.smooth(rho) :
  Matrix was not positive definite, smoothing was done
> # Divgi method
> t2 <- tetrachoric2( data.read , method="Di"  )$rho
Warning in psych::cor.smooth(TC) :
  Matrix was not positive definite, smoothing was done
> # Tucker method
> t3 <- tetrachoric2( data.read , method="Tu" )$rho
    0 : .
Warning in psych::cor.smooth(TC) :
  Matrix was not positive definite, smoothing was done
> # Bonett method
> t4 <- tetrachoric2( data.read , method="Bo" )$rho
Warning in psych::cor.smooth(TC) :
  Matrix was not positive definite, smoothing was done
> 
> # maximum absolute deviation ML method
> max( abs( t0 - t1 ) )
[1] 0.003047176
>   ##   [1] 0.008224986
> # mean absolute deviation Divgi method
> max( abs( t0 - t2 ) )
[1] 0.1766688
>   ##   [1] 0.1766688
> # mean absolute deviation Tucker method
> max( abs( t0 - t3 ) )
[1] 0.1766292
>   ##   [1] 0.1766292
> # mean absolute deviation Bonett method
> max( abs( t0 - t4 ) )
[1] 0.05695521
>   ##   [1] 0.05695522
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tetrachoric2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:psych’

> nameEx("truescore.irt")
> ### * truescore.irt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: truescore.irt
> ### Title: Conversion of Trait Scores theta into True Scores tau ( theta )
> ### Aliases: truescore.irt
> ### Keywords: True scores
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset with mixed dichotomous and polytomous responses
> #############################################################################
> 
> data(data.mixed1)
> dat <- data.mixed1
> 
> #****
> # Model 1: Partial credit model
> # estimate model with TAM package
> library(TAM)
> mod1 <- TAM::tam.mml( dat )
....................................................
Processing Data      2015-06-13 13:24:31 
    * Response Data: 1000 Persons and  37 Items 
    * Numerical integration with 21 nodes
    * Created Design Matrices   ( 2015-06-13 13:24:31 )
    * Calculated Sufficient Statistics   ( 2015-06-13 13:24:31 )
....................................................
Iteration 1     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41679.4725 | Deviance change: -41679.47
  Maximum intercept parameter change: 1.097468
  Maximum regression parameter change: 0
  Variance:  0.8524  | Maximum change: 0.147574
  beta  0
....................................................
Iteration 2     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41115.5793 | Deviance change: 563.8932
  Maximum intercept parameter change: 0.402393
  Maximum regression parameter change: 0
  Variance:  0.8076  | Maximum change: 0.044813
  beta  0
....................................................
Iteration 3     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41079.2908 | Deviance change: 36.2886
  Maximum intercept parameter change: 0.600725
  Maximum regression parameter change: 0
  Variance:  0.7763  | Maximum change: 0.031313
  beta  0
....................................................
Iteration 4     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41060.2615 | Deviance change: 19.0293
  Maximum intercept parameter change: 0.140181
  Maximum regression parameter change: 0
  Variance:  0.7614  | Maximum change: 0.014914
  beta  0
....................................................
Iteration 5     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41056.2771 | Deviance change: 3.9844
  Maximum intercept parameter change: 0.093257
  Maximum regression parameter change: 0
  Variance:  0.754  | Maximum change: 0.007343
  beta  0
....................................................
Iteration 6     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41054.3219 | Deviance change: 1.9553
  Maximum intercept parameter change: 0.077605
  Maximum regression parameter change: 0
  Variance:  0.7512  | Maximum change: 0.002837
  beta  0
....................................................
Iteration 7     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41053.2118 | Deviance change: 1.1101
  Maximum intercept parameter change: 0.048412
  Maximum regression parameter change: 0
  Variance:  0.7491  | Maximum change: 0.002066
  beta  0
....................................................
Iteration 8     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.7236 | Deviance change: 0.4882
  Maximum intercept parameter change: 0.040597
  Maximum regression parameter change: 0
  Variance:  0.7485  | Maximum change: 0.000605
  beta  0
....................................................
Iteration 9     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.4106 | Deviance change: 0.313
  Maximum intercept parameter change: 0.026275
  Maximum regression parameter change: 0
  Variance:  0.7478  | Maximum change: 0.000711
  beta  0
....................................................
Iteration 10     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.2626 | Deviance change: 0.148
  Maximum intercept parameter change: 0.022903
  Maximum regression parameter change: 0
  Variance:  0.7477  | Maximum change: 0.00012
  beta  0
....................................................
Iteration 11     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.1584 | Deviance change: 0.1041
  Maximum intercept parameter change: 0.014871
  Maximum regression parameter change: 0
  Variance:  0.7474  | Maximum change: 0.000297
  beta  0
....................................................
Iteration 12     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.1087 | Deviance change: 0.0497
  Maximum intercept parameter change: 0.012993
  Maximum regression parameter change: 0
  Variance:  0.7474  | Maximum change: 2.3e-05
  beta  0
....................................................
Iteration 13     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0733 | Deviance change: 0.0354
  Maximum intercept parameter change: 0.008444
  Maximum regression parameter change: 0
  Variance:  0.7472  | Maximum change: 0.000135
  beta  0
....................................................
Iteration 14     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0561 | Deviance change: 0.0172
  Maximum intercept parameter change: 0.007273
  Maximum regression parameter change: 0
  Variance:  0.7472  | Maximum change: 5e-06
  beta  0
....................................................
Iteration 15     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.044 | Deviance change: 0.0121
  Maximum intercept parameter change: 0.004714
  Maximum regression parameter change: 0
  Variance:  0.7472  | Maximum change: 6.3e-05
  beta  0
....................................................
Iteration 16     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0379 | Deviance change: 0.0061
  Maximum intercept parameter change: 0.004005
  Maximum regression parameter change: 0
  Variance:  0.7472  | Maximum change: 2e-06
  beta  0
....................................................
Iteration 17     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0336 | Deviance change: 0.0043
  Maximum intercept parameter change: 0.002565
  Maximum regression parameter change: 0
  Variance:  0.7472  | Maximum change: 3.2e-05
  beta  0
....................................................
Iteration 18     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0314 | Deviance change: 0.0022
  Maximum intercept parameter change: 0.002211
  Maximum regression parameter change: 0
  Variance:  0.7472  | Maximum change: 1e-06
  beta  0
....................................................
Iteration 19     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0298 | Deviance change: 0.0016
  Maximum intercept parameter change: 0.001376
  Maximum regression parameter change: 0
  Variance:  0.7471  | Maximum change: 3e-06
  beta  0
....................................................
Iteration 20     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0289 | Deviance change: 9e-04
  Maximum intercept parameter change: 0.001395
  Maximum regression parameter change: 0
  Variance:  0.7471  | Maximum change: 2e-06
  beta  0
....................................................
Iteration 21     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0282 | Deviance change: 7e-04
  Maximum intercept parameter change: 0.000372
  Maximum regression parameter change: 0
  Variance:  0.7471  | Maximum change: 9e-06
  beta  0
....................................................
Iteration 22     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0279 | Deviance change: 3e-04
  Maximum intercept parameter change: 0.000238
  Maximum regression parameter change: 0
  Variance:  0.7471  | Maximum change: 2e-06
  beta  0
....................................................
Iteration 23     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0277 | Deviance change: 2e-04
  Maximum intercept parameter change: 0.000184
  Maximum regression parameter change: 0
  Variance:  0.7471  | Maximum change: 1e-06
  beta  0
....................................................
Iteration 24     2015-06-13 13:24:31
E Step
M Step Intercepts   |----
  Deviance = 41052.0275 | Deviance change: 2e-04
  Maximum intercept parameter change: 0.000155
  Maximum regression parameter change: 0
  Variance:  0.7471  | Maximum change: 2e-06
  beta  0
....................................................
Iteration 25     2015-06-13 13:24:31
E Step
M Step Intercepts   |---
  Deviance = 41052.0274 | Deviance change: 1e-04
  Maximum intercept parameter change: 0.00014
  Maximum regression parameter change: 0
  Variance:  0.7471  | Maximum change: 2e-06
  beta  0
....................................................
Iteration 26     2015-06-13 13:24:31
E Step
M Step Intercepts   |--
  Deviance = 41052.0273 | Deviance change: 1e-04
  Maximum intercept parameter change: 8.8e-05
  Maximum regression parameter change: 0
  Variance:  0.7471  | Maximum change: 1e-06
  beta  0
....................................................
Item Parameters
   xsi.index xsi.label     est
1          1  I01_Cat1 -3.2251
2          2  I02_Cat1 -1.4841
3          3  I03_Cat1  1.8576
4          4  I04_Cat1 -2.5364
5          5  I05_Cat1 -1.7538
6          6  I06_Cat1  0.3802
7          7  I07_Cat1  1.3761
8          8  I08_Cat1 -1.0936
9          9  I09_Cat1  3.7502
10        10  I10_Cat1  1.6307
11        11  I11_Cat1 -0.8127
12        12  I12_Cat1  0.2715
13        13  I13_Cat1 -1.4841
14        14  I14_Cat1  0.7787
15        15  I15_Cat1 -1.0598
16        16  I16_Cat1 -0.8439
17        17  I17_Cat1 -0.9990
18        18  I18_Cat1 -0.4210
19        19  I19_Cat1 -0.4067
20        20  I20_Cat1  0.4953
21        21  I21_Cat1 -1.0591
22        22  I21_Cat2 -2.4062
23        23  I21_Cat3  1.1217
24        24  I21_Cat4 -1.6049
25        25  I22_Cat1 -0.0234
26        26  I22_Cat2  0.2138
27        27  I22_Cat3  0.3715
28        28  I22_Cat4  1.4959
29        29  I23_Cat1 -0.2694
30        30  I24_Cat1 -0.0175
31        31  I25_Cat1  0.4953
32        32  I26_Cat1 -1.7922
33        33  I27_Cat1 -1.6645
34        34  I28_Cat1 -2.2033
35        35  I29_Cat1 -3.3133
36        36  I30_Cat1 -0.0082
37        37  I31_Cat1  0.7787
38        38  I32_Cat1  0.0522
39        39  I33_Cat1  0.0847
40        40  I34_Cat1  1.4862
41        41  I35_Cat1 -1.4709
42        42  I36_Cat1 -0.8807
43        43  I37_Cat1 -0.6953
...................................
Regression Coefficients
     V1
[1,]  0

Variance:
       [,1]
[1,] 0.7471


EAP Reliability:
[1] 0.848

-----------------------------
Start:  2015-06-13 13:24:31
End:  2015-06-13 13:24:31 
Time difference of 0.384737 secs

> # estimate person parameter estimates
> wmod1 <- TAM::tam.wle( mod1 )
Iteration in WLE/MLE estimation  1   | Maximal change  0.6897 
Iteration in WLE/MLE estimation  2   | Maximal change  0.1232 
Iteration in WLE/MLE estimation  3   | Maximal change  0.0021 
Iteration in WLE/MLE estimation  4   | Maximal change  0 
----
 WLE Reliability = 0.844 
> wmod1 <- wmod1[ order(wmod1$theta) , ]
> # extract item parameters
> A <- mod1$B[,-1,1]
> B <- mod1$AXsi[,-1]
> # person parameters and standard errors
> theta <- wmod1$theta
> error <- wmod1$error
> 
> # estimate true score transformation
> dfr <- truescore.irt( A=A , B=B , theta=theta , error=error )
> 
> # plot different person parameter estimates and standard errors
> par(mfrow=c(2,2))
> plot( theta , dfr$truescore , pch=16 , cex=.6 , xlab=expression(theta) , type="l",
+     ylab=expression(paste( tau , "(",theta , ")" ))  , main="True Score Transformation" )
> plot( theta , dfr$percscore , pch=16 , cex=.6 , xlab=expression(theta) , type="l",
+     ylab=expression(paste( pi , "(",theta , ")" ))  , main="Percent Score Transformation" )
> points( theta , dfr$lower + (dfr$upper-dfr$lower)*plogis(dfr$a*theta+dfr$b) , col=2 , lty=2)
> plot( theta , error , pch=16 , cex=.6 , xlab=expression(theta) , type="l",
+     ylab=expression(paste("SE(",theta , ")" ))  , main="Standard Error Theta" )
> plot( dfr$truescore , dfr$truescore.error , pch=16 , cex=.6 , xlab=expression(tau) ,
+     ylab=expression(paste("SE(",tau , ")" ) ) , main="Standard Error True Score Tau" ,
+     type="l")
> par(mfrow=c(1,1))
> 
> ## Not run: 
> ##D #****
> ##D # Model 2: Generalized partial credit model
> ##D mod2 <- TAM::tam.mml.2pl( dat , irtmodel="GPCM")
> ##D # estimate person parameter estimates
> ##D wmod2 <- TAM::tam.wle( mod2 )
> ##D # extract item parameters
> ##D A <- mod2$B[,-1,1]
> ##D B <- mod2$AXsi[,-1]
> ##D # person parameters and standard errors
> ##D theta <- wmod2$theta
> ##D error <- wmod2$error
> ##D # estimate true score transformation
> ##D dfr <- truescore.irt( A=A , B=B , theta=theta , error=error )
> ##D 
> ##D #############################################################################
> ##D # EXAMPLE 2: Dataset Reading data.read
> ##D #############################################################################
> ##D data(data.read)
> ##D 
> ##D #****
> ##D # Model 1: estimate difficulty + guessing model
> ##D mod1 <- rasch.mml2( data.read , fixed.c = rep(.25,12) )
> ##D mod1$person <- mod1$person[ order( mod1$person$EAP) , ]
> ##D # person parameters and standard errors
> ##D theta <- mod1$person$EAP
> ##D error <- mod1$person$SE.EAP
> ##D A <- rep(1,12)
> ##D B <- - mod1$item$b
> ##D c <- rep(.25,12)
> ##D # estimate true score transformation
> ##D dfr <- truescore.irt( A=A , B=B , theta=theta , error=error ,c=c)
> ##D 
> ##D plot( theta , dfr$percscore , pch=16 , cex=.6 , xlab=expression(theta) , type="l",
> ##D     ylab=expression(paste( pi , "(",theta , ")" ))  , main="Percent Score Transformation" )
> ##D points( theta , dfr$lower + (dfr$upper-dfr$lower)*plogis(dfr$a*theta+dfr$b) , col=2 , lty=2)
> ##D 
> ##D #****
> ##D # Model 2: Rasch model
> ##D mod2 <- rasch.mml2( data.read  )
> ##D # person parameters and standard errors
> ##D theta <- mod2$person$EAP
> ##D error <- mod2$person$SE.EAP
> ##D A <- rep(1,12)
> ##D B <- - mod2$item$b
> ##D # estimate true score transformation
> ##D dfr <- truescore.irt( A=A , B=B , theta=theta , error=error )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("truescore.irt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("unidim.test.csn")
> ### * unidim.test.csn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: unidim.test.csn
> ### Title: Test for Unidimensionality of CSN
> ### Aliases: unidim.test.csn
> ### Keywords: Test for unidimensionality
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset data.read
> #############################################################################
> 	
> data(data.read)
> dat <- data.read
> set.seed(778)
> res <- unidim.test.csn( dat )
|**********|
|----------|
CSN Statistic = 0.04737 , p = 0.02 
>   ##  CSN Statistic = 0.04737 , p = 0.02 
> 
> ## Not run: 
> ##D #############################################################################
> ##D # SIMULATED EXAMPLE 2: CSN statistic for two-dimensional simulated data
> ##D #############################################################################
> ##D 	
> ##D set.seed(775)
> ##D N <- 2000 
> ##D I <- 30   # number of items
> ##D rho <- .60   # correlation between 2 dimensions
> ##D t0 <- rnorm(N)
> ##D t1 <- sqrt(rho)*t0 + sqrt(1-rho)*rnorm(N)
> ##D t2 <- sqrt(rho)*t0 + sqrt(1-rho)*rnorm(N)
> ##D dat1 <- sim.raschtype(t1 , b=seq(-1.5,1.5,length=I/2) ) 
> ##D dat2 <- sim.raschtype(t2 , b=seq(-1.5,1.5,length=I/2) ) 
> ##D dat <- as.matrix(cbind( dat1 , dat2) )
> ##D res <- unidim.test.csn( dat )
> ##D   ##  CSN Statistic = 0.06056 , p = 0.02
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("unidim.test.csn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("wle.rasch")
> ### * wle.rasch
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: wle.rasch
> ### Title: Weighted Likelihood Estimation of Person Abilities
> ### Aliases: wle.rasch
> ### Keywords: Weighted likelihood estimation (WLE) Person parameter
> ###   estimation
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset Reading
> #############################################################################
> data(data.read)
> 
> # estimate the Rasch model
> mod <- rasch.mml2(data.read)
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:32 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:24:32 
   Deviance = 3942.478 | Deviance change = 13.465952
    Maximum b parameter change =  0.054894  
...........................................................
Iteration 3     2015-06-13 13:24:32 
   Deviance = 3940.2892 | Deviance change = 2.188817
    Maximum b parameter change =  0.042995  
...........................................................
Iteration 4     2015-06-13 13:24:32 
   Deviance = 3939.4559 | Deviance change = 0.833271
    Maximum b parameter change =  0.022889  
...........................................................
Iteration 5     2015-06-13 13:24:32 
   Deviance = 3939.0706 | Deviance change = 0.38535
    Maximum b parameter change =  0.015712  
...........................................................
Iteration 6     2015-06-13 13:24:32 
   Deviance = 3938.8854 | Deviance change = 0.185235
    Maximum b parameter change =  0.010687  
...........................................................
Iteration 7     2015-06-13 13:24:32 
   Deviance = 3938.7952 | Deviance change = 0.090117
    Maximum b parameter change =  0.007515  
...........................................................
Iteration 8     2015-06-13 13:24:32 
   Deviance = 3938.7511 | Deviance change = 0.044171
    Maximum b parameter change =  0.005289  
...........................................................
Iteration 9     2015-06-13 13:24:32 
   Deviance = 3938.7293 | Deviance change = 0.021762
    Maximum b parameter change =  0.003736  
...........................................................
Iteration 10     2015-06-13 13:24:32 
   Deviance = 3938.7186 | Deviance change = 0.010757
    Maximum b parameter change =  0.00264  
...........................................................
Iteration 11     2015-06-13 13:24:32 
   Deviance = 3938.7132 | Deviance change = 0.005327
    Maximum b parameter change =  0.001867  
...........................................................
Iteration 12     2015-06-13 13:24:32 
   Deviance = 3938.7106 | Deviance change = 0.002639
    Maximum b parameter change =  0.001321  
...........................................................
Iteration 13     2015-06-13 13:24:32 
   Deviance = 3938.7093 | Deviance change = 0.001306
    Maximum b parameter change =  0.000934  
...........................................................
Iteration 14     2015-06-13 13:24:32 
   Deviance = 3938.7086 | Deviance change = 0.000645
    Maximum b parameter change =  0.000661  
...........................................................
Iteration 15     2015-06-13 13:24:32 
   Deviance = 3938.7083 | Deviance change = 0.000317
    Maximum b parameter change =  0.000468  
...........................................................
Iteration 16     2015-06-13 13:24:32 
   Deviance = 3938.7082 | Deviance change = 0.000155
    Maximum b parameter change =  0.000331  
...........................................................
Iteration 17     2015-06-13 13:24:32 
   Deviance = 3938.7081 | Deviance change = 7.5e-05
    Maximum b parameter change =  0.000234  
...........................................................
Iteration 18     2015-06-13 13:24:32 
   Deviance = 3938.7081 | Deviance change = 3.5e-05
    Maximum b parameter change =  0.000166  
...........................................................
Iteration 19     2015-06-13 13:24:32 
   Deviance = 3938.708 | Deviance change = 1.6e-05
    Maximum b parameter change =  0.000117  
...........................................................
Iteration 20     2015-06-13 13:24:32 
   Deviance = 3938.708 | Deviance change = 7e-06
    Maximum b parameter change =  8.3e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:32 
End: 2015-06-13 13:24:32 
Time difference of 0.118927 secs
Difference: 0.118927 
------------------------------------------------------------
> mod$item
   item   N         p           b est.b a est.a      thresh c est.c d est.d
A1   A1 328 0.8506098 -2.10462446     1 1     0 -2.10462446 0     0 1     0
A2   A2 328 0.7378049 -1.27423306     2 1     0 -1.27423306 0     0 1     0
A3   A3 328 0.5670732 -0.33787421     3 1     0 -0.33787421 0     0 1     0
A4   A4 328 0.4603659  0.19529469     4 1     0  0.19529469 0     0 1     0
B1   B1 328 0.7134146 -1.12627676     5 1     0 -1.12627676 0     0 1     0
B2   B2 328 0.5060976 -0.03274894     6 1     0 -0.03274894 0     0 1     0
B3   B3 328 0.9085366 -2.73479623     7 1     0 -2.73479623 0     0 1     0
B4   B4 328 0.6829268 -0.95029468     8 1     0 -0.95029468 0     0 1     0
C1   C1 328 0.9329268 -3.10593410     9 1     0 -3.10593410 0     0 1     0
C2   C2 328 0.7134146 -1.12627058    10 1     0 -1.12627058 0     0 1     0
C3   C3 328 0.8719512 -2.30964600    11 1     0 -2.30964600 0     0 1     0
C4   C4 328 0.7347561 -1.25534472    12 1     0 -1.25534472 0     0 1     0
   emp.discrim alpha1 alpha2
A1       0.419      0      0
A2       0.553      0      0
A3       0.543      0      0
A4       0.474      0      0
B1       0.413      0      0
B2       0.426      0      0
B3       0.362      0      0
B4       0.525      0      0
C1       0.427      0      0
C2       0.538      0      0
C3       0.422      0      0
C4       0.451      0      0
> 
> # estmate WLEs
> mod.wle <- wle.rasch( dat = data.read , b = mod$item$b )
WLE Reliability = 0.567 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("wle.rasch", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("wle.rasch.jackknife")
> ### * wle.rasch.jackknife
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: wle.rasch.jackknife
> ### Title: Standard Error Estimation of WLE by Jackknifing
> ### Aliases: wle.rasch.jackknife
> ### Keywords: Weighted likelihood estimation (WLE)
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: Dataset Reading
> #############################################################################
> data(data.read)
> dat <- data.read
> 
> # estimation of the Rasch model
> res <- rasch.mml2( dat , parm.conv = .001)
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:32 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:24:32 
   Deviance = 3942.478 | Deviance change = 13.465952
    Maximum b parameter change =  0.054894  
...........................................................
Iteration 3     2015-06-13 13:24:32 
   Deviance = 3940.2892 | Deviance change = 2.188817
    Maximum b parameter change =  0.042995  
...........................................................
Iteration 4     2015-06-13 13:24:32 
   Deviance = 3939.4559 | Deviance change = 0.83327
    Maximum b parameter change =  0.022889  
...........................................................
Iteration 5     2015-06-13 13:24:32 
   Deviance = 3939.0706 | Deviance change = 0.38535
    Maximum b parameter change =  0.015712  
...........................................................
Iteration 6     2015-06-13 13:24:32 
   Deviance = 3938.8854 | Deviance change = 0.185235
    Maximum b parameter change =  0.010687  
...........................................................
Iteration 7     2015-06-13 13:24:32 
   Deviance = 3938.7952 | Deviance change = 0.090118
    Maximum b parameter change =  0.007515  
...........................................................
Iteration 8     2015-06-13 13:24:32 
   Deviance = 3938.7511 | Deviance change = 0.044171
    Maximum b parameter change =  0.005289  
...........................................................
Iteration 9     2015-06-13 13:24:32 
   Deviance = 3938.7293 | Deviance change = 0.021762
    Maximum b parameter change =  0.003736  
...........................................................
Iteration 10     2015-06-13 13:24:32 
   Deviance = 3938.7186 | Deviance change = 0.010757
    Maximum b parameter change =  0.00264  
...........................................................
Iteration 11     2015-06-13 13:24:32 
   Deviance = 3938.7132 | Deviance change = 0.005327
    Maximum b parameter change =  0.001867  
...........................................................
Iteration 12     2015-06-13 13:24:32 
   Deviance = 3938.7106 | Deviance change = 0.002639
    Maximum b parameter change =  0.001321  
...........................................................
Iteration 13     2015-06-13 13:24:32 
   Deviance = 3938.7093 | Deviance change = 0.001306
    Maximum b parameter change =  0.000934  
------------------------------------------------------------
Start: 2015-06-13 13:24:32 
End: 2015-06-13 13:24:32 
Time difference of 0.09040689 secs
Difference: 0.09040689 
------------------------------------------------------------
> 
> # WLE estimation
> wle1 <- wle.rasch(dat, b = res$item$thresh )
WLE Reliability = 0.567 
> 
> # simple jackknife WLE estimation
> wle2 <- wle.rasch.jackknife(dat, b =res$item$thresh )
WLE Reliability = 0.567 
Jackknife standard of WLE
Simple random sampling of items
12 items
WLE Reliability = 0.554 
1.WLE Reliability = 0.534 
2.WLE Reliability = 0.512 
3.WLE Reliability = 0.498 
4.WLE Reliability = 0.552 
5.WLE Reliability = 0.519 
6.WLE Reliability = 0.554 
7.WLE Reliability = 0.532 
8.WLE Reliability = 0.549 
9.WLE Reliability = 0.532 
10.
WLE Reliability = 0.549 
11.WLE Reliability = 0.544 
12.
WLE Reliability = 0.651 
>   ## WLE Reliability = 0.651 
> 
> # SE(WLE) for testlets A, B and C
> wle3 <- wle.rasch.jackknife(dat, b =res$item$thresh , 
+            testlet = substring( colnames(dat),1,1) )
WLE Reliability = 0.567 
Jackknife standard of WLE
Simple random sampling of testlets
3 testlets
WLE Reliability = 0.372 
1.WLE Reliability = 0.445 
2.WLE Reliability = 0.483 
3.
WLE Reliability = 0.572 
>   ## WLE Reliability = 0.572 
> 		
> # SE(WLE) for item strata A,B, C
> wle4 <- wle.rasch.jackknife(dat, b =res$item$thresh , 
+              stratum = substring( colnames(dat),1,1) )
WLE Reliability = 0.567 
Jackknife standard of WLE
Stratified item sampling
3 strata
WLE Reliability = 0.605 
WLE Reliability = 0.586 
WLE Reliability = 0.563 
WLE Reliability = 0.546 
1.WLE Reliability = 0.59 
WLE Reliability = 0.552 
WLE Reliability = 0.594 
WLE Reliability = 0.569 
2.WLE Reliability = 0.581 
WLE Reliability = 0.559 
WLE Reliability = 0.58 
WLE Reliability = 0.572 
3.
WLE Reliability = 0.683 
>   ## WLE Reliability = 0.683 
> 
> # SE (WLE) for finite item strata
> # A (10 items) , B (7 items) , C (4 items -> no sampling error)
> # in every stratum 4 items were sampled
> size.itempop <- c(10,7,4)
> names(size.itempop) <- c("A","B","C")
> wle5 <- wle.rasch.jackknife(dat, b =res$item$thresh , 
+              stratum = substring( colnames(dat),1,1) ,
+              size.itempop = size.itempop )
WLE Reliability = 0.567 
Jackknife standard of WLE
Stratified item sampling
3 strata
WLE Reliability = 0.605 
WLE Reliability = 0.586 
WLE Reliability = 0.563 
WLE Reliability = 0.546 

Stratum  A (Mean) Correction Factor 0.6 
1.WLE Reliability = 0.59 
WLE Reliability = 0.552 
WLE Reliability = 0.594 
WLE Reliability = 0.569 

Stratum  B (Mean) Correction Factor 0.42857 
2.WLE Reliability = 0.581 
WLE Reliability = 0.559 
WLE Reliability = 0.58 
WLE Reliability = 0.572 

Stratum  C (Mean) Correction Factor 0 
3.
WLE Reliability = 0.876 
>   ## Stratum  A (Mean) Correction Factor 0.6 
>   ## Stratum  B (Mean) Correction Factor 0.42857 
>   ## Stratum  C (Mean) Correction Factor 0 
>   ## WLE Reliability = 0.876 
>          
> # compare different estimated standard errors
> a2 <- aggregate( wle2$wle$wle.jackse , list( wle2$wle$wle) , mean )
> colnames(a2) <- c("wle" , "se.simple")
> a2$se.testlet <- aggregate( wle3$wle$wle.jackse , list( wle3$wle$wle) , mean )[,2]
> a2$se.strata <- aggregate( wle4$wle$wle.jackse , list( wle4$wle$wle) , mean )[,2]
> a2$se.finitepop.strata <- aggregate( wle5$wle$wle.jackse , 
+ 	list( wle5$wle$wle) , mean )[,2]
> round( a2 , 3 )
      wle se.simple se.testlet se.strata se.finitepop.strata
1  -5.082     0.440      0.649     0.331               0.138
2  -3.111     0.865      1.519     0.632               0.379
3  -2.582     0.790      0.849     0.751               0.495
4  -2.130     0.715      1.177     0.546               0.319
5  -1.719     0.597      0.767     0.527               0.317
6  -1.327     0.633      0.623     0.617               0.377
7  -0.939     0.631      0.643     0.604               0.365
8  -0.538     0.655      0.678     0.617               0.384
9  -0.101     0.671      0.646     0.659               0.434
10  0.408     0.771      0.706     0.751               0.461
11  1.082     1.118      0.893     1.076               0.630
12  2.335     0.400      0.631     0.272               0.195
>   ## > round( a2 , 3 )
>   ##       wle se.simple se.testlet se.strata se.finitepop.strata
>   ## 1  -5.085     0.440      0.649     0.331               0.138
>   ## 2  -3.114     0.865      1.519     0.632               0.379
>   ## 3  -2.585     0.790      0.849     0.751               0.495
>   ## 4  -2.133     0.715      1.177     0.546               0.319
>   ## 5  -1.721     0.597      0.767     0.527               0.317
>   ## 6  -1.330     0.633      0.623     0.617               0.377
>   ## 7  -0.942     0.631      0.643     0.604               0.365
>   ## 8  -0.541     0.655      0.678     0.617               0.384
>   ## 9  -0.104     0.671      0.646     0.659               0.434
>   ## 10  0.406     0.771      0.706     0.751               0.461
>   ## 11  1.080     1.118      0.893     1.076               0.630
>   ## 12  2.332     0.400      0.631     0.272               0.195
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("wle.rasch.jackknife", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("yen.q3")
> ### * yen.q3
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: yen.q3
> ### Title: Estimation of the Q_3 Statistic (Yen, 1984)
> ### Aliases: yen.q3
> ### Keywords: Testlets Local dependence Q3
> 
> ### ** Examples
> 
> #############################################################################
> # EXAMPLE 1: data.read. The 12 items are arranged in 4 testlets
> #############################################################################
> data(data.read)
> 
> # estimate the Rasch model
> mod <- rasch.mml2( data.read)
------------------------------------------------------------
Semiparametric Marginal Maximum Likelihood Estimation 
Raschtype Model with generalized logistic link function: alpha1= 0  , alpha2= 0  
------------------------------------------------------------
...........................................................
Iteration 1     2015-06-13 13:24:32 
   Deviance = 3955.944
    Maximum b parameter change =  0.300852  
...........................................................
Iteration 2     2015-06-13 13:24:32 
   Deviance = 3942.478 | Deviance change = 13.465952
    Maximum b parameter change =  0.054894  
...........................................................
Iteration 3     2015-06-13 13:24:32 
   Deviance = 3940.2892 | Deviance change = 2.188817
    Maximum b parameter change =  0.042995  
...........................................................
Iteration 4     2015-06-13 13:24:32 
   Deviance = 3939.4559 | Deviance change = 0.833271
    Maximum b parameter change =  0.022889  
...........................................................
Iteration 5     2015-06-13 13:24:32 
   Deviance = 3939.0706 | Deviance change = 0.38535
    Maximum b parameter change =  0.015712  
...........................................................
Iteration 6     2015-06-13 13:24:32 
   Deviance = 3938.8854 | Deviance change = 0.185235
    Maximum b parameter change =  0.010687  
...........................................................
Iteration 7     2015-06-13 13:24:32 
   Deviance = 3938.7952 | Deviance change = 0.090117
    Maximum b parameter change =  0.007515  
...........................................................
Iteration 8     2015-06-13 13:24:32 
   Deviance = 3938.7511 | Deviance change = 0.044171
    Maximum b parameter change =  0.005289  
...........................................................
Iteration 9     2015-06-13 13:24:32 
   Deviance = 3938.7293 | Deviance change = 0.021762
    Maximum b parameter change =  0.003736  
...........................................................
Iteration 10     2015-06-13 13:24:32 
   Deviance = 3938.7186 | Deviance change = 0.010757
    Maximum b parameter change =  0.00264  
...........................................................
Iteration 11     2015-06-13 13:24:32 
   Deviance = 3938.7132 | Deviance change = 0.005327
    Maximum b parameter change =  0.001867  
...........................................................
Iteration 12     2015-06-13 13:24:32 
   Deviance = 3938.7106 | Deviance change = 0.002639
    Maximum b parameter change =  0.001321  
...........................................................
Iteration 13     2015-06-13 13:24:32 
   Deviance = 3938.7093 | Deviance change = 0.001306
    Maximum b parameter change =  0.000934  
...........................................................
Iteration 14     2015-06-13 13:24:32 
   Deviance = 3938.7086 | Deviance change = 0.000645
    Maximum b parameter change =  0.000661  
...........................................................
Iteration 15     2015-06-13 13:24:32 
   Deviance = 3938.7083 | Deviance change = 0.000317
    Maximum b parameter change =  0.000468  
...........................................................
Iteration 16     2015-06-13 13:24:32 
   Deviance = 3938.7082 | Deviance change = 0.000155
    Maximum b parameter change =  0.000331  
...........................................................
Iteration 17     2015-06-13 13:24:32 
   Deviance = 3938.7081 | Deviance change = 7.5e-05
    Maximum b parameter change =  0.000234  
...........................................................
Iteration 18     2015-06-13 13:24:32 
   Deviance = 3938.7081 | Deviance change = 3.5e-05
    Maximum b parameter change =  0.000166  
...........................................................
Iteration 19     2015-06-13 13:24:32 
   Deviance = 3938.708 | Deviance change = 1.6e-05
    Maximum b parameter change =  0.000117  
...........................................................
Iteration 20     2015-06-13 13:24:32 
   Deviance = 3938.708 | Deviance change = 7e-06
    Maximum b parameter change =  8.3e-05  
------------------------------------------------------------
Start: 2015-06-13 13:24:32 
End: 2015-06-13 13:24:32 
Time difference of 0.1171639 secs
Difference: 0.1171639 
------------------------------------------------------------
> # estmate WLEs
> mod.wle <- wle.rasch( dat = data.read , b = mod$item$b )
WLE Reliability = 0.567 
> # calculate Yen's Q3 statistic
> mod.q3 <- yen.q3( dat = data.read , theta = mod.wle$theta , b = mod$item$b )
Yen's Q3 Statistic based on an estimated theta score 
*** 12 Items | 66 item pairs
*** Q3 Descriptives
     M     SD    Min    10%    25%    50%    75%    90%    Max 
-0.085  0.110 -0.261 -0.194 -0.152 -0.107 -0.051  0.041  0.412 
>   ##   Yen's Q3 Statistic based on an estimated theta score 
>   ##   *** 12 Items | 66 item pairs
>   ##   *** Q3 Descriptives
>   ##        M     SD    Min    10%    25%    50%    75%    90%    Max 
>   ##   -0.085  0.110 -0.261 -0.194 -0.152 -0.107 -0.051  0.041  0.412 
> 
> # plot Q3 statistics
> I <- ncol(data.read)
> image( 1:I , 1:I , mod.q3$q3.matrix , col=gray( 1 - (0:32)/32) ,
+         xlab="Item" , ylab="Item")
> abline(v=c(5,9)) # borders for testlets
> abline(h=c(5,9)) 
> 
> ## Not run: 
> ##D # obtain Q3 statistic from modelfit.sirt function which is based on the 
> ##D # posterior distribution of theta and not on observed values
> ##D fitmod <- modelfit.sirt( mod )
> ##D # extract Q3 statistic
> ##D q3stat <- fit$itempairs$Q3
> ##D   ##  > summary(q3stat)
> ##D   ##      Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
> ##D   ##  -0.21760 -0.11590 -0.07280 -0.05545 -0.01220  0.44710 
> ##D   ##  > sd(q3stat)
> ##D   ##  [1] 0.1101451
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("yen.q3", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  34.845 2.796 37.876 0.082 0.049 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
