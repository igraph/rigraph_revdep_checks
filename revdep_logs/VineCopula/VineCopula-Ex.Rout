
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "VineCopula"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "VineCopula-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('VineCopula')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BB1Copula-class")
> ### * BB1Copula-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BB1Copula-class
> ### Title: Classes '"BB1Copula"', '"surBB1Copula"', '"r90BB1Copula"' and
> ###   '"r270BB1Copula"'
> ### Aliases: BB1Copula-class dduCopula,numeric,BB1Copula-method
> ###   ddvCopula,numeric,BB1Copula-method dduCopula,matrix,BB1Copula-method
> ###   ddvCopula,matrix,BB1Copula-method getKendallDistr,BB1Copula-method
> ###   kendallDistribution,BB1Copula-method surBB1Copula-class
> ###   dduCopula,numeric,surBB1Copula-method
> ###   ddvCopula,numeric,surBB1Copula-method
> ###   dduCopula,matrix,surBB1Copula-method
> ###   ddvCopula,matrix,surBB1Copula-method r90BB1Copula-class
> ###   dduCopula,numeric,r90BB1Copula-method
> ###   ddvCopula,numeric,r90BB1Copula-method
> ###   dduCopula,matrix,r90BB1Copula-method
> ###   ddvCopula,matrix,r90BB1Copula-method r270BB1Copula-class
> ###   dduCopula,numeric,r270BB1Copula-method
> ###   ddvCopula,numeric,r270BB1Copula-method
> ###   dduCopula,matrix,r270BB1Copula-method
> ###   ddvCopula,matrix,r270BB1Copula-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("BB1Copula")
Class "BB1Copula" [package "VineCopula"]

Slots:
                                                                       
Name:        family    dimension   parameters  param.names param.lowbnd
Class:      numeric      integer      numeric    character      numeric
                                
Name:   param.upbnd     fullname
Class:      numeric    character

Extends: 
Class "copula", directly
Class "twoParamBiCop", directly
Class "Copula", by class "copula", distance 2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BB1Copula-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BB1Copula")
> ### * BB1Copula
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BB1Copula
> ### Title: Constructor of the BB1 Family and Rotated Versions thereof
> ### Aliases: BB1Copula surBB1Copula r90BB1Copula r270BB1Copula
> ### Keywords: distribution copula
> 
> ### ** Examples
> 
> library(copula)

Attaching package: ‘copula’

The following object is masked from ‘package:VineCopula’:

    fitCopula

> 
> persp(BB1Copula(c(1,1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> persp(surBB1Copula(c(1,1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> persp(r90BB1Copula(c(-1,-1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> persp(r270BB1Copula(c(-1,-1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BB1Copula", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:copula’

> nameEx("BB6Copula-class")
> ### * BB6Copula-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BB6Copula-class
> ### Title: Classes '"BB6Copula"', '"surBB6Copula"', '"r90BB6Copula"' and
> ###   '"r270BB6Copula"'
> ### Aliases: BB6Copula-class dduCopula,numeric,BB6Copula-method
> ###   ddvCopula,numeric,BB6Copula-method dduCopula,matrix,BB6Copula-method
> ###   ddvCopula,matrix,BB6Copula-method getKendallDistr,BB6Copula-method
> ###   kendallDistribution,BB6Copula-method surBB6Copula-class
> ###   dduCopula,numeric,surBB6Copula-method
> ###   ddvCopula,numeric,surBB6Copula-method
> ###   dduCopula,matrix,surBB6Copula-method
> ###   ddvCopula,matrix,surBB6Copula-method r90BB6Copula-class
> ###   dduCopula,numeric,r90BB6Copula-method
> ###   ddvCopula,numeric,r90BB6Copula-method
> ###   dduCopula,matrix,r90BB6Copula-method
> ###   ddvCopula,matrix,r90BB6Copula-method r270BB6Copula-class
> ###   dduCopula,numeric,r270BB6Copula-method
> ###   ddvCopula,numeric,r270BB6Copula-method
> ###   dduCopula,matrix,r270BB6Copula-method
> ###   ddvCopula,matrix,r270BB6Copula-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("BB6Copula")
Class "BB6Copula" [package "VineCopula"]

Slots:
                                                                       
Name:        family    dimension   parameters  param.names param.lowbnd
Class:      numeric      integer      numeric    character      numeric
                                
Name:   param.upbnd     fullname
Class:      numeric    character

Extends: 
Class "copula", directly
Class "twoParamBiCop", directly
Class "Copula", by class "copula", distance 2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BB6Copula-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BB6Copula")
> ### * BB6Copula
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BB6Copula
> ### Title: Constructor of the BB6 Family and Rotated Versions thereof
> ### Aliases: BB6Copula surBB6Copula r90BB6Copula r270BB6Copula
> 
> ### ** Examples
> 
> library(copula)

Attaching package: ‘copula’

The following object is masked from ‘package:VineCopula’:

    fitCopula

> 
> persp(BB6Copula(c(1,1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> persp(surBB6Copula(c(1,1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> persp(r90BB6Copula(c(-1,-1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> persp(r270BB6Copula(c(-1,-1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BB6Copula", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:copula’

> nameEx("BB7Copula-class")
> ### * BB7Copula-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BB7Copula-class
> ### Title: Classes '"BB7Copula"', '"surBB7Copula"', '"r90BB7Copula"' and
> ###   '"r270BB7Copula"'
> ### Aliases: BB7Copula-class dduCopula,numeric,BB7Copula-method
> ###   ddvCopula,numeric,BB7Copula-method dduCopula,matrix,BB7Copula-method
> ###   ddvCopula,matrix,BB7Copula-method getKendallDistr,BB7Copula-method
> ###   kendallDistribution,BB7Copula-method surBB7Copula-class
> ###   dduCopula,numeric,surBB7Copula-method
> ###   ddvCopula,numeric,surBB7Copula-method
> ###   dduCopula,matrix,surBB7Copula-method
> ###   ddvCopula,matrix,surBB7Copula-method r90BB7Copula-class
> ###   dduCopula,numeric,r90BB7Copula-method
> ###   ddvCopula,numeric,r90BB7Copula-method
> ###   dduCopula,matrix,r90BB7Copula-method
> ###   ddvCopula,matrix,r90BB7Copula-method r270BB7Copula-class
> ###   dduCopula,numeric,r270BB7Copula-method
> ###   ddvCopula,numeric,r270BB7Copula-method
> ###   dduCopula,matrix,r270BB7Copula-method
> ###   ddvCopula,matrix,r270BB7Copula-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("BB7Copula")
Class "BB7Copula" [package "VineCopula"]

Slots:
                                                                       
Name:        family    dimension   parameters  param.names param.lowbnd
Class:      numeric      integer      numeric    character      numeric
                                
Name:   param.upbnd     fullname
Class:      numeric    character

Extends: 
Class "copula", directly
Class "twoParamBiCop", directly
Class "Copula", by class "copula", distance 2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BB7Copula-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BB7Copula")
> ### * BB7Copula
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BB7Copula
> ### Title: Constructor of the BB7 Family and Rotated Versions thereof
> ### Aliases: BB7Copula surBB7Copula r90BB7Copula r270BB7Copula
> 
> ### ** Examples
> 
> library(copula)

Attaching package: ‘copula’

The following object is masked from ‘package:VineCopula’:

    fitCopula

> 
> persp(BB7Copula(c(1,1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> persp(surBB7Copula(c(1,1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> persp(r90BB7Copula(c(-1,-1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> persp(r270BB7Copula(c(-1,-1.5)), dCopula, zlim = c(0,10))
Warning in persp.default(xis, yis, zmat, xlab = xlab, ylab = ylab, zlab = zlab,  :
  surface extends beyond the box
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BB7Copula", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:copula’

> nameEx("BB8Copula-class")
> ### * BB8Copula-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BB8Copula-class
> ### Title: Classes '"BB8Copula"', '"surBB8Copula"', '"r90BB8Copula"' and
> ###   '"r270BB8Copula"'
> ### Aliases: BB8Copula-class dduCopula,numeric,BB8Copula-method
> ###   ddvCopula,numeric,BB8Copula-method dduCopula,matrix,BB8Copula-method
> ###   ddvCopula,matrix,BB8Copula-method getKendallDistr,BB8Copula-method
> ###   kendallDistribution,BB8Copula-method surBB8Copula-class
> ###   dduCopula,numeric,surBB8Copula-method
> ###   ddvCopula,numeric,surBB8Copula-method
> ###   dduCopula,matrix,surBB8Copula-method
> ###   ddvCopula,matrix,surBB8Copula-method r90BB8Copula-class
> ###   dduCopula,numeric,r90BB8Copula-method
> ###   ddvCopula,numeric,r90BB8Copula-method
> ###   dduCopula,matrix,r90BB8Copula-method
> ###   ddvCopula,matrix,r90BB8Copula-method r270BB8Copula-class
> ###   dduCopula,numeric,r270BB8Copula-method
> ###   ddvCopula,numeric,r270BB8Copula-method
> ###   dduCopula,matrix,r270BB8Copula-method
> ###   ddvCopula,matrix,r270BB8Copula-method fitCopula,twoParamBiCop-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("BB8Copula")
Class "BB8Copula" [package "VineCopula"]

Slots:
                                                                       
Name:        family    dimension   parameters  param.names param.lowbnd
Class:      numeric      integer      numeric    character      numeric
                                
Name:   param.upbnd     fullname
Class:      numeric    character

Extends: 
Class "copula", directly
Class "twoParamBiCop", directly
Class "Copula", by class "copula", distance 2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BB8Copula-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BB8Copula")
> ### * BB8Copula
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BB8Copula
> ### Title: Constructor of the BB8 Family and Rotated Versions thereof
> ### Aliases: BB8Copula surBB8Copula r90BB8Copula r270BB8Copula
> 
> ### ** Examples
> 
> library(copula)

Attaching package: ‘copula’

The following object is masked from ‘package:VineCopula’:

    fitCopula

> 
> persp(BB8Copula(c(2,0.9)), dCopula, zlim = c(0,10))
> persp(surBB8Copula(c(2,0.9)), dCopula, zlim = c(0,10))
> persp(r90BB8Copula(c(-2,-0.9)), dCopula, zlim = c(0,10))
> persp(r270BB8Copula(c(-2,-0.9)), dCopula, zlim = c(0,10))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BB8Copula", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:copula’

> nameEx("BetaMatrix")
> ### * BetaMatrix
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BetaMatrix
> ### Title: Matrix of Empirical Blomqvist's Beta Values
> ### Aliases: BetaMatrix
> 
> ### ** Examples
> 
> data(daxreturns)
> Data <- as.matrix(daxreturns)
> 
> # compute the empirical Blomqvist's betas
> BetaMatrix(Data)
           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 1.0000000 0.3989637 0.3316062 0.4110535 0.4369603 0.5215889 0.3298791
 [2,] 0.3989637 1.0000000 0.3972366 0.3419689 0.3989637 0.4110535 0.2746114
 [3,] 0.3316062 0.3972366 1.0000000 0.3195164 0.3039724 0.3436960 0.2797927
 [4,] 0.4110535 0.3419689 0.3195164 1.0000000 0.5112263 0.4265976 0.2763385
 [5,] 0.4369603 0.3989637 0.3039724 0.5112263 1.0000000 0.4386874 0.2884283
 [6,] 0.5215889 0.4110535 0.3436960 0.4265976 0.4386874 1.0000000 0.3419689
 [7,] 0.3298791 0.2746114 0.2797927 0.2763385 0.2884283 0.3419689 1.0000000
 [8,] 0.3160622 0.3540587 0.3143351 0.2279793 0.2746114 0.3005181 0.3022453
 [9,] 0.1675302 0.2089810 0.1968912 0.2107081 0.1882556 0.1381693 0.2435233
[10,] 0.3436960 0.3713299 0.3592401 0.2901554 0.2918826 0.3074266 0.2918826
[11,] 0.5423143 0.3557858 0.3264249 0.3402418 0.3834197 0.4093264 0.3108808
[12,] 0.2780656 0.3402418 0.2694301 0.2245250 0.2711572 0.2832470 0.3195164
[13,] 0.3402418 0.3333333 0.3005181 0.2970639 0.3367876 0.3488774 0.2918826
[14,] 0.4594128 0.4490501 0.3540587 0.4300518 0.4490501 0.4956822 0.3074266
[15,] 0.2849741 0.2331606 0.1830743 0.3212435 0.3713299 0.2867012 0.1986183
           [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]
 [1,] 0.3160622 0.1675302 0.3436960 0.5423143 0.2780656 0.3402418 0.4594128
 [2,] 0.3540587 0.2089810 0.3713299 0.3557858 0.3402418 0.3333333 0.4490501
 [3,] 0.3143351 0.1968912 0.3592401 0.3264249 0.2694301 0.3005181 0.3540587
 [4,] 0.2279793 0.2107081 0.2901554 0.3402418 0.2245250 0.2970639 0.4300518
 [5,] 0.2746114 0.1882556 0.2918826 0.3834197 0.2711572 0.3367876 0.4490501
 [6,] 0.3005181 0.1381693 0.3074266 0.4093264 0.2832470 0.3488774 0.4956822
 [7,] 0.3022453 0.2435233 0.2918826 0.3108808 0.3195164 0.2918826 0.3074266
 [8,] 1.0000000 0.2158895 0.2953368 0.2867012 0.5578584 0.2193437 0.3246978
 [9,] 0.2158895 1.0000000 0.1778929 0.1830743 0.1951641 0.1848014 0.1865285
[10,] 0.2953368 0.1778929 1.0000000 0.3005181 0.2677029 0.2435233 0.3488774
[11,] 0.2867012 0.1830743 0.3005181 1.0000000 0.2694301 0.2901554 0.4024180
[12,] 0.5578584 0.1951641 0.2677029 0.2694301 1.0000000 0.2642487 0.3385147
[13,] 0.2193437 0.1848014 0.2435233 0.2901554 0.2642487 1.0000000 0.3799655
[14,] 0.3246978 0.1865285 0.3488774 0.4024180 0.3385147 0.3799655 1.0000000
[15,] 0.1468048 0.1122625 0.2089810 0.2659758 0.1813472 0.2504318 0.2901554
          [,15]
 [1,] 0.2849741
 [2,] 0.2331606
 [3,] 0.1830743
 [4,] 0.3212435
 [5,] 0.3713299
 [6,] 0.2867012
 [7,] 0.1986183
 [8,] 0.1468048
 [9,] 0.1122625
[10,] 0.2089810
[11,] 0.2659758
[12,] 0.1813472
[13,] 0.2504318
[14,] 0.2901554
[15,] 1.0000000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BetaMatrix", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCop")
> ### * BiCop
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCop
> ### Title: Cunstructing BiCop-objects
> ### Aliases: BiCop
> 
> ### ** Examples
> 
> ## create BiCop object for bivariate t-copula
> obj <- BiCop(family = 2, par = 0.4, par2 = 6)
> 
> ## a selection of function that can be used with BiCop objects
> simdata <- BiCopSim(300, obj)  # simulate data
> BiCopPDF(0.5, 0.5, obj) # evaluate density in (0.5,0.5)
[1] 1.185466
> plot(obj)  # normal contour plot
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCop", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopCDF")
> ### * BiCopCDF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopCDF
> ### Title: Distribution Function of a Bivariate Copula
> ### Aliases: BiCopCDF
> 
> ### ** Examples
> 
> ## simulate from a bivariate Clayton
> simdata <- BiCopSim(300, 3, 3.4)
> 
> ## evaluate the distribution function of the bivariate Clayton copula
> u1 <- simdata[,1]
> u2 <- simdata[,2]
> BiCopCDF(u1, u2, 3, 3.4)
  [1] 0.212083894 0.560454175 0.196829776 0.859783373 0.334142797 0.138883599
  [7] 0.552748610 0.656946696 0.716294284 0.358902123 0.657106132 0.406649144
 [13] 0.215249319 0.010762322 0.680744432 0.429168263 0.336836485 0.754999947
 [19] 0.478876720 0.591381592 0.743614123 0.684320242 0.501994536 0.019720627
 [25] 0.673692866 0.461672664 0.318172610 0.041830170 0.272430716 0.539624409
 [31] 0.690952756 0.357404390 0.478385703 0.450454976 0.081735412 0.325850276
 [37] 0.270163818 0.464160879 0.697817469 0.770254930 0.402432651 0.309902564
 [43] 0.526755239 0.440604149 0.157859951 0.125915290 0.623294168 0.739830600
 [49] 0.371783278 0.723334913 0.516814728 0.269809505 0.445858863 0.109397786
 [55] 0.822399359 0.909295094 0.294693765 0.055312093 0.427042357 0.403252652
 [61] 0.845573559 0.325266686 0.630782109 0.357571974 0.203263111 0.321058009
 [67] 0.032144353 0.826230667 0.484706552 0.844421805 0.608301620 0.175590037
 [73] 0.609058333 0.163878464 0.101571465 0.538136460 0.274644551 0.339289595
 [79] 0.294216757 0.195381304 0.277706814 0.421733480 0.720333595 0.049782599
 [85] 0.565454106 0.606022665 0.691741950 0.371062856 0.601897391 0.591440556
 [91] 0.201688601 0.758395667 0.600742911 0.704561061 0.823026172 0.574257107
 [97] 0.099157544 0.251281107 0.106087540 0.300755602 0.189355553 0.383442247
[103] 0.156051138 0.353445260 0.237769014 0.569868697 0.754009708 0.626534957
[109] 0.642565610 0.746343146 0.174386590 0.276468326 0.793197597 0.128246949
[115] 0.403133907 0.218942785 0.337329582 0.358487519 0.603040975 0.358813218
[121] 0.270584669 0.584756888 0.291400991 0.270925282 0.453995540 0.750041775
[127] 0.419655276 0.292947806 0.211477158 0.367187001 0.403616732 0.263279705
[133] 0.466439291 0.060463864 0.414509798 0.037596575 0.254942295 0.205299452
[139] 0.174436459 0.449884240 0.024025747 0.703587274 0.030608188 0.210400866
[145] 0.093855295 0.142735752 0.761364232 0.464621321 0.061121298 0.049605515
[151] 0.394449212 0.413216316 0.374454880 0.168265886 0.055593257 0.097151257
[157] 0.780802798 0.227744822 0.065636001 0.870926086 0.510225526 0.405327388
[163] 0.845888486 0.768194100 0.251842178 0.746537224 0.380903910 0.061307470
[169] 0.290451789 0.578210814 0.667105491 0.436226140 0.501831663 0.314446545
[175] 0.343212498 0.260100773 0.643573510 0.736279214 0.480576518 0.747377388
[181] 0.084991510 0.625430254 0.563728676 0.065672797 0.586906305 0.383323904
[187] 0.665138618 0.182143650 0.322690699 0.150906032 0.377309335 0.652937289
[193] 0.167981587 0.764145834 0.112547545 0.094783549 0.792890037 0.121846529
[199] 0.506278225 0.227685925 0.449045336 0.931289729 0.876824814 0.350126804
[205] 0.010994635 0.786543245 0.709228011 0.596225473 0.378512582 0.664875538
[211] 0.373815801 0.426252115 0.280636713 0.083968169 0.814257670 0.515317294
[217] 0.328967379 0.099903254 0.377995332 0.473178827 0.031442176 0.447588371
[223] 0.217327056 0.361663573 0.067611532 0.801212727 0.247607998 0.049270220
[229] 0.576458572 0.324353916 0.136902467 0.001605048 0.257187329 0.474040408
[235] 0.437713533 0.456113202 0.577646467 0.085121494 0.715134572 0.457893436
[241] 0.498003300 0.838971972 0.503169431 0.045336633 0.555881808 0.022418980
[247] 0.194331580 0.334462487 0.373599846 0.438035879 0.509068595 0.599445606
[253] 0.468924572 0.387566042 0.655708457 0.735283578 0.007562104 0.489784093
[259] 0.562107349 0.302752252 0.766853423 0.218580395 0.381560134 0.755457200
[265] 0.955922687 0.272025101 0.251443038 0.057390884 0.289182961 0.155876041
[271] 0.393765386 0.507388247 0.120671623 0.799010545 0.523637750 0.767031675
[277] 0.010792082 0.619446682 0.047529687 0.786968380 0.413820169 0.318351521
[283] 0.835610923 0.218595381 0.278001748 0.129935495 0.147382642 0.715055153
[289] 0.544744934 0.786205589 0.344101052 0.302395620 0.488473797 0.066509090
[295] 0.889908357 0.401278597 0.705956499 0.752430964 0.408975709 0.316904963
> 
> ## estimate a bivariate copula from the data and evaluate its CDF 
> cop <- BiCopSelect(u1, u2)
> BiCopCDF(u1, u2, cop)
  [1] 0.213216361 0.561008774 0.197236168 0.860096106 0.334804311 0.139513635
  [7] 0.554371769 0.658277825 0.716335159 0.359996241 0.657527529 0.407697840
 [13] 0.216399514 0.010822285 0.681623292 0.430807824 0.338131450 0.755860247
 [19] 0.479629602 0.592911839 0.744537845 0.685541705 0.503124391 0.019829322
 [25] 0.674830291 0.462498913 0.319578089 0.041980793 0.273789767 0.541308396
 [31] 0.691557591 0.359030873 0.479907006 0.451671644 0.081941037 0.326676238
 [37] 0.271528622 0.464832278 0.698735220 0.770415516 0.403785409 0.311398528
 [43] 0.527923774 0.441572279 0.158513265 0.126258223 0.623954559 0.740551781
 [49] 0.373484916 0.724368183 0.518481361 0.269859897 0.447276229 0.109997213
 [55] 0.822869960 0.909410754 0.296176897 0.055377098 0.427911236 0.404784905
 [61] 0.845634223 0.326501237 0.632198210 0.358961615 0.204261745 0.321831983
 [67] 0.032299365 0.826675443 0.486459913 0.844530768 0.609772903 0.176481229
 [73] 0.610563572 0.164521992 0.101841370 0.539808836 0.276047786 0.340570883
 [79] 0.294963515 0.196305998 0.278249224 0.422886796 0.721156144 0.050056254
 [85] 0.566950501 0.606857037 0.692705135 0.371692154 0.603090792 0.592001660
 [91] 0.202603930 0.759150340 0.601440022 0.705542175 0.823406212 0.575818547
 [97] 0.099324759 0.252486045 0.106402718 0.301726125 0.190263156 0.385015452
[103] 0.156881388 0.354530035 0.238724108 0.570046601 0.754230654 0.627653964
[109] 0.642831097 0.746688916 0.175146559 0.277849264 0.793720035 0.128553546
[115] 0.403976552 0.219780393 0.338751489 0.359832271 0.604571311 0.360483725
[121] 0.271877924 0.585222654 0.292663715 0.271907811 0.454380558 0.750324545
[127] 0.421278359 0.293873718 0.212588231 0.367609085 0.405294134 0.264149235
[133] 0.467605133 0.060701786 0.415778051 0.037737876 0.255996211 0.206230706
[139] 0.175224244 0.451084944 0.024154988 0.704412381 0.030736108 0.211272774
[145] 0.094320757 0.143308328 0.761505765 0.466102570 0.061359945 0.049688157
[151] 0.395313338 0.414980517 0.374520908 0.168809829 0.055903281 0.097611365
[157] 0.781513222 0.228932219 0.065998964 0.871116495 0.511827844 0.405356930
[163] 0.846018444 0.768864981 0.252745335 0.746641034 0.381902257 0.061647496
[169] 0.291561991 0.578402618 0.667172990 0.437995040 0.503339529 0.315656159
[175] 0.344435118 0.260740693 0.644881631 0.736421169 0.481093613 0.748148132
[181] 0.085457241 0.626432926 0.564624095 0.065960968 0.588497186 0.384957989
[187] 0.665610581 0.183134099 0.323413243 0.151720473 0.378929204 0.653060795
[193] 0.168820081 0.764722127 0.112658005 0.095183629 0.793406193 0.122514551
[199] 0.507887441 0.228597453 0.450343689 0.931382639 0.877097675 0.351195641
[205] 0.011010749 0.786592226 0.710039249 0.597790420 0.380147232 0.665689393
[211] 0.375483599 0.427376357 0.282068634 0.084102394 0.814610670 0.515550764
[217] 0.330500913 0.100246392 0.378522636 0.473694693 0.031611083 0.449222860
[223] 0.218488453 0.362039582 0.067816097 0.801479944 0.248641760 0.049502885
[229] 0.576543593 0.325042180 0.137649307 0.001613980 0.257523528 0.475176385
[235] 0.439159996 0.456422134 0.579207899 0.085554734 0.716050141 0.459345035
[241] 0.499019090 0.839125240 0.504927825 0.045352070 0.556467125 0.022452326
[247] 0.195166493 0.336067118 0.375265178 0.438435095 0.510523722 0.600837658
[253] 0.469138872 0.388417996 0.657056326 0.736128168 0.007593754 0.491003015
[259] 0.563750426 0.304066745 0.767631062 0.219407620 0.382023356 0.756210444
[265] 0.955928178 0.272406638 0.252683608 0.057525544 0.290619802 0.156634778
[271] 0.394069415 0.509030666 0.121131637 0.799042254 0.524954532 0.767819462
[277] 0.010814273 0.620809014 0.047650019 0.787493128 0.414902775 0.319504795
[283] 0.836079497 0.219601321 0.278258568 0.130653678 0.147888465 0.716106630
[289] 0.546417874 0.786877612 0.344434356 0.302831019 0.490246935 0.066866270
[295] 0.890101345 0.402804874 0.707038001 0.753313037 0.410718305 0.318459416
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopCDF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopChiPlot")
> ### * BiCopChiPlot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopChiPlot
> ### Title: Chi-plot for Bivariate Copula Data
> ### Aliases: BiCopChiPlot
> 
> ### ** Examples
> 
> # chi-plots for bivariate Gaussian copula data
> n <- 500
> tau <- 0.5
> 
> # simulate copula data
> fam <- 1  
> theta <- BiCopTau2Par(fam, tau)
> set.seed(123)
> dat <- BiCopSim(n, fam, theta)  
> 
> # create chi-plots
> par(mfrow = c(1,3))
> BiCopChiPlot(dat[,1], dat[,2], xlim = c(-1,1), ylim = c(-1,1),
+              main="General chi-plot")
> BiCopChiPlot(dat[,1], dat[,2], mode = "lower", xlim = c(-1,1),
+              ylim = c(-1,1), main = "Lower chi-plot")
> BiCopChiPlot(dat[,1], dat[,2], mode = "upper", xlim = c(-1,1),
+              ylim = c(-1,1), main = "Upper chi-plot")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopChiPlot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("BiCopDeriv")
> ### * BiCopDeriv
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopDeriv
> ### Title: Derivatives of a Bivariate Copula Density
> ### Aliases: BiCopDeriv
> 
> ### ** Examples
> 
> ## simulate from a bivariate t-copula
> simdata <- BiCopSim(300, 2, -0.7, par2 = 4)
> 
> ## derivative of the bivariate t-copula with respect to the first parameter
> u1 <- simdata[,1]
> u2 <- simdata[,2]
> BiCopDeriv(u1, u2, 2, -0.7, par2 = 4, deriv = "par")
  [1]  -1.118981963   1.240853696  -1.001064211   0.126342186   1.175103086
  [6]   1.125284074  -2.660900650  -2.472195467   1.023015475  -1.226835099
 [11] -10.758312703  -0.060805698  -1.275771122  -0.874257992  -5.229438212
 [16]  -1.996785307  -0.024314703  -0.340297829  -1.124279340  -2.830928257
 [21]  -0.644128690  -1.902583339  -0.198026426  -5.534636646  -0.399781564
 [26]   0.435400718  -0.424885018   1.472901008  -2.384264853  -2.524411180
 [31]  -7.785438426  -1.363561693  -1.835639592  -0.722528253  -6.472291697
 [36]  -0.716665042  -0.964105867   0.829886233  -4.540361690   1.351436336
 [41]  -1.503828622  -1.074008721  -2.420782826  -0.457655215   1.239990732
 [46]   1.451559193   1.125103668   0.869236569  -1.879796413  -1.231228404
 [51]  -2.424107089   1.829094173  -1.221019510  -2.559081446  -1.233727812
 [56]   1.872628051  -1.838289517   0.971594798  -0.096706898  -1.937842204
 [61] -15.237257119   0.172804942  -2.778179365  -0.368238987  -3.191034202
 [66]   1.081925107 -13.105195405  -1.253692526  -2.123195334  -8.688276102
 [71]  -1.503515318   0.256531438  -2.674138975  -4.198369584  -5.259632795
 [76]  -1.944954160  -1.969911957   0.006893071   1.207272916   0.571959168
 [81]  -0.132434126  -0.754275953  -4.565334109   0.127084068  -2.903169549
 [86]   0.771316852  -4.357864429   0.489405734  -0.218840978   1.257765042
 [91]   0.720810321  -3.023537238  -5.465362366   0.055533560  -2.703654480
 [96]  -2.809374993  -2.368171453  -2.796443300  -5.602431270  -1.693541846
[101]   0.551536277  -1.064635971  -2.851261121   0.383686061  -2.937039105
[106] -13.728663798   1.428865348  -4.156683579   1.475522589 -11.428897046
[111]   1.042581628  -2.329817184  -3.371593709   1.422863380   0.041637025
[116]   1.087794501  -2.304816570  -1.944080252  -1.899435223  -2.039960766
[121]  -2.645050409  -6.650555229   0.050104775   0.851039002   1.383789144
[126]   1.465850488  -2.014890698   0.938868515  -2.392303876   1.122254766
[131]  -1.525108901  -2.071212850  -1.173020644 -10.741866594  -0.542828355
[136]   1.515200988   0.630401901   0.694797858   0.931185696  -0.680191222
[141]  -7.933722404  -5.163276704   1.664827305   0.960737875   1.063045879
[146]   1.342918851 -25.249465414  -1.393407553   1.532198588  -6.911077681
[151]   0.376116964  -2.132593253   1.552339321  -3.505820153  -1.224401790
[156]   1.227776973   0.353972461  -2.323316239  -0.313598837  -0.566267188
[161]  -2.330830899   1.274204534   1.293889346   0.860444774  -2.469578460
[166] -37.208160647  -0.658022946  -0.468399340   0.542603267   1.471761927
[171] -62.570186831  -2.007473905  -2.147550775   0.259715654  -1.822814641
[176]   1.381625780  -3.213788742 -28.991603753  -1.229075644  -3.627148879
[181]  -0.101623278  -4.587179691   0.581309497  -9.140049046  -2.507966161
[186]  -2.212019166  -9.855455970  -1.589138378  -0.337898112  -2.553649116
[191]  -2.226506883   1.333901700   0.465082093   1.189110937   0.796068401
[196]   1.443132908  -3.501076181  -0.501800492  -2.291129850   0.935368493
[201]  -1.064749466   1.467016724   1.082767823  -1.259347011 -35.328425259
[206] -54.951284051   0.718174055  -2.464860924  -1.312713214   0.813159659
[211]  -2.210898561  -0.448716041  -1.620526551  -2.795506995   1.473304529
[216]  -5.057278714  -2.325488643  -6.612891371   1.047891665   1.184335554
[221]   1.067936715  -1.893917726  -1.660850454   1.235448817   1.395848509
[226]  -8.352631627   0.661067847 -10.045949778   1.301830099   1.184362514
[231]  -2.365111887 -19.375622882   0.787353636  -1.284525224  -1.465763628
[236]   1.487875678  -2.800629638   0.974747012  -3.893986259  -1.347791384
[241]  -1.715161311   1.344923130  -2.191660590   0.729214728  -4.251170941
[246] -15.846996489   0.963319101  -2.045913223  -2.214253517   0.123732841
[251]  -1.130187683  -0.976720057   1.550396563  -0.114614937  -2.106725798
[256]  -3.543205014 -64.153096610  -1.674467836  -2.013424285  -2.506361843
[261]   0.171864835   1.109748552   1.058702426   0.607026838   0.841762192
[266]   1.600486017  -0.341279447   1.218882366  -1.075804146  -3.976274166
[271]   1.462331510  -2.327053523   1.443964144 -70.883566817  -0.662165420
[276]  -1.690102935 -50.916636504  -3.285496238   1.214680711   1.243536650
[281]  -0.209042356  -1.987493543   0.412999360  -3.236351739   1.359980628
[286]  -1.527350949   1.444523027  -2.321816594  -2.549388281   0.552707478
[291]   1.307238920   1.553288676  -2.277551572  -4.393119872   1.180012547
[296]  -1.006935254  -0.716277972  -0.594563456  -2.172846043  -1.984262894
> 
> ## estimate a bivariate copula from the data
> ## and evaluate its derivative w.r.t. the parameter
> cop <- BiCopEst(u1, u2, family = 2)
> BiCopDeriv(u1, u2, cop, deriv = "par")
  [1]  -1.07402602   1.37042330  -0.64372355   0.62196733   1.35466362
  [6]   1.28034577  -2.98767753  -2.68934278   0.96820579  -1.18745623
 [11] -12.05303853   0.17400295  -1.26038597   0.97921453  -5.90195029
 [16]  -2.20309341   0.15346666  -0.13257668  -0.79676426  -3.18269540
 [21]  -0.46886149  -1.97214553  -0.04068413  -4.35098126  -0.25170332
 [26]   0.64162638  -0.29860471   1.39128233  -2.65398260  -2.83465866
 [31]  -8.82492615  -1.41004765  -1.92194270  -0.62895120  -6.37084242
 [36]  -0.54997370  -0.91969868   1.02541436  -5.06575257   1.31313438
 [41]  -1.56012220  -1.05758140  -2.49591265  -0.20473843   1.36872194
 [46]   1.43896198   1.27571131   1.05676245  -2.05702485  -1.14326167
 [51]  -2.69550025   1.65418013  -1.17043342  -2.58657139  -0.84939513
 [56]   2.27583602  -1.98686536   0.95988528   0.19285155  -2.11724625
 [61] -11.65595583   0.36322584  -3.08999263  -0.22404972  -3.58513454
 [66]   1.25983646 -14.33445072  -0.84247371  -2.36652023  -6.80051662
 [71]  -1.55887500   0.45862097  -2.98469253  -4.64768025  -5.23078174
 [76]  -2.12934188  -2.14025942   0.18848780   1.35353859   0.76859877
 [81]   0.15438211  -0.65622644  -5.02163898   0.57066834  -3.24816757
 [86]   0.95825001  -4.86719603   0.72520493  -0.06732159   1.38224945
 [91]   0.91151793  -3.08225619  -5.87032957   0.24914136  -2.26983278
 [96]  -3.15986098  -1.52524738  -3.14449993  -5.82427832  -1.70624895
[101]   0.74966685  -1.03664334  -3.08265890   0.59877098  -3.23350140
[106] -13.12286946   1.40599543  -4.67879232   1.46973879 -12.71655787
[111]   1.20661671  -2.58890708  -3.24971295   1.39714761   0.24807573
[116]   1.24416666  -2.56239814  -2.09633371  -2.04332203  -2.25888136
[121]  -2.97213832  -6.79947280   0.22568825   1.03514235   1.48383935
[126]   1.46496733  -2.22433918   1.11988054  -2.60957813   1.31050648
[131]  -1.60083608  -2.12394834  -1.04103839 -12.17702297  -0.37995002
[136]   1.42829180   0.82259284   0.88634412   1.10884764  -0.57920484
[141]  -7.37451534  -5.77654941   1.58514075   1.13307793   1.25119672
[146]   1.44310696 -27.89778120  -1.44327977   1.50769139  -5.32549061
[151]   0.64309305  -2.38204539   1.40865566  -3.65932889  -0.79197797
[156]   1.37487181   0.59177860  -2.54198800   0.06306557   0.32268877
[161]  -2.55566841   1.10525515   1.24658181   1.05556276  -2.62408820
[166] -41.96645377  -0.52347133  -0.06669671   0.73877395   1.43207881
[171] -71.38303394  -2.21142574  -2.29709032   0.45254066  -1.92392828
[176]   1.47393763  -3.59695663 -32.92692237  -0.69491217  -3.81908780
[181]   0.20201024  -5.14029364   0.77533235 -10.36165562  -2.79973699
[186]  -2.47533166 -11.10477575  -1.59950810  -0.11697461  -2.70627739
[191]  -2.49218341   1.27334241   0.67035122   1.33184077   1.59142360
[196]   1.50843176  -3.39022289  -0.28678539  -2.50819338   1.11018708
[201]  -0.96055861   1.34683567   1.41166327  -1.22007225 -27.37125299
[206] -57.62031303   0.91248907  -2.74088446  -1.34347480   0.99825856
[211]  -2.47712697  -0.24330093  -1.71237804  -1.74991952   1.51140412
[216]  -3.80820550  -2.60729926  -7.22111758   1.32951572   1.33356671
[221]   1.50705655  -2.07321492  -1.72157373   1.40459293   1.34526831
[226]  -8.34515941   0.85233987 -11.19796244   1.21200950   1.35268254
[231]  -2.44372785  -4.42761130   1.09809566  -1.15547793  -1.52676238
[236]   1.54151697  -3.15037909   1.18963888  -4.25588064  -1.38534381
[241]  -1.59218149   1.29971351  -2.44846117   0.72513278  -4.15239402
[246] -11.88232111   1.13592511  -2.26052491  -2.48119356   0.72178433
[251]  -1.12588905  -0.93363293   1.53441967   0.08589610  -2.25042260
[256]  -3.77424843 -73.17491447  -1.63156806  -2.20551357  -2.79762544
[261]   0.40220022   1.26275596   1.25120452   0.81834036   0.95740256
[266]   1.60954473  -0.20156744   1.16728068  -1.05649474  -4.47171694
[271]   1.55141609  -2.56420784   1.49924558 -71.13310806  -0.57123567
[276]  -1.56408563 -49.80547361  -3.70029259   1.15236406   1.37663360
[281]   0.01564266  -2.10994044   0.73222237  -3.64342657   1.55911728
[286]  -1.44119111   1.49661090  -2.41277164  -2.86366925   0.78398052
[291]   1.46863332   1.62659023  -2.54797876  -4.48187041   1.62781393
[296]  -0.95598676  -0.58419738  -0.40475104  -2.43389298  -2.17743788
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopDeriv", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopDeriv2")
> ### * BiCopDeriv2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopDeriv2
> ### Title: Second Derivatives of a Bivariate Copula Density
> ### Aliases: BiCopDeriv2
> 
> ### ** Examples
> 
> ## simulate from a bivariate t-copula
> simdata <- BiCopSim(300, 2, -0.7, par2 = 4)
> 
> ## second derivative of the bivariate t-copula with respect to the first parameter
> u1 <- simdata[,1]
> u2 <- simdata[,2]
> BiCopDeriv2(u1, u2, 2, -0.7, par2 = 4, deriv = "par")
  [1]    2.4126542   -6.6825108   -6.3560370  -13.7227857   -9.1816929
  [6]   -7.0908205   13.7290309   10.7473379    1.2577657    2.6630769
 [11]   45.1413216   -5.6405356    3.4557714  -38.1175487   23.8842516
 [16]   10.4429381   -3.4900896   -4.0350153   -5.2822373   14.4093322
 [21]   -2.3705610    6.3865847   -2.3729617   -8.3403632   -1.7953292
 [26]   -5.9126744   -0.8925703   -2.7198451   12.1687196   13.2898122
 [31]   34.8767633    5.5283219    6.8140897    0.5179240   12.8722339
 [36]   -1.9694262    2.3857559   -7.1967954   19.9757800   -0.8634186
 [41]    5.8194993    3.3938077    7.1423000   -5.1528390   -6.5129152
 [46]   -2.6078043   -6.5350832   -6.9423348    9.5969194    1.2028442
 [51]   12.2097919   -5.3415160    2.3088684    6.2549771   -6.3055972
 [56]  -20.6839367    8.6985442    1.8900924   -7.2938766    9.6259884
 [61]  -15.8136161   -4.4191251   13.3567417   -1.6699869   15.6181921
 [66]   -8.2228638   49.6433734   -6.8637577   11.5149595  -10.1757433
 [71]    5.7891358   -5.1789980   13.2930910   17.9367741   11.1038423
 [76]    9.7799834    9.3298570   -3.7109533   -7.6361988   -5.8621277
 [81]   -7.0977482    0.3699164   18.6443999  -12.3991863   14.2560643
 [86]   -6.1678671   19.3905631   -7.4826160   -2.0968065   -6.4709585
 [91]   -6.1599241    7.7973748   19.3468978   -4.3365165   -3.1372378
 [96]   14.3722621  -12.2920083   14.3064742   16.3602446    4.6174577
[101]   -5.8752261    2.9774240   11.4235543   -6.1721458   13.0711948
[106]   24.5566247   -2.0566903   19.3946357   -3.4040873   46.5514372
[111]   -6.6975421   11.8752549    4.8264870   -1.9410271   -4.8470163
[116]   -6.5319545   11.8388787    8.7842751    8.5351932   10.8108849
[121]   13.7383533   17.5443858   -3.4835638   -6.5227577   -7.3817498
[126]   -3.1497797   10.5288361   -7.0505394   10.7116425   -9.1255948
[131]    6.4561544    6.1147706   -0.1415321   47.2160109   -2.1404643
[136]   -3.2675803   -5.8061782   -6.0783318   -6.6882969    0.2205718
[141]    9.2056534   22.6513172   -5.4130890   -6.4797445   -8.6119575
[146]   -6.1626208   99.0525948    5.6320135   -4.5034060  -10.8423355
[151]   -8.2161180   11.7010068   -3.1354411   10.6979666   -7.4363695
[156]   -7.9862145   -7.0399481   10.7286487   -9.0056350  -19.8533850
[161]   10.9014112   -0.7675042   -0.2967231   -7.3862615    9.1439497
[166]  155.9358951   -1.0080337   -9.1237377   -5.7171014   -2.9464925
[171]  269.9285276   10.3593989    8.7543815   -4.7214883    7.2427847
[176]   -6.7186224   15.3700517  124.6436795   -9.6978141   11.7143732
[181]   -7.6979536   20.5984504   -5.7257439   40.5312907   12.7734411
[186]   12.0655708   42.4723521    4.4524000   -4.4733160    9.1906767
[191]   12.1270553   -0.8568985   -5.9649734   -7.0021920  -23.9452815
[196]   -6.2800218    5.3513165   -3.9053336   10.6781184   -6.4459971
[201]    0.4934674   -2.4424125  -13.7947217    2.6918629  -15.0437654
[206]  179.5492436   -6.4095059   12.3367635    5.0010992   -6.3084576
[211]   12.1575256   -3.7222823    6.9552673  -14.7678286   -5.2660209
[216]  -11.0043502   12.5483203   25.2705550  -12.1320323   -7.5170928
[221]  -16.7607915    9.6529562    5.9831467   -9.2588542   -1.5943981
[226]   19.2252029   -5.8827620   41.3950758   -0.7504865   -8.7125535
[231]    7.1471377 -182.3423219  -11.5964015    0.1386318    5.9833540
[236]   -6.7067508   14.3516973   -9.2066813   15.6816459    5.2243435
[241]    1.1197675   -0.8486390   11.8796392    2.1755199    7.3798075
[246]  -19.7251148   -6.5430234   10.6690874   12.1767844  -16.2087793
[251]    3.8184437    2.4339272   -5.1251428   -4.2674313    8.5722830
[256]   12.3852346  276.5338339    3.0855253    9.9835689   12.7594328
[261]   -6.1429545   -6.5277846   -8.7959204   -6.8613633    3.2834040
[266]   -6.8909722   -1.5026474    0.2997642    3.2883771   18.6179306
[271]   -8.1021536   11.2468036   -5.3373429  195.6539596    0.6054940
[276]    0.9947356  122.5599083   16.1741216    0.2079989   -7.1625500
[281]   -4.9097796    7.9203020  -10.0926920   15.9586637  -11.5061335
[286]    1.7095188   -4.9261936    7.3923584   13.3974394   -7.5603040
[291]   -9.6068616   -8.6709300   12.2354089   11.2373337  -17.6110050
[296]    2.1594059   -0.8513871   -2.9233828   12.0301834   10.0336656
> 
> ## estimate a bivariate copula from the data and evaluate its derivative
> cop <- BiCopEst(u1, u2, family = 2)
> BiCopDeriv2(u1, u2, cop, deriv = "par")
  [1]    1.52572159   -6.85383040   -9.44469977  -16.32525875   -9.55003371
  [6]   -7.49189953   16.11886292   11.88475842    1.12516154    1.76278713
 [11]   53.13556067   -7.46998617    2.77731540  -45.65415552   28.49029946
 [16]   11.90780320   -4.91690702   -5.87744491   -8.28398244   16.96124372
 [21]   -4.15612698    6.21419993   -3.74266436  -18.89105926   -3.21917413
 [26]   -7.21258431   -2.12574147   -2.20855663   14.07304691   15.60206392
 [31]   42.01154177    5.51168259    6.87777116   -0.59884327    9.15581586
 [36]   -3.72921785    1.62070731   -8.08693394   23.30681283   -0.58228463
 [41]    5.79401112    2.86415413    6.73131836   -7.34022882   -6.68192352
 [46]   -2.19426102   -6.91754143   -7.75769697   10.78925089   -0.16713918
 [51]   14.09381072   -4.08093892    1.29841589    5.31301947   -9.68283213
 [56]  -19.88390531    9.54000088    1.74898803   -9.42116404   10.77990911
 [61]  -46.76728653   -5.80738955   15.42864029   -3.03725763   18.38371365
 [66]   -8.74143769   55.40298840  -10.39419043   13.35792258  -26.86158001
 [71]    5.75242155   -6.58981117   15.44839278   20.60276477    8.52308118
 [76]   10.99536460   10.32501426   -5.14721330   -7.89683772   -6.99225511
 [81]   -9.23997435   -0.81471939   21.15221838  -14.85381904   16.64580619
 [86]   -7.06956998   22.65949093   -8.87719849   -3.42677389   -6.60384596
 [91]   -7.12852012    6.94085564   20.78419292   -5.83102631   -7.62961596
 [96]   16.92915905  -18.71434726   16.84376192   15.89941804    3.96790777
[101]   -7.03162148    2.31872033   12.45370947   -7.56345940   14.81412504
[106]   13.32293093   -1.66924297   22.97270938   -2.96143468   54.01301009
[111]   -7.22708541   13.69281721    2.25464559   -1.56087395   -6.43850278
[116]   -6.97870795   13.66361248    9.56672742    9.25217102   12.40401371
[121]   16.14987887   15.92912889   -4.83818908   -7.33854205   -7.25834817
[126]   -2.72646683   12.01632479   -7.76461529   11.91694485   -9.59809604
[131]    6.65643507    5.66216917   -1.85834594   56.84506254   -3.77493847
[136]   -2.66998238   -6.85871547   -7.07406600   -7.39481902   -0.94206569
[141]    1.25785753   26.59136030   -4.51237277   -7.12932869   -9.17972725
[146]   -6.11200548  111.95951267    5.62925744   -3.93395657  -24.55524317
[151]   -9.83889682   13.62247588   -2.42888779   10.53933437  -11.05482864
[156]   -8.21401601   -8.56644021   12.01291500  -11.68133881  -24.48799345
[161]   12.25841910   -0.53812636   -0.09620761   -8.24132941    9.54940125
[166]  183.01754685   -2.47343087  -12.03382421   -6.86774771   -2.47643120
[171]  321.56546692   11.77711448    9.32770869   -6.06456903    7.49211120
[176]   -6.58963275   17.97353808  148.93614798  -13.80021831   11.88387350
[181]   -9.89148149   24.22936035   -6.83057080   48.82987026   14.84669009
[186]   14.08648205   50.57666236    3.84179682   -6.39859301    9.52295140
[191]   14.16377875   -0.59668706   -7.23534419   -7.28198070  -26.08536662
[196]   -5.99715384    2.81584349   -5.88885380   11.97149633   -7.13239847
[201]   -0.93344915   -1.91130336  -14.55791833    1.77200603  -86.69086833
[206]  173.64082435   -7.40211500   14.24072366    4.83349195   -7.16325080
[211]   14.22324214   -5.61260336    7.26992098  -22.45799874   -4.88829288
[216]  -21.54497873   14.69381895   28.24446931  -12.88214053   -7.81978721
[221]  -17.73363623   10.85749612    5.88126436   -9.50389809   -1.24295812
[226]   15.45815295   -6.90413546   48.25614319   -0.52537740   -9.04796618
[231]    6.80076855 -257.35115016  -12.82771813   -1.60762026    6.05233435
[236]   -6.31804973   16.90771765   -9.96151576   17.53470386    5.10892124
[241]   -0.77247139   -0.57607544   13.83122862    1.84783441    4.63431452
[246]  -53.16188417   -7.19204820   12.19230339   14.24858133  -19.08486485
[251]    3.38559820    1.67365099   -4.52714397   -5.92285472    9.10734073
[256]   13.00367435  329.18155194    1.90260018   11.22755710   14.82744309
[261]   -7.78070611   -6.93673051   -9.37872587   -8.04094065    3.24693090
[266]   -6.20957067   -2.80810442    0.39882852    2.72240879   22.00694039
[271]   -7.80428712   12.76935760   -5.03733810  158.40327598   -0.43697091
[276]   -0.91094357   86.12860927   19.12354915    0.29995932   -7.33934615
[281]   -6.77848160    8.29414335  -11.84504724   18.85230631  -11.54520376
[286]    0.20924327   -4.61759696    7.19736875   15.73771898   -8.87545666
[291]   -9.70540242   -8.15875151   14.27590626   10.06496857  -18.37776512
[296]    1.28799187   -2.32939381   -4.78771291   14.07028170   11.32637582
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopDeriv2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopEst")
> ### * BiCopEst
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopEst
> ### Title: Parameter Estimation for Bivariate Copula Data
> ### Aliases: BiCopEst
> 
> ### ** Examples
> 
> ## Example 1: bivariate Gaussian copula
> dat <- BiCopSim(500, 1, 0.7)
> u1 <- dat[,1]
> v1 <- dat[,2]
> 
> # empirical Kendall's tau
> tau1 <- cor(u1, v1, method = "kendall")
> 
> # inversion of empirical Kendall's tau 
> BiCopTau2Par(1, tau1)
[1] 0.7045111
> BiCopEst(u1, v1, family = 1, method = "itau")$par
[1] 0.7045111
> 
> # maximum likelihood estimate for comparison
> BiCopEst(u1, v1, family = 1, method = "mle")$par
[1] 0.703239
> 
> 
> ## Example 2: bivariate Clayton and survival Gumbel copulas
> # simulate from a Clayton copula
> dat <- BiCopSim(500, 3, 2.5)
> u2 <- dat[,1]
> v2 <- dat[,2]
> 
> # empirical Kendall's tau
> tau2 <- cor(u2, v2, method = "kendall")
> 
> # inversion of empirical Kendall's tau for the Clayton copula
> BiCopTau2Par(3, tau2)
[1] 2.480802
> BiCopEst(u2, v2, family = 3, method = "itau", se = TRUE) 
$family
[1] 3

$par
[1] 2.480802

$par2
[1] 0

$se
[1] 0.2366735

$se2
[1] 0

attr(,"class")
[1] "BiCop"
> 
> # inversion of empirical Kendall's tau for the survival Gumbel copula
> BiCopTau2Par(14, tau2)
[1] 2.240401
> BiCopEst(u2, v2, family = 14, method = "itau", se = TRUE)
$family
[1] 14

$par
[1] 2.240401

$par2
[1] 0

$se
[1] 0.1183367

$se2
[1] 0

attr(,"class")
[1] "BiCop"
> 
> # maximum likelihood estimates for comparison
> BiCopEst(u2, v2, family = 3, method = "mle", se = TRUE)
$family
[1] 3

$par
[1] 2.370793

$par2
[1] 0

$se
[1] 0.1337379

$se2
[1] 0

attr(,"class")
[1] "BiCop"
> BiCopEst(u2, v2, family = 14, method = "mle", se = TRUE)
$family
[1] 14

$par
[1] 2.244569

$par2
[1] 0

$se
[1] 0.08094233

$se2
[1] 0

attr(,"class")
[1] "BiCop"
>  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopEst", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopGofTest")
> ### * BiCopGofTest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopGofTest
> ### Title: Goodness-of-Fit Test for Bivariate Copulas
> ### Aliases: BiCopGofTest
> 
> ### ** Examples
> 
> # simulate from a bivariate Clayton copula
> set.seed(123)
> simdata <- BiCopSim(300, 3, 2)
> u1 <- simdata[,1]
> u2 <- simdata[,2]
> 
> # perform White's goodness-of-fit test for the true copula
> BiCopGofTest(u1, u2, family = 3)
$p.value
          [,1]
[1,] 0.9663826

$statistic
            [,1]
[1,] 0.001776255

> 
> # perform Kendall's goodness-of-fit test for the Frank copula
> BiCopGofTest(u1, u2, family = 5)
$p.value
          [,1]
[1,] 0.6304192

$statistic
          [,1]
[1,] 0.2314927

> 
> # perform Kendall's goodness-of-fit test for the true copula
> gof <- BiCopGofTest(u1, u2, family = 3, method = "kendall", B=50)
> gof$p.value.CvM
[1] 0.62
> gof$p.value.KS
[1] 0.8
> 
> # perform Kendall's goodness-of-fit test for the Frank copula
> gof <- BiCopGofTest(u1, u2, family = 5, method = "kendall", B=50)
> gof$p.value.CvM
[1] 0
> gof$p.value.KS
[1] 0.02
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopGofTest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopHfunc")
> ### * BiCopHfunc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopHfunc
> ### Title: Conditional Distribution Function of a Bivariate Copula
> ### Aliases: BiCopHfunc
> 
> ### ** Examples
> 
> # load data set
> data(daxreturns)
> 
> # h-functions of the Gaussian copula
> h1 <- BiCopHfunc(daxreturns[,2], daxreturns[,1], 1, 0.5)
> ## Don't show: 
> h1
$hfunc1
   [1] 6.220108e-01 3.218472e-01 7.129364e-01 4.437906e-01 5.492441e-01
   [6] 2.659561e-01 3.172890e-01 5.424892e-01 4.214900e-01 5.596056e-01
  [11] 1.808212e-01 2.110578e-02 3.268378e-01 4.186970e-01 4.539761e-01
  [16] 8.819727e-01 7.710018e-02 2.066970e-01 4.570489e-01 7.192216e-01
  [21] 3.625526e-01 7.493323e-01 4.091462e-01 3.606287e-01 9.520267e-01
  [26] 3.580507e-01 1.260451e-01 3.992607e-01 8.158813e-01 5.235301e-01
  [31] 3.404628e-01 9.973454e-02 3.719666e-01 1.666953e-02 8.525902e-01
  [36] 5.271848e-01 3.355021e-01 9.095176e-01 8.125316e-01 5.717504e-01
  [41] 6.645106e-01 6.481941e-01 3.107388e-01 7.543199e-01 3.066058e-01
  [46] 8.879242e-01 1.261062e-01 5.370029e-01 9.911515e-01 8.153369e-01
  [51] 7.832804e-01 1.739493e-01 1.891788e-01 7.224191e-01 5.028833e-01
  [56] 4.522016e-01 2.189110e-01 9.199584e-01 7.869646e-01 4.762817e-01
  [61] 8.638222e-02 4.252703e-01 1.049839e-01 3.728218e-01 2.958434e-01
  [66] 6.637995e-01 3.207335e-01 4.260785e-01 1.753042e-01 9.926601e-01
  [71] 7.040399e-01 5.598386e-02 7.551352e-02 2.291185e-01 1.864402e-01
  [76] 8.521182e-01 6.415018e-01 6.317190e-01 3.704021e-01 7.012655e-01
  [81] 2.146725e-01 9.657149e-01 6.505207e-01 6.852600e-01 6.963995e-01
  [86] 2.094733e-01 5.398654e-01 3.378816e-01 2.054165e-02 1.517736e-01
  [91] 7.462270e-01 6.324766e-01 6.053802e-01 5.225672e-01 6.995091e-01
  [96] 7.088544e-01 1.418718e-01 3.575292e-01 2.761821e-01 5.208735e-01
 [101] 8.470385e-01 3.948429e-01 7.485560e-01 8.005309e-01 4.848418e-01
 [106] 2.013726e-01 2.712788e-01 8.256906e-02 8.525972e-01 5.032331e-01
 [111] 6.371786e-01 4.639744e-01 4.729835e-01 3.866720e-01 3.431906e-01
 [116] 6.087868e-01 6.601683e-01 1.874756e-01 8.335392e-01 8.003653e-01
 [121] 3.665657e-01 1.947257e-01 5.881205e-02 4.375514e-01 9.411151e-01
 [126] 1.332270e-01 4.419045e-01 5.477902e-01 6.204754e-01 9.974483e-01
 [131] 8.600678e-02 9.031677e-01 6.408202e-01 2.446886e-01 5.065390e-01
 [136] 2.607399e-01 6.340757e-01 5.256622e-01 5.211369e-01 7.913579e-01
 [141] 4.546972e-01 7.202678e-01 7.304427e-01 6.881829e-01 8.335851e-01
 [146] 7.158278e-01 1.998259e-01 8.179546e-01 5.276375e-01 1.513553e-01
 [151] 3.252458e-01 4.025327e-01 5.493411e-01 9.425643e-01 9.942326e-01
 [156] 3.825682e-01 4.242957e-01 6.343864e-01 9.263601e-01 9.176409e-02
 [161] 3.030937e-01 6.559799e-01 6.485043e-01 1.223301e-01 5.428482e-01
 [166] 9.212406e-02 1.610594e-01 3.656983e-01 5.104640e-01 8.445684e-01
 [171] 7.804541e-02 1.599773e-01 8.064477e-01 7.440593e-01 6.936814e-01
 [176] 7.822910e-01 3.743332e-01 4.744443e-04 4.002331e-01 7.381080e-01
 [181] 7.904385e-01 5.868182e-01 2.399785e-01 5.398514e-01 3.724882e-01
 [186] 3.228811e-01 6.624500e-01 8.126232e-01 5.463096e-01 9.512261e-01
 [191] 4.814837e-01 5.301889e-01 2.147525e-01 6.535847e-01 2.559981e-01
 [196] 3.579175e-01 8.283286e-01 8.870790e-01 8.341937e-01 5.903904e-01
 [201] 4.807299e-01 8.526493e-01 8.255190e-01 2.282090e-01 1.320756e-01
 [206] 7.775126e-01 6.283700e-01 5.481352e-01 9.123231e-01 6.748970e-01
 [211] 2.689369e-01 3.319067e-01 8.463019e-01 7.424585e-01 8.283626e-01
 [216] 6.119915e-01 4.210478e-01 4.769737e-01 4.135918e-01 2.903747e-01
 [221] 9.279669e-01 1.832669e-02 3.997622e-01 4.360610e-01 6.157701e-01
 [226] 6.775670e-01 9.367123e-01 2.842308e-01 4.739750e-01 2.813141e-01
 [231] 4.553210e-01 7.070964e-01 7.987352e-01 7.299530e-01 3.025411e-01
 [236] 9.069150e-01 9.608043e-01 8.180575e-01 5.125825e-01 6.650703e-02
 [241] 1.718663e-01 4.635191e-01 8.976720e-01 2.922489e-01 1.300253e-01
 [246] 5.460797e-01 6.306756e-01 8.098946e-01 2.642022e-01 7.639864e-01
 [251] 2.931063e-01 5.775031e-01 7.860199e-01 3.518381e-01 2.794586e-01
 [256] 2.858959e-01 8.276341e-01 9.808762e-01 9.996882e-01 4.336880e-01
 [261] 9.485243e-01 4.278432e-01 1.034282e-01 4.728999e-01 1.727999e-01
 [266] 7.037375e-02 4.156002e-01 7.386727e-02 2.945748e-02 9.365961e-01
 [271] 3.764979e-01 4.965403e-01 1.908080e-01 8.787847e-01 9.697081e-01
 [276] 5.137319e-01 6.952720e-01 1.381933e-01 6.195187e-02 1.863377e-01
 [281] 6.696049e-01 7.530222e-01 6.653448e-01 6.788227e-01 6.857185e-01
 [286] 5.410656e-01 6.399272e-01 4.589897e-01 4.850110e-01 9.146477e-01
 [291] 8.445714e-01 3.214657e-01 1.510498e-01 8.928313e-01 7.094392e-01
 [296] 5.331179e-01 7.514957e-01 2.164223e-01 8.920378e-01 8.928208e-02
 [301] 3.631122e-01 8.404453e-01 3.431239e-02 1.389114e-02 6.617135e-01
 [306] 8.001245e-01 9.449664e-01 7.558392e-01 7.800364e-01 2.303142e-02
 [311] 7.833009e-01 1.940282e-01 9.266794e-01 2.013589e-01 3.289097e-01
 [316] 3.948048e-02 7.211418e-01 6.137407e-01 9.435936e-01 7.313730e-01
 [321] 2.006082e-01 6.831126e-01 5.633407e-01 6.980575e-01 1.107408e-01
 [326] 1.195294e-01 3.272125e-01 9.111995e-02 3.833568e-01 2.031279e-01
 [331] 7.020209e-01 3.549751e-01 4.287367e-01 1.339121e-02 4.483916e-02
 [336] 6.283449e-01 5.391445e-01 9.575830e-01 1.552065e-01 6.634129e-01
 [341] 1.577134e-01 7.916594e-02 9.987645e-01 9.143786e-01 2.176331e-01
 [346] 3.867223e-01 2.338364e-01 1.107013e-01 3.703267e-01 4.761017e-01
 [351] 3.593191e-02 4.432781e-01 3.788068e-01 1.830582e-01 7.605679e-01
 [356] 1.295962e-01 4.877590e-01 6.653828e-01 3.868824e-01 1.713247e-01
 [361] 8.742815e-01 4.473795e-01 4.692181e-01 5.478841e-01 7.072362e-02
 [366] 4.864522e-01 1.644903e-01 8.619222e-01 4.230570e-01 1.670347e-01
 [371] 5.481141e-01 9.955785e-01 5.022949e-01 4.363372e-01 7.205906e-01
 [376] 2.112372e-01 5.188457e-01 4.617394e-01 6.250282e-01 6.960037e-01
 [381] 4.014993e-01 4.466227e-01 5.207871e-01 2.781201e-01 6.753447e-01
 [386] 4.572756e-01 3.490790e-01 2.479615e-01 3.402127e-01 1.582112e-01
 [391] 1.992836e-01 4.415896e-01 4.133930e-01 9.441801e-01 5.975012e-01
 [396] 4.854102e-01 7.633120e-01 2.977414e-01 4.622998e-01 7.335177e-01
 [401] 8.054686e-01 2.234338e-01 2.553034e-01 9.160890e-01 6.232499e-01
 [406] 9.899361e-01 4.083644e-01 6.087581e-01 5.210107e-01 6.377686e-01
 [411] 7.958881e-01 7.464691e-01 4.952654e-01 4.611044e-01 5.340745e-01
 [416] 3.303502e-01 4.747677e-01 1.620419e-01 4.709747e-01 6.509053e-01
 [421] 3.154967e-01 5.631926e-01 5.118057e-01 3.410325e-01 8.158386e-01
 [426] 5.948009e-01 7.715316e-01 3.471733e-01 4.128610e-01 2.112068e-01
 [431] 7.411379e-01 8.996246e-01 8.957563e-01 4.693744e-01 6.585784e-01
 [436] 6.894635e-01 3.937343e-01 5.424866e-01 4.330502e-01 3.417384e-01
 [441] 7.161468e-01 9.156758e-01 4.081541e-01 3.362508e-01 3.528603e-01
 [446] 1.690117e-01 5.061618e-01 9.243871e-01 8.758714e-01 4.997471e-01
 [451] 3.092422e-01 9.628350e-01 6.415034e-01 8.646630e-01 4.526095e-01
 [456] 4.557355e-02 4.631753e-01 2.065046e-01 7.361521e-01 5.369416e-01
 [461] 4.882243e-01 2.633679e-01 4.050061e-01 1.789975e-01 5.493113e-01
 [466] 8.915581e-01 3.067863e-01 3.350031e-01 9.830739e-01 8.313372e-01
 [471] 6.844965e-01 7.854408e-01 2.550006e-02 7.379854e-01 1.527453e-01
 [476] 4.423608e-01 2.386506e-01 2.840459e-01 9.602914e-01 3.141736e-01
 [481] 7.620242e-01 8.501982e-02 4.570668e-02 5.319074e-02 7.071177e-01
 [486] 7.765477e-01 3.632199e-01 2.993536e-01 5.237889e-01 7.598125e-01
 [491] 5.102885e-01 6.536787e-01 1.700186e-01 5.224210e-01 4.596340e-01
 [496] 7.963172e-01 9.019029e-01 4.303389e-01 9.695532e-01 3.504947e-01
 [501] 4.615124e-01 2.473633e-01 3.610598e-01 4.826241e-01 3.911701e-01
 [506] 2.916431e-01 6.819670e-01 8.374387e-01 9.779651e-01 1.158332e-01
 [511] 6.159596e-01 4.163163e-02 1.539914e-01 8.937990e-01 4.234580e-01
 [516] 4.936732e-01 2.465533e-01 1.490410e-01 1.110573e-01 5.564417e-01
 [521] 2.345601e-01 5.333389e-01 8.535397e-01 4.120595e-01 5.531162e-02
 [526] 8.821365e-01 7.913602e-01 1.996799e-01 2.788708e-01 7.574727e-01
 [531] 6.128369e-01 2.089941e-01 7.225543e-01 4.815936e-01 3.745438e-01
 [536] 9.423399e-02 6.440581e-01 7.649582e-01 5.066363e-01 4.380851e-01
 [541] 3.803321e-01 8.994935e-01 9.246082e-01 7.960675e-01 9.562377e-01
 [546] 7.165446e-02 6.881931e-01 7.994153e-02 2.335582e-01 3.574490e-01
 [551] 5.061341e-01 2.461889e-01 6.849919e-01 4.076003e-01 2.670269e-01
 [556] 3.445565e-01 3.868300e-02 4.786485e-01 4.449749e-01 7.072325e-01
 [561] 4.052631e-01 3.537385e-01 9.518808e-01 5.120865e-01 5.285303e-02
 [566] 2.276023e-01 9.093051e-02 5.840847e-01 2.805994e-01 7.494842e-01
 [571] 7.948750e-01 4.009180e-01 2.536475e-01 3.429767e-01 8.129814e-01
 [576] 7.601357e-01 3.148778e-01 9.592469e-01 5.833319e-01 2.652770e-01
 [581] 2.219438e-01 9.245375e-01 4.262057e-01 1.630280e-01 9.410540e-01
 [586] 7.744225e-01 7.274429e-01 5.580903e-01 8.766353e-03 6.459315e-01
 [591] 2.764929e-01 1.294499e-01 6.040567e-01 2.577682e-01 5.204191e-01
 [596] 3.081575e-01 7.505825e-01 9.031959e-02 5.839333e-01 3.590320e-01
 [601] 1.874069e-01 8.524652e-01 7.411829e-01 1.319659e-01 7.302772e-01
 [606] 7.280401e-01 2.674485e-01 7.396386e-01 9.937811e-01 9.158532e-01
 [611] 2.232870e-01 6.583251e-01 2.277784e-01 1.099660e-01 9.565532e-01
 [616] 3.431873e-01 2.776316e-01 7.077424e-01 6.866407e-01 3.550673e-01
 [621] 5.614724e-01 7.994747e-01 1.669566e-01 8.679313e-01 7.465212e-01
 [626] 1.003564e-01 8.911707e-02 4.061405e-01 2.867851e-01 1.246053e-01
 [631] 7.561402e-01 7.182768e-01 1.520255e-01 1.809036e-01 4.851927e-01
 [636] 5.845586e-01 2.063947e-01 8.341374e-01 5.862348e-01 7.336161e-01
 [641] 1.374030e-01 1.552088e-01 6.063288e-01 8.881050e-02 6.614613e-01
 [646] 1.431773e-01 1.522665e-01 8.191383e-02 3.834797e-01 1.024153e-01
 [651] 8.804530e-01 4.254374e-01 7.842035e-01 3.511975e-01 3.494609e-01
 [656] 8.933644e-01 8.948860e-01 3.084192e-01 5.520539e-02 7.705742e-01
 [661] 4.557562e-01 2.370450e-01 5.866579e-01 9.815024e-01 5.635302e-01
 [666] 1.913195e-01 6.683031e-01 2.880332e-01 2.371995e-01 2.315970e-01
 [671] 1.993410e-01 1.932464e-01 4.416243e-01 4.558328e-01 7.511110e-01
 [676] 2.749461e-01 6.875317e-01 6.128225e-02 5.488885e-01 5.439873e-01
 [681] 2.764143e-01 3.475451e-01 3.048136e-01 2.079821e-01 8.466981e-01
 [686] 9.827144e-01 4.261723e-01 9.476098e-01 1.275649e-01 2.665210e-01
 [691] 8.841565e-01 8.692216e-01 5.900482e-01 4.717168e-01 9.482428e-01
 [696] 4.437333e-01 6.280763e-01 1.219550e-01 1.409143e-01 6.966829e-01
 [701] 6.145782e-01 2.848213e-01 3.618627e-01 2.321316e-01 4.196723e-01
 [706] 6.494500e-01 3.654670e-02 2.642884e-03 4.594015e-01 1.871041e-01
 [711] 1.237204e-01 2.172277e-02 5.862153e-01 5.654604e-01 9.932829e-01
 [716] 8.778479e-01 1.533280e-01 2.888981e-01 1.125810e-01 2.000958e-02
 [721] 3.623547e-02 1.867395e-01 6.006737e-01 9.894985e-01 4.605974e-01
 [726] 6.587709e-01 2.150734e-01 3.918479e-01 1.736656e-01 1.165350e-01
 [731] 1.806955e-02 3.659735e-01 7.655495e-01 1.575079e-01 6.598505e-01
 [736] 9.331903e-01 4.297725e-01 7.280043e-01 1.573318e-01 2.461837e-01
 [741] 5.149574e-01 5.810841e-01 9.618195e-01 8.502707e-01 5.955745e-01
 [746] 4.676673e-01 2.109651e-02 6.822403e-01 1.910610e-01 6.879974e-01
 [751] 1.417310e-01 4.184667e-01 8.748336e-01 5.160320e-01 7.127919e-01
 [756] 1.862157e-01 1.671759e-01 2.433068e-02 1.311244e-02 4.936894e-01
 [761] 1.920213e-01 9.428024e-01 7.758707e-01 9.824188e-01 1.203631e-01
 [766] 9.528757e-01 4.073304e-01 3.272850e-03 2.256920e-02 4.097970e-01
 [771] 1.725599e-01 9.593439e-01 3.480026e-01 7.547643e-01 2.418426e-01
 [776] 3.505656e-01 1.779432e-01 6.054327e-01 4.133119e-01 2.426442e-01
 [781] 6.122967e-01 4.817739e-01 5.778852e-01 1.751137e-01 4.959224e-01
 [786] 4.855521e-01 4.288694e-01 3.272740e-01 7.126763e-01 5.941206e-01
 [791] 7.173923e-01 8.479271e-01 2.064803e-01 7.677652e-01 8.408466e-01
 [796] 5.262039e-01 6.567142e-01 8.289853e-02 1.150261e-01 5.744440e-01
 [801] 1.078779e-01 3.645713e-01 1.919978e-01 5.945217e-01 9.356417e-01
 [806] 1.751562e-01 5.315525e-01 4.630100e-02 7.443600e-01 9.536151e-01
 [811] 9.886818e-01 6.377355e-01 6.354429e-01 9.632055e-01 3.359300e-01
 [816] 9.341318e-01 5.478250e-01 1.377514e-01 6.934627e-01 4.422727e-01
 [821] 2.779436e-01 2.003882e-01 4.374240e-01 2.722941e-01 3.420865e-01
 [826] 1.963684e-01 6.465580e-01 3.878812e-01 8.827484e-01 8.984859e-02
 [831] 4.495634e-01 4.791352e-01 2.018548e-01 9.893510e-01 6.971420e-01
 [836] 1.480124e-01 7.080017e-01 9.599538e-01 4.051585e-01 1.035957e-01
 [841] 7.152330e-01 2.236661e-01 4.444888e-01 3.434944e-01 2.536357e-01
 [846] 5.178003e-01 2.484090e-01 2.815200e-01 5.262293e-01 4.090020e-01
 [851] 5.698297e-05 7.668141e-03 3.975573e-01 3.351346e-01 4.022110e-01
 [856] 6.165786e-01 5.729289e-01 5.933223e-01 2.306403e-01 1.442407e-01
 [861] 2.009472e-01 4.943279e-01 1.005442e-01 4.408993e-01 1.320863e-01
 [866] 6.449211e-01 9.850494e-01 6.296212e-01 6.100809e-01 6.300376e-01
 [871] 6.450246e-01 7.049011e-01 3.018348e-01 6.925567e-01 9.512587e-01
 [876] 2.518367e-02 1.444711e-01 5.349564e-01 1.018160e-01 7.005942e-01
 [881] 9.361693e-01 4.197982e-01 5.722439e-01 8.617896e-01 8.946732e-01
 [886] 4.492323e-01 4.751024e-02 5.285338e-01 3.755010e-03 1.753946e-01
 [891] 9.503928e-01 9.425190e-01 5.091777e-01 1.793649e-01 9.564283e-01
 [896] 6.000894e-01 5.678489e-03 4.402577e-01 4.999100e-01 7.901656e-01
 [901] 8.285700e-01 6.220512e-01 7.525185e-01 9.808566e-01 3.031627e-01
 [906] 3.638969e-01 5.737774e-01 7.974222e-01 1.927143e-01 7.096579e-02
 [911] 6.637665e-01 5.325533e-01 2.753842e-01 1.657288e-02 8.505290e-01
 [916] 3.544237e-01 8.951357e-01 7.594585e-01 7.929092e-01 3.690021e-01
 [921] 9.885443e-01 5.202596e-01 4.816507e-01 5.603812e-01 4.059491e-01
 [926] 1.780772e-01 2.555985e-01 9.527670e-01 9.492342e-01 2.503465e-01
 [931] 4.463720e-01 2.528919e-01 1.102649e-01 1.164325e-01 4.280339e-01
 [936] 1.354578e-01 9.509876e-01 5.564700e-01 5.596629e-01 4.858069e-01
 [941] 7.061451e-01 4.799485e-01 1.143938e-01 5.256956e-01 4.923019e-01
 [946] 6.756639e-01 8.019810e-01 5.067972e-02 2.507613e-01 4.069437e-01
 [951] 3.276303e-01 2.237825e-01 9.002859e-01 7.538226e-01 2.925664e-01
 [956] 2.633689e-01 4.925530e-01 5.501800e-01 4.931809e-01 2.187330e-01
 [961] 2.136674e-01 1.284627e-01 3.190255e-02 7.759703e-01 6.836006e-01
 [966] 4.023029e-02 5.471501e-01 9.166965e-01 6.651135e-01 2.377981e-01
 [971] 7.333021e-01 2.663977e-01 1.874515e-01 1.774807e-01 2.519407e-01
 [976] 7.279319e-01 2.723705e-01 5.014268e-01 6.650865e-01 2.305334e-01
 [981] 1.905749e-01 9.799571e-01 2.735355e-01 4.756708e-01 9.019580e-01
 [986] 9.228311e-01 3.872787e-01 6.981417e-01 6.761298e-01 7.024149e-01
 [991] 5.735192e-01 8.711005e-01 4.285600e-01 4.692609e-01 4.832521e-01
 [996] 3.575448e-01 3.148074e-01 6.405638e-01 2.450572e-01 5.444350e-01
[1001] 1.345300e-01 8.788860e-01 6.500524e-01 4.292569e-01 3.451318e-01
[1006] 7.908153e-01 5.535534e-01 4.987910e-02 3.291545e-01 2.536093e-02
[1011] 9.957070e-01 8.555239e-01 1.408815e-01 4.431854e-01 2.354612e-01
[1016] 6.397074e-01 4.949633e-01 2.505278e-02 4.825873e-01 9.331015e-01
[1021] 4.125940e-01 9.420214e-01 3.686829e-01 9.539024e-01 1.055071e-01
[1026] 4.296699e-01 2.853285e-01 5.591850e-01 2.830951e-01 6.670140e-01
[1031] 2.007128e-01 9.397887e-01 1.203406e-01 4.366358e-01 3.730674e-01
[1036] 2.620464e-01 3.042087e-01 8.369897e-02 1.996781e-01 6.088287e-01
[1041] 4.238849e-02 3.726618e-01 8.133340e-02 6.947755e-01 9.492405e-01
[1046] 4.260592e-01 3.987327e-01 3.779399e-01 7.706273e-01 1.057720e-01
[1051] 4.523877e-01 5.531511e-01 7.217947e-01 4.553711e-01 4.735801e-01
[1056] 7.176209e-01 8.148502e-01 8.167231e-01 7.890259e-01 9.493617e-01
[1061] 2.648982e-01 8.503215e-01 1.677853e-01 6.148393e-01 8.903800e-01
[1066] 3.688923e-01 1.257008e-01 7.099451e-01 6.389231e-01 8.532737e-01
[1071] 2.958283e-01 2.291272e-01 4.003309e-01 6.055816e-01 3.764217e-01
[1076] 5.560982e-01 6.447780e-01 7.082342e-01 5.132301e-01 1.257772e-01
[1081] 6.029584e-01 8.348644e-01 3.884209e-01 1.178496e-01 8.579102e-02
[1086] 4.602041e-01 9.649266e-01 5.448183e-02 8.509911e-01 4.747059e-01
[1091] 8.797902e-01 1.578948e-01 9.263599e-01 7.144946e-01 3.466359e-01
[1096] 2.263795e-02 7.028324e-01 2.026552e-01 6.876447e-01 6.461817e-01
[1101] 2.402308e-02 1.257378e-01 4.392930e-01 5.703774e-01 6.898211e-01
[1106] 7.362020e-01 3.174739e-01 6.056084e-01 6.166393e-01 3.041729e-01
[1111] 2.765572e-01 5.816801e-01 7.028831e-01 1.089807e-01 1.806387e-01
[1116] 7.162778e-01 4.613546e-01 8.290836e-02 1.161752e-01 4.343853e-01
[1121] 4.051397e-01 9.699104e-01 4.344835e-01 1.131182e-01 6.784924e-01
[1126] 7.669101e-01 6.090446e-01 1.205942e-01 7.493839e-01 8.279801e-01
[1131] 8.581206e-01 1.756258e-01 4.064683e-01 3.443180e-01 2.782962e-01
[1136] 2.433467e-01 6.704846e-01 1.636397e-01 7.818128e-01 6.331869e-01
[1141] 7.545399e-01 5.644823e-01 2.052246e-01 8.996652e-01 4.418509e-01
[1146] 5.989642e-02 7.166131e-01 2.904225e-01 8.021183e-01 2.575020e-01
[1151] 1.338957e-01 6.692374e-01 4.720811e-02 6.985869e-01 9.960922e-01
[1156] 9.433979e-01 8.096795e-01 6.483186e-01

$hfunc2
   [1] 0.3602979339 0.3868530518 0.3659582292 0.6115207085 0.2979329665
   [6] 0.3048357560 0.3438431596 0.6518987137 0.6759897327 0.5547543918
  [11] 0.7331852854 0.9573768084 0.3507158679 0.2271521321 0.4020598129
  [16] 0.1810535670 0.6723651456 0.8985834539 0.2899298765 0.7204078959
  [21] 0.8501991653 0.4603316335 0.4192033381 0.9035938396 0.3615789034
  [26] 0.8251909389 0.9015912998 0.4367673416 0.7768123279 0.6203341800
  [31] 0.8596998393 0.4823129859 0.7061346845 0.9661257295 0.2500766630
  [36] 0.1228342604 0.3847923381 0.2864047692 0.5591397824 0.5677644633
  [41] 0.5679038484 0.2036819050 0.4195141707 0.9417793863 0.9203375621
  [46] 0.0169195564 0.4676558520 0.1381660940 0.0955139203 0.2523360718
  [51] 0.6005016667 0.1129944966 0.4177456511 0.2676088504 0.3327203723
  [56] 0.7950253109 0.8032401035 0.0446320259 0.4423884961 0.1230002250
  [61] 0.9146304872 0.8457945510 0.5227954517 0.8208220753 0.9092193046
  [66] 0.3542929477 0.4994377786 0.2601389222 0.2787378942 0.0120041378
  [71] 0.0327136044 0.1643138824 0.2395915278 0.9395575810 0.5173032062
  [76] 0.1789059161 0.6667914257 0.6751221222 0.5117736571 0.0528298852
  [81] 0.6026595227 0.0047418302 0.7309208537 0.6984327991 0.4686162333
  [86] 0.7567127664 0.7501808344 0.4501390535 0.7582690871 0.4885938070
  [91] 0.5893851583 0.0667709599 0.2880634034 0.2563626521 0.9402382812
  [96] 0.6569588202 0.6650528986 0.6989046736 0.8506293968 0.5476785717
 [101] 0.2823542360 0.5648867364 0.6595557701 0.1777972296 0.9509426855
 [106] 0.8269240666 0.4160782714 0.7448737647 0.6480376966 0.5092542214
 [111] 0.3390633400 0.7734589863 0.6329463011 0.4977176240 0.2863894441
 [116] 0.6835141830 0.6851087313 0.2440155461 0.3249232074 0.1906817549
 [121] 0.6674449639 0.0407809497 0.6825629177 0.8988593743 0.0464068345
 [126] 0.6778086462 0.8534700941 0.3786195945 0.1017327545 0.0491179839
 [131] 0.2155701292 0.6155730420 0.8210330787 0.4902426466 0.7756693928
 [136] 0.8551385252 0.2981655266 0.4974218833 0.9535755396 0.3808937537
 [141] 0.7188332162 0.2160509561 0.3543044306 0.2367622555 0.1178228716
 [146] 0.9681445209 0.5775578047 0.4183000484 0.8888511047 0.4590290731
 [151] 0.1443458689 0.2093322480 0.5906135398 0.5555647895 0.1265074870
 [156] 0.5979861729 0.1673470395 0.3761195295 0.0162187976 0.8828100773
 [161] 0.2735453103 0.8127120867 0.6193409711 0.5659049280 0.4306097010
 [166] 0.2860994456 0.1896105425 0.7896646138 0.3843820601 0.4332293785
 [171] 0.9613750039 0.8413304282 0.6767389183 0.7500778055 0.5829413150
 [176] 0.4103787344 0.5949955037 0.9948018742 0.0577988335 0.4237377215
 [181] 0.2272214490 0.8628283510 0.3328963264 0.7243015170 0.0577289559
 [186] 0.2905064587 0.7226484719 0.9433995271 0.2371001645 0.5947713631
 [191] 0.3695327696 0.8349600403 0.9509226820 0.6393767843 0.2643275335
 [196] 0.2419421591 0.3649591836 0.4487147695 0.1403573260 0.1071021698
 [201] 0.3626918819 0.2446407682 0.0667739427 0.5316676562 0.2297615266
 [206] 0.4496800073 0.1249245349 0.9329577781 0.0436974010 0.6279426198
 [211] 0.1071748278 0.7266188763 0.7805709719 0.2974466657 0.0904944480
 [216] 0.5514406179 0.2853423208 0.8067490394 0.3206238836 0.8537749263
 [221] 0.0848937579 0.9946752463 0.6321050810 0.7148637608 0.1642317572
 [226] 0.4619152540 0.2748352932 0.8794597591 0.5396498932 0.7253746363
 [231] 0.6154912821 0.4326914907 0.1751363451 0.4706118920 0.5470187902
 [236] 0.8112137096 0.2099073035 0.0863107290 0.5831665383 0.3950011504
 [241] 0.7776498489 0.4876754553 0.1286191136 0.5101264691 0.8045023610
 [246] 0.6486328274 0.9398062316 0.1018205001 0.7460307181 0.7348691560
 [251] 0.5064798715 0.5169620235 0.4256382861 0.5292969747 0.7308173507
 [256] 0.2048741271 0.3616677608 0.0050638761 0.0013326298 0.7708307269
 [261] 0.1008532406 0.2770715943 0.3850523754 0.8608938053 0.7669598258
 [266] 0.3673760390 0.8952888963 0.8037299760 0.6963857621 0.0562156324
 [271] 0.1028489610 0.5774010285 0.5501989469 0.7374746850 0.1182938303
 [276] 0.9614141163 0.1420394930 0.9741156100 0.9327547295 0.2123848575
 [281] 0.4352987534 0.3102848339 0.3916455436 0.1420868061 0.7015310820
 [286] 0.1344012104 0.4547926493 0.6884877611 0.1483746384 0.2428354218
 [291] 0.0851547444 0.5644857563 0.7232497365 0.3266771371 0.2715090207
 [296] 0.7796778607 0.7087958528 0.1554253588 0.5784324259 0.4653117013
 [301] 0.0878993633 0.0803192335 0.9571207312 0.7930953199 0.5906062147
 [306] 0.4769853523 0.0685989330 0.4300242324 0.4659937234 0.9702490197
 [311] 0.0758323256 0.9187733204 0.1486959878 0.9215475999 0.7052425570
 [316] 0.9980161456 0.0431242355 0.2569793271 0.2245581775 0.7668679047
 [321] 0.3501016136 0.5912576939 0.2701534475 0.1818662875 0.7835187379
 [326] 0.2856799446 0.7783974304 0.4724987686 0.4432145800 0.9102631696
 [331] 0.4455895222 0.9397466013 0.9882458539 0.9965969183 0.7839831934
 [336] 0.1556048523 0.6392752197 0.0493086385 0.5654789962 0.7010460895
 [341] 0.2069559137 0.9809612969 0.0349085349 0.0779248391 0.8713032278
 [346] 0.1850185587 0.6872387354 0.1630232149 0.3177454077 0.4227788509
 [351] 0.1744492535 0.5745326282 0.6302465667 0.1592283391 0.8014001460
 [356] 0.4614678591 0.8945579853 0.5654828447 0.3873400426 0.1894393848
 [361] 0.4233942424 0.4061521551 0.4731583391 0.2820430185 0.5458941837
 [366] 0.6799183279 0.0995542211 0.3701869870 0.1297803734 0.3119399001
 [371] 0.5314272674 0.1506127888 0.7431659566 0.6691214186 0.4843078337
 [376] 0.7225475275 0.3855944359 0.1982962225 0.3013871560 0.9563619365
 [381] 0.8879615470 0.7334661063 0.6220295111 0.1212285255 0.4902726218
 [386] 0.4911635004 0.7329098237 0.3213473728 0.7586615109 0.2600967959
 [391] 0.1687731467 0.5446438317 0.5109694447 0.6705053239 0.4377042097
 [396] 0.2190664394 0.8098991513 0.5728313548 0.7429565783 0.4427041490
 [401] 0.1480158293 0.7887705839 0.2818338689 0.2159913462 0.2720364551
 [406] 0.2815133582 0.0797820683 0.4188362262 0.8713283209 0.0835803022
 [411] 0.3557827744 0.5080137997 0.8370868197 0.5705359119 0.7693541461
 [416] 0.6043845820 0.2719652378 0.6842337032 0.2334529900 0.7640014832
 [421] 0.7563851005 0.7042253996 0.3500132756 0.9223013211 0.1158699656
 [426] 0.6185513190 0.4981221606 0.3549103254 0.0448196200 0.3377840055
 [431] 0.6026228025 0.1379617594 0.3555165811 0.4848435932 0.0601014498
 [436] 0.3975567071 0.2979412140 0.5249596146 0.8983687274 0.1834426539
 [441] 0.3712017072 0.6347900718 0.6578412735 0.3052217775 0.6886412094
 [446] 0.9057192566 0.3897147760 0.6710112965 0.4495019431 0.4177674849
 [451] 0.8187897559 0.2593676213 0.6791004975 0.2099329507 0.5852895011
 [456] 0.3430087436 0.9454782615 0.7057257494 0.6387367497 0.7697376988
 [461] 0.4621322739 0.6640648067 0.9306947637 0.8465153269 0.5031780701
 [466] 0.0780049660 0.1904604244 0.2499423742 0.4357465304 0.4410980320
 [471] 0.5744816258 0.3849706033 0.9958558135 0.2809152672 0.8995707277
 [476] 0.6082616490 0.4515398378 0.6267765211 0.0474084928 0.7406932068
 [481] 0.2650152900 0.9935728819 0.3760378594 0.2138039256 0.5045585897
 [486] 0.6024735204 0.2819947243 0.2696117674 0.6972424435 0.7310827547
 [491] 0.5271869229 0.5261184353 0.7807975922 0.4588799159 0.6541953664
 [496] 0.4874196188 0.2331075190 0.9091879778 0.1478415459 0.2721218344
 [501] 0.9593452451 0.6445315895 0.2570972752 0.9212444825 0.5562163780
 [506] 0.3968182416 0.7999913234 0.1651185324 0.0197905910 0.4681236149
 [511] 0.3186847983 0.9174216138 0.1190689090 0.5701578212 0.8195153837
 [516] 0.6314311538 0.6079594275 0.6910700713 0.3425548365 0.5852047394
 [521] 0.2371454897 0.2494527527 0.5702427898 0.1502267298 0.7660293524
 [526] 0.6484564570 0.4440694789 0.9315106979 0.9820654229 0.3250201945
 [531] 0.3580767260 0.9564966144 0.3361563328 0.2837581489 0.8207083975
 [536] 0.5099573514 0.5481498417 0.4150289830 0.3323853001 0.2632225695
 [541] 0.4773000822 0.1419845900 0.9917787986 0.1713372742 0.4012782196
 [546] 0.2283306405 0.1712470170 0.6998318501 0.6689217315 0.3366585054
 [551] 0.7726896682 0.8373391332 0.5326914955 0.6122537637 0.6742242959
 [556] 0.1451321126 0.2067799555 0.8819340022 0.3022965728 0.6843682831
 [561] 0.7073954719 0.5808120353 0.5828749702 0.3505242929 0.9206796824
 [566] 0.9565310104 0.9211499208 0.8013813942 0.7440514274 0.3173967289
 [571] 0.5934856556 0.7875299366 0.8627221595 0.8443053733 0.1017885647
 [576] 0.2031863013 0.9883196347 0.5881294299 0.2529065440 0.3676572059
 [581] 0.5062390399 0.4160138111 0.3694870508 0.5450923117 0.1343427662
 [586] 0.1345839783 0.2586427552 0.3399446211 0.9498602200 0.6175089988
 [591] 0.6841834814 0.3828409457 0.5144211889 0.3852818459 0.5603676550
 [596] 0.6138703117 0.6119633021 0.7530404711 0.4131433503 0.9742692989
 [601] 0.9483571101 0.2894445700 0.1300378616 0.6541669915 0.4888190918
 [606] 0.2008041341 0.3637642277 0.9442322833 0.1787967663 0.1649434444
 [611] 0.6286538402 0.0015834919 0.2518212470 0.6587865058 0.5380582721
 [616] 0.5939064961 0.4491298789 0.7835408055 0.9233006198 0.9031842325
 [621] 0.5970617738 0.7033117325 0.2852440792 0.2814720887 0.1685589830
 [626] 0.4954628965 0.7008137047 0.9279244358 0.9544190104 0.4425845903
 [631] 0.6778145472 0.3269640337 0.4932159378 0.9544095654 0.6187518627
 [636] 0.0628787703 0.3834242498 0.6092924949 0.8322686591 0.4273459350
 [641] 0.7435800262 0.2520850956 0.6524576421 0.4591370391 0.4925247851
 [646] 0.2250845442 0.3388182436 0.5161007119 0.0781148254 0.9714643358
 [651] 0.6103408978 0.1117112335 0.5063627616 0.1420287424 0.8888880489
 [656] 0.3533968613 0.3102264245 0.0786184052 0.7450230880 0.7783252962
 [661] 0.1762540205 0.6645075079 0.0891146349 0.1385400393 0.5965295990
 [666] 0.9193356789 0.4374766894 0.6810049571 0.6252272225 0.7432358371
 [671] 0.5542695684 0.9133417890 0.8731864268 0.7981255798 0.6538209866
 [676] 0.0817422474 0.3776380069 0.3047958308 0.1279130689 0.6637773741
 [681] 0.5315741689 0.7751062983 0.4770269016 0.7720777393 0.6988783672
 [686] 0.5385293745 0.4502497149 0.1572084089 0.9313229601 0.7383589875
 [691] 0.0631670850 0.4117803253 0.3852160276 0.5463312029 0.0134753756
 [696] 0.4350046018 0.2752307041 0.9098316454 0.9335615102 0.1058721986
 [701] 0.1647209640 0.5465460682 0.7126085574 0.3768164001 0.6399556314
 [706] 0.6575854322 0.6735478428 0.9897076150 0.1195294778 0.9380343948
 [711] 0.3828268882 0.9936176498 0.5356377855 0.6125700280 0.0007258805
 [716] 0.1664341622 0.1083716059 0.5326668141 0.6990299332 0.9479788512
 [721] 0.8774657694 0.4163648637 0.2464681604 0.0100767851 0.7491120895
 [726] 0.6081333149 0.1248321647 0.2581851166 0.0685509851 0.9930060703
 [731] 0.9199901938 0.7954498012 0.3425936113 0.4908804482 0.1603113184
 [736] 0.7914049681 0.6858096896 0.5085608840 0.6278597448 0.5891867459
 [741] 0.8817490070 0.5464230752 0.2644109083 0.1397528062 0.5020074870
 [746] 0.8469771376 0.8945431646 0.3057523803 0.3135583532 0.4446068513
 [751] 0.8135067220 0.7774050228 0.8859211917 0.6286733542 0.3086519804
 [756] 0.4961253740 0.8344396645 0.9219217323 0.9957776294 0.4093742273
 [761] 0.8526333125 0.0001640302 0.3490491136 0.0986295370 0.5712219249
 [766] 0.0049584063 0.3878337303 0.4362869785 0.0519495000 0.6071585400
 [771] 0.1079214016 0.6458289905 0.5431988616 0.2268263762 0.9054858902
 [776] 0.5040338242 0.8538869019 0.5469740965 0.4709729113 0.2379225277
 [781] 0.5668521191 0.2233239624 0.4110733883 0.6896923724 0.8758725332
 [786] 0.5461013774 0.6253623280 0.2328972723 0.6860842092 0.7066716245
 [791] 0.1343031000 0.0746949083 0.4545291504 0.4593686761 0.6682778223
 [796] 0.4537520604 0.1322659599 0.4269183921 0.2398109065 0.9364632545
 [801] 0.6105752293 0.2954731387 0.4752145570 0.8387753714 0.2306671937
 [806] 0.5414366051 0.3745781024 0.9848598457 0.2294966299 0.0293642971
 [811] 0.5273489347 0.1067626919 0.8431006234 0.0535251226 0.6747745621
 [816] 0.6613380361 0.7923559965 0.7454470104 0.3924333155 0.6188390817
 [821] 0.6308133565 0.5610336005 0.7780190800 0.2902543493 0.3936265088
 [826] 0.9503247082 0.8077370533 0.5853026462 0.7706971858 0.6064350805
 [831] 0.1860955249 0.8000675621 0.8528943643 0.0002006685 0.4672945157
 [836] 0.7522562741 0.6114568294 0.0772057037 0.7087419993 0.6065628841
 [841] 0.2590805111 0.5261388642 0.1423774287 0.7584739633 0.9302268168
 [846] 0.4490237304 0.7318116970 0.8915450119 0.6369933654 0.4216906145
 [851] 0.9976182685 0.8850415373 0.2327857374 0.7940400213 0.4140635150
 [856] 0.8561550590 0.5109281879 0.7739211740 0.2249269682 0.9599012384
 [861] 0.6379893604 0.3214197491 0.1662563554 0.3644012959 0.3459957385
 [866] 0.7929167368 0.2740586199 0.0849448768 0.7155296516 0.0556240379
 [871] 0.3186948700 0.0158202228 0.7784126532 0.2455197531 0.1164226152
 [876] 0.5236479456 0.5773258872 0.2702102229 0.3890843112 0.1029379914
 [881] 0.1342264223 0.2403077970 0.7915686118 0.0197189976 0.0951981056
 [886] 0.3257221502 0.3520683945 0.5563018717 0.7483001523 0.7506170572
 [891] 0.4802876791 0.4130999684 0.6216935120 0.9534252759 0.1948125069
 [896] 0.0511191561 0.9799752580 0.1637057785 0.5952557538 0.1615089494
 [901] 0.0763169687 0.1085469257 0.0962676082 0.2672919289 0.6089525763
 [906] 0.4913850119 0.4533114589 0.4447804629 0.8357597600 0.4005345779
 [911] 0.3598711731 0.3561619335 0.7444995604 0.7305090066 0.1698977444
 [916] 0.1497214184 0.4487057125 0.1428669277 0.5196746762 0.4128227309
 [921] 0.0659276833 0.6041693274 0.5205833782 0.8817540999 0.3104817764
 [926] 0.0996294498 0.0636116006 0.4134992298 0.0103609680 0.3736973134
 [931] 0.4790275062 0.8637950973 0.0311183938 0.1821853932 0.0553248371
 [936] 0.2379918657 0.8965856992 0.2075600333 0.5378059980 0.5657839434
 [941] 0.6759399069 0.3616786157 0.2011128865 0.5245465558 0.4633659923
 [946] 0.0520071299 0.6643116194 0.1949919159 0.4217891441 0.0076760508
 [951] 0.6238235883 0.0384178366 0.8728699010 0.5099796345 0.0961255861
 [956] 0.1404439938 0.6354482109 0.5397277017 0.5551195377 0.3162814086
 [961] 0.5419412871 0.3793455795 0.4022199144 0.9706209384 0.2856490825
 [966] 0.9762631572 0.7606160280 0.5626717376 0.1863443606 0.1552142899
 [971] 0.5242510271 0.8638923434 0.3721061163 0.4841737192 0.7038044054
 [976] 0.4189399800 0.5164203491 0.4547907977 0.0051510140 0.7590672425
 [981] 0.4434466707 0.7273803642 0.8077522359 0.3385753969 0.4097195083
 [986] 0.2235144778 0.1253816403 0.5574280294 0.2150598766 0.5458425378
 [991] 0.1668320943 0.8413062845 0.7423587766 0.7456963661 0.3129147954
 [996] 0.3742409623 0.6650375876 0.7711914404 0.6415724541 0.5602540147
[1001] 0.6188156846 0.2124016734 0.3089051399 0.8485943190 0.8742153591
[1006] 0.4067439310 0.3212779474 0.7480535795 0.1424894399 0.8775738500
[1011] 0.0051011732 0.2212391152 0.6238164749 0.0353481381 0.2044880829
[1016] 0.7185622324 0.0788015927 0.8824484977 0.5892186399 0.1306650442
[1021] 0.1007365260 0.5049888087 0.4022016401 0.5823915514 0.9579785082
[1026] 0.1117105292 0.3377216567 0.6468134720 0.9915249303 0.3139406065
[1031] 0.9910919139 0.2687688896 0.2636426345 0.4997814528 0.2095245811
[1036] 0.8092740227 0.5116563266 0.2562519572 0.6419063783 0.3062791384
[1041] 0.2612783727 0.4045980680 0.8530145561 0.1153688835 0.8506425013
[1046] 0.2435012044 0.1485147123 0.4127696220 0.9089896869 0.1934780493
[1051] 0.4908700485 0.4797994594 0.9430511917 0.8263137876 0.7052891438
[1056] 0.3555770606 0.3382903796 0.2013632703 0.1899537720 0.2350227101
[1061] 0.7463738984 0.5877167359 0.7747166861 0.2142283148 0.2290652929
[1066] 0.2860088308 0.0689789055 0.6619440928 0.5744474503 0.9198727571
[1071] 0.9148936865 0.5300326250 0.3395870430 0.4515438576 0.9658781856
[1076] 0.7619702302 0.2427006333 0.3199363239 0.5156448205 0.2502346306
[1081] 0.3460812149 0.6086284737 0.2214564158 0.9824025897 0.8067799183
[1086] 0.2865817951 0.1149667443 0.9977094565 0.4736712233 0.4825431907
[1091] 0.3558017876 0.5099751349 0.5246431754 0.2412751788 0.6697760635
[1096] 0.2786853033 0.1153124940 0.8486932573 0.7794308369 0.6011647077
[1101] 0.9968299241 0.3062592829 0.6249847913 0.4725776085 0.6342648330
[1106] 0.3411507271 0.3286367125 0.3321631536 0.9838202770 0.5953493906
[1111] 0.5557981485 0.2494124446 0.4023704351 0.5113250692 0.6088485060
[1116] 0.5134947308 0.7290613227 0.8074504491 0.2750230223 0.2916297335
[1121] 0.0558592780 0.0776608107 0.5502043781 0.1925702617 0.3470351456
[1126] 0.8257441805 0.1111294624 0.6245933453 0.8866048110 0.0560099033
[1131] 0.6895549189 0.0856778460 0.5612822489 0.5368451961 0.5767791342
[1136] 0.5954236452 0.5543859131 0.6204617325 0.9345829161 0.7434144567
[1141] 0.8912522963 0.6551713275 0.7374149371 0.3752647456 0.8347036744
[1146] 0.9201580009 0.8533951659 0.5439155892 0.1892795168 0.5452197446
[1151] 0.9640701556 0.1469945355 0.9782907595 0.8144351537 0.0263820822
[1156] 0.1861138014 0.1154144500 0.4989536219

> ## End(Don't show)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopHfunc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopHfuncDeriv")
> ### * BiCopHfuncDeriv
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopHfuncDeriv
> ### Title: Derivatives of the h-Function of a Bivariate Copula
> ### Aliases: BiCopHfuncDeriv
> 
> ### ** Examples
> 
> ## simulate from a bivariate t-copula
> simdata <- BiCopSim(300, 2, -0.7, par2 = 4)
> 
> ## derivative of the conditional bivariate t-copula 
> ## with respect to the first parameter
> u1 <- simdata[,1]
> u2 <- simdata[,2]
> BiCopHfuncDeriv(u1, u2, 2, -0.7, par2 = 4, deriv = "par")
  [1]  0.188249864 -0.529552481 -0.873071979 -0.088028377  0.764465081
  [6]  0.268742673  0.225414839  0.003745044 -0.250411287 -0.552223280
 [11]  0.542208002  0.733893277  0.171342121  0.040807295  0.271432180
 [16] -0.194478681  0.539020302 -0.179847959  0.857056553  0.165863800
 [21] -0.167799319 -0.078433467 -0.493630542  0.014446390 -0.259425789
 [26] -0.611885828  0.430828031  0.081037733 -0.034159823  0.180985090
 [31]  0.348575968  0.309101636  0.490238920 -0.491592260 -0.833857762
 [36] -0.683462885  0.269070347 -0.635325777  0.174910232 -0.232964155
 [41] -0.415391436  0.301526190  0.625251401  0.781396939  0.315011241
 [46]  0.272627317 -0.447754453 -0.281985372  0.171307540 -0.133608127
 [51]  0.291907921 -0.739724153  0.574547234  0.027070515 -0.078697407
 [56] -0.055992298  0.122430683  0.125977620  0.815021190 -0.275509931
 [61]  0.002381546  0.545961005  0.080450266  0.523905668 -0.172254706
 [66]  0.701785048 -0.172723789 -0.075921055 -0.050254540 -0.004517698
 [71] -0.168177303  0.276160659  0.085267141 -0.493157648 -0.803393801
 [76] -0.105535945  0.082718102  0.550314064  0.649619473  0.335300268
 [81] -0.812080987 -0.528871002  0.127874248  0.096408247  0.319461107
 [86] -0.451052625  0.175261043 -0.732108956 -0.362990020 -0.491085624
 [91]  0.360448206 -0.004058815  0.646588411 -0.267548058 -0.038478050
 [96]  0.212768779 -0.998135373 -0.170435923 -0.730189152 -0.581004222
[101]  0.322766093  0.433218521 -0.028256857  0.656941983 -0.440469944
[106]  0.905222541 -0.262971427  0.363509687 -0.402981826  0.214369064
[111]  0.334079146 -0.018541319 -0.011105518  0.283962314 -0.654004721
[116]  0.434879517 -0.260821403 -0.378586711 -0.094233028  0.090256413
[121] -0.148528729  0.776349022  0.453877912  0.524258454 -0.655611238
[126] -0.276919473 -0.202919832  0.593810522  0.002473029 -0.762217436
[131]  0.351571843 -0.598735354  0.694748439 -0.448698593  0.645639585
[136]  0.073844504  0.458037528  0.364965458  0.325426427 -0.498972904
[141] -0.021851288  0.200429313  0.064722731  0.401643084  0.182895921
[146]  0.290075211  0.202374177 -0.341641916  0.123997416 -1.022736293
[151]  0.791418025  0.075182652 -0.628108318 -0.665821356  0.075110556
[156]  0.193194065 -0.196743575  0.008517146  0.106080111 -0.058541640
[161]  0.377274610 -0.532218210 -0.145163584 -0.243522839 -0.542166366
[166]  0.257163779 -0.604826143  0.097793845  0.524209816 -0.462202081
[171]  0.565353924  0.227190890  0.469629855  0.535226709 -0.453294812
[176]  0.592952517  0.142583522  0.291663625  0.945238268  0.036358344
[181]  0.134079194  0.430849673 -0.491760062 -0.327047569  0.066055873
[186] -0.122222031  0.495906313  0.114707985 -0.729711158  0.009699490
[191] -0.126311498 -0.352044544  0.279501774 -0.265559498 -1.061562943
[196]  0.193493830 -0.007152737  0.157099375  0.378735445  0.436320677
[201]  0.637566123 -0.051532157 -0.096214541 -0.562281777 -1.067740592
[206]  0.129401707 -0.312902602  0.043618794  0.360134505 -0.377298426
[211] -0.028710528  0.714485775  0.162791794 -1.021347269 -0.204941971
[216]  1.013500795 -0.072980656 -0.612046689  0.890427012 -0.636068300
[221]  0.079076573 -0.212462972  0.120505081 -0.768875412  0.133605615
[226]  0.054428210  0.446353454 -0.217747986 -0.416586417  0.735374745
[231]  0.033411194  0.017922375 -0.885543628  0.704065045 -0.364867254
[236] -0.643388103  0.195793043  0.165665240  0.094560066 -0.362209763
[241]  0.736205610 -0.156423225 -0.004331393  0.164463094  0.809533644
[246] -1.064867250  0.368145440  0.076047308 -0.033159947  0.998017644
[251] -0.338624409 -0.263303799 -0.604043499 -0.659764288 -0.052004676
[256]  0.044678722 -0.287577187  0.652727702 -0.076220083 -0.272904823
[261] -0.202228846  0.436743099 -0.744262919 -0.245110081 -0.038434502
[266]  0.702696501  0.331126710  0.111063317  0.273922978 -0.210545575
[271] -0.722412783  0.343035608  0.248765166  0.095782375 -0.400989487
[276] -0.080452647 -0.903931896  0.216170769  0.088277759 -0.236777115
[281]  0.725417313 -0.469282440 -0.130085395 -0.274340107 -0.864874919
[286]  0.098940531  0.311100164 -0.035244665  0.177627591 -0.201714174
[291] -0.788477235  0.766407428  0.166684346 -0.031439868 -0.074612756
[296]  0.490946037 -0.195111014 -0.163693476  0.009665286  0.091437111
> 
> ## estimate a bivariate copula from the data and
> ## evaluate its derivative w.r.t. the parameter
> cop <- BiCopEst(u1, u2, family = 2)
> BiCopHfuncDeriv(u1, u2, cop, deriv = "par")
  [1]  0.208029569 -0.528598461 -0.903071933 -0.094742057  0.763512211
  [6]  0.265461227  0.236677935 -0.010579169 -0.257105336 -0.587050362
 [11]  0.566652093  0.759487715  0.191233408  0.049784290  0.271561078
 [16] -0.211588736  0.562574742 -0.192833342  0.888944912  0.168669599
 [21] -0.183124138 -0.097134471 -0.518124626  0.036470336 -0.276360765
 [26] -0.629542855  0.455658724  0.072763216 -0.027324487  0.189498749
 [31]  0.352235122  0.334805224  0.524048797 -0.521525737 -0.877771702
 [36] -0.716804115  0.291402075 -0.645206091  0.165970260 -0.226132981
 [41] -0.446008859  0.325961456  0.663839734  0.810772575  0.310367184
 [46]  0.263279623 -0.448220287 -0.283123846  0.188798191 -0.151989221
 [51]  0.311404406 -0.700830984  0.609904158  0.047536610 -0.094048531
 [56] -0.054213704  0.139519710  0.129970410  0.838773588 -0.297859456
 [61] -0.022404389  0.566775925  0.072976183  0.551388569 -0.171942780
 [66]  0.705008746 -0.149840623 -0.091152730 -0.058136729 -0.028062338
 [71] -0.188309565  0.285951198  0.080034633 -0.520680046 -0.846542490
 [76] -0.120464192  0.098133469  0.573720253  0.649839237  0.342648571
 [81] -0.836441262 -0.560216432  0.113177468  0.103179354  0.337455837
 [86] -0.458745226  0.167240285 -0.748606698 -0.382546656 -0.489233924
 [91]  0.366214811 -0.025179144  0.683808685 -0.279586650 -0.058544080
 [96]  0.221090991 -1.023473353 -0.174199940 -0.771715304 -0.617896407
[101]  0.330003745  0.463310846 -0.012367657  0.675890321 -0.468227477
[106]  0.951604119 -0.254177609  0.378650941 -0.394094761  0.197128854
[111]  0.333499849 -0.010687154 -0.033644301  0.275621706 -0.678528122
[116]  0.435855986 -0.279003093 -0.406750967 -0.111013788  0.102134628
[121] -0.151779244  0.819533626  0.473611404  0.532235801 -0.649998637
[126] -0.267208448 -0.220293347  0.600933341  0.016210626 -0.762926957
[131]  0.379294056 -0.636481639  0.731263887 -0.461884085  0.677273320
[136]  0.065817665  0.468537789  0.371315116  0.326599988 -0.528791804
[141]  0.004917961  0.192067618  0.057277888  0.404328245  0.180175529
[146]  0.283062220  0.178380111 -0.368860020  0.114189590 -1.054873070
[151]  0.808556824  0.082752984 -0.605025190 -0.705380097  0.090046619
[156]  0.187980792 -0.202897987  0.021604712  0.116275220 -0.068132845
[161]  0.403575471 -0.517988693 -0.138350552 -0.244030797 -0.577472109
[166]  0.237882422 -0.637061301  0.108836214  0.538199700 -0.452761197
[171]  0.590430497  0.246096502  0.502021230  0.554381242 -0.485492845
[176]  0.587994681  0.138332668  0.277936843  0.970832301  0.015964253
[181]  0.143341878  0.451369598 -0.504160453 -0.326105405  0.061133565
[186] -0.130688358  0.515490067  0.133929133 -0.758898280  0.027678446
[191] -0.134789949 -0.347097442  0.286566904 -0.261138129 -1.046216356
[196]  0.184424120 -0.029903839  0.170718126  0.405342165  0.440436077
[201]  0.673194322 -0.044980827 -0.095811296 -0.597503245 -1.103390060
[206]  0.096264008 -0.317238018  0.036258998  0.388052002 -0.381997418
[211] -0.028042145  0.745087964  0.182440427 -1.044841080 -0.194973356
[216]  1.044178214 -0.073457213 -0.645881690  0.887282023 -0.637033366
[221]  0.079902795 -0.231697551  0.139550612 -0.765871710  0.124667968
[226]  0.027001366  0.455936382 -0.202153289 -0.411494533  0.734939703
[231]  0.052759003  0.032911738 -0.889305811  0.741151228 -0.393200258
[236] -0.633665858  0.202371412  0.164243082  0.079189250 -0.390289752
[241]  0.774935300 -0.148530467 -0.009367745  0.187196468  0.851998291
[246] -1.096319098  0.369874370  0.088064640 -0.032882801  1.002991935
[251] -0.364992655 -0.285455314 -0.590698936 -0.686514389 -0.068873870
[256]  0.025562594 -0.270651818  0.691044092 -0.090178932 -0.290108881
[261] -0.210600936  0.437297622 -0.747287365 -0.249227133 -0.044945851
[266]  0.685743764  0.350688105  0.105426182  0.297123111 -0.208993960
[271] -0.712345806  0.367041009  0.239355742  0.060894233 -0.426935527
[276] -0.099413022 -0.955996845  0.220270293  0.082398895 -0.231190436
[281]  0.753104574 -0.501985117 -0.134722618 -0.285338541 -0.853611804
[286]  0.117743269  0.302175941 -0.054247362  0.185447367 -0.205617856
[291] -0.782381510  0.751032308  0.177624857 -0.008107775 -0.075024201
[296]  0.522847301 -0.212227745 -0.178409143  0.011648072  0.105501775
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopHfuncDeriv", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopHfuncDeriv2")
> ### * BiCopHfuncDeriv2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopHfuncDeriv2
> ### Title: Second Derivatives of the h-Function of a Bivariate Copula
> ### Aliases: BiCopHfuncDeriv2
> 
> ### ** Examples
> 
> ## simulate from a bivariate t-copula
> simdata <- BiCopSim(300, 2, -0.7, par2 = 4)
> 
> ## second derivative of the conditional bivariate t-copula 
> ## with respect to the first parameter
> u1 <- simdata[,1]
> u2 <- simdata[,2]
> BiCopHfuncDeriv2(u1, u2, 2, -0.7, par2 = 4, deriv = "par")
  [1] -1.215743472  0.676432163  2.070406599  0.683104137 -0.913376318
  [6] -0.710050633 -0.380729134  0.715399299 -0.665567977  1.632036772
 [11] -1.361455778 -1.685344162 -1.181894458 -0.469499520 -0.204037487
 [16]  0.728318453 -1.505687299  1.112256070 -2.074689314 -0.035874194
 [21]  1.140988554  1.001420431  1.506230774 -0.673163264  1.278770051
 [26]  1.384114516 -1.479096498 -0.034587398 -0.402780171 -0.262985015
 [31] -0.509232689 -1.256322024 -1.450544075  1.559790082  2.363910507
 [36]  1.788485119 -1.310927133  1.148459826  0.200611318 -0.238007528
 [41]  1.367784069 -1.324986879 -1.729349924 -1.847620251 -0.626541767
 [46]  0.056696643  0.793239949  0.889475962 -0.813941669  1.132457830
 [51] -0.736959547 -0.712669433 -1.667752912 -0.915512742  0.882856436
 [56]  0.304211963 -0.889548077  0.359914961 -1.771627993  0.935265984
 [61]  0.564255880 -1.448928570  0.391012586 -1.564219917 -0.049588592
 [66] -0.959530088 -0.221405775  0.865451336  0.392076006  0.619399962
 [71]  1.113127358 -1.146161833  0.312188735  1.206539497  2.251312538
 [76]  0.757996573 -0.815804338 -1.506407943 -0.776926112 -1.099202408
 [81]  1.781350836  1.603927794  0.406758350 -0.720730567 -0.680390201
 [86]  1.085797569  0.188897844  1.439691619  1.381150730  0.641747384
 [91] -1.048358632  0.855165407 -1.758635205  1.193376564  0.825690530
 [96] -0.263726732  2.406048643  0.072652932  2.042330048  1.659772707
[101] -1.094674103 -1.473395060 -0.707078620 -1.441458068  1.122840702
[106] -2.669331643 -0.121573944 -0.676155381 -0.089861170  0.066512328
[111] -0.816865435 -0.449493107  0.842095557  0.166819176  1.581586131
[116] -0.826388917  0.689697692  1.167586154  0.896278421 -0.578231830
[121]  0.041291546 -2.203649792 -1.410758735 -1.071857373  0.506897678
[126]  0.014866922  0.728721363 -1.035222799 -0.704223376  0.968919010
[131] -1.257308905  1.678239532 -1.854870560  0.954443265 -1.717759694
[136] -0.050855385 -1.175537697 -1.066627706 -0.891068901  1.566847594
[141] -0.666235920  0.111578854 -0.098646734 -0.921046249 -0.669680315
[146] -0.493936312  0.064686084  1.285910807 -0.137078560  2.721847917
[151] -1.548056974 -0.330918089 -0.761823873  1.824863180 -0.851988078
[156] -0.581906974  0.970745845 -0.685972832 -0.851197363  0.604360203
[161] -1.043406276 -1.069780077 -0.157114694  0.850280672  1.502193791
[166] -0.181079692  1.686734459 -0.841844768 -1.269161100 -0.302119562
[171] -1.581533120 -0.785922060 -1.346777026 -1.407868569  1.370624566
[176] -0.463134624  0.201656318 -0.313005054 -2.190453466  0.737473529
[181] -0.918371700 -0.934926404  1.226189798  0.411049219  0.313656302
[186]  0.308296668 -1.159197809 -1.090412140  1.763731867 -0.839589582
[191]  0.303340709 -0.489806305 -1.076115303  0.656174155  1.688811272
[196] -0.359354765  0.832636390 -1.083901305 -1.059414095 -0.960085381
[201] -1.761583082  0.020441164  0.522444368  1.646927486  3.070231610
[206]  0.282791318  1.003790018  0.421914610 -1.332959257  1.007754211
[211] -0.083555917 -1.774572460 -1.048379325  2.467945526  0.268864809
[216] -2.632173174 -0.069129025  1.632352676 -1.205081214  0.798267152
[221] -0.486081590  0.847398456 -1.060023271  0.847943265  0.040175843
[226]  0.619999191 -1.149872169 -0.058475344 -0.688338660 -0.872893426
[231] -0.923090391 -0.406848480  1.392437876 -1.878284760  1.296387637
[236]  0.256310892 -0.190195960 -0.686117150  0.518948145  1.326364046
[241] -1.963081216 -0.123258855  0.288742491  0.640543838 -2.236818725
[246]  2.934596365 -0.898891845 -0.609563404 -0.067334917 -1.863728816
[251]  1.350921535  1.304034506 -0.120235645  1.636173432  0.884165416
[256]  0.705384705  0.339786539 -1.803572725  0.730842590  0.634917730
[261]  1.037634486 -0.805216759  1.017710265  0.968425827 -0.159901177
[266] -0.041044340 -1.364388489  0.151239067 -1.299503843  0.004693169
[271]  0.441065481 -0.939993819 -0.314391620  0.370992386  1.461259637
[276]  1.018051366  2.829498895 -0.137895766  0.107473734  0.594214092
[281] -1.724225973  1.375348766  0.781833388  0.412615262  0.861019514
[286] -1.068016826 -0.272752391  0.921388304 -0.233123957  0.914511655
[291]  0.785045559 -0.353592936 -0.391098131 -0.743342764  0.454456708
[296] -1.553727759  1.212126052  1.121095942 -0.102371048 -0.720134004
> 
> ## estimate a bivariate copula from the data and
> ## evaluate its 2nd order derivative w.r.t. the parameter
> cop <- BiCopEst(u1, u2, family = 2)
> BiCopHfuncDeriv2(u1, u2, cop, deriv = "par")
  [1] -1.342515438  0.623985018  2.159904674  0.657016393 -0.835282589
  [6] -0.672045038 -0.443811696  0.828928621 -0.619366289  1.818616143
 [11] -1.537131421 -1.751534638 -1.314231459 -0.438568991 -0.206849009
 [16]  0.846175874 -1.589356638  1.161275697 -2.182040919 -0.037271539
 [21]  1.211238018  1.131534508  1.608436727 -0.726541430  1.365689289
 [26]  1.410336550 -1.600494408 -0.027999964 -0.471319035 -0.306608993
 [31] -0.545533873 -1.422671017 -1.652431940  1.711406342  2.596269504
 [36]  1.928831045 -1.451309003  1.125568676  0.262815464 -0.225085592
 [41]  1.552868877 -1.479101213 -1.956342263 -1.939797996 -0.584825088
 [46]  0.067048846  0.754222640  0.867110457 -0.941438409  1.237240628
 [51] -0.859186707 -0.707094462 -1.854041668 -1.032117201  0.917514995
 [56]  0.253677007 -1.022200803  0.331433873 -1.816793441  1.082371363
 [61]  0.626620622 -1.509879548  0.461759012 -1.684517012 -0.067488048
 [66] -0.901028156 -0.349476305  0.896905662  0.457513371  0.678128978
 [71]  1.257602601 -1.173895965  0.368906368  1.393119521  2.489510337
 [76]  0.876388286 -0.939842812 -1.586366234 -0.714443350 -1.106666408
 [81]  1.831218962  1.758991950  0.502249078 -0.697992182 -0.792611696
 [86]  1.079138956  0.246740385  1.443075978  1.473632137  0.591405470
 [91] -1.043978177  0.972959194 -2.002228828  1.238070088  0.886934799
 [96] -0.305434959  2.431045178  0.080877993  2.295665202  1.867008426
[101] -1.102645855 -1.644473120 -0.822207213 -1.469391378  1.301633494
[106] -2.869931581 -0.124521107 -0.777900635 -0.112968819  0.164073736
[111] -0.785335752 -0.524971011  0.943764231  0.168155293  1.650258286
[116] -0.790723834  0.804287433  1.344612272  1.027771007 -0.672423332
[121]  0.045466914 -2.454967214 -1.484092152 -1.054989257  0.433791437
[126] -0.002395383  0.846961665 -1.004237039 -0.816025053  0.896020717
[131] -1.432287828  1.896833633 -2.026853390  1.057656921 -1.848369415
[136] -0.040907681 -1.183920696 -1.064967222 -0.867087321  1.715268537
[141] -0.769705580  0.166020221 -0.078133639 -0.896385068 -0.628278057
[146] -0.451020570  0.204821804  1.457826746 -0.114713038  2.765176021
[151] -1.550339195 -0.386630690 -0.731536421  2.066979434 -0.879784455
[156] -0.537142621  0.970567952 -0.795202553 -0.854327652  0.582160125
[161] -1.209713233 -0.971926195 -0.140602465  0.824710767  1.719031866
[166] -0.061039456  1.831550401 -0.847716421 -1.287097816 -0.313630030
[171] -1.724807997 -0.912685331 -1.546154396 -1.458846889  1.565847766
[176] -0.398395044  0.246412403 -0.229413720 -2.234930214  0.858653833
[181] -0.925148897 -1.077265477  1.240139748  0.417451733  0.368864799
[186]  0.360545557 -1.304792879 -1.218187037  1.859633159 -0.963239360
[191]  0.354767195 -0.467527547 -1.085620612  0.615599373  1.486017696
[196] -0.318928486  0.936041232 -1.134532513 -1.227536225 -0.937419073
[201] -1.934746959  0.016303604  0.473289329  1.835322686  3.044532614
[206]  0.464530335  0.995902235  0.494212860 -1.505762829  0.995710874
[211] -0.097869043 -1.884720384 -1.193240893  2.468939965  0.234653118
[216] -2.677807721 -0.081548594  1.862042544 -1.102783990  0.739271416
[221] -0.436743274  0.980849078 -1.196794991  0.763974458  0.037288362
[226]  0.746922568 -1.154787967 -0.146637800 -0.648980896 -0.799507514
[231] -1.046316584 -0.399260533  1.317130846 -2.055302465  1.473024496
[236]  0.186659190 -0.219071213 -0.645959375  0.622330616  1.500387180
[241] -2.155049532 -0.112168285  0.337472504  0.627623160 -2.464088887
[246]  2.915958444 -0.873761015 -0.708033428 -0.078899347 -1.772033250
[251]  1.513862736  1.443937334 -0.165061868  1.721610812  1.012210403
[256]  0.824847381  0.225222850 -2.008131199  0.845280315  0.740987847
[261]  1.052847187 -0.767807169  0.954377139  0.960438573 -0.158527097
[266]  0.029631861 -1.463632438  0.131282630 -1.448425180 -0.013728374
[271]  0.355327979 -1.092077425 -0.277171370  0.548198603  1.601051131
[276]  1.110553392  3.024819046 -0.152333781  0.090461446  0.551324446
[281] -1.808086136  1.574585415  0.758650872  0.476668428  0.742859358
[286] -1.170448588 -0.235320679  1.046045546 -0.271441687  0.901920900
[291]  0.691600247 -0.258222519 -0.457230236 -0.863129765  0.403910248
[296] -1.725645508  1.304370659  1.184186124 -0.119780472 -0.833561932
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopHfuncDeriv2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopIndTest")
> ### * BiCopIndTest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopIndTest
> ### Title: Independence Test for Bivariate Copula Data
> ### Aliases: BiCopIndTest
> 
> ### ** Examples
> 
> ## Example 1: Gaussian copula with large dependence parameter
> par1 <- 0.7
> fam1 <- 1
> dat1 <- BiCopSim(500, fam1, par1)
> 
> # perform the asymptotic independence test
> BiCopIndTest(dat1[,1], dat1[,2])
$statistic
[1] 16.63404

$p.value
[1] 0

> 
> 
> ## Example 2: Gaussian copula with small dependence parameter
> par2 <- 0.01
> fam2 <- 1
> dat2 <- BiCopSim(500, fam2, par2)
> 
> # perform the asymptotic independence test
> BiCopIndTest(dat2[,1], dat2[,2])
$statistic
[1] 1.453241

$p.value
[1] 0.1461569

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopIndTest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopKPlot")
> ### * BiCopKPlot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopKPlot
> ### Title: Kendall's Plot for Bivariate Copula Data
> ### Aliases: BiCopKPlot
> 
> ### ** Examples
> 
> # Gaussian and Clayton copulas
> n <- 500
> tau <- 0.5
> 
> # simulate from Gaussian copula
> fam1 <- 1  
> theta1 <- BiCopTau2Par(fam1, tau)
> set.seed(123)
> dat1 <- BiCopSim(n, fam1, theta1)  
> 
> # simulate from Clayton copula
> fam2 <- 3
> theta2 <- BiCopTau2Par(fam2, tau)
> set.seed(123)
> dat2 <- BiCopSim(n, fam2, theta2)
> 
> # create K-plots
> par(mfrow=c(1,2))
> BiCopKPlot(dat1[,1], dat1[,2], main = "Gaussian copula")
> BiCopKPlot(dat2[,1], dat2[,2], main = "Clayton copula")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopKPlot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("BiCopLambda")
> ### * BiCopLambda
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopLambda
> ### Title: Lambda-Function (Plot) for Bivariate Copula Data
> ### Aliases: BiCopLambda
> 
> ### ** Examples
> 
> # Clayton and rotated Clayton copulas
> n <- 1000
> tau <- 0.5
> 
> # simulate from Clayton copula
> fam <- 3  
> theta <- BiCopTau2Par(fam, tau)
> set.seed(123)
> dat <- BiCopSim(n, fam, theta)
> 
> # create lambda-function plots
> par(mfrow = c(1, 3))
> BiCopLambda(dat[, 1], dat[, 2])  # empirical lambda-function	
> BiCopLambda(family = fam, par = theta)	# theoretical lambda-function
> BiCopLambda(dat[, 1], dat[, 2], family = fam, par = theta)	# both
> 
> # lambda-function of estimated copula
> fit <- BiCopSelect(dat[, 1], dat[, 2])
> par(mfrow = c(1, 1))
> BiCopLambda(fit)
> 
> # simulate from rotated Clayton copula (90 degrees)
> fam <- 23  
> theta <- BiCopTau2Par(fam, -tau)
> set.seed(123)
> dat <- BiCopSim(n, fam, theta)
>   
> # rotate the data to standard Clayton copula data
> rot_dat <- 1 - dat[, 1]
> 
> par(mfrow = c(1, 3))
> BiCopLambda(rot_dat, dat[, 2])  # empirical lambda-function	
> BiCopLambda(family = 3, par = -theta)	# theoretical lambda-function
> BiCopLambda(rot_dat, dat[, 2], family = 3, par = -theta)	# both
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopLambda", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("BiCopMetaContour")
> ### * BiCopMetaContour
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopMetaContour
> ### Title: Contour Plot of Bivariate Meta Distribution
> ### Aliases: BiCopMetaContour
> 
> ### ** Examples
> 
> ## Example 1: contour plot of meta Gaussian copula distribution
> ## with Gaussian margins
> tau <- 0.5
> fam <- 1
> theta <- BiCopTau2Par(fam, tau)	
> BiCopMetaContour(u1 = NULL, u2 = NULL, bw = 1, size = 100,
+                  levels = c(0.01, 0.05, 0.1, 0.15, 0.2),
+                  family = fam, par = theta, main = "tau = 0.5")
> 
> 
> ## Example 2: empirical contour plot with standard normal margins
> dat <- BiCopSim(N = 1000, fam, theta)
> BiCopMetaContour(dat[,1], dat[,2], bw = 2, size = 100,
+                  levels = c(0.01, 0.05, 0.1, 0.15, 0.2),
+                  par = 0, family = "emp", main = "N = 1000")
> 
> # empirical contour plot with exponential margins
> BiCopMetaContour(dat[,1], dat[,2], bw = 2, size = 100,
+                  levels = c(0.01, 0.05, 0.1, 0.15, 0.2),
+                  par = 0, family = "emp", main = "n = 500",
+                  margins = "exp", margins.par = 1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopMetaContour", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopName")
> ### * BiCopName
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopName
> ### Title: Bivariate Copula Family Names
> ### Aliases: BiCopName
> 
> ### ** Examples
> 
> # family as number
> family = 1
> BiCopName(family, short = TRUE)	 # short version
[1] "N"
> BiCopName(family, short = FALSE)	# long version
[1] "Gaussian"
> 
> # family as character expression (short version)
> family = "C"
> BiCopName(family)	# as number
[1] 3
> 
> # long version
> family = "Clayton"
> BiCopName(family)	# as number
[1] 3
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopName", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopPDF")
> ### * BiCopPDF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopPDF
> ### Title: Density of a Bivariate Copula
> ### Aliases: BiCopPDF
> 
> ### ** Examples
> 
> ## simulate from a bivariate t-copula
> simdata <- BiCopSim(300, 2, -0.7, par2 = 4)
> 
> ## evaluate the density of the bivariate t-copula
> u1 <- simdata[,1]
> u2 <- simdata[,2]
> BiCopPDF(u1, u2, 2, -0.7, par2 = 4)
  [1]  1.4509532  0.7450191  1.8841319  1.7781436  0.9356300  0.8177811
  [7]  1.7640099  1.7900306  0.1805557  1.4960027  4.7939019  1.3124508
 [13]  1.4847751  4.2339710  2.7018458  1.5585314  1.1721709  1.3683209
 [19]  1.8857129  1.8239689  1.4396319  1.6819455  1.2040565  4.6814185
 [25]  1.2789549  1.0715891  1.2477247  0.3931863  1.6853215  1.7119779
 [31]  3.6163336  1.4391155  1.6270213  1.3335671  3.9591288  1.4571431
 [37]  1.3719928  0.9563759  2.4986207  0.3128186  1.4980675  1.3835487
 [43]  1.9285981  1.4993152  0.7354036  0.4082332  0.7851634  0.9227819
 [49]  1.5333402  1.5704021  1.7039627  0.5321449  1.5098625  2.0504398
 [55]  2.0153110  1.6097740  1.5482732  0.1588145  1.4363680  1.5611646
 [61] 10.7965393  1.1209806  1.8398386  1.2563819  1.9618356  0.9084514
 [67]  5.8878895  2.0636994  1.5799545  6.6466197  1.4992094  1.1200087
 [73]  1.7884328  2.4028859  3.3494090  1.5586288  1.5892621  1.1677560
 [79]  0.8178396  1.0017327  1.4430653  1.3570455  2.5727364  1.6772328
 [85]  1.8677113  0.9238600  2.4250247  1.1397584  1.2010392  0.7256479
 [91]  0.9471255  2.2343033  3.0432788  1.1762044  2.6748038  1.8143599
 [97]  3.0861394  1.8103573  3.2703773  1.6526328  1.0123612  1.3970405
[103]  1.9628508  1.1125880  1.9358269  7.5223244  0.3772627  2.3157766
[109]  0.4506797  5.1004606  0.8303653  1.6693870  2.5948045  0.3705532
[115]  1.2117334  0.8011258  1.6581749  1.5985404  1.5860419  1.5657355
[121]  1.7555414  3.8122667  1.1342192  0.9067486  0.7342144  0.4398795
[127]  1.5641945  0.8974143  1.7495701  0.9532840  1.4820237  1.7860343
[133]  1.6090307  4.6918580  1.3724016  0.4203984  0.9705821  0.9548961
[139]  0.8795845  1.3257603  5.0197995  2.7203733  0.5354001  0.8543785
[145]  0.9427534  0.6732535 10.3018041  1.4498344  0.4999090  5.6515653
[151]  1.2456783  1.5775241  0.4078087  2.3607234  2.0848759  0.8325547
[157]  1.1806543  1.7129055  1.6721061  2.6235600  1.7095824  0.2732758
[163]  0.2804538  0.9538261  1.8602440 14.2416730  1.3746683  1.7670624
[169]  1.0079503  0.4156592 22.8242334  1.5670967  1.7056025  1.0934714
[175]  1.6014404  0.6922932  1.9842416 11.1945396  2.2421284  2.3787593
[181]  1.4657757  2.4965163  0.9897267  4.1093775  1.7241310  1.6029155
[187]  4.4162566  1.6043477  1.3925170  1.9037497  1.6077500  0.3044241
[193]  1.0598432  0.7855435  2.2756730  0.6428059  2.6409788  1.4488698
[199]  1.6983484  0.8639165  1.5161660  0.3722867  1.3231312  1.5118884
[205] 22.2053066 22.7677421  0.9624509  1.7196748  1.4355914  0.9121916
[211]  1.5988648  1.4092142  1.5096132  3.5087530  0.5691759  4.5757083
[217]  1.6408382  3.4053772  1.2075836  0.8195577  1.5677741  1.5381682
[223]  1.5722479  0.9173303  0.3449143  4.7069431  0.9601523  4.5702961
[229]  0.2891748  0.8991030  1.8975717 24.7319236  1.2834306  1.6558974
[235]  1.4717198  0.6557624  1.8106882  1.0225199  2.3383869  1.4439077
[241]  1.8447412  0.3095081  1.5999247  0.1055318  2.9658562 11.3953377
[247]  0.8567873  1.5741799  1.5997922  1.9725311  1.3936658  1.3762864
[253]  0.5353565  1.2609574  1.6920802  2.2989613 23.3790442  1.7178132
[259]  1.5849119  1.7238737  1.2197203  0.7913705  0.9572230  1.0426147
[265]  0.1119637  0.6393720  1.2343863  0.2462628  1.3890449  2.2522210
[271]  0.7572411  1.6933671  0.5848253 30.7046313  1.2985987  1.8373985
[277] 23.3352220  1.9883252  0.2466282  0.7731763  1.3484265  1.6579735
[283]  1.3572918  1.9714652  1.0384721  1.7073857  0.5605196  1.8619266
[289]  1.7203929  1.1129925  0.9155025  0.7716646  1.6289793  2.8401968
[295]  1.5914814  1.4042917  1.3976471  1.4433943  1.5849122  1.5682857
> 
> ## estimate a bivariate copula from the data and evaluate its PDF
> cop <- BiCopSelect(u1, u2)
> round(BiCopPDF(u1, u2, cop), 8)
  [1]  1.44711124  0.89244806  1.82044209  1.59455841  0.81829620  0.96921300
  [7]  1.74472489  1.81034987  0.20014291  1.48453825  6.68455737  1.28044865
 [13]  1.46967276  3.95041456  3.17114702  1.48664729  1.18180181  1.34835646
 [19]  1.89844610  1.82770683  1.42845318  1.69257102  1.25381636  4.46905356
 [25]  1.27348240  1.17957646  1.25892797  0.53479054  1.59085108  1.67262297
 [31]  4.69678323  1.40375906  1.61798462  1.35311460  3.73618369  1.47650603
 [37]  1.37063867  1.09426553  2.84689252  0.34291361  1.46421092  1.36859670
 [43]  2.01985480  1.47385724  0.87011744  0.46513214  0.89275535  0.92724132
 [49]  1.46860611  1.57481844  1.67312024  0.59275532  1.50129339  1.92428713
 [55]  2.03098323  1.03023409  1.48948479  0.08932921  1.38215529  1.49487956
 [61] 12.48484239  1.13571127  1.86135362  1.25600058  1.80957449  0.84245343
 [67]  5.80336865  2.07680215  1.50606983  7.55360501  1.46676174  1.21471940
 [73]  1.78552958  2.18895785  3.12177029  1.50001943  1.52304452  1.17588097
 [79]  0.76957001  1.10506322  1.47722783  1.37796121  2.95951760  1.65397231
 [85]  1.89524859  1.01148252  2.73220435  1.24786217  1.22079614  0.86149869
 [91]  1.05059384  2.43735568  3.66898408  1.17380772  2.87113364  1.81355852
 [97]  2.89432308  1.68693149  3.03102567  1.60379047  1.11802011  1.37534437
[103]  1.82960678  1.09614805  1.79936548  9.90467707  0.42365903  2.56074871
[109]  0.57604286  7.17875418  0.95642350  1.57858609  2.89456385  0.39203140
[115]  1.29320262  0.87989485  1.56888664  1.53499128  1.54937959  1.49105150
[121]  1.64294514  4.74074519  1.16875413  0.94426736  0.90736723  0.48902486
[127]  1.49139037  0.89987148  1.65397171  1.09648503  1.44122813  1.70569676
[133]  1.61995727  4.47588185  1.36008378  0.56287730  1.03237637  1.05541251
[139]  1.00534894  1.34865239  4.83769356  3.19785687  0.66682637  0.94944124
[145]  1.09064411  0.81454741 16.31785309  1.41731573  0.66573879  5.46099687
[151]  1.17564167  1.49867754  0.51196546  2.17908866  1.98831953  0.99679441
[157]  1.13807002  1.62281613  1.65306737  2.35503754  1.69462267  0.33685144
[163]  0.24114114  0.93128008  1.75370805 24.07575229  1.40470740  1.72836393
[169]  1.04121471  0.55975412 41.01171906  1.50410823  1.70790472  1.11425676
[175]  1.54713440  0.64819468  2.06382207 18.52598878  2.22287482  2.65349595
[181]  1.49444849  2.84361563  1.08129035  3.84960374  1.69624474  1.51746932
[187]  6.05518574  1.56507595  1.43502283  1.78968265  1.52150179  0.39937423
[193]  1.16924512  0.78424207  2.13690149  0.81560779  2.96147741  1.47657966
[199]  1.68093803  0.94269562  1.51351781  0.17595089  1.06376018  1.49779122
[205] 23.44921715 36.63616935  0.98341192  1.69447221  1.40275285  0.96914075
[211]  1.51326948  1.39133141  1.46607250  3.29732953  0.53452586  4.97439547
[217]  1.54897125  3.14397591  1.00217664  0.98192029  1.54471666  1.47260505
[223]  1.52955480  1.06336782  0.45479423  6.00319785  1.02772866  4.34991566
[229]  0.39329862  0.80027522  1.79303307 24.67887449  1.34487219  1.67509361
[235]  1.43698188  0.83110737  1.80822326  1.15355580  2.60105176  1.41544041
[241]  1.90541911  0.27511902  1.52919200  0.00957246  3.41863085 11.53596414
[247]  0.96671387  1.49983555  1.51399185  1.73117067  1.37404969  1.35797100
[253]  0.70388152  1.33044065  1.69090253  2.54058122 27.27507507  1.75052052
[259]  1.53232663  1.62101663  1.18799610  0.86862427  1.10199939  1.02397105
[265]  0.01027142  0.45458822  1.27224596  0.28976278  1.37766715  2.04954293
[271]  0.92162899  1.66819713  0.73130859 47.75685825  1.30860067  1.89592698
[277] 25.90364000  2.06425020  0.30830297  0.74849854  1.32233260  1.59148629
[283]  1.24301818  1.81619887  1.13720906  1.65966833  0.66605162  1.92876962
[289]  1.68376458  1.06577972  1.05615263  0.57523383  1.56553714  2.62349468
[295]  1.21012661  1.38602073  1.38668377  1.43046979  1.50237257  1.49869687
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopPDF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopPar2Beta")
> ### * BiCopPar2Beta
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopPar2Beta
> ### Title: Blomqvist's Beta Value of a Bivariate Copula
> ### Aliases: BiCopPar2Beta
> 
> ### ** Examples
> 
> #Blomqvist's beta for the Clayton copula
> BiCopPar2Beta(family = 3, par = 2)
[1] 0.5118579
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopPar2Beta", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopPar2TailDep")
> ### * BiCopPar2TailDep
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopPar2TailDep
> ### Title: Tail Dependence Coefficients of a Bivariate Copula
> ### Aliases: BiCopPar2TailDep
> 
> ### ** Examples
> 
> ## Example 1: Gaussian copula
> BiCopPar2TailDep(1, 0.7)
$lower
[1] 0

$upper
[1] 0

> 
> ## Example 2: t copula
> BiCopPar2TailDep(2, 0.7, 4)
$lower
[1] 0.390684

$upper
[1] 0.390684

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopPar2TailDep", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopPar2Tau")
> ### * BiCopPar2Tau
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopPar2Tau
> ### Title: Kendall's Tau Value of a Bivariate Copula
> ### Aliases: BiCopPar2Tau
> 
> ### ** Examples
> 
> ## Example 1: Gaussian copula
> tau0 <- 0.5
> rho <- BiCopTau2Par(family = 1, tau = tau0)
> 
> # transform back
> tau <- BiCopPar2Tau(family = 1, par = rho)
> tau - 2/pi*asin(rho)
[1] 0
> 
> 
> ## Example 2: Clayton copula
> theta <- BiCopTau2Par(family = 3, tau = c(0.4, 0.5, 0.6))
> BiCopPar2Tau(family = 3, par = theta)
[1] 0.4 0.5 0.6
> 
> 
> ## Example 3:
> vpar <- seq(from = 1.1, to = 10, length.out = 100)
> tauC <- BiCopPar2Tau(family = 3, par = vpar)
> tauG <- BiCopPar2Tau(family = 4, par = vpar)
> tauF <- BiCopPar2Tau(family = 5, par = vpar)
> tauJ <- BiCopPar2Tau(family = 6, par = vpar)
> plot(tauC ~ vpar, type = "l", ylim = c(0,1))
> lines(tauG ~ vpar, col = 2)
> lines(tauF ~ vpar, col = 3)
> lines(tauJ ~ vpar, col = 4)
> 
> ## Don't show: 
> # Test BiCopPar2Tau (one parametric families)
> theta <- BiCopTau2Par(family = 0, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 0, par = theta)
[1] 0 0 0
> theta <- BiCopTau2Par(family = 1, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 1, par = theta)
[1] 0.4 0.5 0.6
> theta <- BiCopTau2Par(family = 3, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 3, par = theta)
[1] 0.4 0.5 0.6
> theta <- BiCopTau2Par(family = 4, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 4, par = theta)
[1] 0.4 0.5 0.6
> theta <- BiCopTau2Par(family = 5, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 5, par = theta)
[1] 0.4 0.5 0.6
> theta <- BiCopTau2Par(family = 6, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 6, par = theta)
[1] 0.4000001 0.5000000 0.6000000
> theta <- BiCopTau2Par(family = 13, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 13, par = theta)
[1] 0.4 0.5 0.6
> theta <- BiCopTau2Par(family = 14, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 14, par = theta)
[1] 0.4 0.5 0.6
> theta <- BiCopTau2Par(family = 16, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 16, par = theta)
[1] 0.4000001 0.5000000 0.6000000
> theta <- BiCopTau2Par(family = 23, tau = -c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 23, par = theta)
[1] -0.4 -0.5 -0.6
> theta <- BiCopTau2Par(family = 24, tau = -c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 24, par = theta)
[1] -0.4 -0.5 -0.6
> theta <- BiCopTau2Par(family = 26, tau = -c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 26, par = theta)
[1] -0.4000001 -0.5000000 -0.6000000
> theta <- BiCopTau2Par(family = 33, tau = -c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 33, par = theta)
[1] -0.4 -0.5 -0.6
> theta <- BiCopTau2Par(family = 34, tau = -c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 34, par = theta)
[1] -0.4 -0.5 -0.6
> theta <- BiCopTau2Par(family = 36, tau = -c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 36, par = theta)
[1] -0.4000001 -0.5000000 -0.6000000
> theta <- BiCopTau2Par(family = 41, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 41, par = theta)
[1] 0.4 0.5 0.6
> theta <- BiCopTau2Par(family = 51, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 51, par = theta)
[1] 0.4 0.5 0.6
> theta <- BiCopTau2Par(family = 61, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 61, par = theta)
[1] 0.4 0.5 0.6
> theta <- BiCopTau2Par(family = 71, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 71, par = theta)
[1] 0.4 0.5 0.6
> theta <- BiCopTau2Par(family = 41, tau = -c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 41, par = theta)
[1] -0.4 -0.5 -0.6
> theta <- BiCopTau2Par(family = 51, tau = -c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 51, par = theta)
[1] -0.4 -0.5 -0.6
> theta <- BiCopTau2Par(family = 61, tau = -c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 61, par = theta)
[1] -0.4 -0.5 -0.6
> theta <- BiCopTau2Par(family = 71, tau = -c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 71, par = theta)
[1] -0.4 -0.5 -0.6
> 
> # Test BiCopPar2Tau (two parametric families)
> theta <- BiCopTau2Par(family = 2, tau = c(0.4,0.5,0.6))
> BiCopPar2Tau(family = 2, par = theta)
[1] 0.4 0.5 0.6
> theta <- 1:3
> delta <- 1:3
> BiCopPar2Tau(family = 7, par = theta, par2 = delta)
[1] 0.3333333 0.7500000 0.8666667
> BiCopPar2Tau(family = 17, par = theta, par2 = delta)
[1] 0.3333333 0.7500000 0.8666667
> theta <- -(1:3)
> delta <- -(1:3)
> BiCopPar2Tau(family = 27, par = theta, par2 = delta)
[1] -0.3333333 -0.7500000 -0.8666667
> BiCopPar2Tau(family = 37, par = theta, par2 = delta)
[1] -0.3333333 -0.7500000 -0.8666667
> theta <- 2:4
> delta <- 1:3
> BiCopPar2Tau(family = 8, par = theta, par2 = delta)
[1] 0.3550658 0.7589812 0.8712351
> BiCopPar2Tau(family = 18, par = theta, par2 = delta)
[1] 0.3550658 0.7589812 0.8712351
> theta <- -(2:4)
> delta <- -(1:3)
> BiCopPar2Tau(family = 28, par = theta, par2 = delta)
[1] -0.3550658 -0.7589812 -0.8712351
> BiCopPar2Tau(family = 38, par = theta, par2 = delta)
[1] -0.3550658 -0.7589812 -0.8712351
> theta <- 1:3
> delta <- 1:3
> BiCopPar2Tau(family = 9, par = theta, par2 = delta)
[1] 0.3333333 0.5833333 0.6848485
> BiCopPar2Tau(family = 19, par = theta, par2 = delta)
[1] 0.3333333 0.5833333 0.6848485
> theta <- -(1:3)
> delta <- -(1:3)
> BiCopPar2Tau(family = 29, par = theta, par2 = delta)
[1] -0.3333333 -0.5833333 -0.6848485
> BiCopPar2Tau(family = 39, par = theta, par2 = delta)
[1] -0.3333333 -0.5833333 -0.6848485
> theta <- 2:4
> delta <- c(0.1, 0.5, 0.9)
> BiCopPar2Tau(family = 10, par = theta, par2 = delta)
[1] 0.01200125 0.16649954 0.53531633
> BiCopPar2Tau(family = 20, par = theta, par2 = delta)
[1] 0.01200125 0.16649954 0.53531633
> theta <- -(2:4)
> delta <- -c(0.1, 0.5, 0.9)
> BiCopPar2Tau(family = 30, par = theta, par2 = delta)
[1] -0.01200125 -0.16649954 -0.53531633
> BiCopPar2Tau(family = 40, par = theta, par2 = delta)
[1] -0.01200125 -0.16649954 -0.53531633
> 
> theta <- 2:4
> delta <- c(0.1, 0.5, 0.9)
> BiCopPar2Tau(family = 104, par = theta, par2 = delta)
[1] 0.08268413 0.38629436 0.68897031
> BiCopPar2Tau(family = 114, par = theta, par2 = delta)
[1] 0.08268413 0.38629436 0.68897031
> theta <- -(2:4)
> delta <- c(0.1, 0.5, 0.9)
> BiCopPar2Tau(family = 124, par = theta, par2 = delta)
[1] -0.08268413 -0.38629436 -0.68897031
> BiCopPar2Tau(family = 134, par = theta, par2 = delta)
[1] -0.08268413 -0.38629436 -0.68897031
> 
> theta <- 2:4
> delta <- c(0.1, 0.5, 0.9)
> BiCopPar2Tau(family = 204, par = theta, par2 = delta)
[1] 0.08268413 0.38629436 0.68897031
> BiCopPar2Tau(family = 214, par = theta, par2 = delta)
[1] 0.08268413 0.38629436 0.68897031
> theta <- -(2:4)
> delta <- c(0.1, 0.5, 0.9)
> BiCopPar2Tau(family = 224, par = theta, par2 = delta)
[1] -0.08268413 -0.38629436 -0.68897031
> BiCopPar2Tau(family = 234, par = theta, par2 = delta)
[1] -0.08268413 -0.38629436 -0.68897031
> ## End(Don't show)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopPar2Tau", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopSelect")
> ### * BiCopSelect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopSelect
> ### Title: Selection and Maximum Likelihood Estimation of Bivariate Copula
> ###   Families
> ### Aliases: BiCopSelect
> 
> ### ** Examples
> 
> ## Example 1: Gaussian copula with large dependence parameter
> par1 <- 0.7
> fam1 <- 1
> dat1 <- BiCopSim(500, fam1, par1)
> 
> # select the bivariate copula family and estimate the parameter(s)
> cop1 <- BiCopSelect(dat1[,1], dat1[,2], familyset = c(1:10),
+                     indeptest = FALSE, level = 0.05)
> cop1$family
[1] 1
> cop1$par
[1] 0.703239
> cop1$par2
[1] 0
> 
> 
> ## Example 2: Gaussian copula with small dependence parameter
> par2 <- 0.01
> fam2 <- 1
> dat2 <- BiCopSim(500, fam2, par2)
> 
> # select the bivariate copula family and estimate the parameter(s)
> cop2 <- BiCopSelect(dat2[,1], dat2[,2], familyset = c(1:10),
+                     indeptest = TRUE, level = 0.05)
> cop2$family
[1] 0
> cop2$par
[1] 0
> cop2$par2
[1] 0
> 
> 
> ## Example 3: empirical data
> data(daxreturns)
> cop3 <- BiCopSelect(daxreturns[,1], daxreturns[,4],
+                     familyset = c(1:10, 13, 14, 16,
+                                   23, 24, 26, 33, 34, 36))
> cop3$family
[1] 14
> cop3$par
[1] 1.614805
> cop3$par2
[1] 0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopSelect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopSim")
> ### * BiCopSim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopSim
> ### Title: Simulation from a Bivariate Copula
> ### Aliases: BiCopSim
> 
> ### ** Examples
> 
> # simulate from a bivariate t-copula
> simdata <- BiCopSim(300, 2, -0.7, par2 = 4)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopSim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopTau2Par")
> ### * BiCopTau2Par
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopTau2Par
> ### Title: Parameter of a Bivariate Copula for a given Kendall's Tau Value
> ### Aliases: BiCopTau2Par
> 
> ### ** Examples
> 
> ## Example 1: Gaussian copula
> tau0 <- 0.5
> rho <- BiCopTau2Par(family = 1, tau = tau0)
> 
> # transform back
> tau <- BiCopPar2Tau(family = 1, par = rho)
> tau - 2/pi*asin(rho)
[1] 0
> 
> 
> ## Example 2: Clayton copula
> theta <- BiCopTau2Par(family = 3, tau = c(0.4, 0.5, 0.6))
> BiCopPar2Tau(family = 3, par = theta)
[1] 0.4 0.5 0.6
> 
> 
> ## Example 3:
> vtau <- seq(from = 0.1, to = 0.8, length.out = 100)
> thetaC <- BiCopTau2Par(family = 3, tau = vtau)
> thetaG <- BiCopTau2Par(family = 4, tau = vtau)
> thetaF <- BiCopTau2Par(family = 5, tau = vtau)
> thetaJ <- BiCopTau2Par(family = 6, tau = vtau)
> plot(thetaC ~ vtau, type = "l", ylim = range(thetaF))
> lines(thetaG ~ vtau, col = 2)
> lines(thetaF ~ vtau, col = 3)
> lines(thetaJ ~ vtau, col = 4)
> 
> ## Don't show: 
> # Test BiCopTau2Par
> BiCopTau2Par(family = 0, tau = c(0.4,0.5,0.6))
[1] 0 0 0
> BiCopTau2Par(family = 1, tau = c(0.4,0.5,0.6))
[1] 0.5877853 0.7071068 0.8090170
> BiCopTau2Par(family = 2, tau = c(0.4,0.5,0.6))
[1] 0.5877853 0.7071068 0.8090170
> BiCopTau2Par(family = 3, tau = c(0.4,0.5,0.6))
[1] 1.333333 2.000000 3.000000
> BiCopTau2Par(family = 4, tau = c(0.4,0.5,0.6))
[1] 1.666667 2.000000 2.500000
> BiCopTau2Par(family = 5, tau = c(0.4,0.5,0.6))
[1] 4.161064 5.736283 7.929642
> BiCopTau2Par(family = 6, tau = c(0.4,0.5,0.6))
[1] 2.219070 2.856258 3.826659
> BiCopTau2Par(family = 13, tau = c(0.4,0.5,0.6))
[1] 1.333333 2.000000 3.000000
> BiCopTau2Par(family = 14, tau = c(0.4,0.5,0.6))
[1] 1.666667 2.000000 2.500000
> BiCopTau2Par(family = 16, tau = c(0.4,0.5,0.6))
[1] 2.219070 2.856258 3.826659
> BiCopTau2Par(family = 23, tau = -c(0.4,0.5,0.6))
[1] -1.333333 -2.000000 -3.000000
> BiCopTau2Par(family = 24, tau = -c(0.4,0.5,0.6))
[1] -1.666667 -2.000000 -2.500000
> BiCopTau2Par(family = 26, tau = -c(0.4,0.5,0.6))
[1] -2.219070 -2.856258 -3.826659
> BiCopTau2Par(family = 33, tau = -c(0.4,0.5,0.6))
[1] -1.333333 -2.000000 -3.000000
> BiCopTau2Par(family = 34, tau = -c(0.4,0.5,0.6))
[1] -1.666667 -2.000000 -2.500000
> BiCopTau2Par(family = 36, tau = -c(0.4,0.5,0.6))
[1] -2.219070 -2.856258 -3.826659
> BiCopTau2Par(family = 41, tau = c(0.4,0.5,0.6))
[1] 3.278015 4.836848 7.703827
> BiCopTau2Par(family = 51, tau = c(0.4,0.5,0.6))
[1] 3.278015 4.836848 7.703827
> BiCopTau2Par(family = 61, tau = c(0.4,0.5,0.6))
[1] -0.3583378 -0.2699585 -0.1968076
> BiCopTau2Par(family = 71, tau = c(0.4,0.5,0.6))
[1] -0.3583378 -0.2699585 -0.1968076
> BiCopTau2Par(family = 41, tau = -c(0.4,0.5,0.6))
[1] 0.3583378 0.2699585 0.1968076
> BiCopTau2Par(family = 51, tau = -c(0.4,0.5,0.6))
[1] 0.3583378 0.2699585 0.1968076
> BiCopTau2Par(family = 61, tau = -c(0.4,0.5,0.6))
[1] -3.278015 -4.836848 -7.703827
> BiCopTau2Par(family = 71, tau = -c(0.4,0.5,0.6))
[1] -3.278015 -4.836848 -7.703827
> ## End(Don't show)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopTau2Par", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BiCopVuongClarke")
> ### * BiCopVuongClarke
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BiCopVuongClarke
> ### Title: Scoring Goodness-of-Fit Test based on Vuong And Clarke Tests for
> ###   Bivariate Copula Data
> ### Aliases: BiCopVuongClarke
> 
> ### ** Examples
> 
> # simulate from a t-copula
> set.seed(123)
> dat <- BiCopSim(500, 2, 0.7, 5)
> 
> # apply the test for families 1-10
> vcgof <- BiCopVuongClarke(dat[,1], dat[,2], familyset = 1:6)
> 
> # display the Vuong test scores
> vcgof[1,]
 1  2  3  4  5  6 
 0  5 -1  0  0 -4 
> 
> # display the Clarke test scores
> vcgof[2,]
 1  2  3  4  5  6 
-1  5 -4  1  3 -4 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BiCopVuongClarke", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("C2RVine")
> ### * C2RVine
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: C2RVine
> ### Title: Transform C-Vine to R-Vine Structure
> ### Aliases: C2RVine
> 
> ### ** Examples
> 
> # simulate a sample of size 500 from a 4-dimensional C-vine  
> # copula model with mixed pair-copulas
> # load package CDVine
> library(CDVine)
Loading required package: MASS
Loading required package: mvtnorm
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union


Attaching package: ‘CDVine’

The following objects are masked from ‘package:VineCopula’:

    BiCopCDF, BiCopChiPlot, BiCopEst, BiCopHfunc, BiCopIndTest,
    BiCopKPlot, BiCopLambda, BiCopMetaContour, BiCopName, BiCopPDF,
    BiCopPar2TailDep, BiCopPar2Tau, BiCopSelect, BiCopSim,
    BiCopTau2Par, BiCopVuongClarke

> d <- 4
> dd <- d*(d-1)/2
> order <- 1:d
> family <- c(1, 2, 3, 4, 7, 3)
> par <- c(0.5, 0.4, 2, 1.5, 1.2, 1.5)
> par2 <- c(0, 5, 0, 0, 2, 0)
> type <- 1
> simdata <- CDVineSim(500, family, par, par2, type)
> 
> # determine log-likelihood
> out <- CDVineLogLik(simdata, family, par, par2, type)
> out$loglik
[1] 1007.06
> 
> # transform to R-vine matrix notation
> RVM <- C2RVine(order, family, par, par2)
> 
> # check that log-likelihood stays the same
> out2 <- RVineLogLik(simdata,RVM)
> out2$loglik
[1] 1007.06
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("C2RVine", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:CDVine’, ‘package:igraph’, ‘package:mvtnorm’,
  ‘package:MASS’

> nameEx("D2RVine")
> ### * D2RVine
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: D2RVine
> ### Title: Transform D-Vine to R-Vine Structure
> ### Aliases: D2RVine
> 
> ### ** Examples
> 
> # simulate a sample of size 500 from a 4-dimensional D-vine 
> # copula model with mixed pair-copulas
> # load package CDVine
> library(CDVine)
Loading required package: MASS
Loading required package: mvtnorm
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union


Attaching package: ‘CDVine’

The following objects are masked from ‘package:VineCopula’:

    BiCopCDF, BiCopChiPlot, BiCopEst, BiCopHfunc, BiCopIndTest,
    BiCopKPlot, BiCopLambda, BiCopMetaContour, BiCopName, BiCopPDF,
    BiCopPar2TailDep, BiCopPar2Tau, BiCopSelect, BiCopSim,
    BiCopTau2Par, BiCopVuongClarke

> d <- 4
> dd <- d*(d-1)/2
> order <- 1:d
> family <- c(1, 2, 3, 4, 7, 3)
> par <- c(0.5, 0.4, 2, 1.5, 1.2, 1.5)
> par2 <- c(0, 5, 0, 0, 2, 0)
> type <- 2
> simdata <- CDVineSim(500, family, par, par2, type)
> 
> # determine log-likelihood
> out <- CDVineLogLik(simdata, family, par, par2, type)
> out$loglik
[1] 1002.935
> 
> # transform to R-vine matrix notation
> RVM <- D2RVine(order, family, par, par2)
> 
> # check that log-likelihood stays the same
> out2 <- RVineLogLik(simdata, RVM)
> out2$loglik
[1] 1002.935
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("D2RVine", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:CDVine’, ‘package:igraph’, ‘package:mvtnorm’,
  ‘package:MASS’

> nameEx("RVineAICBIC")
> ### * RVineAICBIC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineAIC/BIC
> ### Title: AIC and BIC of an R-Vine Copula Model
> ### Aliases: RVineAIC RVineBIC
> 
> ### ** Examples
> 
> # define 5-dimensional R-vine tree structure matrix
> Matrix <- c(5, 2, 3, 1, 4,
+             0, 2, 3, 4, 1,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 1)
> Matrix <- matrix(Matrix, 5, 5)
> 
> # define R-vine pair-copula family matrix
> family <- c(0, 1, 3, 4, 4,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 3,
+             0, 0, 0, 0, 0)
> family <- matrix(family, 5, 5)
> 
> # define R-vine pair-copula parameter matrix
> par <- c(0, 0.2, 0.9, 1.5, 3.9,
+          0, 0, 1.1, 1.6, 0.9,
+          0, 0, 0, 1.9, 0.5,
+          0, 0, 0, 0, 4.8,
+          0, 0, 0, 0, 0)
> par <- matrix(par, 5, 5)
> 
> # define second R-vine pair-copula parameter matrix
> par2 <- matrix(0, 5, 5)
> 
> # define RVineMatrix object
> RVM <- RVineMatrix(Matrix = Matrix, family = family, par = par, par2 = par2,
+                    names=c("V1", "V2", "V3", "V4", "V5"))
> 
> # simulate a sample of size 300 from the R-vine copula model
> set.seed(123)
> simdata <- RVineSim(300,RVM)
> 
> # compute AIC and BIC
> RVineAIC(simdata, RVM)
$AIC
[1] -2377.838

$pair.AIC
            [,1]      [,2]       [,3]      [,4] [,5]
[1,]    0.000000    0.0000    0.00000    0.0000    0
[2,]   -6.708694    0.0000    0.00000    0.0000    0
[3,] -115.278766 -154.2115    0.00000    0.0000    0
[4,]  -86.911625 -116.1803 -184.56444    0.0000    0
[5,] -590.199643 -492.9601  -68.22856 -562.5942    0

> RVineBIC(simdata, RVM)
$BIC
[1] -2340.8

$pair.BIC
            [,1]      [,2]       [,3]      [,4] [,5]
[1,]    0.000000    0.0000    0.00000    0.0000    0
[2,]   -3.004911    0.0000    0.00000    0.0000    0
[3,] -111.574983 -150.5077    0.00000    0.0000    0
[4,]  -83.207842 -112.4765 -180.86065    0.0000    0
[5,] -586.495861 -489.2563  -64.52478 -558.8904    0

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineAICBIC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVineClarkeTest")
> ### * RVineClarkeTest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineClarkeTest
> ### Title: Clarke Test Comparing Two R-Vine Copula Models
> ### Aliases: RVineClarkeTest
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # vine structure selection time-consuming (~ 20 sec)
> ##D 
> ##D # load data set
> ##D data(daxreturns)
> ##D 
> ##D # select the R-vine structure, families and parameters
> ##D RVM <- RVineStructureSelect(daxreturns[,1:5], c(1:6))
> ##D RVM$Matrix
> ##D RVM$par
> ##D RVM$par2
> ##D 
> ##D # select the C-vine structure, families and parameters
> ##D CVM <- RVineStructureSelect(daxreturns[,1:5], c(1:6), type = "CVine")
> ##D CVM$Matrix
> ##D CVM$par
> ##D CVM$par2
> ##D 
> ##D # compare the two models based on the data
> ##D clarke <- RVineClarkeTest(daxreturns[,1:5], RVM, CVM)
> ##D clarke$statistic
> ##D clarke$statistic.Schwarz
> ##D clarke$p.value
> ##D clarke$p.value.Schwarz
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineClarkeTest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVineCopSelect")
> ### * RVineCopSelect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineCopSelect
> ### Title: Sequential Pair-Copula Selection and Estimation for R-Vine
> ###   Copula Models
> ### Aliases: RVineCopSelect
> 
> ### ** Examples
> 
> # define 5-dimensional R-vine tree structure matrix
> Matrix <- c(5, 2, 3, 1, 4,
+             0, 2, 3, 4, 1,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 1)
> Matrix <- matrix(Matrix, 5, 5)
> 
> # define R-vine pair-copula family matrix
> family <- c(0, 1, 3, 4, 4,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 3,
+             0, 0, 0, 0, 0)
> family <- matrix(family, 5, 5)
> 
> # define R-vine pair-copula parameter matrix
> par <- c(0, 0.2, 0.9, 1.5, 3.9,
+          0, 0, 1.1, 1.6, 0.9,
+          0, 0, 0, 1.9, 0.5,
+          0, 0, 0, 0, 4.8,
+          0, 0, 0, 0, 0)
> par <- matrix(par, 5, 5)
> 
> # define second R-vine pair-copula parameter matrix
> par2 <- matrix(0, 5, 5)
> 
> # define RVineMatrix object
> RVM <- RVineMatrix(Matrix = Matrix, family = family,
+                    par = par, par2 = par2,
+                    names = c("V1", "V2", "V3", "V4", "V5"))
>                   
> # simulate a sample of size 1000 from the R-vine copula model
> set.seed(123)
> simdata <- RVineSim(1000, RVM)
> 
> # determine the pair-copula families and parameters
> RVM1 <- RVineCopSelect(simdata, familyset = c(1, 3, 4, 5 ,6), Matrix)
     [,1] [,2] [,3] [,4] [,5]
[1,]    0    0    0    0    0
[2,]    1    0    0    0    0
[3,]    3    3    0    0    0
[4,]    4    4    4    0    0
[5,]    4    1    1    3    0
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineCopSelect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVineCor2pcor")
> ### * RVineCor2pcor
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineCor2pcor
> ### Title: (Partial) Correlations for R-Vine Copula Models
> ### Aliases: RVinePcor2cor RVineCor2pcor
> ### Keywords: vine partial correlation
> 
> ### ** Examples
> 
> ## create RVineMatrix-object for Gaussian vine
> Matrix <- matrix(c(1, 3, 4, 2, 
+                    0, 3, 4, 2,
+                    0, 0, 4, 2, 
+                    0, 0, 0, 2), 4, 4)
> family <- matrix(c(0, 1, 1, 1, 
+                    0, 0, 1, 1,
+                    0, 0, 0, 1, 
+                    0, 0, 0, 0), 4, 4)
> par <- matrix(c(0, 0.2,   0, 0.6, 
+                 0,   0, 0.2, 0.6,
+                 0,   0,   0, 0.6, 
+                 0,   0,   0,   0), 4, 4)
> RVM <- RVineMatrix(Matrix, family, par)
> 
> ## calculate correlation matrix corresponding to the R-Vine model
> newcor <- RVinePcor2cor(RVM)
> 
> ## transform back to partial correlations
> RVineCor2pcor(RVM, newcor)$par
     [,1] [,2] [,3] [,4]
[1,]  0.0  0.0  0.0    0
[2,]  0.2  0.0  0.0    0
[3,]  0.0  0.2  0.0    0
[4,]  0.6  0.6  0.6    0
> 
> ## check if they are equal
> all.equal(RVM$par, RVineCor2pcor(RVM, newcor)$par)
[1] TRUE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineCor2pcor", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVineGofTest")
> ### * RVineGofTest
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineGofTest
> ### Title: Goodness-of-Fit Tests for R-Vine Copula Models
> ### Aliases: RVineGofTest
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # time-consuming example
> ##D 
> ##D # load data set
> ##D data(daxreturns)
> ##D 
> ##D # select the R-vine structure, families and parameters
> ##D RVM <- RVineStructureSelect(daxreturns[,1:5], c(1:6))
> ##D 
> ##D # White test with asymptotic p-value
> ##D RVineGofTest(daxreturns[,1:5], RVM, B = 0)
> ##D 
> ##D # ECP2 test with Cramer-von-Mises test statistic and a bootstrap
> ##D # with 200 replications for the calculation of the p-value
> ##D RVineGofTest(daxreturns[,1:5], RVM, method = "ECP2",
> ##D              statistic = "CvM", B = 200)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineGofTest", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVineGrad")
> ### * RVineGrad
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineGrad
> ### Title: Gradient of the Log-Likelihood of an R-Vine Copula Model
> ### Aliases: RVineGrad
> 
> ### ** Examples
> 
> # define 5-dimensional R-vine tree structure matrix
> Matrix <- c(5, 2, 3, 1, 4,
+             0, 2, 3, 4, 1,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 1)
> Matrix <- matrix(Matrix, 5, 5)
> 
> # define R-vine pair-copula family matrix
> family <- c(0, 1, 3, 4, 4,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 3,
+             0, 0, 0, 0, 0)
> family <- matrix(family, 5, 5)
> 
> # define R-vine pair-copula parameter matrix
> par <- c(0, 0.2, 0.9, 1.5, 3.9,
+          0, 0, 1.1, 1.6, 0.9,
+          0, 0, 0, 1.9, 0.5,
+          0, 0, 0, 0, 4.8,
+          0, 0, 0, 0, 0)
> par <- matrix(par, 5, 5)
> 
> # define second R-vine pair-copula parameter matrix
> par2 <- matrix(0, 5, 5)
> 
> # define RVineMatrix object
> RVM <- RVineMatrix(Matrix = Matrix, family = family,
+                    par = par, par2 = par2,
+                    names = c("V1", "V2", "V3", "V4", "V5"))
>                   
> # simulate a sample of size 300 from the R-vine copula model
> set.seed(123)
> simdata <- RVineSim(300, RVM)
> 
> # compute the gradient of the first row of the data
> out2 <- RVineGrad(simdata[1,], RVM)
> out2$gradient
 [1]  1.5956128 -0.2851612 -1.7426652 -0.2077662 -0.1693743  0.5534283
 [7] -5.0518528 -0.4287275  3.2388926 -0.3446294
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineGrad", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVineHessian")
> ### * RVineHessian
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineHessian
> ### Title: Hessian Matrix of the Log-Likelihood of an R-Vine Copula Model
> ### Aliases: RVineHessian
> 
> ### ** Examples
> 
> # define 5-dimensional R-vine tree structure matrix
> Matrix <- c(5, 2, 3, 1, 4,
+             0, 2, 3, 4, 1,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 1)
> Matrix <- matrix(Matrix, 5, 5)
> 
> # define R-vine pair-copula family matrix
> family <- c(0, 1, 3, 4, 4,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 3,
+             0, 0, 0, 0, 0)
> family <- matrix(family, 5, 5)
> 
> # define R-vine pair-copula parameter matrix
> par <- c(0, 0.2, 0.9, 1.5, 3.9,
+          0, 0, 1.1, 1.6, 0.9,
+          0, 0, 0, 1.9, 0.5,
+          0, 0, 0, 0, 4.8,
+          0, 0, 0, 0, 0)
> par <- matrix(par, 5, 5)
> 
> # define second R-vine pair-copula parameter matrix
> par2 <- matrix(0, 5, 5)
> 
> # define RVineMatrix object
> RVM <- RVineMatrix(Matrix = Matrix, family = family,
+                    par = par, par2 = par2,
+                    names = c("V1", "V2", "V3", "V4", "V5"))
>                   
> # simulate a sample of size 300 from the R-vine copula model
> set.seed(123)
> simdata <- RVineSim(300, RVM)
> 
> # compute the Hessian matrix of the first row of the data
> out2 <- RVineHessian(simdata[1,], RVM)
> out2$hessian
             [,1]         [,2]         [,3]         [,4]         [,5]
 [1,] -0.20835529  0.600506359 -0.647786496    1.3836564  0.295496669
 [2,]  0.60050636  4.561415817  2.843538595    4.7922232  0.029152110
 [3,] -0.64778650  2.843538595 -0.406889590   -1.8820037 -0.011448628
 [4,]  1.38365637  4.792223161 -1.882003719 -215.0854092 -8.179330186
 [5,]  0.29549667  0.029152110 -0.011448628   -8.1793302 -0.907743917
 [6,] -0.10271728  0.871015881 -0.342065691   -3.3111368 -0.020142347
 [7,] -0.01578703  0.009626409 -0.003780487    0.5644751  0.003433822
 [8,] -0.21060115  0.046926816 -0.018429117    2.7517032  0.016739194
 [9,] -0.22170193  1.090100315 -0.428104614    0.3525682  0.002144747
[10,] -0.01356155 -1.409004629  0.553344839   15.9123751  0.096798351
             [,6]         [,7]        [,8]         [,9]       [,10]
 [1,] -0.10271728 -0.015787031 -0.21060115 -0.221701930 -0.01356155
 [2,]  0.87101588  0.009626409  0.04692682  1.090100315 -1.40900463
 [3,] -0.34206569 -0.003780487 -0.01842912 -0.428104614  0.55334484
 [4,] -3.31113679  0.564475121  2.75170316  0.352568244 15.91237509
 [5,] -0.02014235  0.003433822  0.01673919  0.002144747  0.09679835
 [6,] -0.13575833  0.010053493  0.04900877  0.006279360  0.28340480
 [7,]  0.01005349 -0.099238982 -0.39629213 -0.032928908  0.14494818
 [8,]  0.04900877 -0.396292130 -0.45095779 -0.160521830  0.70659334
 [9,]  0.00627936 -0.032928908 -0.16052183 -0.230989188  0.09053388
[10,]  0.28340480  0.144948179  0.70659334  0.090533884 -1.72188179
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineHessian", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVineLogLik")
> ### * RVineLogLik
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineLogLik
> ### Title: Log-Likelihood of an R-Vine Copula Model
> ### Aliases: RVineLogLik
> 
> ### ** Examples
> 
> # define 5-dimensional R-vine tree structure matrix
> Matrix <- c(5, 2, 3, 1, 4,
+             0, 2, 3, 4, 1,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 1)
> Matrix <- matrix(Matrix, 5, 5)
> 
> # define R-vine pair-copula family matrix
> family <- c(0, 1, 3, 4, 4,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 3,
+             0, 0, 0, 0, 0)
> family <- matrix(family, 5, 5)
> 
> # define R-vine pair-copula parameter matrix
> par <- c(0, 0.2, 0.9, 1.5, 3.9,
+          0, 0, 1.1, 1.6, 0.9,
+          0, 0, 0, 1.9, 0.5,
+          0, 0, 0, 0, 4.8,
+          0, 0, 0, 0, 0)
> par <- matrix(par, 5, 5)
> 
> # define second R-vine pair-copula parameter matrix
> par2 <- matrix(0, 5, 5)
> 
> # define RVineMatrix object
> RVM <- RVineMatrix(Matrix = Matrix, family = family,
+                    par = par, par2 = par2,
+                    names = c("V1", "V2", "V3", "V4", "V5"))
>                   
> # simulate a sample of size 300 from the R-vine copula model
> set.seed(123)
> simdata <- RVineSim(300, RVM)
> 
> # compute the log-likelihood
> ll <- RVineLogLik(simdata, RVM, separate = FALSE)
> ll$loglik
[1] 1198.919
> 
> # compute the pointwise log-likelihoods
> ll <- RVineLogLik(simdata, RVM, separate = TRUE)
> ll$loglik
  [1]  1.650962909  7.343343544  5.907552484  1.452133126  5.107280976
  [6]  3.570778885  9.611784442  2.663215764  6.411155126  5.784532245
 [11]  7.864579936  3.523347213  2.777988368  3.660844659 -0.557596125
 [16]  4.862661063  3.632567556  3.634167314  5.837203510  4.343431355
 [21]  2.625122048  8.759696654  1.933754329  4.493455661  3.526011462
 [26]  2.754764146  5.235347162  3.662177110  4.371822479  5.948037992
 [31]  3.565972134  3.750334004  3.952414682  2.845952330  2.919537477
 [36]  3.428011398  4.394202420  2.088986513  1.116357490  3.689925288
 [41]  3.012731183  3.297585043  2.557612938  2.747514531  1.797756181
 [46]  3.043828725  2.619833158  2.873308126  2.873442334  2.088307828
 [51]  4.999401172  3.114141025  9.797844211  2.089135245  0.006719337
 [56]  6.597135721  1.742940439  3.336473286  3.419120579  5.672502915
 [61]  0.727573451  4.520098773  3.112682292  4.750548858  2.416544921
 [66] -3.126371475  3.252299525  2.054099028  3.860630543  2.047412351
 [71]  2.672111363  8.656706366  4.993461703  2.498347945  3.729509163
 [76]  5.863374165  3.606243876  2.486782075  5.662278654  2.292811160
 [81]  5.882248550  2.603217621  2.869261669  1.425525180  3.313576606
 [86]  2.955776159  4.094134905  2.173562391  3.422326150  3.253690499
 [91]  2.785488674  6.287158466  6.221258336  4.185746645  5.013154018
 [96]  3.170843091  2.307856357  5.539595654  2.589141750  3.666233908
[101]  4.091906707  3.904398687  2.485211784  4.075696814  3.989331767
[106] -1.412133121  5.381702774  3.909166866  2.523345648  4.113651402
[111]  3.491201110  1.454538765  5.454980602  3.381896849  3.333239333
[116]  2.370850691  7.646845836  3.154517436 -0.325426816  2.540429469
[121]  4.409116866  3.164386705 -1.149704053  4.243462339  7.109277207
[126]  3.728414530  4.677145171  3.028847997  3.084799552  2.371097220
[131]  6.852503855  4.061525626  3.917973242  4.394147558 13.218939882
[136]  2.930198313  3.821243665  3.252722439  8.839913766  3.587057440
[141]  1.343599101  3.560625898  4.169693493 -0.424089085  3.374558722
[146]  3.538763361  2.308820666 -2.136530564  3.013229224  0.431711144
[151]  5.009135893  1.714457828  3.918923378  5.916174580  7.944845401
[156]  4.524589965  1.903614728  2.991045663  5.319163135  4.151116942
[161]  2.949819550  7.333508327  5.920994465  7.075604447  1.514190643
[166]  8.871767792 12.171635597  2.926094192  7.953508134  2.426933180
[171]  2.132677509 -0.490290216  2.951704616  5.596871261  4.706709317
[176]  0.615334388  3.775095321  4.634369592  4.027044878  0.533799015
[181]  7.046672708  2.271119523 12.062884106  7.273894330  1.876248831
[186]  3.271657878  3.162510025  2.694786264  5.712440537  6.406253960
[191]  0.907432244  4.616375853  2.712092643  2.725252042  1.623216042
[196] -0.181927637  2.809477806  2.874753119  7.422465004  4.225591909
[201]  2.717617985  2.186233293  2.147249044  4.774206290  3.459554312
[206]  4.368803670  4.728634372  3.618045061  5.540711838  3.619592463
[211]  5.829353550  4.036946775  2.336474209  1.584087359  7.134404056
[216]  3.201873505  4.129673886  5.221214955  1.974245714 11.139795130
[221]  4.084183407  2.312542220  6.486160542  3.825490677  4.801737035
[226]  5.107369708  4.212386871  3.641285245  1.290903917  3.460392781
[231]  6.783479328  2.454459702  3.814316876  4.404663550  2.903667473
[236]  2.851868686 12.565127679  5.403486168  4.742263945  0.899236298
[241]  8.269661753  3.215164654  4.226514178  3.112714365  1.182789058
[246]  8.292867984 15.841905423  6.133167718  6.833165972  4.316149733
[251] -0.850862407  1.203567647  4.512113539  2.948986165  7.682011806
[256]  3.907380275  3.898758395  4.242494733  3.612761406  3.544534500
[261]  8.267875867  2.463575076  4.515975860  4.986242696  2.327409344
[266]  2.161585193  3.961508596  4.287260890  4.615198999  6.025050645
[271] 11.673862584  3.340208439  2.790415291  4.099663743  4.310988130
[276]  1.727391233  1.945279582  3.891369735  9.859481392  3.251923419
[281]  6.429399390  2.168009255  5.161329240  3.829198680  4.837623266
[286]  2.869752889  4.649498201  3.821930011  5.834249184  2.524625274
[291]  3.553159143  2.846835792  6.018486013  5.997807812  2.561486903
[296]  0.896623260 -0.017314688  6.566010797  3.148239034 10.309523412
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineLogLik", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVineMLE")
> ### * RVineMLE
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineMLE
> ### Title: Maximum Likelihood Estimation of an R-Vine Copula Model
> ### Aliases: RVineMLE
> 
> ### ** Examples
> 
> # define 5-dimensional R-vine tree structure matrix
> Matrix <- c(5, 2, 3, 1, 4,
+             0, 2, 3, 4, 1,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 1)
> Matrix <- matrix(Matrix, 5, 5)
> 
> # define R-vine pair-copula family matrix
> family <- c(0, 1, 3, 4, 4,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 3,
+             0, 0, 0, 0, 0)
> family <- matrix(family, 5, 5)
> 
> # define R-vine pair-copula parameter matrix
> par <- c(0, 0.2, 0.9, 1.5, 3.9,
+          0, 0, 1.1, 1.6, 0.9,
+          0, 0, 0, 1.9, 0.5,
+          0, 0, 0, 0, 4.8,
+          0, 0, 0, 0, 0)
> par <- matrix(par, 5, 5)
> 
> # define second R-vine pair-copula parameter matrix
> par2 <- matrix(0, 5, 5)
> 
> # define RVineMatrix object
> RVM <- RVineMatrix(Matrix = Matrix, family = family,
+                    par = par, par2 = par2,
+                    names = c("V1", "V2", "V3", "V4", "V5"))
> 
> # simulate a sample of size 300 from the R-vine copula model
> set.seed(123)
> simdata <- RVineSim(300, RVM)
> 
> # compute the MLE
> mle <- RVineMLE(simdata, RVM, grad = TRUE, trace = 0)
> 
> # compare parameters
> round(mle$RVM$par - RVM$par, 2)
      [,1] [,2]  [,3]  [,4] [,5]
[1,]  0.00 0.00  0.00  0.00    0
[2,] -0.03 0.00  0.00  0.00    0
[3,]  0.04 0.08  0.00  0.00    0
[4,]  0.02 0.04 -0.01  0.00    0
[5,]  0.17 0.00 -0.01 -0.02    0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineMLE", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVineMatrix")
> ### * RVineMatrix
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineMatrix
> ### Title: R-Vine Copula Model in Matrix Notation
> ### Aliases: RVineMatrix
> 
> ### ** Examples
> 
> # define 5-dimensional R-vine tree structure matrix
> Matrix <- c(5, 2, 3, 1, 4,
+             0, 2, 3, 4, 1,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 1)
> Matrix <- matrix(Matrix, 5, 5)
> 
> # define R-vine pair-copula family matrix
> family <- c(0, 1, 3, 4, 4,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 3,
+             0, 0, 0, 0, 0)
> family <- matrix(family, 5, 5)
> 
> # define R-vine pair-copula parameter matrix
> par <- c(0, 0.2, 0.9, 1.5, 3.9,
+          0, 0, 1.1, 1.6, 0.9,
+          0, 0, 0, 1.9, 0.5,
+          0, 0, 0, 0, 4.8,
+          0, 0, 0, 0, 0)
> par <- matrix(par, 5, 5)
> 
> # define second R-vine pair-copula parameter matrix
> par2 <- matrix(0, 5, 5)
> 
> # define RVineMatrix object
> RVM <- RVineMatrix(Matrix = Matrix, family = family,
+                    par = par, par2 = par2,
+                    names = c("V1", "V2", "V3", "V4", "V5"))
> 
> # Print detailed information
> print(RVM, detail = TRUE)
R-vine matrix:
     [,1] [,2] [,3] [,4] [,5]
[1,]    5    0    0    0    0
[2,]    2    2    0    0    0
[3,]    3    3    3    0    0
[4,]    1    4    4    4    0
[5,]    4    1    1    1    1

Where
1 <-> V1
2 <-> V2
3 <-> V3
4 <-> V4
5 <-> V5

Tree 1:
V5,V4: Gumbel with par=3.9 (tau=0.74)
V2,V1: Gaussian with par=0.9 (tau=0.71)
V3,V1: Gaussian with par=0.5 (tau=0.33)
V4,V1: Clayton with par=4.8 (tau=0.71)

Tree 2:
V5,V1|V4: Gumbel with par=1.5 (tau=0.33)
V2,V4|V1: Gumbel with par=1.6 (tau=0.38)
V3,V4|V1: Gumbel with par=1.9 (tau=0.47)

Tree 3:
V5,V3|V1,V4: Clayton with par=0.9 (tau=0.31)
V2,V3|V4,V1: Clayton with par=1.1 (tau=0.35)

Tree 4:
V5,V2|V3,V1,V4: Gaussian with par=0.2 (tau=0.13)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineMatrix", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVineMatrixNormalize")
> ### * RVineMatrixNormalize
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVineMatrixNormalize
> ### Title: Normalization of R-Vine Matrix
> ### Aliases: RVineMatrixNormalize
> ### Keywords: vine
> 
> ### ** Examples
> 
> Matrix <- matrix(c(5, 2, 3, 1, 4,
+                    0, 2, 3, 4, 1,
+                    0, 0, 3, 4, 1,
+                    0, 0, 0, 4, 1,
+                    0, 0, 0, 0, 1), 5, 5)
> family <- matrix(1,5,5)
> 
> par <- matrix(c(0, 0.2, 0.9, 0.5, 0.8,
+                 0,   0, 0.1, 0.6, 0.9,
+                 0,   0,   0, 0.7, 0.5,
+                 0,   0,   0,   0, 0.8,
+                 0,   0,   0,   0,   0), 5, 5)
> 
> # define RVineMatrix object
> RVM <- RVineMatrix(Matrix, family, par)
> 
> # normalise the RVine
> RVineMatrixNormalize(RVM)
R-vine matrix:
     [,1] [,2] [,3] [,4] [,5]
[1,]    5    0    0    0    0
[2,]    4    4    0    0    0
[3,]    3    3    3    0    0
[4,]    1    2    2    2    0
[5,]    2    1    1    1    1

Where
1 <-> V1
2 <-> V4
3 <-> V3
4 <-> V2
5 <-> V5
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVineMatrixNormalize", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVinePDF")
> ### * RVinePDF
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVinePDF
> ### Title: PDF of an R-Vine Copula Model
> ### Aliases: RVinePDF
> 
> ### ** Examples
> 
> # define 5-dimensional R-vine tree structure matrix
> Matrix <- c(5, 2, 3, 1, 4,
+             0, 2, 3, 4, 1,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 1)
> Matrix <- matrix(Matrix, 5, 5)
> 
> # define R-vine pair-copula family matrix
> family <- c(0, 1, 3, 4, 4,
+             0, 0, 3, 4, 1,
+             0, 0, 0, 4, 1,
+             0, 0, 0, 0, 3,
+             0, 0, 0, 0, 0)
> family <- matrix(family, 5, 5)
> 
> # define R-vine pair-copula parameter matrix
> par <- c(0, 0.2, 0.9, 1.5, 3.9,
+          0, 0, 1.1, 1.6, 0.9,
+          0, 0, 0, 1.9, 0.5,
+          0, 0, 0, 0, 4.8,
+          0, 0, 0, 0, 0)
> par <- matrix(par, 5, 5)
> 
> # define second R-vine pair-copula parameter matrix
> par2 <- matrix(0, 5, 5)
> 
> # define RVineMatrix object
> RVM <- RVineMatrix(Matrix = Matrix, family = family,
+                    par = par, par2 = par2,
+                    names = c("V1", "V2", "V3", "V4", "V5"))
>                   
> # compute the density at (0.1, 0.2, 0.3, 0.4, 0.5)
> RVinePDF(c(0.1, 0.2, 0.3, 0.4, 0.5), RVM)
[1] 3.278508e-06
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RVinePDF", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RVinePIT")
> ### * RVinePIT
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RVinePIT
> ### Title: Probability Integral Transformation for R-Vine Copula Models
> ### Aliases: RVinePIT
> 
> ### ** Examples
> 
> # load data set
> data(daxreturns)
> 
> # select the R-vine structure, families and parameters
> RVM <- RVineStructureSelect(daxreturns[,1:3], c(1:6))
Warning: 'get.edge' is deperecated, please use 'ends' instead.
Warning: 'get.edge' is deperecated, please use 'ends' instead.
Error in RVineMatrix(M, family = Type, par = Param, par2 = Params2, names = nam) : 
  Error in the structure matrix.
Calls: RVineStructureSelect -> as.RVM -> RVineMatrix
Execution halted
