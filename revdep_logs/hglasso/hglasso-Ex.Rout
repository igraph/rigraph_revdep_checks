
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "hglasso"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "hglasso-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('hglasso')
Loading required package: glasso
Loading required package: mvtnorm
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("HubNetwork")
> ### * HubNetwork
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: HubNetwork
> ### Title: Hub network generation
> ### Aliases: HubNetwork
> 
> ### ** Examples
> 
> # Generate inverse covariance matrix with 5 hubs
> # 30% of the elements within a hub are zero 
> # 95% of the elements that are not within hub nodes are zero
> p <- 100
> Theta <- HubNetwork(p,0.95,5,0.3)$Theta
> 
> # Generate covariance matrix with 5 hubs with similar structure
> Sigma <- HubNetwork(p,0.95,5,0.3,type="covariance")$Theta
> 
> # Generate binary network with 2 hubs with p=10
> Theta <- HubNetwork(p=10,0.95,2,0.3,type="binary")$Theta
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("HubNetwork", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("binaryMCMC")
> ### * binaryMCMC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: binaryMCMC
> ### Title: Generate samples using Gibbs sampling for binary network
> ###   specified by the parameter Theta
> ### Aliases: binaryMCMC
> 
> ### ** Examples
> 
> # generate Theta that specified the structure of a binary Ising model with p=10 variables and 2 hubs
> #p<-10
> #n<-50
> #Theta <- HubNetwork(p,0.95,2,0.3,type="binary")$Theta
> 
> # generate samples using Gibbs sampling
> #X <- binaryMCMC(n,Theta,burnin=1000,skip=500)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("binaryMCMC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hbn")
> ### * hbn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hbn
> ### Title: Hub binary network
> ### Aliases: hbn
> 
> ### ** Examples
> 
> ##############################################
> # An implementation of Hub Binary Network
> ##############################################
> #set.seed(1000)
> #n=50
> #p=5
> 
> # A network with 2 hubs
> #network<-HubNetwork(p,0.95,2,0.1,type="binary")
> #Theta <- network$Theta
> #truehub <- network$hubcol
> # The four hub nodes have indices 4,5
> #print(truehub)
> 
> # Generate data matrix x
> #X <- binaryMCMC(n,Theta,burnin=500,skip=100)
> 
> # Run Hub Binary Network to estimate Theta
> #res1 <- hbn(X,2,1,3,trace=TRUE)
> 
> # print out a summary of the object hbn
> #summary(res1)
> 
> # We see that the estimated hub nodes have indices 1,5
> # We successfully recover the hub nodes
> 
> # Plot the resulting network
> # plot(res1) 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hbn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hcov")
> ### * hcov
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hcov
> ### Title: Hub covariance graph
> ### Aliases: hcov
> 
> ### ** Examples
> 
> #############################################
> # Example for estimating covariance matrix
> # with hubs
> ##############################################
> library(mvtnorm)
> set.seed(1)
> n=100
> p=100
> 
> # a covariance with 4 hubs
> 
> network <- HubNetwork(p,0.95,4,0.1,type="covariance")
> Sigma <- network$Theta
> hubind <- network$hubcol
> x <- rmvnorm(n,rep(0,p),Sigma)
> x <- scale(x)
> 
> # Estimate the covariance matrix
> res1<-hcov(cov(x),0.3,0.2,1.2)
> summary(res1)
Summary for the object "hcov"
Information of the optimization problem: 
    n   p lambda1 lambda2 lambda3
1 100 100     0.3     0.2     1.2
Sigma
:  Number.of.Edges Indices.for.hub.nodes
1             153            42, 78, 94
V
:  Indices.for.hub.nodes Number.of.Edges.within.each.hub
1                    42                              39
2                    78                              40
3                    94                              40
Z
:  Number.of.Edges
1              40
> # correctly identified two of the hub nodes
> 
> # Plot the matrices V and Z 
> image(res1)
plot window will lay out plots in a 1 by 2 matrix 
> dev.off()
pdf 
  2 
> # Plot a graphical representation of the estimated covariance matrix --- covariance graph
> plot(res1)
> 
> # Xue et al cannot identified any hub nodes
> res2 <- hcov(cov(x),0.3)
> summary(res2)
Summary for the object "hcov"
Information of the optimization problem: 
    n   p lambda1 lambda2 lambda3
1 100 100     0.3   1e+05   1e+05
Sigma
:  Number.of.Edges Indices.for.hub.nodes
1              42                      
V
:[1] Indices.for.hub.nodes           Number.of.Edges.within.each.hub
<0 rows> (or 0-length row.names)
Z
:  Number.of.Edges
1              42
> plot(res2)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hcov", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hglasso-package")
> ### * hglasso-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hglasso-package
> ### Title: Fit the hub graphical lasso, hub covariance graph, and hub
> ###   binary network
> ### Aliases: hglasso-package
> ### Keywords: package
> 
> ### ** Examples
> 
> ##############################################
> # Example from Figure 1 in the manuscript
> # A toy example to illustrate the results from 
> # Hub Graphical Lasso
> ##############################################
> #library(mvtnorm)
> #set.seed(1)
> #n=100
> #p=100
> 
> # A network with 4 hubs
> #network<-HubNetwork(p,0.99,4,0.1)
> #Theta <- network$Theta
> #truehub <- network$hubcol
> # The four hub nodes have indices 14, 42, 45, 78
> #print(truehub)
> 
> # Generate data matrix x
> #x <- rmvnorm(n,rep(0,p),solve(Theta))
> #x <- scale(x)
> 
> # Run Hub Graphical Lasso to estimate the inverse covariance matrix
> # res1<-hglasso(cov(x),0.3,0.3,1.5)
> 
> # print out a summary of the object hglasso
> #summary(res1)
> # we see that the estimated hub nodes have indices 14, 42, 45, 78
> # We successfully recover the 4 hub nodes
> 
> # Plot the matrices V and Z 
> #image(res1)
> #dev.off()
> # Plot a graphical representation of the estimated inverse
> # covariance matrix --- conditional independence graph
> #plot(res1,main="Conditional Independence Graph")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hglasso-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hglasso")
> ### * hglasso
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hglasso
> ### Title: Hub graphical lasso
> ### Aliases: hglasso
> 
> ### ** Examples
> 
> ##############################################
> # Example from Figure 1 in the manuscript
> # A toy example to illustrate the results from 
> # Hub Graphical Lasso
> ##############################################
> library(mvtnorm)
> library(glasso)
> set.seed(1)
> n=100
> p=100
> 
> # A network with 4 hubs
> network<-HubNetwork(p,0.99,4,0.1)
> Theta <- network$Theta
> truehub <- network$hubcol
> # The four hub nodes have indices 14, 42, 45, 78
> print(truehub)
[1] 42 14 45 78
> 
> # Generate data matrix x
> x <- rmvnorm(n,rep(0,p),solve(Theta))
> x <- scale(x)
> 
> # Run Hub Graphical Lasso to estimate the inverse covariance matrix
> res1 <- hglasso(cov(x),0.3,0.3,1.5)
> 
> # print out a summary of the object hglasso
> summary(res1)
Summary for the object "hglasso"
Information of the optimization problem: 
    n   p lambda1 lambda2 lambda3
1 100 100     0.3     0.3     1.5
Theta
:  Number.of.Edges Indices.for.hub.nodes
1             363        14, 42, 45, 78
V
:  Indices.for.hub.nodes Number.of.Edges.within.each.hub
1                    14                              64
2                    42                              61
3                    45                              45
4                    78                              64
Z
:  Number.of.Edges
1             175
> # we see that the estimated hub nodes have indices 14, 42, 45, 78
> # We successfully recover the 4 hub nodes
> 
> # Run hglasso using with and without warm start.  
> # system.time(hglasso(cov(x),0.31,0.3,1.5))
> 
> # system.time(hglasso(cov(x),0.31,0.3,1.5,start="warm",var.init=res1))
> 
> # Run hglasso with larger lambda2, encouraging the hub nodes to be more sparse
> res2 <- hglasso(cov(x),0.3,0.35,1.5)
> 
> # Run hglasso with lambda2=lambda3=100000, the solution is the 
> # same as the graphical lasso solution obtain from glasso package
> res3 <- hglasso(cov(x),0.3)
> res4 <- glasso(cov(x),0.3,penalize.diagonal=FALSE)
> # print the frobenius norm of the difference between the two estimates
> print(sum((res3$Theta-res4$wi)^2))
[1] 2.7153e-06
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hglasso", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("hglassoBIC")
> ### * hglassoBIC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: hglassoBIC
> ### Title: BIC-type criterion for 'hglasso'
> ### Aliases: hglassoBIC
> 
> ### ** Examples
> 
> #library(mvtnorm)
> #library(glasso)
> #set.seed(1)
> #n=100
> #p=100
> 
> # A network with 4 hubs
> #network<-HubNetwork(p,0.99,4,0.1)
> #Theta <- network$Theta
> #truehub <- network$hubcol
> # The four hub nodes have indices 14, 42, 45, 78
> #print(truehub)
> 
> # Generate data matrix x
> #x <- rmvnorm(n,rep(0,p),solve(Theta))
> #x <- scale(x)
> #S <- cov(x)
> # Run Hub Graphical Lasso with different tuning parameters
> #lambdas2 <- seq(0,0.5,by=0.05)
> #BICcriterion <- NULL
> #for(lambda2 in lambdas2){
> #res1 <- hglasso(S,0.3,lambda2,1.5)
> #BICcriterion <- c(BICcriterion,hglassoBIC(res1,S)$BIC)
> #}
> #lambda2 <- lambdas2[which(BICcriterion==min(BICcriterion))]
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("hglassoBIC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("image.hglasso")
> ### * image.hglasso
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: image.hglasso
> ### Title: Image plot of an object of class 'hglasso', 'hcov', or 'hbn'
> ### Aliases: image.hglasso image.hcov image.hbn
> 
> ### ** Examples
> 
> ##############################################
> # Example from Figure 1 in the manuscript
> # A toy example to illustrate the results from 
> # Hub Graphical Lasso
> ##############################################
> library(mvtnorm)
> set.seed(1)
> n=100
> p=100
> 
> # A network with 4 hubs
> Theta<-HubNetwork(p,0.99,4,0.1)$Theta
> 
> # Generate data matrix x
> x <- rmvnorm(n,rep(0,p),solve(Theta))
> x <- scale(x)
> 
> # Run Hub Graphical Lasso to estimate the inverse covariance matrix
> res1 <- hglasso(cov(x),0.3,0.2,2)
> 
> # image plots for the matrix V and Z
> image(res1)
dev.new(): using pdf(file="Rplots1.pdf")
plot window will lay out plots in a 1 by 2 matrix 
> dev.off()
pdf 
  2 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("image.hglasso", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.hglasso")
> ### * plot.hglasso
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.hglasso
> ### Title: Plot an object of class 'hglasso', 'hcov', or 'hbn'
> ### Aliases: plot.hglasso plot.hcov plot.hbn
> 
> ### ** Examples
> 
> ##############################################
> # Example from Figure 1 in the manuscript
> # A toy example to illustrate the results from 
> # Hub Graphical Lasso
> ##############################################
> library(mvtnorm)
> set.seed(1)
> n=100
> p=100
> 
> # A network with 4 hubs
> Theta<-HubNetwork(p,0.99,4,0.1)$Theta
> 
> # Generate data matrix x
> x <- rmvnorm(n,rep(0,p),solve(Theta))
> x <- scale(x)
> 
> # Run Hub Graphical Lasso to estimate the inverse covariance matrix
> res1 <- hglasso(cov(x),0.3,0.3,1.5)
> 
> # Graphical representation of the estimated Theta
> plot(res1,main="conditional independence graph")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.hglasso", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary.hglasso")
> ### * summary.hglasso
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.hglasso
> ### Title: Plot an object of class 'hglasso', 'hcov', or 'hbn'
> ### Aliases: summary.hglasso summary.hcov summary.hbn
> 
> ### ** Examples
> 
> # See example in hglasso, hcov, or hbn.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.hglasso", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  9.353 0.063 9.43 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
