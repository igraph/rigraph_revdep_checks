
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "camel"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "camel-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('camel')
Loading required package: lattice
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: MASS
Loading required package: Matrix
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("camel.cmr")
> ### * camel.cmr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: camel.cmr
> ### Title: Calibrated Multivariate Regression
> ### Aliases: camel.cmr
> 
> ### ** Examples
> 
> ## Generate the design matrix and regression coefficient vector
> n = 200
> d = 400
> m = 13
> Sigma = matrix(0.5,d,d)
> diag(Sigma) = 1
> X = mvrnorm(n,rep(0,d),Sigma)
> B = matrix(0,d,m)
> B[1,] = 3
> B[2,] = 2
> B[4,] = 1.5
> W = matrix(rnorm(n*m,0,1),n,m)
> sig = sqrt(2)
> D = sig*diag(2^(c(0:-12)/4))
> Z = W%*%D
> Y = X%*%B + Z
> out = camel.cmr(X, Y)
Multivariate Regression with Calibration via MFISTA.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("camel.cmr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("camel.plot")
> ### * camel.plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: camel.plot
> ### Title: Graph visualization
> ### Aliases: camel.plot
> 
> ### ** Examples
> 
> ## visualize the hub graph
> L = camel.tiger.generator(graph = "hub")
Generating data from the multivariate normal distribution with the hub graph structure....done.
> camel.plot(L$theta)
> 
> ## visualize the band graph
> L = camel.tiger.generator(graph = "band",g=5)
Generating data from the multivariate normal distribution with the band graph structure....done.
> camel.plot(L$theta)
> 
> ## visualize the cluster graph
> L = camel.tiger.generator(graph = "cluster")
Generating data from the multivariate normal distribution with the cluster graph structure....done.
> camel.plot(L$theta)
> 
> #show working directory
> getwd()
[1] "/Users/gaborcsardi/works/igraph/revdep_check/camel.Rcheck"
> #plot 5 graphs and save the plots as eps files in the working directory  
> camel.plot(L$theta, epsflag = TRUE, cur.num = 5)
pdf 
  2 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("camel.plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("camel.slim")
> ### * camel.slim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: camel.slim
> ### Title: Calibrated Linear Regression
> ### Aliases: camel.slim
> 
> ### ** Examples
> 
> ## Generate the design matrix and regression coefficient vector
> n = 200
> d = 400
> X = matrix(rnorm(n*d), n, d)
> beta = c(3,2,0,1.5,rep(0,d-4))
> 
> ## Generate response using Gaussian noise, and fit a sparse linear model using SQRT Lasso
> eps.sqrt = rnorm(n)
> Y.sqrt = X%*%beta + eps.sqrt
> out.sqrt = camel.slim(X = X, Y = Y.sqrt, lambda = seq(0.8,0.2,length.out=5))
Sparse Linear Regression with L1 Regularization.
SQRT Lasso regression via MFISTA.
> 
> ## Generate response using Cauchy noise, and fit a sparse linear model using LAD Lasso
> eps.lad = rt(n = n, df = 1)
> Y.lad = X%*%beta + eps.lad
> out.lad = camel.slim(X = X, Y = Y.lad, q = 1, lambda = seq(0.5,0.2,length.out=5))
Sparse Linear Regression with L1 Regularization.
LAD Lasso regression via MFISTA.
> 
> ## Visualize the solution path
> plot(out.sqrt)
> plot(out.lad)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("camel.slim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("camel.tiger")
> ### * camel.tiger
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: camel.tiger
> ### Title: Tuning Insensitive Graph Estimation and Regression
> ### Aliases: camel.tiger
> 
> ### ** Examples
> 
> 
> ## generating data
> n = 100
> d = 100
> D = camel.tiger.generator(n=n,d=d,graph="hub",g=10)
Generating data from the multivariate normal distribution with the hub graph structure....done.
> plot(D)
> 
> ## sparse precision matrix estimation with method "clime"
> out1 = camel.tiger(D$data, method = "clime")
> plot(out1)
> camel.plot(out1$path[[7]])
> 
> ## sparse precision matrix estimation with method "slasso"
> out2 = camel.tiger(D$data, method = "slasso")
> plot(out2)
> camel.plot(out2$path[[4]])
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("camel.tiger", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("camel.tiger.generator")
> ### * camel.tiger.generator
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: camel.tiger.generator
> ### Title: Data generator for undirected graph estimation.
> ### Aliases: camel.tiger.generator
> 
> ### ** Examples
> 
> ## band graph with bandwidth 3
> L = camel.tiger.generator(graph = "band", g = 3)
Generating data from the multivariate normal distribution with the band graph structure....done.
> plot(L)
> 
> ## random sparse graph
> L = camel.tiger.generator(vis = TRUE)
Generating data from the multivariate normal distribution with the random graph structure....done.
> 
> ## random dense graph
> L = camel.tiger.generator(prob = 0.5, vis = TRUE)
Generating data from the multivariate normal distribution with the random graph structure....done.
> 
> ## hub graph with 6 hubs
> L = camel.tiger.generator(graph = "hub", g = 6, vis = TRUE)
Generating data from the multivariate normal distribution with the hub graph structure....done.
> 
> ## cluster graph with 8 clusters
> L = camel.tiger.generator(graph = "cluster", g = 8, vis = TRUE)
Generating data from the multivariate normal distribution with the cluster graph structure....done.
> 
> ## scale-free graphs
> L = camel.tiger.generator(graph="scale-free", vis = TRUE)
Generating data from the multivariate normal distribution with the scale-free graph structure....done.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("camel.tiger.generator", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("camel.tiger.roc")
> ### * camel.tiger.roc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: camel.tiger.roc
> ### Title: Draw ROC Curve for a graph path
> ### Aliases: camel.tiger.roc
> 
> ### ** Examples
> 
> #generate data
> L = camel.tiger.generator(d = 50, graph = "random", prob = 0.1)
Generating data from the multivariate normal distribution with the random graph structure....done.
> out1 = camel.tiger(L$data, lambda=10^(seq(log10(.4), log10(0.03), length.out=20)))
> 
> #draw ROC curve
> Z1 = camel.tiger.roc(out1$path,L$theta)
Computing F1 scores, false positive rates and true positive rates....done.
> 
> #Maximum F1 score
> max(Z1$F1)
[1] 0.9541105
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("camel.tiger.roc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("camel.tiger.select")
> ### * camel.tiger.select
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: camel.tiger.select
> ### Title: Model selection for high-dimensional undirected graph estimation
> ### Aliases: camel.tiger.select
> 
> ### ** Examples
> 
> #generate data
> L = camel.tiger.generator(d = 20, graph="hub")
Generating data from the multivariate normal distribution with the hub graph structure....done.
> out1 = camel.tiger(L$data)
> 
> #model selection using stars
> out1.select2 = camel.tiger.select(out1, criterion = "stars", stars.thresh = 0.05)
Conducting Subsampling....in progress:5% Conducting Subsampling....in progress:10% Conducting Subsampling....in progress:15% Conducting Subsampling....in progress:20% Conducting Subsampling....in progress:25% Conducting Subsampling....in progress:30% Conducting Subsampling....in progress:35% Conducting Subsampling....in progress:40% Conducting Subsampling....in progress:45% Conducting Subsampling....in progress:50% Conducting Subsampling....in progress:55% Conducting Subsampling....in progress:60% Conducting Subsampling....in progress:65% Conducting Subsampling....in progress:70% Conducting Subsampling....in progress:75% Conducting Subsampling....in progress:80% Conducting Subsampling....in progress:85% Conducting Subsampling....in progress:90% Conducting Subsampling....in progress:95% Conducting Subsampling....in progress:100% Conducting Subsampling....done.                  
> plot(out1.select2)
> 
> #model selection using cross validation
> out1.select3 = camel.tiger.select(out1, criterion = "cv")
Conducting cross validation (cv) selection....done
Computing the optimal graph....done
> plot(out1.select3)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("camel.tiger.select", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("eyedata")
> ### * eyedata
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: eyedata
> ### Title: Gene expression data for Bardet-Biedl syndrome from Scheetz et
> ###   al. (2006)
> ### Aliases: eyedata
> 
> ### ** Examples
> 
> data(eyedata)
> image(x)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("eyedata", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  20.401 0.292 21.318 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
