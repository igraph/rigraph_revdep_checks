
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rgp"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "rgp-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('rgp')
*** RGP version 0.4-1 initialized successfully.
    Type 'help(package="rgp")' to bring up the RGP help pages,
    or type 'vignette("rgp_introduction")' to show RGP's package vignette.
    Type 'symbolicRegressionUi()' to bring up the symbolic regression UI if
    the optional package 'rgpui' is installed.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("paretoFrontKneeIndex")
> ### * paretoFrontKneeIndex
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: paretoFrontKneeIndex
> ### Title: Find the knee of a two dimensional pareto front
> ### Aliases: paretoFrontKneeIndex
> 
> ### ** Examples
> 
> m1 <- matrix(runif(200), ncol = 100)
> plot(t(m1))
> points(t(m1[,emoa::nds_rank(m1) == 1]), col = "red", pch = 16)
> pKnee <- m1[, paretoFrontKneeIndex(m1)]
> points(t(pKnee), col = "green4", pch = 16)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("paretoFrontKneeIndex", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotFunctions")
> ### * plotFunctions
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotFunctions
> ### Title: Show an overlayed plot of multiple functions
> ### Aliases: plotFunctions
> 
> ### ** Examples
> 
> plotFunctions(list(function(x) sin(x),
+                    function(x) cos(x),
+                    function(x) 0.5*sin(2*x)+1),
+               -pi, pi, 256)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotFunctions", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sTypeConstructors")
> ### * sTypeConstructors
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: st
> ### Title: Type constructors for types in the Rsymbolic type system
> ### Aliases: %->% sObject st
> ### Keywords: datasets
> 
> ### ** Examples
> 
> st("numeric")
numeric 
> list(st("numeric"), st("numeric")) %->% st("logical")
(numeric, numeric) -> logical 
> is.sType(st("logical"))
[1] TRUE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sTypeConstructors", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("searchSpaceDefinition")
> ### * searchSpaceDefinition
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: functionSet
> ### Title: Functions for defining the search space for Genetic Programming
> ### Aliases: c.constantFactorySet c.functionSet c.inputVariableSet
> ###   constantFactorySet functionSet getPw hasPw inputVariableSet pw
> 
> ### ** Examples
> 
> # creating an untyped search space description...
> functionSet("+", "-", "*", "/", "exp", "log", "sin", "cos", "tan")
$all
$all[[1]]
[1] "+"

$all[[2]]
[1] "-"

$all[[3]]
[1] "*"

$all[[4]]
[1] "/"

$all[[5]]
[1] "exp"

$all[[6]]
[1] "log"

$all[[7]]
[1] "sin"

$all[[8]]
[1] "cos"

$all[[9]]
[1] "tan"

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1

attr(,"probabilityWeight")[[2]]
[1] 1

attr(,"probabilityWeight")[[3]]
[1] 1

attr(,"probabilityWeight")[[4]]
[1] 1

attr(,"probabilityWeight")[[5]]
[1] 1

attr(,"probabilityWeight")[[6]]
[1] 1

attr(,"probabilityWeight")[[7]]
[1] 1

attr(,"probabilityWeight")[[8]]
[1] 1

attr(,"probabilityWeight")[[9]]
[1] 1


$byType
$byType$`(numeric, numeric) -> numeric`
$byType$`(numeric, numeric) -> numeric`[[1]]
`+`

$byType$`(numeric, numeric) -> numeric`[[2]]
`-`

$byType$`(numeric, numeric) -> numeric`[[3]]
`*`

$byType$`(numeric, numeric) -> numeric`[[4]]
`/`

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1

attr(,"probabilityWeight")[[2]]
[1] 1

attr(,"probabilityWeight")[[3]]
[1] 1

attr(,"probabilityWeight")[[4]]
[1] 1


$byType$`(numeric) -> numeric`
$byType$`(numeric) -> numeric`[[1]]
exp

$byType$`(numeric) -> numeric`[[2]]
log

$byType$`(numeric) -> numeric`[[3]]
sin

$byType$`(numeric) -> numeric`[[4]]
cos

$byType$`(numeric) -> numeric`[[5]]
tan

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1

attr(,"probabilityWeight")[[2]]
[1] 1

attr(,"probabilityWeight")[[3]]
[1] 1

attr(,"probabilityWeight")[[4]]
[1] 1

attr(,"probabilityWeight")[[5]]
[1] 1



$byRange
$byRange$numeric
$byRange$numeric[[1]]
`+`

$byRange$numeric[[2]]
`-`

$byRange$numeric[[3]]
`*`

$byRange$numeric[[4]]
`/`

$byRange$numeric[[5]]
exp

$byRange$numeric[[6]]
log

$byRange$numeric[[7]]
sin

$byRange$numeric[[8]]
cos

$byRange$numeric[[9]]
tan

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1

attr(,"probabilityWeight")[[2]]
[1] 1

attr(,"probabilityWeight")[[3]]
[1] 1

attr(,"probabilityWeight")[[4]]
[1] 1

attr(,"probabilityWeight")[[5]]
[1] 1

attr(,"probabilityWeight")[[6]]
[1] 1

attr(,"probabilityWeight")[[7]]
[1] 1

attr(,"probabilityWeight")[[8]]
[1] 1

attr(,"probabilityWeight")[[9]]
[1] 1



$nameStrings
[1] "+"   "-"   "*"   "/"   "exp" "log" "sin" "cos" "tan"

$arities
[1] 2 2 2 2 1 2 1 1 1

$envir
<environment: R_GlobalEnv>

attr(,"class")
[1] "functionSet" "list"       
> inputVariableSet("x", "y")
$all
$all[[1]]
[1] "x"

$all[[2]]
[1] "y"

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1

attr(,"probabilityWeight")[[2]]
[1] 1


$allFormals
$allFormals[[1]]
x

$allFormals[[2]]
y


$byType
list()

$byRange
list()

$nameStrings
[1] "x" "y"

attr(,"class")
[1] "inputVariableSet" "list"            
> constantFactorySet(function() runif(1, -1, 1))
$all
$all[[1]]
function () 
runif(1, -1, 1)

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1


$byType
$byType$`function`
$byType$`function`[[1]]
function () 
runif(1, -1, 1)

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1



$byRange
$byRange$`function`
$byRange$`function`[[1]]
function () 
runif(1, -1, 1)

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1



attr(,"class")
[1] "constantFactorySet" "list"              
> # creating an untyped function set with probability weights...
> functionSet(pw("+", 1.2), pw("-", 0.8), pw("*", 1.0), pw("/", 1.0))
$all
$all[[1]]
[1] "+"
attr(,"probabilityWeight")
[1] 1.2

$all[[2]]
[1] "-"
attr(,"probabilityWeight")
[1] 0.8

$all[[3]]
[1] "*"
attr(,"probabilityWeight")
[1] 1

$all[[4]]
[1] "/"
attr(,"probabilityWeight")
[1] 1

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1.2

attr(,"probabilityWeight")[[2]]
[1] 0.8

attr(,"probabilityWeight")[[3]]
[1] 1

attr(,"probabilityWeight")[[4]]
[1] 1


$byType
$byType$`(numeric, numeric) -> numeric`
$byType$`(numeric, numeric) -> numeric`[[1]]
`+`

$byType$`(numeric, numeric) -> numeric`[[2]]
`-`

$byType$`(numeric, numeric) -> numeric`[[3]]
`*`

$byType$`(numeric, numeric) -> numeric`[[4]]
`/`

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1

attr(,"probabilityWeight")[[2]]
[1] 1

attr(,"probabilityWeight")[[3]]
[1] 1

attr(,"probabilityWeight")[[4]]
[1] 1



$byRange
$byRange$numeric
$byRange$numeric[[1]]
`+`

$byRange$numeric[[2]]
`-`

$byRange$numeric[[3]]
`*`

$byRange$numeric[[4]]
`/`

attr(,"probabilityWeight")
attr(,"probabilityWeight")[[1]]
[1] 1

attr(,"probabilityWeight")[[2]]
[1] 1

attr(,"probabilityWeight")[[3]]
[1] 1

attr(,"probabilityWeight")[[4]]
[1] 1



$nameStrings
[1] "+" "-" "*" "/"

$arities
[1] 2 2 2 2

$envir
<environment: R_GlobalEnv>

attr(,"class")
[1] "functionSet" "list"       
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("searchSpaceDefinition", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.096 0.006 0.11 0.003 0.003 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
