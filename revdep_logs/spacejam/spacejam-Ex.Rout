
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "spacejam"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "spacejam-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('spacejam')
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: splines
Loading required package: Matrix
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SJ")
> ### * SJ
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SJ
> ### Title: Estimate a graph with Spacejam
> ### Aliases: SJ SJ.dag
> ### Keywords: graphs optimize
> 
> ### ** Examples
> 
> #########Create graph and distribution used in Figure 2 of Voorman, Shojaie and Witten (2013):
> p <- 100 #variables
> n <- 50 #observations
> 
> #Generate Graph
> set.seed(20)
> g <- rdag(p,80)
> mylayout <- layout.fruchterman.reingold(g)
> 
> par(mfrow=c(1,2))
> plot(g, layout = mylayout, edge.color = "gray50", 
+         vertex.color = "red", vertex.size = 3, vertex.label = NA, 
+         edge.arrow.size = 0.4)
> plot(moralize(g), layout = mylayout, edge.color = "gray50", 
+         vertex.color = "red", vertex.size = 3, vertex.label = NA, 
+         edge.arrow.size = 0.4)
> 
> #create a distribution on the DAG using cubic polynomials with random normal coefficients 
> #with standard deviations of 1, 0.5 and 0.5, (i.e. giving more weight to linear association than quadratic or cubic)
> data <- generate.dag.data(g,n,basesd=c(1,0.5,0.5))
> X <- data$X
> 
> #Fit conditional independence graph at one lambda , using the default basis functions (cubic polynomials).
> fit1 <- SJ(X, lambda = 0.6)
> 
> #Fit conditional independence graph at 10 (hopefully reasonable) lambdas:
> fit2 <- SJ(X, length = 10)
> 
> #Fit conditional independence graph using quadratic basis functions:
> fit3 <- SJ(X, bfun = function(x){cbind(x,x^2)}, length = 10)
> 
> #Fit the DAG using default causal ordering 1:p, and at 10 lambdas
> fit4 <- SJ.dag(X, length = 10)
> fit4
Object of class "SJ.dag"
Contains the graphs:
   lambda Edges      bic
1   0.820     0 19459.10
2   0.760    10 19477.57
3   0.690    29 19490.05
4   0.620    49 19461.03
5   0.550    70 19375.40
6   0.470   100 19254.37
7   0.380   188 19280.78
8   0.280   438 19948.34
9   0.170  1050 22417.31
10  0.051  2265 27640.82
Call:
	SJ.dag(X = X, length = 10)
> 
> #plot the DAGs, and the true graph
> par(mfrow=c(1,3))
> plot(g, layout=mylayout, edge.color = "gray50", vertex.color = "red", vertex.size = 3, vertex.label = NA, edge.arrow.size = 0.4, main="True DAG")
> plot(fit4, layout = mylayout, which= 4, main= paste0("lambda = ",round(fit4$lambda[4],2) ))
> plot(fit4, layout = mylayout, main = "min BIC")
> 
> ###For additional replications using the same DAG distribution use e.g.
> data <- generate.dag.data(g,n,funclist = data$funclist)
> 
> 
> #### Screen out edges whose corresponding nodes have low spearman correlation:
> # useful for approximating spacejam in high dimesnions
> S <- cor(data$X, method = "spearman")
> G.max <- S > 0.1
> mean(G.max) #~75% of edges removed
[1] 0.248
> 
> system.time({fit.screen <- SJ(X, G.max = G.max,length=20)})
   user  system elapsed 
  0.862   0.031   0.895 
> system.time({fit.noscreen <- SJ(X,length = 20)})
   user  system elapsed 
  2.402   0.059   2.464 
> 
> plot(fit.screen, layout=mylayout)
> plot(fit.noscreen, layout=mylayout)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SJ", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("generate.dag.data")
> ### * generate.dag.data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: generate.dag.data
> ### Title: Generate nonlinear data from DAGs
> ### Aliases: generate.dag.data rdag moralize
> 
> ### ** Examples
> 
> #########Create graph and distribution used in Figure 2 of Voorman, Shojaie and Witten (2013):
> p <- 100 #variables
> n <- 50 #observations
> 
> #Generate Graph
> set.seed(20)
> g <- rdag(p,80)
> mylayout <- layout.fruchterman.reingold(g)
> 
> par(mfrow=c(1,2))
> plot(g, layout = mylayout, edge.color = "gray50", 
+         vertex.color = "red", vertex.size = 3, vertex.label = NA, 
+         edge.arrow.size = 0.4)
> plot(moralize(g), layout = mylayout, edge.color = "gray50", 
+         vertex.color = "red", vertex.size = 3, vertex.label = NA, 
+         edge.arrow.size = 0.4)
> 
> #create a distribution on the DAG using cubic polynomials with random normal coefficients 
> #with standard deviations of 1, 0.5 and 0.5, (i.e. giving more weight to linear association than quadratic or cubic)
> data <- generate.dag.data(g,n,basesd=c(1,0.5,0.5))
> X <- data$X
> 
> #Fit conditional independence graph at one lambda 
> fit1 <- SJ(X, lambda = 0.6)
> 
> ###For additional replications using the same DAG distribution use e.g.
> data <- generate.dag.data(g,n,funclist = data$funclist)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("generate.dag.data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("plot.SJ")
> ### * plot.SJ
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.SJ
> ### Title: plot an object of class 'SJ' or 'SJ.dag'
> ### Aliases: plot.SJ plot.SJ.dag
> 
> ### ** Examples
> 
> p <- 100 #variables
> n <- 50 #observations
> 
> #Generate Data
> set.seed(20)
> g <- rdag(p,80)
> data <- generate.dag.data(g,n,basesd=c(1,0.5,0.5))
> X <- data$X
> 
> #Fit conditional independence graph for sequence of 10 lambdas
> fit1 <- SJ(X, length = 10)
> 
> par(mfrow=c(1,2))
> layout <- plot(fit1, main = "min BIC")
> plot(fit1, which=5, layout = layout, main = paste0("lambda = ",round(fit1$lambda[5],3)))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.SJ", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("spacejam-package")
> ### * spacejam-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: spacejam-package
> ### Title: Fit sparse conditional independence graphs with joint additive
> ###   models
> ### Aliases: spacejam-package spacejam
> ### Keywords: package
> 
> ### ** Examples
> 
> #########Create graph and distribution used in Figure 2 of Voorman, Shojaie and Witten (2013):
> p <- 100 #variables
> n <- 50 #observations
> 
> #Generate Graph
> set.seed(20)
> g <- rdag(p,80)
> mylayout <- layout.fruchterman.reingold(g)
> 
> par(mfrow=c(1,2))
> plot(g, layout = mylayout, edge.color = "gray50", 
+         vertex.color = "red", vertex.size = 3, vertex.label = NA, 
+         edge.arrow.size = 0.4)
> plot(moralize(g), layout = mylayout, edge.color = "gray50", 
+         vertex.color = "red", vertex.size = 3, vertex.label = NA, 
+         edge.arrow.size = 0.4)
> 
> #create a distribution on the DAG using cubic polynomials with random normal coefficients 
> #with standard deviations of 1, 0.5 and 0.5, (i.e. giving more weight to linear association than quadratic or cubic)
> data <- generate.dag.data(g,n,basesd=c(1,0.5,0.5))
> X <- data$X
> 
> #Fit conditional independence graph at one lambda 
> fit1 <- SJ(X, lambda = 0.6)
> 
> #Fit conditional independence graph at 10 (hopefully reasonable) lambdas:
> fit2 <- SJ(X, length = 10)
> 
> #Fit conditional independence graph using quadratic basis functions:
> fit3 <- SJ(X, bfun = function(x){cbind(x,x^2)}, length = 10)
> 
> #Fit the DAG using default causal ordering 1:p, and at 10 lambdas
> fit4 <- SJ.dag(X, length = 10)
> fit4
Object of class "SJ.dag"
Contains the graphs:
   lambda Edges      bic
1   0.820     0 19459.10
2   0.760    10 19477.57
3   0.690    29 19490.05
4   0.620    49 19461.03
5   0.550    70 19375.40
6   0.470   100 19254.37
7   0.380   188 19280.78
8   0.280   438 19948.34
9   0.170  1050 22417.31
10  0.051  2265 27640.82
Call:
	SJ.dag(X = X, length = 10)
> 
> #plot the DAGs, and the true graph
> par(mfrow=c(1,3))
> plot(g, layout=mylayout, edge.color = "gray50", vertex.color = "red", vertex.size = 3, vertex.label = NA, edge.arrow.size = 0.4, main="True DAG")
> plot(fit4, layout = mylayout, which= 4, main= paste0("lambda = ",round(fit4$lambda[4],2) ))
> plot(fit4, layout = mylayout, main = "min BIC")
> 
> ###For additional replications using the same DAG distribution use e.g.
> data <- generate.dag.data(g,n,funclist = data$funclist)
> 
> 
> #### Screen out edges whose corresponding nodes have low spearman correlation:
> # useful for approximating spacejam in high dimesnions
> S <- cor(data$X, method = "spearman")
> G.max <- S > 0.1
> mean(G.max) #~75% of edges removed
[1] 0.248
> 
> system.time({fit.screen <- SJ(X, G.max = G.max,length=20)})
   user  system elapsed 
  0.783   0.045   0.829 
> system.time({fit.noscreen <- SJ(X,length = 20)})
   user  system elapsed 
  2.451   0.063   2.518 
> 
> plot(fit.screen, layout=mylayout)
> plot(fit.noscreen, layout=mylayout)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("spacejam-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  22.249 0.603 312.062 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
