
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "FrF2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "FrF2-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('FrF2')
Loading required package: DoE.base
Loading required package: grid
Loading required package: conf.design

Attaching package: ‘DoE.base’

The following objects are masked from ‘package:stats’:

    aov, lm

The following object is masked from ‘package:graphics’:

    plot.design

The following object is masked from ‘package:base’:

    lengths

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BsProb.design")
> ### * BsProb.design
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BsProb.design
> ### Title: Bayesian posterior probabilities from Box and Meyer method
> ### Aliases: BsProb.design
> ### Keywords: design
> 
> ### ** Examples
> 
>    ### there are several success stories and recommendations for this method
>    ### in the simulated example here (not fabricated, 
>    ###         it was the first one that came to my mind), 
>    ### the method goes wrong, at least when using mInt=2 (the default, because 
>    ###         Daniel plots work quite well for pure main effects models):
>    ### active factors are A to E (perhaps too many for the method to work),
>    ### the method identifies F, J, and L with highest probability 
>    ### (but is quite undecided)
>    plan <- pb(12)
>    dn <- desnum(plan)
>    set.seed(8655)
>    y <- dn%*%c(2,2,2,2,3,0,0,0,0,0,0) + dn[,1]*dn[,3]*2 - dn[,5]*dn[,4] + rnorm(12)/10
>    plan.r <- add.response(plan, response=y)
>    plot(bpmInt2 <- BsProb.design(plan.r), code=FALSE)
>    plot(bpmInt1 <- BsProb.design(plan.r, mInt=1), code=FALSE) ## much better!
>    summary(bpmInt2)

 Calculations:
   nRun    nFac    nBlk    mFac    mInt       p       g  totMod 
  12.00   11.00    0.00   11.00    2.00    0.25    2.00 2048.00 

 Factor probabilities:
   Factor Code  Prob
1    none none 0.081
2       A   x1 0.157
3       B   x2 0.184
4       C   x3 0.222
5       D   x4 0.293
6       E   x5 0.219
7       F   x6 0.553
8       G   x7 0.167
9       H   x8 0.145
10      J   x9 0.552
11      K  x10 0.179
12      L  x11 0.555

 Model probabilities:
    Prob  Sigma2 NumFac Factors  
M1  0.367  1.305 3      6,9,11   
M2  0.082 25.294 0      none     
M3  0.028 17.695 1      4        
M4  0.019  0.522 4      4,6,9,11 
M5  0.018  0.527 4      4,7,10,11
M6  0.017 19.366 1      5        
M7  0.015 19.769 1      3        
M8  0.014  8.085 2      6,9      
M9  0.013  0.563 4      1,4,6,9  
M10 0.012  0.570 4      2,3,4,5  
>    summary(bpmInt1)

 Calculations:
   nRun    nFac    nBlk    mFac    mInt       p       g  totMod 
  12.00   11.00    0.00   11.00    1.00    0.25    2.00 2048.00 

 Factor probabilities:
   Factor Code  Prob
1    none none 0.187
2       A   x1 0.364
3       B   x2 0.185
4       C   x3 0.486
5       D   x4 0.567
6       E   x5 0.502
7       F   x6 0.053
8       G   x7 0.199
9       H   x8 0.052
10      J   x9 0.054
11      K  x10 0.054
12      L  x11 0.053

 Model probabilities:
    Prob  Sigma2 NumFac Factors    
M1  0.188 25.29  0      none       
M2  0.077  3.25  4      1,3,4,5    
M3  0.064 17.70  1      4          
M4  0.063  1.11  6      1,2,3,4,5,7
M5  0.045  6.24  3      3,4,5      
M6  0.039 19.37  1      5          
M7  0.038  2.13  5      1,3,4,5,7  
M8  0.035 19.77  1      3          
M9  0.029  2.23  5      1,2,3,4,5  
M10 0.029 11.77  2      4,5        
>    ### For comparison: A Daniel plot does not show any significant effects according 
>    ### to Lenths method, but makes the right effects stick out
>    DanielPlot(plan.r, half=TRUE, alpha=1)
simulated critical values not available for all requests, used conservative ones
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BsProb.design", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CIG")
> ### * CIG
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CIG
> ### Title: Clear interactions graph from catlg entry
> ### Aliases: CIGstatic CIG gen2CIG
> ### Keywords: design
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ex.CIG <- CIG("9-4.2")
> ##D ## play around with the dynamic graph until it looks right
> ##D ## look up its id number in the title bar of the graph window and use it for id
> ##D par(xpd=TRUE)
> ##D CIGstatic(ex.CIG, id=1)
> ## End(Not run)
> 
> graph1 <- CIG("9-4.2", plot=FALSE)   ### create graph object from design name
> ### calculate graph properties
> require(igraph)
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> degree(graph1)
[1] 2 2 2 2 8 2 2 2 8
> clique.number(graph1)
[1] 3
> independence.number(graph1)
[1] 7
> largest.cliques(graph1)
[[1]]
+ 3/9 vertices:
[1] 5 9 8

[[2]]
+ 3/9 vertices:
[1] 5 9 7

[[3]]
+ 3/9 vertices:
[1] 5 9 6

[[4]]
+ 3/9 vertices:
[1] 5 9 4

[[5]]
+ 3/9 vertices:
[1] 5 9 3

[[6]]
+ 3/9 vertices:
[1] 5 9 2

[[7]]
+ 3/9 vertices:
[1] 5 9 1

> 
> graph2 <- gen2CIG(32, c(7,11,14,29))   ### create graph object from generator columns
> ### check isomorphism to graph1
> graph.isomorphic(graph1,graph2)
[1] TRUE
> 
> ## Not run: 
> ##D ## use a CIG for manual design search
> ##D ## requirement set: 
> ##D estim <- compromise(17,15:17)$requirement ## all interactions of factors 15 to 17 (P,Q,R)
> ##D ## graph the requirement set CIG
> ##D CIG(estim)
> ##D FrF2(128, 17, estimable=estim)  ## will run for a very long time
> ##D ## interrupt with ESC key, after a short period of waiting
> ##D FrF2.currentlychecked()   ## displays the design that is currently checked 
> ##D                           ## should be 17-10.2407
> ##D CIG("17-10.2407")
> ##D ## clearly, using columns 1, 8 and 9 for factors 15:17 does the job
> ##D     ## sometimes, the design where the algorithm got stuck, does not provide a solution
> ##D     ## in that case, option select.catlg can be used for restricting the search designs 
> ##D     ##     to designs further down in the catalogue, in order to find the next candidate
> ##D     ##     until final success is reached
> ##D     ## e.g.
> ##D     which(names(catlg)=="17-10.2407")
> ##D     FrF2(128, 17, estimable=estim, select.catlg=catlg[2375:length(catlg)])  
> ##D     ## will run for a very long time
> ##D     ## interrupting after short waiting time yields
> ##D     FrF2.currentlychecked()   ## displays the design that is currently checked 
> ##D                               ## should be 17-10.4177
> ##D 
> ##D ## note: in this example, option sort="high" would make the automatic search fast
> ##D ## so that manual treatment is not needed!
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CIG", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:igraph’

> nameEx("CatalogueAccessors")
> ### * CatalogueAccessors
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CatalogueAccessors
> ### Title: Catalogue file and accessor functions
> ### Aliases: [.catlg print.catlg res nruns nfac WLP nclear.2fis clear.2fis
> ###   dominating res.catlg nruns.catlg nfac.catlg WLP.catlg
> ###   nclear.2fis.catlg clear.2fis.catlg all.2fis.clear.catlg
> ###   dominating.catlg catlg block.catlg
> ### Keywords: array design
> 
> ### ** Examples
> 
> c8 <- catlg[nruns(catlg)==8]
> nclear.2fis(c8)
4-1.1 4-1.2 5-2.1 6-3.1 7-4.1 
    0     3     0     0     0 
> clear.2fis(c8)
$`4-1.1`
numeric(0)

$`4-1.2`
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    3    3    4

$`5-2.1`
numeric(0)

$`6-3.1`
numeric(0)

$`7-4.1`
numeric(0)

> all.2fis.clear.catlg(c8)
$`4-1.1`
numeric(0)

$`4-1.2`
[1] 3

$`5-2.1`
numeric(0)

$`6-3.1`
numeric(0)

$`7-4.1`
numeric(0)

> 
> ## usage of print function for inspecting catalogued designs
> ## the first 10 resolution V+ designs in catalogue catlg
> print(catlg, res.min=5)
Design:  5-1.1 
   16  runs,  5  factors,  
   Resolution  V 
   Generating columns:  15 
   WLP (3plus):  0 0 1 0 0 ,  10  clear 2fis
Design:  6-1.1 
   32  runs,  6  factors,  
   Resolution  VI 
   Generating columns:  31 
   WLP (3plus):  0 0 0 1 0 ,  15  clear 2fis
Design:  6-1.2 
   32  runs,  6  factors,  
   Resolution  V 
   Generating columns:  15 
   WLP (3plus):  0 0 1 0 0 ,  15  clear 2fis
Design:  7-1.1 
   64  runs,  7  factors,  
   Resolution  VII 
   Generating columns:  63 
   WLP (3plus):  0 0 0 0 1 ,  21  clear 2fis
Design:  7-1.2 
   64  runs,  7  factors,  
   Resolution  VI 
   Generating columns:  31 
   WLP (3plus):  0 0 0 1 0 ,  21  clear 2fis
Design:  7-1.3 
   64  runs,  7  factors,  
   Resolution  V 
   Generating columns:  15 
   WLP (3plus):  0 0 1 0 0 ,  21  clear 2fis
Design:  8-2.1 
   64  runs,  8  factors,  
   Resolution  V 
   Generating columns:  15 51 
   WLP (3plus):  0 0 2 1 0 ,  28  clear 2fis
Design:  8-1.1 
   128  runs,  8  factors,  
   Resolution  VIII 
   Generating columns:  127 
   WLP (3plus):  0 0 0 0 ,  28  clear 2fis
Design:  9-2.1 
   128  runs,  9  factors,  
   Resolution  VI 
   Generating columns:  31 103 
   WLP (3plus):  0 0 0 3 ,  36  clear 2fis
Design:  10-3.1 
   128  runs,  10  factors,  
   Resolution  V 
   Generating columns:  31 103 43 
   WLP (3plus):  0 0 3 3 ,  45  clear 2fis
> ## the 10 resolution V+ designs in catalogue catlg with the most factors
> ## (for more than one possible value of nfactors, MaxC2 does usually not make sense)
> print(catlg, res.min=5, MaxC2=TRUE)
Design:  65-53 
   4096  runs,  65  factors,  
   Resolution  V 
   Generating columns:  219 429 457 609 815 860 915 997 1018 1063 1098 1234 1245 1433 1441 1458 1531 1555 1581 1653 1721 1731 1758 1887 1910 1931 2159 2227 2313 2402 2423 2435 2508 2545 2808 2828 3006 3087 3132 3300 3332 3352 3382 3560 3590 3659 3665 3747 3776 3823 3924 3990 4083 
   WLP (3plus):  0 0 2223 21840 ,  2080  clear 2fis
Design:  64-52 
   4096  runs,  64  factors,  
   Resolution  V 
   Generating columns:  219 429 457 609 815 860 915 997 1063 1098 1234 1245 1433 1441 1458 1531 1555 1581 1653 1721 1731 1758 1887 1910 1931 2159 2227 2313 2402 2423 2435 2508 2545 2808 2828 3006 3087 3132 3300 3332 3352 3382 3560 3590 3659 3665 3747 3776 3823 3924 3990 4083 
   WLP (3plus):  0 0 2052 ,  2016  clear 2fis
Design:  63-51 
   4096  runs,  63  factors,  
   Resolution  V 
   Generating columns:  429 457 609 815 860 915 997 1063 1098 1234 1245 1433 1441 1458 1531 1555 1581 1653 1721 1731 1758 1887 1910 1931 2159 2227 2313 2402 2423 2435 2508 2545 2808 2828 3006 3087 3132 3300 3332 3352 3382 3560 3590 3659 3665 3747 3776 3823 3924 3990 4083 
   WLP (3plus):  0 0 1890 ,  1953  clear 2fis
Design:  62-50 
   4096  runs,  62  factors,  
   Resolution  V 
   Generating columns:  429 457 609 815 860 915 997 1063 1098 1234 1245 1433 1441 1458 1531 1555 1581 1653 1721 1731 1887 1910 1931 2159 2227 2313 2402 2423 2435 2508 2545 2808 2828 3006 3087 3132 3300 3332 3352 3382 3560 3590 3659 3665 3747 3776 3823 3924 3990 4083 
   WLP (3plus):  0 0 1736 ,  1891  clear 2fis
Design:  61-49 
   4096  runs,  61  factors,  
   Resolution  V 
   Generating columns:  429 457 609 815 860 915 997 1063 1098 1234 1245 1433 1441 1458 1531 1555 1581 1653 1721 1731 1887 1931 2159 2227 2313 2402 2423 2435 2508 2545 2808 2828 3006 3087 3132 3300 3332 3352 3382 3560 3590 3659 3665 3747 3776 3823 3924 3990 4083 
   WLP (3plus):  0 0 1590 ,  1830  clear 2fis
Design:  60-48 
   4096  runs,  60  factors,  
   Resolution  V 
   Generating columns:  429 457 609 815 860 915 997 1063 1098 1234 1245 1433 1441 1458 1531 1555 1653 1721 1731 1887 1931 2159 2227 2313 2402 2423 2435 2508 2545 2808 2828 3006 3087 3132 3300 3332 3352 3382 3560 3590 3659 3665 3747 3776 3823 3924 3990 4083 
   WLP (3plus):  0 0 1452 ,  1770  clear 2fis
Design:  59-47 
   4096  runs,  59  factors,  
   Resolution  V 
   Generating columns:  429 457 609 815 860 915 997 1063 1098 1234 1245 1433 1441 1458 1531 1555 1653 1721 1731 1887 1931 2159 2227 2313 2402 2423 2435 2508 2545 2808 3006 3087 3132 3300 3332 3352 3382 3560 3590 3659 3665 3747 3776 3823 3924 3990 4083 
   WLP (3plus):  0 0 1326 ,  1711  clear 2fis
Design:  58-46 
   4096  runs,  58  factors,  
   Resolution  V 
   Generating columns:  429 457 609 815 860 915 997 1063 1098 1234 1245 1433 1441 1458 1531 1555 1653 1721 1731 1887 1931 2159 2227 2313 2402 2423 2435 2508 2545 2808 3006 3087 3132 3300 3352 3382 3560 3590 3659 3665 3747 3776 3823 3924 3990 4083 
   WLP (3plus):  0 0 1208 ,  1653  clear 2fis
Design:  57-45 
   4096  runs,  57  factors,  
   Resolution  V 
   Generating columns:  429 457 609 815 860 915 997 1063 1098 1234 1245 1433 1441 1458 1531 1555 1653 1721 1731 1887 1931 2159 2227 2313 2423 2435 2508 2545 2808 3006 3087 3132 3300 3352 3382 3560 3590 3659 3665 3747 3776 3823 3924 3990 4083 
   WLP (3plus):  0 0 1098 ,  1596  clear 2fis
Design:  56-44 
   4096  runs,  56  factors,  
   Resolution  V 
   Generating columns:  429 457 609 815 860 915 997 1063 1098 1234 1245 1433 1441 1458 1531 1555 1653 1721 1731 1887 2159 2227 2313 2423 2435 2508 2545 2808 3006 3087 3132 3300 3352 3382 3560 3590 3659 3665 3747 3776 3823 3924 3990 4083 
   WLP (3plus):  0 0 996 ,  1540  clear 2fis
> 
> ## designs with 12 factors in 64 runs (minimum resolution IV because 
> ## no resolution III designs of this size are in the catalogue)
> ## best 10 aberration designs
> print(catlg, nfactors=12, nruns=64)
Design:  12-6.1 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 29 45 51 62 
   WLP (3plus):  0 6 24 16 0 ,  36  clear 2fis
Design:  12-6.2 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 46 54 56 
   WLP (3plus):  0 8 20 14 8 ,  27  clear 2fis
Design:  12-6.3 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 41 51 63 
   WLP (3plus):  0 9 18 13 12 ,  24  clear 2fis
Design:  12-6.4 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 41 54 56 
   WLP (3plus):  0 10 15 16 11 ,  21  clear 2fis
 Factors with all 2fis clear:  L
Design:  12-6.5 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 37 57 63 
   WLP (3plus):  0 10 16 12 16 ,  20  clear 2fis
Design:  12-6.6 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 29 37 59 
   WLP (3plus):  0 10 16 16 8 ,  20  clear 2fis
 Factors with all 2fis clear:  K
Design:  12-6.7 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 29 37 57 
   WLP (3plus):  0 10 18 10 12 ,  20  clear 2fis
Design:  12-6.8 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 30 46 49 
   WLP (3plus):  0 10 20 8 8 ,  30  clear 2fis
Design:  12-6.9 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 25 38 58 
   WLP (3plus):  0 11 14 15 12 ,  21  clear 2fis
 Factors with all 2fis clear:  M
Design:  12-6.10 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 37 57 60 
   WLP (3plus):  0 11 16 8 16 ,  16  clear 2fis
> ## best 10 clear 2fi designs
> print(catlg, nfactors=12, nruns=64, MaxC2=TRUE)
Design:  12-6.1 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 29 45 51 62 
   WLP (3plus):  0 6 24 16 0 ,  36  clear 2fis
Design:  12-6.8 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 30 46 49 
   WLP (3plus):  0 10 20 8 8 ,  30  clear 2fis
Design:  12-6.2 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 46 54 56 
   WLP (3plus):  0 8 20 14 8 ,  27  clear 2fis
Design:  12-6.3 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 41 51 63 
   WLP (3plus):  0 9 18 13 12 ,  24  clear 2fis
Design:  12-6.12 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 46 49 
   WLP (3plus):  0 12 14 12 12 ,  23  clear 2fis
 Factors with all 2fis clear:  L
Design:  12-6.4 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 41 54 56 
   WLP (3plus):  0 10 15 16 11 ,  21  clear 2fis
 Factors with all 2fis clear:  L
Design:  12-6.9 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 25 38 58 
   WLP (3plus):  0 11 14 15 12 ,  21  clear 2fis
 Factors with all 2fis clear:  M
Design:  12-6.23 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 25 31 45 
   WLP (3plus):  0 15 10 15 12 ,  21  clear 2fis
 Factors with all 2fis clear:  F M
Design:  12-6.28 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 21 57 
   WLP (3plus):  0 16 9 12 15 ,  21  clear 2fis
 Factors with all 2fis clear:  F M
Design:  12-6.29 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 21 46 
   WLP (3plus):  0 16 10 12 12 ,  21  clear 2fis
 Factors with all 2fis clear:  F M
> ## show alias structure
> print(catlg, nfactors=12, nruns=64, MaxC2=TRUE, show.alias=TRUE)
Design:  12-6.1 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 29 45 51 62 
   WLP (3plus):  0 6 24 16 0 ,  36  clear 2fis
 Alias structure: 
   2fi aliasing: 
  [1] AB=CG=DH AC=BG    AD=BH    AG=BC    AH=BD    CD=GH    CH=DG    EF=JK   
 [9] EJ=FK=LM EK=FJ    EL=JM    EM=JL    FL=KM    FM=KL   

Design:  12-6.8 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 30 46 49 
   WLP (3plus):  0 10 20 8 8 ,  30  clear 2fis
 Alias structure: 
   2fi aliasing: 
  [1] AB=CG=DH AC=BG=DJ AD=BH=CJ AE=FM    AF=EM    AG=BC=HJ AH=BD=GJ AJ=CD=GH
 [9] AK=LM    AL=KM    AM=EF=KL BJ=CH=DG EK=FL    EL=FK   

Design:  12-6.2 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 46 54 56 
   WLP (3plus):  0 8 20 14 8 ,  27  clear 2fis
 Alias structure: 
   2fi aliasing: 
  [1] AB=CG=DH AC=BG=EJ AD=BH    AE=CJ    AG=BC    AH=BD    AJ=CE    BE=GJ   
 [9] BJ=EG    CD=GH    CH=DG    DE=FM=KL DF=EM    DK=EL    DL=EK    DM=EF   
[17] FK=LM    FL=KM   

Design:  12-6.3 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 41 51 63 
   WLP (3plus):  0 9 18 13 12 ,  24  clear 2fis
 Alias structure: 
   2fi aliasing: 
  [1] AB=CG=DH AC=BG=EJ AD=BH=FK AE=CJ    AF=DK    AG=BC    AH=BD    AJ=CE   
 [9] AK=DF    BE=GJ    BF=HK    BJ=EG    BK=FH    CD=GH=LM CH=DG    CL=DM   
[17] CM=DL    GL=HM    GM=HL   

Design:  12-6.12 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 46 49 
   WLP (3plus):  0 12 14 12 12 ,  23  clear 2fis
 Factors with all 2fis clear:  L
 Alias structure: 
   2fi aliasing: 
  [1] AB=CG=DH=EK AC=BG=DJ    AD=BH=CJ    AE=BK=FM    AF=EM       AG=BC=HJ   
 [7] AH=BD=GJ    AJ=CD=GH    AK=BE       AM=EF       BF=KM       BJ=CH=DG   
[13] BM=FK       CE=GK       CK=EG       DE=HK       DK=EH      

Design:  12-6.4 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 41 54 56 
   WLP (3plus):  0 10 15 16 11 ,  21  clear 2fis
 Factors with all 2fis clear:  L
 Alias structure: 
   2fi aliasing: 
  [1] AB=CG=DH AC=BG=EJ AD=BH=FK AE=CJ=KM AF=DK    AG=BC    AH=BD    AJ=CE   
 [9] AK=DF=EM AM=EK    BE=GJ    BF=HK    BJ=EG    BK=FH    CD=GH    CH=DG   
[17] CK=JM    CM=JK    DE=FM    DM=EF   

Design:  12-6.9 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 25 38 58 
   WLP (3plus):  0 11 14 15 12 ,  21  clear 2fis
 Factors with all 2fis clear:  M
 Alias structure: 
   2fi aliasing: 
  [1] AB=CG=DH AC=BG=EJ AD=BH=EK AE=CJ=DK AF=GL    AG=BC=FL AH=BD    AJ=CE   
 [9] AK=DE    AL=FG    BE=GJ=HK BF=CL    BJ=EG    BK=EH    BL=CF    CD=GH=JK
[17] CH=DG    CK=DJ    GK=HJ   

Design:  12-6.23 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 25 31 45 
   WLP (3plus):  0 15 10 15 12 ,  21  clear 2fis
 Factors with all 2fis clear:  F M
 Alias structure: 
   2fi aliasing: 
  [1] AB=CG=DH AC=BG=EJ AD=BH=EK AE=CJ=DK AG=BC=KL AH=BD=JL AJ=CE=HL AK=DE=GL
 [9] AL=GK=HJ BE=GJ=HK BJ=DL=EG BK=CL=EH BL=CK=DJ CD=GH=JK CH=DG=EL

Design:  12-6.28 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 21 57 
   WLP (3plus):  0 16 9 12 15 ,  21  clear 2fis
 Factors with all 2fis clear:  F M
 Alias structure: 
   2fi aliasing: 
  [1] AB=CG=DH=EK AC=BG=DJ=EL AD=BH=CJ    AE=BK=CL    AG=BC=HJ=KL AH=BD=GJ   
 [7] AJ=CD=GH    AK=BE=GL    AL=CE=GK    BJ=CH=DG    BL=CK=EG    DE=HK=JL   
[13] DK=EH       DL=EJ       HL=JK      

Design:  12-6.29 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 21 46 
   WLP (3plus):  0 16 10 12 12 ,  21  clear 2fis
 Factors with all 2fis clear:  F M
 Alias structure: 
   2fi aliasing: 
  [1] AB=CG=DH=EK AC=BG=DJ=EL AD=BH=CJ    AE=BK=CL    AG=BC=HJ=KL AH=BD=GJ   
 [7] AJ=CD=GH    AK=BE=GL    AL=CE=GK    BJ=CH=DG    BL=CK=EG    DE=HK=JL   
[13] DK=EH       DL=EJ       HL=JK      

> ## show best 20 designs
> print(catlg, nfactors=12, nruns=64, MaxC2=TRUE, show=20)
Design:  12-6.1 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 29 45 51 62 
   WLP (3plus):  0 6 24 16 0 ,  36  clear 2fis
Design:  12-6.8 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 30 46 49 
   WLP (3plus):  0 10 20 8 8 ,  30  clear 2fis
Design:  12-6.2 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 46 54 56 
   WLP (3plus):  0 8 20 14 8 ,  27  clear 2fis
Design:  12-6.3 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 41 51 63 
   WLP (3plus):  0 9 18 13 12 ,  24  clear 2fis
Design:  12-6.12 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 46 49 
   WLP (3plus):  0 12 14 12 12 ,  23  clear 2fis
 Factors with all 2fis clear:  L
Design:  12-6.4 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 41 54 56 
   WLP (3plus):  0 10 15 16 11 ,  21  clear 2fis
 Factors with all 2fis clear:  L
Design:  12-6.9 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 25 38 58 
   WLP (3plus):  0 11 14 15 12 ,  21  clear 2fis
 Factors with all 2fis clear:  M
Design:  12-6.23 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 21 25 31 45 
   WLP (3plus):  0 15 10 15 12 ,  21  clear 2fis
 Factors with all 2fis clear:  F M
Design:  12-6.28 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 21 57 
   WLP (3plus):  0 16 9 12 15 ,  21  clear 2fis
 Factors with all 2fis clear:  F M
Design:  12-6.29 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 21 46 
   WLP (3plus):  0 16 10 12 12 ,  21  clear 2fis
 Factors with all 2fis clear:  F M
Design:  12-6.35 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 14 19 53 
   WLP (3plus):  0 18 8 8 16 ,  21  clear 2fis
 Factors with all 2fis clear:  F M
Design:  12-6.5 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 37 57 63 
   WLP (3plus):  0 10 16 12 16 ,  20  clear 2fis
Design:  12-6.6 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 29 37 59 
   WLP (3plus):  0 10 16 16 8 ,  20  clear 2fis
 Factors with all 2fis clear:  K
Design:  12-6.7 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 29 37 57 
   WLP (3plus):  0 10 18 10 12 ,  20  clear 2fis
Design:  12-6.16 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 37 57 
   WLP (3plus):  0 13 12 11 16 ,  19  clear 2fis
 Factors with all 2fis clear:  M
Design:  12-6.11 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 37 41 60 
   WLP (3plus):  0 12 13 12 15 ,  17  clear 2fis
 Factors with all 2fis clear:  M
Design:  12-6.13 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 29 37 41 
   WLP (3plus):  0 12 14 12 12 ,  17  clear 2fis
 Factors with all 2fis clear:  K
Design:  12-6.10 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 37 57 60 
   WLP (3plus):  0 11 16 8 16 ,  16  clear 2fis
Design:  12-6.18 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 19 35 53 
   WLP (3plus):  0 14 12 8 16 ,  15  clear 2fis
 Factors with all 2fis clear:  M
Design:  12-6.14 
   64  runs,  12  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 37 57 58 
   WLP (3plus):  0 12 16 6 16 ,  12  clear 2fis
> 
> ## use vector-valued nruns 
> print(catlg, nfactors=7, nruns=c(16,32))
Design:  7-3.1 
   16  runs,  7  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 
   WLP (3plus):  0 7 0 0 0 ,  0  clear 2fis
Design:  7-3.2 
   16  runs,  7  factors,  
   Resolution  III 
   Generating columns:  3 5 14 
   WLP (3plus):  2 3 2 0 0 ,  2  clear 2fis
Design:  7-3.3 
   16  runs,  7  factors,  
   Resolution  III 
   Generating columns:  3 5 10 
   WLP (3plus):  3 2 1 1 0 ,  4  clear 2fis
Design:  7-3.4 
   16  runs,  7  factors,  
   Resolution  III 
   Generating columns:  3 5 9 
   WLP (3plus):  3 3 0 0 1 ,  0  clear 2fis
Design:  7-3.5 
   16  runs,  7  factors,  
   Resolution  III 
   Generating columns:  3 5 6 
   WLP (3plus):  4 3 0 0 0 ,  6  clear 2fis
 Factors with all 2fis clear:  D
Design:  7-2.1 
   32  runs,  7  factors,  
   Resolution  IV 
   Generating columns:  7 27 
   WLP (3plus):  0 1 2 0 0 ,  15  clear 2fis
 Factors with all 2fis clear:  D E G
Design:  7-2.2 
   32  runs,  7  factors,  
   Resolution  IV 
   Generating columns:  7 25 
   WLP (3plus):  0 2 0 1 0 ,  9  clear 2fis
Design:  7-2.3 
   32  runs,  7  factors,  
   Resolution  IV 
   Generating columns:  7 11 
   WLP (3plus):  0 3 0 0 0 ,  6  clear 2fis
 Factors with all 2fis clear:  E
Design:  7-2.4 
   32  runs,  7  factors,  
   Resolution  III 
   Generating columns:  3 29 
   WLP (3plus):  1 0 1 1 0 ,  18  clear 2fis
 Factors with all 2fis clear:  C D E G
Design:  7-2.5 
   32  runs,  7  factors,  
   Resolution  III 
   Generating columns:  3 28 
   WLP (3plus):  1 1 0 0 1 ,  12  clear 2fis
> ## all designs (as show=100 is larger than available number of designs)
> ##    with 7 or 8 factors in 16 runs
> print(catlg, nfactors=c(7,8), nruns=16, show=100)
Design:  7-3.1 
   16  runs,  7  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 
   WLP (3plus):  0 7 0 0 0 ,  0  clear 2fis
Design:  7-3.2 
   16  runs,  7  factors,  
   Resolution  III 
   Generating columns:  3 5 14 
   WLP (3plus):  2 3 2 0 0 ,  2  clear 2fis
Design:  7-3.3 
   16  runs,  7  factors,  
   Resolution  III 
   Generating columns:  3 5 10 
   WLP (3plus):  3 2 1 1 0 ,  4  clear 2fis
Design:  7-3.4 
   16  runs,  7  factors,  
   Resolution  III 
   Generating columns:  3 5 9 
   WLP (3plus):  3 3 0 0 1 ,  0  clear 2fis
Design:  7-3.5 
   16  runs,  7  factors,  
   Resolution  III 
   Generating columns:  3 5 6 
   WLP (3plus):  4 3 0 0 0 ,  6  clear 2fis
 Factors with all 2fis clear:  D
Design:  8-4.1 
   16  runs,  8  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 14 
   WLP (3plus):  0 14 0 0 0 ,  0  clear 2fis
Design:  8-4.2 
   16  runs,  8  factors,  
   Resolution  III 
   Generating columns:  3 5 9 14 
   WLP (3plus):  3 7 4 0 1 ,  1  clear 2fis
Design:  8-4.3 
   16  runs,  8  factors,  
   Resolution  III 
   Generating columns:  3 5 10 12 
   WLP (3plus):  4 5 4 2 0 ,  0  clear 2fis
Design:  8-4.4 
   16  runs,  8  factors,  
   Resolution  III 
   Generating columns:  3 5 6 15 
   WLP (3plus):  4 6 4 0 0 ,  0  clear 2fis
Design:  8-4.5 
   16  runs,  8  factors,  
   Resolution  III 
   Generating columns:  3 5 6 9 
   WLP (3plus):  5 5 2 2 1 ,  2  clear 2fis
Design:  8-4.6 
   16  runs,  8  factors,  
   Resolution  III 
   Generating columns:  3 5 6 7 
   WLP (3plus):  7 7 0 0 1 ,  7  clear 2fis
 Factors with all 2fis clear:  D
> 
> ## the irregular resolution V arrays from package DoE.base (from version 0.9-17)
> ## designs can be created from them using function oa.design
> ## Not run: 
> ##D ## not run in case older version of DoE.base does not have these
> ##D length3(L128.2.15.8.1)
> ##D length4(L128.2.15.8.1)  ## aliasing of 2fis with block factor
> ##D length4(L128.2.15.8.1[,-16])
> ##D 
> ##D length3(L256.2.19)
> ##D length4(L256.2.19)
> ##D 
> ##D ##length3(L2048.2.63) 
> ##D ##length4(L2048.2.63) do not work resource wise
> ##D ## but the array is also resolution V (but irregular)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CatalogueAccessors", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FrF2-package")
> ### * FrF2-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FrF2-package
> ### Title: Fractional Factorial designs with 2-level factors
> ### Aliases: FrF2-package
> ### Keywords: array design
> 
> ### ** Examples
> 
>     ### for examples on design generation, cf. functions pb and FrF2
>   
>     ### Injection Molding Experiment. Box et al. 1978.
>     data(BM93.e3.data, package="BsMD")  #from BsMD
>     iMdat <- BM93.e3.data[1:16,2:10]  #only original experiment
>     # make data more user-friendly
>     colnames(iMdat) <- c("MoldTemp","Moisture","HoldPress","CavityThick","BoostPress",
+              "CycleTime","GateSize","ScrewSpeed", "y")
>     # linear model with all main effects and 2-factor interactions
>     iM.lm <- lm(y ~ (.)^2, data = iMdat)
>     # determine aliases
>     aliases(iM.lm)
                                                                                       
 MoldTemp:Moisture = HoldPress:GateSize = CavityThick:ScrewSpeed = BoostPress:CycleTime
 MoldTemp:HoldPress = Moisture:GateSize = CavityThick:CycleTime = BoostPress:ScrewSpeed
 MoldTemp:CavityThick = Moisture:ScrewSpeed = HoldPress:CycleTime = BoostPress:GateSize
 MoldTemp:BoostPress = Moisture:CycleTime = HoldPress:ScrewSpeed = CavityThick:GateSize
 MoldTemp:CycleTime = Moisture:BoostPress = HoldPress:CavityThick = GateSize:ScrewSpeed
 MoldTemp:GateSize = Moisture:HoldPress = CavityThick:BoostPress = CycleTime:ScrewSpeed
 MoldTemp:ScrewSpeed = Moisture:CavityThick = HoldPress:BoostPress = CycleTime:GateSize
>     # coded version
>     aliases(iM.lm, code=TRUE)
$legend
                                                                      
   A=MoldTemp    B=Moisture   C=HoldPress D=CavityThick  E=BoostPress 
                                          
  F=CycleTime    G=GateSize  H=ScrewSpeed 

$aliases
                      
 A:B = C:G = D:H = E:F
 A:C = B:G = D:F = E:H
 A:D = B:H = C:F = E:G
 A:E = B:F = C:H = D:G
 A:F = B:E = C:D = G:H
 A:G = B:C = D:E = F:H
 A:H = B:D = C:E = F:G

>     # normal plot of effects, default is autolabel with alpha=0.05
>     DanielPlot(iM.lm)  
>     DanielPlot(iM.lm,code=TRUE)
>     DanielPlot(iM.lm,code=TRUE,alpha=0.5)
simulated critical values not available for all requests, used conservative ones
>     # half normal plot of effects
>     DanielPlot(iM.lm,code=TRUE,alpha=0.5,half=TRUE)
simulated critical values not available for all requests, used conservative ones
>     # main effects plots
>     MEPlot(iM.lm)
>     # interaction plots
>     IAPlot(iM.lm)
>     # interaction plots with attention drawn to aliases
>     aus <- IAPlot(iM.lm, show.alias=TRUE)
>     # alias groups corresponding to interaction plots
>     aliases(iM.lm)$aliases[9:15]
[[1]]
[1] "MoldTemp:Moisture"      "HoldPress:GateSize"     "CavityThick:ScrewSpeed"
[4] "BoostPress:CycleTime"  

[[2]]
[1] "MoldTemp:HoldPress"    "Moisture:GateSize"     "CavityThick:CycleTime"
[4] "BoostPress:ScrewSpeed"

[[3]]
[1] "MoldTemp:CavityThick" "Moisture:ScrewSpeed"  "HoldPress:CycleTime" 
[4] "BoostPress:GateSize" 

[[4]]
[1] "MoldTemp:BoostPress"  "Moisture:CycleTime"   "HoldPress:ScrewSpeed"
[4] "CavityThick:GateSize"

[[5]]
[1] "MoldTemp:CycleTime"    "Moisture:BoostPress"   "HoldPress:CavityThick"
[4] "GateSize:ScrewSpeed"  

[[6]]
[1] "MoldTemp:GateSize"      "Moisture:HoldPress"     "CavityThick:BoostPress"
[4] "CycleTime:ScrewSpeed"  

[[7]]
[1] "MoldTemp:ScrewSpeed"  "Moisture:CavityThick" "HoldPress:BoostPress"
[4] "CycleTime:GateSize"  

>     # returned object
>     aus
    MoldTemp:Moisture MoldTemp:HoldPress MoldTemp:CavityThick
-:-             19.85               17.8                20.05
+:-             19.75               16.2                19.75
-:+             20.35               22.4                20.15
+:+             19.05               22.6                19.05
    MoldTemp:BoostPress MoldTemp:CycleTime MoldTemp:GateSize
-:-                24.3               20.0              19.7
+:-                19.0               19.6              19.2
-:+                15.9               20.2              20.5
+:+                19.8               19.2              19.6
    MoldTemp:ScrewSpeed Moisture:HoldPress Moisture:CavityThick
-:-                19.2              16.95                19.65
+:-                19.1              17.05                20.15
-:+                21.0              22.65                19.95
+:+                19.7              22.35                19.25
    Moisture:BoostPress Moisture:CycleTime Moisture:GateSize
-:-               21.55              22.15             19.95
+:-               21.75              17.45             18.95
-:+               18.05              17.45             19.65
+:+               17.65              21.95             20.45
    Moisture:ScrewSpeed HoldPress:CavityThick HoldPress:BoostPress
-:-                19.0                  17.0                 18.6
+:-                19.3                  22.8                 24.7
-:+                20.6                  17.0                 15.4
+:+                20.1                  22.2                 20.3
    HoldPress:CycleTime HoldPress:GateSize HoldPress:ScrewSpeed
-:-               16.85               16.4                 18.7
+:-               22.75               22.5                 19.6
-:+               17.15               17.6                 15.3
+:+               22.25               22.5                 25.4
    CavityThick:BoostPress CavityThick:CycleTime CavityThick:GateSize
-:-                   21.7                  20.4                 21.9
+:-                   21.6                  19.2                 17.0
-:+                   18.1                  19.4                 17.9
+:+                   17.6                  20.0                 22.2
    CavityThick:ScrewSpeed BoostPress:CycleTime BoostPress:GateSize
-:-                   19.0                 21.4               21.15
+:-                   19.3                 18.2               17.75
-:+                   20.8                 21.9               22.15
+:+                   19.9                 17.5               17.95
    BoostPress:ScrewSpeed CycleTime:GateSize CycleTime:ScrewSpeed
-:-                  21.5               19.2                 19.1
+:-                  16.8               19.7                 19.2
-:+                  21.8               20.4                 20.5
+:+                  18.9               19.7                 20.2
    GateSize:ScrewSpeed
-:-                18.7
+:-                19.6
-:+                20.2
+:+                20.5
attr(,"aliasgroups")
attr(,"aliasgroups")[[1]]
[1] "MoldTemp"

attr(,"aliasgroups")[[2]]
[1] "Moisture"

attr(,"aliasgroups")[[3]]
[1] "HoldPress"

attr(,"aliasgroups")[[4]]
[1] "CavityThick"

attr(,"aliasgroups")[[5]]
[1] "BoostPress"

attr(,"aliasgroups")[[6]]
[1] "CycleTime"

attr(,"aliasgroups")[[7]]
[1] "GateSize"

attr(,"aliasgroups")[[8]]
[1] "ScrewSpeed"

attr(,"aliasgroups")[[9]]
[1] "MoldTemp:Moisture"      "HoldPress:GateSize"     "CavityThick:ScrewSpeed"
[4] "BoostPress:CycleTime"  

attr(,"aliasgroups")[[10]]
[1] "MoldTemp:HoldPress"    "Moisture:GateSize"     "CavityThick:CycleTime"
[4] "BoostPress:ScrewSpeed"

attr(,"aliasgroups")[[11]]
[1] "MoldTemp:CavityThick" "Moisture:ScrewSpeed"  "HoldPress:CycleTime" 
[4] "BoostPress:GateSize" 

attr(,"aliasgroups")[[12]]
[1] "MoldTemp:BoostPress"  "Moisture:CycleTime"   "HoldPress:ScrewSpeed"
[4] "CavityThick:GateSize"

attr(,"aliasgroups")[[13]]
[1] "MoldTemp:CycleTime"    "Moisture:BoostPress"   "HoldPress:CavityThick"
[4] "GateSize:ScrewSpeed"  

attr(,"aliasgroups")[[14]]
[1] "MoldTemp:GateSize"      "Moisture:HoldPress"     "CavityThick:BoostPress"
[4] "CycleTime:ScrewSpeed"  

attr(,"aliasgroups")[[15]]
[1] "MoldTemp:ScrewSpeed"  "Moisture:CavityThick" "HoldPress:BoostPress"
[4] "CycleTime:GateSize"  

>     # cube plot of three factors
>     # (not very useful for this model, for demonstration only)
>       ## per default, modeled means are shown
>       ## this does not make a difference here, since the main effect of 
>       ## ScrewSpeed is confounded with the MoldTemp:HoldPress:BoostPress
>       ## interaction, so that the three-factor-interaction is indirectly included 
>       ## in the modeled means
>       cubePlot(iM.lm, "MoldTemp", "HoldPress", "BoostPress")
>       ## modeled means without a three-factor interaction
>       cubePlot(lm(y ~ (MoldTemp+HoldPress+BoostPress)^2, data = iMdat), 
+          "MoldTemp", "HoldPress", "BoostPress")
>       ## modeled=FALSE reverts to showing the apparent three-factor interaction
>       cubePlot(lm(y ~ (MoldTemp+HoldPress+BoostPress)^2, data = iMdat), 
+          "MoldTemp", "HoldPress", "BoostPress", modeled=FALSE)
>       ## cubePlot also works on raw data
>       cubePlot(iMdat$y, iMdat$MoldTemp, iMdat$HoldPress, iMdat$BoostPress)
>     ## plotting functions also work directly on designs, 
>     ## if these have been generated from functions FrF2 or pb:
>       plan <- FrF2(16, 7)
>       plan <- add.response(plan, rnorm(16))
>       MEPlot(plan)
>       IAPlot(plan)
>       DanielPlot(plan)
>       
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FrF2-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FrF2")
> ### * FrF2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FrF2
> ### Title: Function to provide regular Fractional Factorial 2-level designs
> ### Aliases: FrF2 FrF2.currentlychecked
> ### Keywords: array design
> 
> ### ** Examples
> 
> ## maximum resolution minimum aberration design with 4 factors in 8 runs
> FrF2(8,4)
   A  B  C  D
1 -1  1 -1  1
2  1  1  1  1
3  1  1 -1 -1
4 -1 -1  1  1
5 -1 -1 -1 -1
6 -1  1  1 -1
7  1 -1 -1  1
8  1 -1  1 -1
class=design, type= FrF2 
> ## the design with changed default level codes
> FrF2(8,4, default.level=c("current","new"))
        A       B       C       D
1     new current     new current
2 current current current current
3     new current current     new
4 current     new     new current
5 current     new current     new
6     new     new     new     new
7     new     new current current
8 current current     new     new
class=design, type= FrF2 
> ## the design with number of factors specified via factor names 
>       ## (standard level codes)
> FrF2(8,factor.names=list(temp="",press="",material="",state=""))
  temp press material state
1    1    -1        1    -1
2   -1     1        1    -1
3   -1     1       -1     1
4    1     1       -1    -1
5   -1    -1        1     1
6   -1    -1       -1    -1
7    1    -1       -1     1
8    1     1        1     1
class=design, type= FrF2 
> ## the design with changed factor names and factor-specific level codes
> FrF2(8,4, factor.names=list(temp=c("min","max"),press=c("low","normal"),
+      material=c("current","new"),state=c("new","aged")))
  temp  press material state
1  min normal  current  aged
2  max normal      new  aged
3  min    low  current   new
4  max    low  current  aged
5  max normal  current   new
6  min    low      new  aged
7  max    low      new   new
8  min normal      new   new
class=design, type= FrF2 
> ## a full factorial
> FrF2(8,3, factor.names=list(temp=c("min","max"),press=c("low","normal"),
+      material=c("current","new")))
creating full factorial with 8 runs ...

  temp  press material
1  max normal  current
2  max    low  current
3  min    low      new
4  max normal      new
5  max    low      new
6  min    low  current
7  min normal      new
8  min normal  current
class=design, type= full factorial 
> ## a replicated full factorial (implicit by low number of factors)
> FrF2(16,3, factor.names=list(temp=c("min","max"),press=c("low","normal"),
+      material=c("current","new")))
creating full factorial with 8 runs ...

   run.no run.no.std.rp temp  press material
1       1           7.1  min normal      new
2       2           5.1  min    low      new
3       3           8.1  max normal      new
4       4           3.1  min normal  current
5       5           6.1  max    low      new
6       6           4.1  max normal  current
7       7           1.1  min    low  current
8       8           2.1  max    low  current
9       9           6.2  max    low      new
10     10           5.2  min    low      new
11     11           3.2  min normal  current
12     12           7.2  min normal      new
13     13           2.2  max    low  current
14     14           1.2  min    low  current
15     15           8.2  max normal      new
16     16           4.2  max normal  current
class=design, type= full factorial 
NOTE: columns run.no and run.no.std.rp are annotation, not part of the data frame
> ## three ways for custom specification of the same design
> FrF2(8, generators = "ABC")
   A  B  C  D
1 -1  1 -1  1
2  1  1 -1 -1
3 -1  1  1 -1
4  1  1  1  1
5  1 -1  1 -1
6 -1 -1 -1 -1
7 -1 -1  1  1
8  1 -1 -1  1
class=design, type= FrF2.generators 
> FrF2(8, generators = 7)
   A  B  C  D
1  1 -1  1 -1
2  1 -1 -1  1
3 -1  1 -1  1
4  1  1 -1 -1
5 -1 -1 -1 -1
6  1  1  1  1
7 -1 -1  1  1
8 -1  1  1 -1
class=design, type= FrF2.generators 
> FrF2(8, generators = list(c(1,2,3)))
   A  B  C  D
1 -1  1 -1  1
2  1  1  1  1
3 -1  1  1 -1
4 -1 -1  1  1
5  1  1 -1 -1
6  1 -1 -1  1
7  1 -1  1 -1
8 -1 -1 -1 -1
class=design, type= FrF2.generators 
> ## more than one generator
> FrF2(8, generators = c("ABC","BC"))
   A  B  C  D  E
1  1  1 -1 -1 -1
2 -1 -1  1  1 -1
3 -1  1 -1  1 -1
4  1 -1 -1  1  1
5  1  1  1  1  1
6 -1 -1 -1 -1  1
7 -1  1  1 -1  1
8  1 -1  1 -1 -1
class=design, type= FrF2.generators 
> FrF2(8, generators = c(7,6))
   A  B  C  D  E
1  1 -1 -1  1  1
2  1  1  1  1  1
3 -1  1  1 -1  1
4 -1 -1 -1 -1  1
5 -1  1 -1  1 -1
6  1  1 -1 -1 -1
7  1 -1  1 -1 -1
8 -1 -1  1  1 -1
class=design, type= FrF2.generators 
> FrF2(8, generators = list(c(1,2,3),c(2,3)))
   A  B  C  D  E
1  1  1 -1 -1 -1
2 -1  1 -1  1 -1
3 -1 -1  1  1 -1
4  1  1  1  1  1
5 -1  1  1 -1  1
6  1 -1 -1  1  1
7 -1 -1 -1 -1  1
8  1 -1  1 -1 -1
class=design, type= FrF2.generators 
> ## alias structure for three generators that differ only by sign
> design.info(FrF2(16,generators=c(7,13,15),randomize=FALSE))$aliased
$legend
[1] "A=A" "B=B" "C=C" "D=D" "E=E" "F=F" "G=G"

$main
[1] "B=FG"    "D=EG"    "E=DG"    "F=BG"    "G=BF=DE"

$fi2
[1] "AB=CE"    "AC=BE=DF" "AD=CF"    "AE=BC"    "AF=CD"    "BD=EF"   

> design.info(FrF2(16,generators=c(7,-13,15),randomize=FALSE))$aliased
$legend
[1] "A=A" "B=B" "C=C" "D=D" "E=E" "F=F" "G=G"

$main
[1] "B=-FG"    "D=EG"     "E=DG"     "F=-BG"    "G=-BF=DE"

$fi2
[1] "AB=CE"     "AC=BE=-DF" "AD=-CF"    "AE=BC"     "AF=-CD"    "BD=-EF"   

> design.info(FrF2(16,generators=c(-7,-13,-15),randomize=FALSE))$aliased
$legend
[1] "A=A" "B=B" "C=C" "D=D" "E=E" "F=F" "G=G"

$main
[1] "B=FG"    "D=EG"    "E=DG"    "F=BG"    "G=BF=DE"

$fi2
[1] "AB=-CE"     "AC=-BE=-DF" "AD=-CF"     "AE=-BC"     "AF=-CD"    
[6] "BD=EF"     

> ## finding smallest design with resolution 5 in 7 factors
> FrF2(nfactors=7, resolution=5)
    A  B  C  D  E  F  G
1  -1 -1 -1  1 -1  1  1
2   1 -1  1  1 -1 -1 -1
3  -1 -1 -1  1 -1 -1 -1
4   1 -1  1  1  1 -1  1
5   1  1  1 -1  1  1 -1
6   1  1 -1 -1 -1  1 -1
7  -1 -1 -1  1  1  1 -1
8   1 -1 -1  1 -1  1 -1
9   1  1 -1 -1  1 -1 -1
10  1  1  1 -1  1 -1  1
11  1 -1  1  1  1  1 -1
12 -1 -1 -1 -1 -1 -1  1
13  1 -1  1 -1 -1  1 -1
14  1 -1  1 -1 -1 -1  1
15 -1  1  1 -1  1 -1 -1
16  1  1  1  1  1 -1 -1
17  1  1  1  1 -1  1 -1
18 -1  1  1 -1  1  1  1
19  1 -1 -1 -1  1  1 -1
20  1  1  1 -1 -1 -1 -1
21  1 -1 -1 -1 -1  1  1
22  1  1 -1  1  1  1 -1
23  1 -1  1 -1  1 -1 -1
24  1 -1  1 -1  1  1  1
25  1 -1 -1  1 -1 -1  1
26 -1  1  1  1 -1  1  1
27  1 -1 -1  1  1  1  1
28 -1  1 -1 -1 -1 -1 -1
29  1 -1 -1 -1 -1 -1 -1
30  1 -1  1  1 -1  1  1
31 -1 -1 -1 -1  1  1  1
32 -1  1 -1  1 -1  1 -1
33  1 -1 -1 -1  1 -1  1
34 -1 -1 -1 -1  1 -1 -1
35 -1 -1  1  1  1  1  1
36 -1  1  1  1 -1 -1 -1
37 -1 -1 -1 -1 -1  1 -1
38 -1  1  1  1  1 -1  1
39 -1  1  1 -1 -1 -1  1
40  1 -1 -1  1  1 -1 -1
41  1  1 -1  1 -1  1  1
42 -1  1 -1  1 -1 -1  1
43  1  1 -1 -1 -1 -1  1
44  1  1  1  1 -1 -1  1
45 -1 -1  1 -1 -1  1  1
46 -1  1 -1  1  1 -1 -1
47  1  1 -1  1 -1 -1 -1
48  1  1  1 -1 -1  1  1
49 -1  1 -1 -1  1  1 -1
50 -1 -1 -1  1  1 -1  1
51 -1 -1  1  1 -1  1 -1
52  1  1 -1  1  1 -1  1
53 -1 -1  1  1  1 -1 -1
54 -1 -1  1 -1  1  1 -1
55 -1 -1  1  1 -1 -1  1
56 -1  1 -1  1  1  1  1
57 -1  1 -1 -1  1 -1  1
58 -1  1  1 -1 -1  1 -1
59 -1  1  1  1  1  1 -1
60  1  1 -1 -1  1  1  1
61 -1 -1  1 -1 -1 -1 -1
62  1  1  1  1  1  1  1
63 -1  1 -1 -1 -1  1  1
64 -1 -1  1 -1  1 -1  1
class=design, type= FrF2 
> ## same design, but with 12 center points in 6 positions
> FrF2(nfactors=7, resolution=5, ncenter=12, center.distribute=6)
    A  B  C  D  E  F  G
1   0  0  0  0  0  0  0
2   0  0  0  0  0  0  0
3  -1  1  1  1 -1  1  1
4   1 -1  1 -1  1 -1 -1
5   1  1  1 -1 -1  1  1
6   1  1 -1 -1  1  1  1
7  -1 -1  1  1  1  1  1
8   1  1  1 -1  1 -1  1
9  -1  1  1 -1  1 -1 -1
10  1  1 -1  1  1  1 -1
11 -1 -1  1 -1 -1  1  1
12 -1 -1 -1  1 -1  1  1
13 -1 -1 -1 -1 -1  1 -1
14  1  1  1  1 -1  1 -1
15  1  1  1  1 -1 -1  1
16  0  0  0  0  0  0  0
17  0  0  0  0  0  0  0
18  1 -1 -1  1 -1 -1  1
19 -1 -1  1  1 -1  1 -1
20 -1 -1 -1  1  1 -1  1
21 -1  1 -1  1 -1  1 -1
22 -1 -1 -1  1 -1 -1 -1
23 -1  1 -1 -1 -1  1  1
24  1 -1  1 -1  1  1  1
25  1 -1 -1  1 -1  1 -1
26 -1  1 -1  1  1  1  1
27  1 -1  1  1  1 -1  1
28 -1 -1 -1  1  1  1 -1
29 -1 -1  1 -1 -1 -1 -1
30  1  1  1 -1  1  1 -1
31  0  0  0  0  0  0  0
32  0  0  0  0  0  0  0
33 -1  1 -1  1 -1 -1  1
34 -1  1  1  1  1  1 -1
35  1  1 -1 -1 -1 -1  1
36  1  1 -1  1 -1  1  1
37  1 -1  1 -1 -1  1 -1
38  1 -1 -1  1  1 -1 -1
39  1  1  1  1  1  1  1
40 -1  1  1 -1 -1 -1  1
41 -1  1  1 -1  1  1  1
42  1  1  1 -1 -1 -1 -1
43  1 -1  1 -1 -1 -1  1
44 -1  1  1  1 -1 -1 -1
45  0  0  0  0  0  0  0
46  0  0  0  0  0  0  0
47 -1  1 -1  1  1 -1 -1
48  1  1 -1 -1 -1  1 -1
49 -1  1  1  1  1 -1  1
50 -1 -1 -1 -1  1 -1 -1
51 -1  1  1 -1 -1  1 -1
52 -1  1 -1 -1 -1 -1 -1
53  1 -1  1  1 -1  1  1
54 -1  1 -1 -1  1 -1  1
55  1 -1 -1 -1  1  1 -1
56  1  1 -1  1  1 -1  1
57  1 -1 -1 -1 -1  1  1
58  1 -1 -1 -1  1 -1  1
59  1 -1  1  1 -1 -1 -1
60  0  0  0  0  0  0  0
61  0  0  0  0  0  0  0
62  1 -1  1  1  1  1 -1
63 -1 -1 -1 -1  1  1  1
64  1 -1 -1 -1 -1 -1 -1
65  1  1 -1  1 -1 -1 -1
66 -1 -1  1  1 -1 -1  1
67 -1 -1  1  1  1 -1 -1
68 -1  1 -1 -1  1  1 -1
69  1  1 -1 -1  1 -1 -1
70 -1 -1 -1 -1 -1 -1  1
71  1 -1 -1  1  1  1  1
72 -1 -1  1 -1  1 -1  1
73  1  1  1  1  1 -1 -1
74 -1 -1  1 -1  1  1 -1
75  0  0  0  0  0  0  0
76  0  0  0  0  0  0  0
class=design, type= FrF2.center 
> 
> 
> ## maximum resolution minimum aberration design with 9 factors in 32 runs
> ## show design information instead of design itself
> design.info(FrF2(32,9))
$type
[1] "FrF2"

$nruns
[1] 32

$nfactors
[1] 9

$factor.names
$factor.names$A
[1] -1  1

$factor.names$B
[1] -1  1

$factor.names$C
[1] -1  1

$factor.names$D
[1] -1  1

$factor.names$E
[1] -1  1

$factor.names$F
[1] -1  1

$factor.names$G
[1] -1  1

$factor.names$H
[1] -1  1

$factor.names$J
[1] -1  1


$catlg.name
[1] "catlg"

$catlg.entry
Design:  9-4.1 
   32  runs,  9  factors,  
   Resolution  IV 
   Generating columns:  7 11 19 29 
   WLP (3plus):  0 6 8 0 0 ,  8  clear 2fis
 Factors with all 2fis clear:  J

$aliased
$aliased$legend
[1] "A=A" "B=B" "C=C" "D=D" "E=E" "F=F" "G=G" "H=H" "J=J"

$aliased$main
character(0)

$aliased$fi2
 [1] "AB=CF=DG=EH" "AC=BF"       "AD=BG"       "AE=BH"       "AF=BC"      
 [6] "AG=BD"       "AH=BE"       "CD=FG"       "CE=FH"       "CG=DF"      
[11] "CH=EF"       "DE=GH"       "DH=EG"      


$FrF2.version
[1] "1.7-1"

$replications
[1] 1

$repeat.only
[1] FALSE

$randomize
[1] TRUE

$seed
NULL

$creator
FrF2(32, 9)

> ## maximum number of free 2-factor interactions instead of minimum aberration
> ## show design information instead of design itself
> design.info(FrF2(32,9,MaxC2=TRUE))
$type
[1] "FrF2"

$nruns
[1] 32

$nfactors
[1] 9

$factor.names
$factor.names$A
[1] -1  1

$factor.names$B
[1] -1  1

$factor.names$C
[1] -1  1

$factor.names$D
[1] -1  1

$factor.names$E
[1] -1  1

$factor.names$F
[1] -1  1

$factor.names$G
[1] -1  1

$factor.names$H
[1] -1  1

$factor.names$J
[1] -1  1


$catlg.name
[1] "catlg"

$catlg.entry
Design:  9-4.2 
   32  runs,  9  factors,  
   Resolution  IV 
   Generating columns:  7 11 13 30 
   WLP (3plus):  0 7 7 0 0 ,  15  clear 2fis
 Factors with all 2fis clear:  E J

$aliased
$aliased$legend
[1] "A=A" "B=B" "C=C" "D=D" "E=E" "F=F" "G=G" "H=H" "J=J"

$aliased$main
character(0)

$aliased$fi2
[1] "AB=CF=DG" "AC=BF=DH" "AD=BG=CH" "AF=BC=GH" "AG=BD=FH" "AH=CD=FG" "BH=CG=DF"


$FrF2.version
[1] "1.7-1"

$replications
[1] 1

$repeat.only
[1] FALSE

$randomize
[1] TRUE

$seed
NULL

$creator
FrF2(32, 9, MaxC2 = TRUE)

> 
> ## usage of replication
> ## shows run order instead of design itself
> run.order(FrF2(8,4,replication=2,randomize=FALSE))
   run.no.in.std.order run.no run.no.std.rp
1                    1      1           1.1
2                    2      2           2.1
3                    3      3           3.1
4                    4      4           4.1
5                    5      5           5.1
6                    6      6           6.1
7                    7      7           7.1
8                    8      8           8.1
9                    1      9           1.2
10                   2     10           2.2
11                   3     11           3.2
12                   4     12           4.2
13                   5     13           5.2
14                   6     14           6.2
15                   7     15           7.2
16                   8     16           8.2
> run.order(FrF2(8,4,replication=2,repeat.only=TRUE,randomize=FALSE))
   run.no.in.std.order run.no run.no.std.rp
1                    1      1           1.1
2                    1      2           1.2
3                    2      3           2.1
4                    2      4           2.2
5                    3      5           3.1
6                    3      6           3.2
7                    4      7           4.1
8                    4      8           4.2
9                    5      9           5.1
10                   5     10           5.2
11                   6     11           6.1
12                   6     12           6.2
13                   7     13           7.1
14                   7     14           7.2
15                   8     15           8.1
16                   8     16           8.2
> run.order(FrF2(8,4,replication=2))
   run.no.in.std.order run.no run.no.std.rp
1                    1      1           1.1
2                    8      2           8.1
3                    7      3           7.1
4                    5      4           5.1
5                    3      5           3.1
6                    6      6           6.1
7                    4      7           4.1
8                    2      8           2.1
9                    4      9           4.2
10                   7     10           7.2
11                   2     11           2.2
12                   5     12           5.2
13                   1     13           1.2
14                   6     14           6.2
15                   8     15           8.2
16                   3     16           3.2
> run.order(FrF2(8,4,replication=2,repeat.only=TRUE))
   run.no.in.std.order run.no run.no.std.rp
1                    7      1           7.1
2                    7      2           7.2
3                    6      3           6.1
4                    6      4           6.2
5                    2      5           2.1
6                    2      6           2.2
7                    3      7           3.1
8                    3      8           3.2
9                    1      9           1.1
10                   1     10           1.2
11                   8     11           8.1
12                   8     12           8.2
13                   5     13           5.1
14                   5     14           5.2
15                   4     15           4.1
16                   4     16           4.2
> 
> 
> ## Not run: 
> ##D ## examples below do work, but are repeated in the 
> ##D ## respective method's separate help file and are therefore prevented 
> ##D ## from running twice
> ##D 
> ##D ########## automatic blocked designs ###################
> ##D ## from a full factorial ##
> ##D FrF2(8,3,blocks=2)
> ##D ## with replication
> ##D run.order(FrF2(8,3,blocks=2,wbreps=2))
> ##D run.order(FrF2(8,3,blocks=2,wbreps=2,repeat.only=TRUE))
> ##D run.order(FrF2(8,3,blocks=2,bbreps=2))
> ##D run.order(FrF2(8,3,blocks=2,bbreps=2,wbreps=2))
> ##D 
> ##D ## automatic blocked design with fractions
> ##D FrF2(16,7,blocks=4,alias.block.2fis=TRUE,factor.names=c("MotorSpeed", 
> ##D       "FeedMode","FeedSizing","MaterialType","Gain","ScreenAngle","ScreenVibLevel"))
> ##D ## isomorphic non-catalogued design as basis
> ##D FrF2(16,gen=c(7,11,14),blocks=4,alias.block.2fis=TRUE)
> ##D ## FrF2 uses blockpick.big and ignores the generator
> ##D FrF2(64,gen=c(7,11,14),blocks=16,alias.block.2fis=TRUE)
> ##D 
> ##D ########## manual blocked design ####################
> ##D ### example that shows why order of blocks is not randomized
> ##D ### can of course be randomized by user, if appropriate
> ##D FrF2(32,9,blocks=c("Day","Shift"),alias.block.2fis=TRUE, 
> ##D     factor.names=list(Day=c("Wednesday","Thursday"), Shift=c("Morning","Afternoon"),
> ##D         F1="",F2="",F3="",F4="",F5="",F6="",F7=""), default.levels=c("current","new"))
> ##D 
> ##D ########## hard to change factors ####################
> ##D ## example from Bingham and Sitter Technometrics 19999
> ##D ## MotorSpeed, FeedMode,FeedSizing,MaterialType are hard to change
> ##D BS.ex <- FrF2(16,7,hard=4,
> ##D      factor.names=c("MotorSpeed", "FeedMode","FeedSizing","MaterialType",
> ##D                   "Gain","ScreenAngle","ScreenVibLevel"), 
> ##D      default.levels=c("-","+"),randomize=FALSE)
> ##D design.info(BS.ex)
> ##D BS.ex
> ##D ## NOTE: the design has 8 whole plots.
> ##D ## If randomize=FALSE is used like here, the first hard-to-change factors 
> ##D ## do not always change between whole plots. 
> ##D ## A conscious and honest decision is required whether this is 
> ##D ##    acceptable for the situation at hand!
> ##D ## randomize=TRUE would cause more changes in the first four factors.
> ##D 
> ##D ########## automatic generation for split plot ##########
> ##D ## 3 control factors, 5 noise factors, control factors are whole plot factors
> ##D ## 8 plots desired in a total of 32 runs
> ##D ## Bingham Sitter 2003
> ##D BS.ex2a <- FrF2(32, 8, WPs=8, nfac.WP=3, 
> ##D       factor.names=c(paste("C",1:3,sep=""), paste("N",1:5,sep="")),randomize=TRUE)
> ##D 
> ##D ## manual generation of this same design
> ##D BS.ex2m <- FrF2(32, 8, generators=c("ABD","ACD","BCDE"),WPs=8, WPfacs=c("C1","C2","C3"), nfac.WP=3, 
> ##D       factor.names=c(paste("C",1:3,sep=""),paste("N",1:5,sep="")),randomize=TRUE)
> ##D 
> ##D ## design with few whole plot factors
> ##D ## 2 whole plot factors, 7 split plot factors
> ##D ## 8 whole plots, i.e. one extra WP factor needed
> ##D BSS.cheese.exa <- FrF2(32, 9, WPs=8, nfac.WP=2, 
> ##D       factor.names=c("A","B","p","q","r","s","t","u","v"))
> ##D design.info(BSS.cheese.exa)
> ##D ## manual generation of the design used by Bingham, Schoen and Sitter
> ##D ## note that the generators include a generator for the 10th spplitting factor
> ##D     ## s= ABq, t = Apq, u = ABpr and v = Aqr, splitting factor rho=Apqr
> ##D BSS.cheese.exm <- FrF2(32, gen=list(c(1,2,4),c(1,3,4),c(1,2,3,5),c(1,4,5),c(1,3,4,5)), 
> ##D       WPs=8, nfac.WP=3, WPfacs=c(1,2,10),
> ##D       factor.names=c("A","B","p","q","r","s","t","u","v","rho"))
> ##D design.info(BSS.cheese.exm)
> ##D 
> ##D ########## usage of estimable ###########################
> ##D   ## design with all 2fis of factor A estimable on distinct columns in 16 runs
> ##D   FrF2(16, nfactors=6, estimable = rbind(rep(1,5),2:6), clear=FALSE)
> ##D   FrF2(16, nfactors=6, estimable = c("AB","AC","AD","AE","AF"), clear=FALSE)
> ##D   FrF2(16, nfactors=6, estimable = formula("~A+B+C+D+E+F+A:(B+C+D+E+F)"), 
> ##D        clear=FALSE)
> ##D             ## formula would also accept self-defined factor names
> ##D             ## from factor.names instead of letters A, B, C, ...
> ##D             
> ##D   ## estimable does not need any other input
> ##D   FrF2(estimable=formula("~(A+B+C)^2+D+E"))
> ##D 
> ##D   ## estimable with factor names 
> ##D   ## resolution three must be permitted, as FrF2 first determines that 8 runs 
> ##D   ##     would be sufficient degrees of freedom to estimate all effects 
> ##D   ##     and then tries to accomodate the 2fis from the model clear of aliasing in 8 runs
> ##D   FrF2(estimable=formula("~one+two+three+four+two:three+two:four"), 
> ##D        factor.names=c("one","two","three","four"), res3=TRUE)
> ##D   ## clear=FALSE allows to allocate all effects on distinct columns in the 
> ##D   ##     8 run MA resolution IV design
> ##D   FrF2(estimable=formula("~one+two+three+four+two:three+two:four"), 
> ##D        factor.names=c("one","two","three","four"), clear=FALSE)
> ##D 
> ##D   ## 7 factors instead of 6, but no requirements for factor G
> ##D   FrF2(16, nfactors=7, estimable = formula("~A+B+C+D+E+F+A:(B+C+D+E+F)"), 
> ##D        clear=FALSE)
> ##D   ## larger design for handling this with all required effects clear
> ##D   FrF2(32, nfactors=7, estimable = formula("~A+B+C+D+E+F+A:(B+C+D+E+F)"), 
> ##D        clear=TRUE)
> ##D   ## 16 run design for handling this with required 2fis clear, but main effects aliased
> ##D   ## (does not usually make sense)
> ##D   FrF2(16, nfactors=7, estimable = formula("~A+B+C+D+E+F+A:(B+C+D+E+F)"), 
> ##D        clear=TRUE, res3=TRUE)
> ## End(Not run)
> ## example for the sort option added with version 1.6-1
> ## and for usage of a catalogue from package FrF2.catlg128 (simplified with version 1.6-5)
>   ## Not run: 
> ##D   estim <- compromise(17,15:17)$requirement  ## all interactions of factors 15 to 17 (P,Q,R)
> ##D   ## VF2 algorithm without pre-sorting of vertices
> ##D   FrF2(128, 17, estimable=estim, select.catlg=catlg128.17) ## very slow,  
> ##D                                                            ## interrupt with ESC key
> ##D   ## VF2 algorithm with pre-sorting of vertices
> ##D   FrF2(128, 17, estimable=estim, sort="high", select.catlg=catlg128.17)  ## very fast
> ##D   FrF2(128, 17, estimable=estim, sort="low", select.catlg=catlg128.17)  ## very fast
> ##D   ## LAD algorithm
> ##D   FrF2(128, 17, estimable=estim, method="LAD", select.catlg=catlg128.17)  ## very fast
> ##D   ## guaranteed to be MA clear design 
> ##D   ## only works, if package FrF2.catlg128 is installed
> ##D   
> ## End(Not run)
> 
> ## example for necessity of perms, and uses of select.catlg and perm.start
> ## based on Wu and Chen Example 1
>   ## Not run: 
> ##D   ## runs per default about max.time=60 seconds, before throwing error with 
> ##D   ##        interim results
> ##D   ## results could be used in select.catlg and perm.start for restarting with 
> ##D   ##       calculation of further possibilities
> ##D   FrF2(32, nfactors=11, estimable = formula("~(A+B+C+D+E+F)^2"), clear=FALSE)
> ##D   ## would run for a long long time (I have not yet been patient enough)
> ##D   FrF2(32, nfactors=11, estimable = formula("~(A+B+C+D+E+F)^2"), clear=FALSE, 
> ##D        max.time=Inf)
> ##D   ## can be easily done with perms, 
> ##D   ## as only different subsets of six factors are non-isomorphic
> ##D   perms.6 <- combn(11,6)
> ##D   perms.full <- matrix(NA,ncol(perms.6),11)
> ##D   for (i in 1:ncol(perms.6))
> ##D      perms.full[i,] <- c(perms.6[,i],setdiff(1:11,perms.6[,i]))
> ##D   FrF2(32, nfactors=11, estimable = formula("~(A+B+C+D+E+F)^2"), clear=FALSE, 
> ##D       perms = perms.full )
> ##D   
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FrF2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FrF2Large")
> ### * FrF2Large
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FrF2Large
> ### Title: Function to provide large (at least 8192 runs) regular
> ###   Fractional Factorial designs that are not necessarily optimal,
> ###   especially large resolution V designs.
> ### Aliases: FrF2Large nrunsV
> ### Keywords: array design
> 
> ### ** Examples
> 
> ## numbers of runs needed for resolution V designs in different numbers of factors 
> nrunsV(8)
Function FrF2 with nruns=64 creates a minimum aberration regular resolution V design.
> nrunsV(18)
Function FrF2 with nruns=512 creates a minimum aberration regular resolution V design.
> needed <- nrunsV(27)
Function FrF2 with nruns=1024 creates a minimum aberration regular resolution V design.
> needed
[1] 1024
> nrunsV(65)
Function FrF2 with nruns=4096 creates a regular resolution V design (good, but not necessarily MA).
> nrunsV(71)
Only function FrF2Large with nruns=16384 creates a regular resolution V design.
> 
> ## Not run: 
> ##D plan <- FrF2Large(nrunsV(75),75)
> ##D summary(plan)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FrF2Large", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("StructurePickers")
> ### * StructurePickers
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: StructurePickers
> ### Title: Functions to find split-plot or left-adjusted designs
> ### Aliases: splitpick leftadjust
> ### Keywords: array design
> 
> ### ** Examples
> 
> ## leftadjusting MA design from table 6.22 in BHH2, 9 factors, 32 runs
> ## NOTE: nevertheless not as well left-adjusted as the isomorphic design 9-4.1 from catlg
> leftadjust(5,c(30,29,27,23))
$orig
[1] 30 29 27 23

$basics
   nruns nfactors 
      32        9 

$perms
      [,1] [,2] [,3] [,4] [,5]
 [1,]    5    1    2    3    4
 [2,]    5    2    1    3    4
 [3,]    5    2    3    1    4
 [4,]    5    1    3    2    4
 [5,]    5    3    1    2    4
 [6,]    5    3    2    1    4
 [7,]    5    2    3    4    1
 [8,]    5    1    3    4    2
 [9,]    5    3    1    4    2
[10,]    5    3    2    4    1

$maxpos
NULL

$k.early
NULL

$gen
      [,1] [,2] [,3] [,4]
 [1,]   15   23   27   29
 [2,]   15   23   27   29
 [3,]   15   23   27   29
 [4,]   15   23   27   29
 [5,]   15   23   27   29
 [6,]   15   23   27   29
 [7,]   15   23   27   29
 [8,]   15   23   27   29
 [9,]   15   23   27   29
[10,]   15   23   27   29

> ## with option early=4 (i.e. 4 columns as early as possible are requested)
> leftadjust(5,c(30,29,27,23),early=4)
$orig
[1] 30 29 27 23

$basics
   nruns nfactors    early 
      32        9        4 

$perms
      [,1] [,2] [,3] [,4] [,5]
 [1,]    5    1    2    3    4
 [2,]    5    2    1    3    4
 [3,]    5    2    3    1    4
 [4,]    5    1    3    2    4
 [5,]    5    3    1    2    4
 [6,]    5    3    2    1    4
 [7,]    5    2    3    4    1
 [8,]    5    1    3    4    2
 [9,]    5    3    1    4    2
[10,]    5    3    2    4    1

$maxpos
 [1] 8 8 8 8 8 8 8 8 8 8

$k.early
 [1] 4 4 4 4 4 4 4 4 4 4

$gen
      [,1] [,2] [,3] [,4]
 [1,]   15   23   27   29
 [2,]   15   23   27   29
 [3,]   15   23   27   29
 [4,]   15   23   27   29
 [5,]   15   23   27   29
 [6,]   15   23   27   29
 [7,]   15   23   27   29
 [8,]   15   23   27   29
 [9,]   15   23   27   29
[10,]   15   23   27   29

> leftadjust(5,catlg$'9-4.1'$gen,early=4)
$orig
[1]  7 11 19 29

$basics
   nruns nfactors    early 
      32        9        4 

$perms
      [,1] [,2] [,3] [,4] [,5]
 [1,]    1    2    3    4    5
 [2,]    1    2    4    3    5
 [3,]    1    2    4    5    3
 [4,]    1    2    3    5    4
 [5,]    1    2    5    3    4
 [6,]    1    2    5    4    3
 [7,]    2    1    3    4    5
 [8,]    2    1    4    3    5
 [9,]    2    1    4    5    3
[10,]    2    1    3    5    4

$maxpos
 [1] 7 7 7 7 7 7 7 7 7 7

$k.early
 [1] 3 3 3 3 3 3 3 3 3 3

$gen
      [,1] [,2] [,3] [,4]
 [1,]    7   11   19   29
 [2,]    7   11   19   29
 [3,]    7   11   19   29
 [4,]    7   11   19   29
 [5,]    7   11   19   29
 [6,]    7   11   19   29
 [7,]    7   11   19   30
 [8,]    7   11   19   30
 [9,]    7   11   19   30
[10,]    7   11   19   30

> 
> ## look for a split plot design in 32 runs with 7 factors, 
> ##       3 of which are whole plot factors, 
> ##       and 8 plots
> splitpick(5,catlg$'7-2.1'$gen,nfac.WP=3,k.WP=3)
$orig
[1]  7 27

$basics
  nruns    nWPs nfac.WP nfac.SP 
     32       8       3       4 

$perms
      [,1] [,2] [,3] [,4] [,5]
 [1,]    2    3    4    1    5
 [2,]    1    3    4    2    5
 [3,]    3    1    4    2    5
 [4,]    3    2    4    1    5
 [5,]    1    2    4    3    5
 [6,]    2    1    4    3    5
 [7,]    3    4    1    2    5
 [8,]    3    4    2    1    5
 [9,]    1    4    2    3    5
[10,]    2    4    1    3    5

$res.WP
 [1] Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf

$gen
      [,1] [,2]
 [1,]   11   29
 [2,]   11   29
 [3,]   11   30
 [4,]   11   30
 [5,]   11   23
 [6,]   11   23
 [7,]   13   30
 [8,]   13   30
 [9,]   13   23
[10,]   13   23

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("StructurePickers", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("add.center")
> ### * add.center
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: add.center
> ### Title: Function to add center points to a 2-level fractional factorial
> ### Aliases: add.center
> ### Keywords: design array
> 
> ### ** Examples
> 
>   ## purely technical example 
>   plan <- FrF2(8,5, factor.names=c("one","two","three","four","five"))
>   add.center(plan, 6)
   one two three four five
1    0   0     0    0    0
2    0   0     0    0    0
3   -1   1    -1   -1    1
4    1   1     1    1    1
5    1   1    -1    1   -1
6   -1  -1     1    1   -1
7    0   0     0    0    0
8    0   0     0    0    0
9   -1  -1    -1    1    1
10  -1   1     1   -1   -1
11   1  -1    -1   -1   -1
12   1  -1     1   -1    1
13   0   0     0    0    0
14   0   0     0    0    0
class=design, type= FrF2.center 
>   add.center(plan, 6, distribute=1)
Warning in add.center(plan, 6, distribute = 1) :
  running all center point runs together is usually not a good idea.
   one two three four five
1   -1   1    -1   -1    1
2    1   1     1    1    1
3    1   1    -1    1   -1
4   -1  -1     1    1   -1
5   -1  -1    -1    1    1
6   -1   1     1   -1   -1
7    1  -1    -1   -1   -1
8    1  -1     1   -1    1
9    0   0     0    0    0
10   0   0     0    0    0
11   0   0     0    0    0
12   0   0     0    0    0
13   0   0     0    0    0
14   0   0     0    0    0
class=design, type= FrF2.center 
>   add.center(plan, 6, distribute=6)
   one two three four five
1    0   0     0    0    0
2   -1   1    -1   -1    1
3    1   1     1    1    1
4    0   0     0    0    0
5    1   1    -1    1   -1
6    0   0     0    0    0
7   -1  -1     1    1   -1
8   -1  -1    -1    1    1
9    0   0     0    0    0
10  -1   1     1   -1   -1
11   0   0     0    0    0
12   1  -1    -1   -1   -1
13   1  -1     1   -1    1
14   0   0     0    0    0
class=design, type= FrF2.center 
>   add.center(plan, 6, distribute=4)
   one two three four five
1    0   0     0    0    0
2    0   0     0    0    0
3   -1   1    -1   -1    1
4    1   1     1    1    1
5    1   1    -1    1   -1
6    0   0     0    0    0
7   -1  -1     1    1   -1
8   -1  -1    -1    1    1
9    0   0     0    0    0
10  -1   1     1   -1   -1
11   1  -1    -1   -1   -1
12   1  -1     1   -1    1
13   0   0     0    0    0
14   0   0     0    0    0
class=design, type= FrF2.center 
>   
>   ## very artificial analysis example
>     plan <- FrF2(8,4, factor.names=list(one=c(0,10),two=c(1,3),three=c(25,32),four=c(3.7,4.8)))
>   ## add some response data
>     y <- c(2+desnum(plan)%*%c(2,3,0,0) +
+        1.5*apply(desnum(plan)[,c(1,2)],1,"prod") + rnorm(8))
>        ## the "c()" makes y into a vector rather than a 1-column matrix
>     plan <- add.response(plan, y)
>   ## analysing this design provides an impression
>     MEPlot(lm(y~(.)^2, plan))
>     IAPlot(lm(y~(.)^2, plan))
>     DanielPlot(lm(y~(.)^2,plan), half=TRUE, alpha=0.2)
>   ## tentative conclusion: factors one and two do something
>   ## wonder whether the model with one and two and their interaction is sufficient
>   ## look at center points (!!! SHOULD HAVE BEEN INCLUDED FROM THE START,
>   ##      but maybe better now than not at all)
>   ## use distribute=1, because all center points are run at the end
>     planc <- add.center(plan, 6, distribute=1)
Warning in add.center(plan, 6, distribute = 1) :
  running all center point runs together is usually not a good idea.
>       ## conduct additional runs for the center points
>         y <- c(y, c(2+desnum(planc)[!iscube(planc),1:4]%*%c(2,3,0,0) +
+              1.5*apply(desnum(planc)[!iscube(planc),][,c(1,2)],1,"prod") + rnorm(6)))
>   ## add to the design
>     planc <- add.response(planc, y, replace=TRUE)
>   ## sanity check: repeat previous analyses for comparison, with the help of function iscube()
>     MEPlot(lm(y~(.)^2, planc, subset=iscube(planc)))
>     IAPlot(lm(y~(.)^2, planc, subset=iscube(planc)))
>     DanielPlot(lm(y~(.)^2, planc, subset=iscube(planc)), half=TRUE, alpha=0.2)
>   ## quick check whether there a quadratic effect is needed: is the cube indicator significant ?
>     summary(lm(y~(.)^2+iscube(planc), planc))

Call:
lm.default(formula = y ~ (.)^2 + iscube(planc), data = planc)

Residuals:
         1          2          3          4          5          6          7 
 5.551e-17 -5.248e-17 -6.943e-17 -4.791e-17  5.622e-17 -5.095e-17  5.611e-17 
         8          9         10         11         12         13         14 
 4.722e-17 -6.902e-01  2.699e-01  1.472e-01 -8.008e-02  2.450e-01  1.082e-01 

Coefficients: (3 not defined because of singularities)
                    Estimate Std. Error  t value Pr(>|t|)    
(Intercept)        27.278668   2.063182   13.222 4.42e-05 ***
one                 1.452876   0.291593    4.983 0.004167 ** 
two                 1.529731   0.180135    8.492 0.000372 ***
three               0.090824   0.051467    1.765 0.137885    
four               -0.341195   0.327518   -1.042 0.345251    
iscube(planc)TRUE -31.621971   0.194568 -162.524 1.67e-10 ***
one:two             0.217594   0.025475    8.541 0.000362 ***
one:three          -0.039623   0.007279   -5.444 0.002840 ** 
one:four           -0.075136   0.046318   -1.622 0.165690    
two:three                 NA         NA       NA       NA    
two:four                  NA         NA       NA       NA    
three:four                NA         NA       NA       NA    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.3603 on 5 degrees of freedom
Multiple R-squared:  0.9998,	Adjusted R-squared:  0.9995 
F-statistic:  3407 on 8 and 5 DF,  p-value: 6.574e-09

>         ## (in this unrealistic example, the quadratic effect is dominating everything else;
>         ## with an effect that strong in practice, it is likely that
>         ## one would either have expected a strong non-linearity before conducting the experiment, 
>         ## OR that the effect is not real but the result of some stupid mistake
>   ## alternatively, the check can be calculated per hand (cf. e.g. Montgomery, Chapter 11):
>     (mean(planc$y[iscube(planc)])-mean(planc$y[!iscube(planc)]))^2*8*6/(8+6)/var(y[!iscube(planc)])
[1] 26414.08
>     ## must be compared to the F-quantile with 1 degree of freedom
>     ## is the square of the t-value for the cube indicator in the linear model
>    
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("add.center", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("aliases")
> ### * aliases
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: aliases
> ### Title: Alias structure for fractional factorial 2-level designs
> ### Aliases: aliases aliasprint print.aliases
> ### Keywords: design
> 
> ### ** Examples
> 
>     ### Injection Molding Experiment. Box et al. 1978.
>     data(BM93.e3.data, package="BsMD")  #from BsMD
>     iMdat <- BM93.e3.data[1:16,2:10]  #only original experiment
>     # make data more user-friendly
>     colnames(iMdat) <- c("MoldTemp","Moisture","HoldPress","CavityThick",
+              "BoostPress","CycleTime","GateSize","ScrewSpeed","y")
>     # determine aliases with all 2-factor-interactions
>     aliases(lm(y ~ (.)^2, data = iMdat))
                                                                                       
 MoldTemp:Moisture = HoldPress:GateSize = CavityThick:ScrewSpeed = BoostPress:CycleTime
 MoldTemp:HoldPress = Moisture:GateSize = CavityThick:CycleTime = BoostPress:ScrewSpeed
 MoldTemp:CavityThick = Moisture:ScrewSpeed = HoldPress:CycleTime = BoostPress:GateSize
 MoldTemp:BoostPress = Moisture:CycleTime = HoldPress:ScrewSpeed = CavityThick:GateSize
 MoldTemp:CycleTime = Moisture:BoostPress = HoldPress:CavityThick = GateSize:ScrewSpeed
 MoldTemp:GateSize = Moisture:HoldPress = CavityThick:BoostPress = CycleTime:ScrewSpeed
 MoldTemp:ScrewSpeed = Moisture:CavityThick = HoldPress:BoostPress = CycleTime:GateSize
>     # coded version
>     aliases(lm(y ~ (.)^2, data = iMdat), code=TRUE)
$legend
                                                                      
   A=MoldTemp    B=Moisture   C=HoldPress D=CavityThick  E=BoostPress 
                                          
  F=CycleTime    G=GateSize  H=ScrewSpeed 

$aliases
                      
 A:B = C:G = D:H = E:F
 A:C = B:G = D:F = E:H
 A:D = B:H = C:F = E:G
 A:E = B:F = C:H = D:G
 A:F = B:E = C:D = G:H
 A:G = B:C = D:E = F:H
 A:H = B:D = C:E = F:G

>     # determine aliases with all 3-factor-interactions
>     aliases(lm(y ~ (.)^3, data = iMdat), code=TRUE)
$legend
                                                                      
   A=MoldTemp    B=Moisture   C=HoldPress D=CavityThick  E=BoostPress 
                                          
  F=CycleTime    G=GateSize  H=ScrewSpeed 

$aliases
                                                          
 A = B:C:G = B:D:H = B:E:F = C:D:F = C:E:H = D:E:G = F:G:H
 B = A:C:G = A:D:H = A:E:F = C:D:E = C:F:H = D:F:G = E:G:H
 C = A:B:G = A:D:F = A:E:H = B:D:E = B:F:H = D:G:H = E:F:G
 D = A:B:H = A:C:F = A:E:G = B:C:E = B:F:G = C:G:H = E:F:H
 E = A:B:F = A:C:H = A:D:G = B:C:D = B:G:H = C:F:G = D:F:H
 F = A:B:E = A:C:D = A:G:H = B:C:H = B:D:G = C:E:G = D:E:H
 G = A:B:C = A:D:E = A:F:H = B:D:F = B:E:H = C:D:H = C:E:F
 H = A:B:D = A:C:E = A:F:G = B:C:F = B:E:G = C:D:G = D:E:F
 A:B = C:G = D:H = E:F                                    
 A:C = B:G = D:F = E:H                                    
 A:D = B:H = C:F = E:G                                    
 A:E = B:F = C:H = D:G                                    
 A:F = B:E = C:D = G:H                                    
 A:G = B:C = D:E = F:H                                    
 A:H = B:D = C:E = F:G                                    

>     # show condensed form
>     aliases(lm(y ~ (.)^3, data = iMdat), code=TRUE, condense=TRUE)
$legend
[1] A=MoldTemp    B=Moisture    C=HoldPress   D=CavityThick E=BoostPress 
[6] F=CycleTime   G=GateSize    H=ScrewSpeed 

$main
[1] A = B:C:G = B:D:H = B:E:F = C:D:F = C:E:H = D:E:G = F:G:H
[2] B = A:C:G = A:D:H = A:E:F = C:D:E = C:F:H = D:F:G = E:G:H
[3] C = A:B:G = A:D:F = A:E:H = B:D:E = B:F:H = D:G:H = E:F:G
[4] D = A:B:H = A:C:F = A:E:G = B:C:E = B:F:G = C:G:H = E:F:H
[5] E = A:B:F = A:C:H = A:D:G = B:C:D = B:G:H = C:F:G = D:F:H
[6] F = A:B:E = A:C:D = A:G:H = B:C:H = B:D:G = C:E:G = D:E:H
[7] G = A:B:C = A:D:E = A:F:H = B:D:F = B:E:H = C:D:H = C:E:F
[8] H = A:B:D = A:C:E = A:F:G = B:C:F = B:E:G = C:D:G = D:E:F

$fi2
[1] A:B = C:G = D:H = E:F A:C = B:G = D:F = E:H A:D = B:H = C:F = E:G
[4] A:E = B:F = C:H = D:G A:F = B:E = C:D = G:H A:G = B:C = D:E = F:H
[7] A:H = B:D = C:E = F:G

$fi3
NULL

attr(,"class")
[1] aliases list   
>     # determine aliases for unaliased model
>     aliases(lm(y ~ ., data = iMdat))
[1] no aliasing in the model
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("aliases", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("block")
> ### * block
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: block
> ### Title: Statistical and algorithmic aspects of blocking in FrF2
> ### Aliases: block
> ### Keywords: array design
> 
> ### ** Examples
> 
> ########## automatic blocked designs ###################
> ## from a full factorial ##
> FrF2(8,3,blocks=2)
  run.no run.no.std.rp Blocks  A  B  C
1      1         4.1.2      1 -1  1  1
2      2         7.1.4      1  1  1 -1
3      3         6.1.3      1  1 -1  1
4      4         1.1.1      1 -1 -1 -1
  run.no run.no.std.rp Blocks  A  B  C
5      5         2.2.1      2 -1 -1  1
6      6         5.2.3      2  1 -1 -1
7      7         3.2.2      2 -1  1 -1
8      8         8.2.4      2  1  1  1
class=design, type= FrF2.blocked 
NOTE: columns run.no and run.no.std.rp are annotation, not part of the data frame
> ## with replication
> run.order(FrF2(8,3,blocks=2,wbreps=2))
   run.no.in.std.order run.no run.no.std.rp
1                6.1.3      1       6.1.3.1
2                1.1.1      2       1.1.1.1
3                7.1.4      3       7.1.4.1
4                4.1.2      4       4.1.2.1
5                6.1.3      5       6.1.3.2
6                4.1.2      6       4.1.2.2
7                7.1.4      7       7.1.4.2
8                1.1.1      8       1.1.1.2
9                5.2.3      9       5.2.3.1
10               8.2.4     10       8.2.4.1
11               2.2.1     11       2.2.1.1
12               3.2.2     12       3.2.2.1
13               8.2.4     13       8.2.4.2
14               2.2.1     14       2.2.1.2
15               3.2.2     15       3.2.2.2
16               5.2.3     16       5.2.3.2
> run.order(FrF2(8,3,blocks=2,wbreps=2,repeat.only=TRUE))
   run.no.in.std.order run.no run.no.std.rp
1                4.1.2      1       4.1.2.1
2                4.1.2      2       4.1.2.2
3                7.1.4      3       7.1.4.1
4                7.1.4      4       7.1.4.2
5                1.1.1      5       1.1.1.1
6                1.1.1      6       1.1.1.2
7                6.1.3      7       6.1.3.1
8                6.1.3      8       6.1.3.2
9                8.2.4      9       8.2.4.1
10               8.2.4     10       8.2.4.2
11               3.2.2     11       3.2.2.1
12               3.2.2     12       3.2.2.2
13               2.2.1     13       2.2.1.1
14               2.2.1     14       2.2.1.2
15               5.2.3     15       5.2.3.1
16               5.2.3     16       5.2.3.2
> run.order(FrF2(8,3,blocks=2,bbreps=2))
   run.no.in.std.order run.no run.no.std.rp
1                4.1.2      1       4.1.2.1
2                1.1.1      2       1.1.1.1
3                7.1.4      3       7.1.4.1
4                6.1.3      4       6.1.3.1
5                8.2.4      5       8.2.4.1
6                2.2.1      6       2.2.1.1
7                3.2.2      7       3.2.2.1
8                5.2.3      8       5.2.3.1
9                7.1.4      9       7.1.4.2
10               4.1.2     10       4.1.2.2
11               6.1.3     11       6.1.3.2
12               1.1.1     12       1.1.1.2
13               5.2.3     13       5.2.3.2
14               8.2.4     14       8.2.4.2
15               2.2.1     15       2.2.1.2
16               3.2.2     16       3.2.2.2
> run.order(FrF2(8,3,blocks=2,bbreps=2,wbreps=2))
   run.no.in.std.order run.no run.no.std.rp
1                6.1.3      1     6.1.3.1.1
2                7.1.4      2     7.1.4.1.1
3                1.1.1      3     1.1.1.1.1
4                4.1.2      4     4.1.2.1.1
5                4.1.2      5     4.1.2.1.2
6                1.1.1      6     1.1.1.1.2
7                6.1.3      7     6.1.3.1.2
8                7.1.4      8     7.1.4.1.2
9                3.2.2      9     3.2.2.1.1
10               8.2.4     10     8.2.4.1.1
11               5.2.3     11     5.2.3.1.1
12               2.2.1     12     2.2.1.1.1
13               8.2.4     13     8.2.4.1.2
14               2.2.1     14     2.2.1.1.2
15               5.2.3     15     5.2.3.1.2
16               3.2.2     16     3.2.2.1.2
17               6.1.3     17     6.1.3.2.1
18               1.1.1     18     1.1.1.2.1
19               7.1.4     19     7.1.4.2.1
20               4.1.2     20     4.1.2.2.1
21               1.1.1     21     1.1.1.2.2
22               6.1.3     22     6.1.3.2.2
23               7.1.4     23     7.1.4.2.2
24               4.1.2     24     4.1.2.2.2
25               3.2.2     25     3.2.2.2.1
26               8.2.4     26     8.2.4.2.1
27               2.2.1     27     2.2.1.2.1
28               5.2.3     28     5.2.3.2.1
29               8.2.4     29     8.2.4.2.2
30               3.2.2     30     3.2.2.2.2
31               5.2.3     31     5.2.3.2.2
32               2.2.1     32     2.2.1.2.2
> 
> ## automatic blocked design with fractions
> FrF2(16,7,blocks=4,alias.block.2fis=TRUE)
  run.no run.no.std.rp Blocks  A  B  C  D  E  F  G
1      1         8.1.2      1 -1  1  1  1 -1 -1 -1
2      2         9.1.3      1  1 -1 -1 -1  1  1  1
3      3         7.1.1      1 -1  1  1 -1 -1  1  1
4      4        10.1.4      1  1 -1 -1  1  1 -1 -1
  run.no run.no.std.rp Blocks  A  B  C  D  E  F  G
5      5        12.2.4      2  1 -1  1  1 -1 -1  1
6      6         5.2.1      2 -1  1 -1 -1  1  1 -1
7      7         6.2.2      2 -1  1 -1  1  1 -1  1
8      8        11.2.3      2  1 -1  1 -1 -1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G
9       9         3.3.1      3 -1 -1  1 -1  1 -1  1
10     10        14.3.4      3  1  1 -1  1 -1  1 -1
11     11        13.3.3      3  1  1 -1 -1 -1 -1  1
12     12         4.3.2      3 -1 -1  1  1  1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G
13     13        15.4.3      4  1  1  1 -1  1 -1 -1
14     14        16.4.4      4  1  1  1  1  1  1  1
15     15         2.4.2      4 -1 -1 -1  1 -1  1  1
16     16         1.4.1      4 -1 -1 -1 -1 -1 -1 -1
class=design, type= FrF2.blocked 
NOTE: columns run.no and run.no.std.rp are annotation, not part of the data frame
> ## isomorphic non-catalogued design as basis
> FrF2(16,gen=c(7,11,14),blocks=4,alias.block.2fis=TRUE)
  run.no run.no.std.rp Blocks  A  B  C  D  E  F  G
1      1         8.1.2      1 -1  1  1  1 -1 -1  1
2      2        10.1.4      1  1 -1 -1  1  1 -1  1
3      3         9.1.3      1  1 -1 -1 -1  1  1 -1
4      4         7.1.1      1 -1  1  1 -1 -1  1 -1
  run.no run.no.std.rp Blocks  A  B  C  D  E  F  G
5      5        11.2.3      2  1 -1  1 -1 -1  1  1
6      6         6.2.2      2 -1  1 -1  1  1 -1 -1
7      7         5.2.1      2 -1  1 -1 -1  1  1  1
8      8        12.2.4      2  1 -1  1  1 -1 -1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G
9       9        13.3.3      3  1  1 -1 -1 -1 -1  1
10     10         3.3.1      3 -1 -1  1 -1  1 -1  1
11     11        14.3.4      3  1  1 -1  1 -1  1 -1
12     12         4.3.2      3 -1 -1  1  1  1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G
13     13        16.4.4      4  1  1  1  1  1  1  1
14     14         2.4.2      4 -1 -1 -1  1 -1  1  1
15     15        15.4.3      4  1  1  1 -1  1 -1 -1
16     16         1.4.1      4 -1 -1 -1 -1 -1 -1 -1
class=design, type= FrF2.blocked 
NOTE: columns run.no and run.no.std.rp are annotation, not part of the data frame
> ## FrF2 uses blockpick.big and ignores the generator
> FrF2(64,gen=c(7,11,14),blocks=16,alias.block.2fis=TRUE)
Warning in FrF2(64, gen = c(7, 11, 14), blocks = 16, alias.block.2fis = TRUE) :
  For this request, generator or design specifications have been ignored, 
                              because the block allocation procedure for big problems was used.
  run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
1      1         2.1.2      1 -1  1 -1 -1 -1 -1  1 -1 -1
2      2         4.1.4      1  1  1  1  1  1  1  1 -1 -1
3      3         1.1.1      1 -1 -1 -1 -1 -1 -1 -1  1  1
4      4         3.1.3      1  1 -1  1  1  1  1 -1  1  1
  run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
5      5         7.2.3      2  1 -1  1  1 -1 -1 -1 -1 -1
6      6         5.2.1      2 -1 -1 -1 -1  1  1 -1 -1 -1
7      7         8.2.4      2  1  1  1  1 -1 -1  1  1  1
8      8         6.2.2      2 -1  1 -1 -1  1  1  1  1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
9       9        12.3.4      3  1  1  1 -1  1 -1  1  1  1
10     10        10.3.2      3 -1  1 -1  1 -1  1  1  1  1
11     11         9.3.1      3 -1 -1 -1  1 -1  1 -1 -1 -1
12     12        11.3.3      3  1 -1  1 -1  1 -1 -1 -1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
13     13        16.4.4      4  1  1  1 -1 -1  1  1 -1 -1
14     14        14.4.2      4 -1  1 -1  1  1 -1  1 -1 -1
15     15        15.4.3      4  1 -1  1 -1 -1  1 -1  1  1
16     16        13.4.1      4 -1 -1 -1  1  1 -1 -1  1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
17     17        17.5.1      5 -1 -1  1 -1  1 -1  1  1 -1
18     18        18.5.2      5 -1  1  1 -1  1 -1 -1 -1  1
19     19        19.5.3      5  1 -1 -1  1 -1  1  1  1 -1
20     20        20.5.4      5  1  1 -1  1 -1  1 -1 -1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
21     21        21.6.1      6 -1 -1  1 -1 -1  1  1 -1  1
22     22        22.6.2      6 -1  1  1 -1 -1  1 -1  1 -1
23     23        23.6.3      6  1 -1 -1  1  1 -1  1 -1  1
24     24        24.6.4      6  1  1 -1  1  1 -1 -1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
25     25        27.7.3      7  1 -1 -1 -1 -1 -1  1 -1  1
26     26        26.7.2      7 -1  1  1  1  1  1 -1  1 -1
27     27        28.7.4      7  1  1 -1 -1 -1 -1 -1  1 -1
28     28        25.7.1      7 -1 -1  1  1  1  1  1 -1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
29     29        31.8.3      8  1 -1 -1 -1  1  1  1  1 -1
30     30        30.8.2      8 -1  1  1  1 -1 -1 -1 -1  1
31     31        29.8.1      8 -1 -1  1  1 -1 -1  1  1 -1
32     32        32.8.4      8  1  1 -1 -1  1  1 -1 -1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
33     33        35.9.3      9  1 -1 -1 -1  1  1  1 -1  1
34     34        34.9.2      9 -1  1  1  1 -1 -1 -1  1 -1
35     35        33.9.1      9 -1 -1  1  1 -1 -1  1 -1  1
36     36        36.9.4      9  1  1 -1 -1  1  1 -1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
37     37       37.10.1     10 -1 -1  1  1  1  1  1  1 -1
38     38       39.10.3     10  1 -1 -1 -1 -1 -1  1  1 -1
39     39       38.10.2     10 -1  1  1  1  1  1 -1 -1  1
40     40       40.10.4     10  1  1 -1 -1 -1 -1 -1 -1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
41     41       42.11.2     11 -1  1  1 -1 -1  1 -1 -1  1
42     42       44.11.4     11  1  1 -1  1  1 -1 -1 -1  1
43     43       43.11.3     11  1 -1 -1  1  1 -1  1  1 -1
44     44       41.11.1     11 -1 -1  1 -1 -1  1  1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
45     45       47.12.3     12  1 -1 -1  1 -1  1  1 -1  1
46     46       45.12.1     12 -1 -1  1 -1  1 -1  1 -1  1
47     47       48.12.4     12  1  1 -1  1 -1  1 -1  1 -1
48     48       46.12.2     12 -1  1  1 -1  1 -1 -1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
49     49       50.13.2     13 -1  1 -1  1  1 -1  1  1  1
50     50       51.13.3     13  1 -1  1 -1 -1  1 -1 -1 -1
51     51       49.13.1     13 -1 -1 -1  1  1 -1 -1 -1 -1
52     52       52.13.4     13  1  1  1 -1 -1  1  1  1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
53     53       56.14.4     14  1  1  1 -1  1 -1  1 -1 -1
54     54       54.14.2     14 -1  1 -1  1 -1  1  1 -1 -1
55     55       53.14.1     14 -1 -1 -1  1 -1  1 -1  1  1
56     56       55.14.3     14  1 -1  1 -1  1 -1 -1  1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
57     57       59.15.3     15  1 -1  1  1 -1 -1 -1  1  1
58     58       58.15.2     15 -1  1 -1 -1  1  1  1 -1 -1
59     59       60.15.4     15  1  1  1  1 -1 -1  1 -1 -1
60     60       57.15.1     15 -1 -1 -1 -1  1  1 -1  1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F  G  H  J
61     61       64.16.4     16  1  1  1  1  1  1  1  1  1
62     62       62.16.2     16 -1  1 -1 -1 -1 -1  1  1  1
63     63       61.16.1     16 -1 -1 -1 -1 -1 -1 -1 -1 -1
64     64       63.16.3     16  1 -1  1  1  1  1 -1 -1 -1
class=design, type= FrF2.blocked 
NOTE: columns run.no and run.no.std.rp are annotation, not part of the data frame
> 
> ########## manual blocked design ####################
> ### example that shows why order of blocks is not randomized
> ### can of course be randomized by user, if appropriate
> FrF2(32,9,blocks=c("Day","Shift"),alias.block.2fis=TRUE, 
+     factor.names=list(Day=c("Wednesday","Thursday"), Shift=c("Morning","Afternoon"),
+         F1="",F2="",F3="",F4="",F5="",F6="",F7=""), default.levels=c("current","new"))
  run.no run.no.std.rp           Blocks      F1      F2      F3      F4      F5
1      1         6.1.6 WednesdayMorning     new current     new     new current
2      2         8.1.8 WednesdayMorning     new     new     new     new     new
3      3         4.1.4 WednesdayMorning current     new     new current     new
4      4         5.1.5 WednesdayMorning     new current current     new current
5      5         2.1.2 WednesdayMorning current current     new current current
6      6         1.1.1 WednesdayMorning current current current current current
7      7         7.1.7 WednesdayMorning     new     new current     new     new
8      8         3.1.3 WednesdayMorning current     new current current     new
       F6      F7
1     new     new
2     new current
3     new     new
4 current current
5     new current
6 current     new
7 current     new
8 current current
   run.no run.no.std.rp             Blocks      F1      F2      F3      F4
9       9        16.2.8 WednesdayAfternoon     new     new     new current
10     10        10.2.2 WednesdayAfternoon current current     new     new
11     11        13.2.5 WednesdayAfternoon     new current current current
12     12        12.2.4 WednesdayAfternoon current     new     new     new
13     13        14.2.6 WednesdayAfternoon     new current     new current
14     14        15.2.7 WednesdayAfternoon     new     new current current
15     15        11.2.3 WednesdayAfternoon current     new current     new
16     16         9.2.1 WednesdayAfternoon current current current     new
        F5      F6      F7
9  current current current
10     new current current
11     new     new current
12 current current     new
13     new current     new
14 current     new     new
15 current     new current
16     new     new     new
   run.no run.no.std.rp          Blocks      F1      F2      F3      F4      F5
17     17        17.3.1 ThursdayMorning current current current     new     new
18     18        23.3.7 ThursdayMorning     new     new current current current
19     19        18.3.2 ThursdayMorning current current     new     new     new
20     20        19.3.3 ThursdayMorning current     new current     new current
21     21        24.3.8 ThursdayMorning     new     new     new current current
22     22        21.3.5 ThursdayMorning     new current current current     new
23     23        20.3.4 ThursdayMorning current     new     new     new current
24     24        22.3.6 ThursdayMorning     new current     new current     new
        F6      F7
17     new current
18     new current
19 current     new
20     new     new
21 current     new
22     new     new
23 current current
24 current current
   run.no run.no.std.rp            Blocks      F1      F2      F3      F4
25     25        27.4.3 ThursdayAfternoon current     new current current
26     26        26.4.2 ThursdayAfternoon current current     new current
27     27        28.4.4 ThursdayAfternoon current     new     new current
28     28        31.4.7 ThursdayAfternoon     new     new current     new
29     29        25.4.1 ThursdayAfternoon current current current current
30     30        29.4.5 ThursdayAfternoon     new current current     new
31     31        32.4.8 ThursdayAfternoon     new     new     new     new
32     32        30.4.6 ThursdayAfternoon     new current     new     new
        F5      F6      F7
25     new current     new
26 current     new     new
27     new     new current
28     new current current
29 current current current
30 current current     new
31     new     new     new
32 current     new current
class=design, type= FrF2.blocked 
NOTE: columns run.no and run.no.std.rp are annotation, not part of the data frame
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("block", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("blockpick")
> ### * blockpick
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: blockpick
> ### Title: Function to show potential block assignments
> ### Aliases: blockpick blockpick.big
> ### Keywords: array design
> 
> ### ** Examples
> 
> ## look at possibilities for running a 32 run design with 6 factors in 8 blocks
> ## running this without alias.block.2fis=TRUE throws an error: not possible
> ## Not run: blockpick(k=5,design="6-1.1",k.block=3)
> ## the 8th to 10th design have more clear 2fis than the earlier ones
> blockpick(k=5,design="6-1.1",k.block=3,alias.block.2fis=TRUE)
$gen
[1] 31

$basics
   nruns  nblocks   ntreat res.base 
      32        8        6        6 

$blockcols
      [,1] [,2] [,3]
 [1,]    3    5    9
 [2,]    3    5   17
 [3,]    3    5   24
 [4,]    3    9   17
 [5,]    3    9   20
 [6,]    3   12   17
 [7,]    3   12   20
 [8,]    3   12   21
 [9,]    3   20   13
[10,]    3   24   13

$alias.2fis.block
$alias.2fis.block[[1]]
[1] "AB" "AC" "AD" "BC" "BD" "CD" "EF"

$alias.2fis.block[[2]]
[1] "AB" "AC" "AE" "BC" "BE" "CE" "DF"

$alias.2fis.block[[3]]
[1] "AB" "AC" "AF" "BC" "BF" "CF" "DE"

$alias.2fis.block[[4]]
[1] "AB" "AD" "AE" "BD" "BE" "CF" "DE"

$alias.2fis.block[[5]]
[1] "AB" "AD" "AF" "BD" "BF" "CE" "DF"

$alias.2fis.block[[6]]
[1] "AB" "AE" "AF" "BE" "BF" "CD" "EF"

$alias.2fis.block[[7]]
[1] "AB" "CD" "CE" "CF" "DE" "DF" "EF"

$alias.2fis.block[[8]]
[1] "AB" "CD" "EF"

$alias.2fis.block[[9]]
[1] "AB" "CE" "DF"

$alias.2fis.block[[10]]
[1] "AB" "CF" "DE"


$nblock.2fis
 [1] 7 7 7 7 7 7 7 3 3 3

$nclear.2fis
 [1]  8  8  8  8  8  8  8 12 12 12

$clear.2fis
$clear.2fis[[1]]
[1] "AE" "AF" "BE" "BF" "CE" "CF" "DE" "DF"

$clear.2fis[[2]]
[1] "AD" "AF" "BD" "BF" "CD" "CF" "DE" "EF"

$clear.2fis[[3]]
[1] "AD" "AE" "BD" "BE" "CD" "CE" "DF" "EF"

$clear.2fis[[4]]
[1] "AC" "AF" "BC" "BF" "CD" "CE" "DF" "EF"

$clear.2fis[[5]]
[1] "AC" "AE" "BC" "BE" "CD" "CF" "DE" "EF"

$clear.2fis[[6]]
[1] "AC" "AD" "BC" "BD" "CE" "CF" "DE" "DF"

$clear.2fis[[7]]
[1] "AC" "AD" "AE" "AF" "BC" "BD" "BE" "BF"

$clear.2fis[[8]]
 [1] "AC" "AD" "AE" "AF" "BC" "BD" "BE" "BF" "CE" "CF" "DE" "DF"

$clear.2fis[[9]]
 [1] "AC" "AD" "AE" "AF" "BC" "BD" "BE" "BF" "CD" "CF" "DE" "EF"

$clear.2fis[[10]]
 [1] "AC" "AD" "AE" "AF" "BC" "BD" "BE" "BF" "CD" "CE" "DF" "EF"


> ## function FrF2 can be used to manually accomodate this 
> des32.6fac.8blocks.MaxC2 <- FrF2(32,6,blocks=c(3,12,21))
> summary(des32.6fac.8blocks.MaxC2)
Call:
FrF2(32, 6, blocks = c(3, 12, 21))

Experimental design of type  FrF2.blocked 
32  runs
blocked design with  8  blocks of size  4 

Factor settings (scale ends):
   A  B  C  D  E  F
1 -1 -1 -1 -1 -1 -1
2  1  1  1  1  1  1

Design generating information:
$legend
[1] A=A B=B C=C D=D E=E F=F

$`generators for design itself`
[1] F=ABCDE

$`block generators`
[1] AB  CD  ACE


no aliasing of main effects or 2fis among experimental factors

Aliased with block main effects:
[1] AB CD EF

The design itself:
  run.no run.no.std.rp Blocks  A  B  C  D  E  F
1      1        14.1.2      1 -1  1  1 -1  1  1
2      2        21.1.4      1  1 -1  1 -1 -1 -1
3      3        20.1.3      1  1 -1 -1  1  1  1
4      4        11.1.1      1 -1  1 -1  1 -1 -1
  run.no run.no.std.rp Blocks  A  B  C  D  E  F
5      5        12.2.1      2 -1  1 -1  1  1  1
6      6        19.2.3      2  1 -1 -1  1 -1 -1
7      7        13.2.2      2 -1  1  1 -1 -1 -1
8      8        22.2.4      2  1 -1  1 -1  1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
9       9        18.3.3      3  1 -1 -1 -1  1 -1
10     10         9.3.1      3 -1  1 -1 -1 -1  1
11     11        23.3.4      3  1 -1  1  1 -1  1
12     12        16.3.2      3 -1  1  1  1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
13     13        17.4.3      4  1 -1 -1 -1 -1  1
14     14        15.4.2      4 -1  1  1  1 -1  1
15     15        24.4.4      4  1 -1  1  1  1 -1
16     16        10.4.1      4 -1  1 -1 -1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
17     17        28.5.3      5  1  1 -1  1  1 -1
18     18        29.5.4      5  1  1  1 -1 -1  1
19     19         3.5.1      5 -1 -1 -1  1 -1  1
20     20         6.5.2      5 -1 -1  1 -1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
21     21        30.6.4      6  1  1  1 -1  1 -1
22     22         4.6.1      6 -1 -1 -1  1  1 -1
23     23         5.6.2      6 -1 -1  1 -1 -1  1
24     24        27.6.3      6  1  1 -1  1 -1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
25     25         8.7.2      7 -1 -1  1  1  1  1
26     26        31.7.4      7  1  1  1  1 -1 -1
27     27         1.7.1      7 -1 -1 -1 -1 -1 -1
28     28        26.7.3      7  1  1 -1 -1  1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
29     29        32.8.4      8  1  1  1  1  1  1
30     30         7.8.2      8 -1 -1  1  1 -1 -1
31     31         2.8.1      8 -1 -1 -1 -1  1  1
32     32        25.8.3      8  1  1 -1 -1 -1 -1
class=design, type= FrF2.blocked 
NOTE: columns run.no and run.no.std.rp are annotation, not part of the data frame
> ## automatic block generation leads to more aliased 2fis
> summary(FrF2(32,6,blocks=8,alias.block.2fis=TRUE))
Call:
FrF2(32, 6, blocks = 8, alias.block.2fis = TRUE)

Experimental design of type  FrF2.blocked 
32  runs
blocked design with  8  blocks of size  4 

Factor settings (scale ends):
   A  B  C  D  E  F
1 -1 -1 -1 -1 -1 -1
2  1  1  1  1  1  1

Design generating information:
$legend
[1] A=A B=B C=C D=D E=E F=F

$`generators for design itself`
[1] F=ABCDE

$`block generators`
[1] AB AC AD


no aliasing of main effects or 2fis among experimental factors

Aliased with block main effects:
[1] AB AC AD BC BD CD EF

The design itself:
  run.no run.no.std.rp Blocks  A  B  C  D  E  F
1      1        16.1.2      1 -1  1  1  1  1 -1
2      2        15.1.1      1 -1  1  1  1 -1  1
3      3        18.1.4      1  1 -1 -1 -1  1 -1
4      4        17.1.3      1  1 -1 -1 -1 -1  1
  run.no run.no.std.rp Blocks  A  B  C  D  E  F
5      5        20.2.4      2  1 -1 -1  1  1  1
6      6        13.2.1      2 -1  1  1 -1 -1 -1
7      7        14.2.2      2 -1  1  1 -1  1  1
8      8        19.2.3      2  1 -1 -1  1 -1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
9       9        22.3.4      3  1 -1  1 -1  1  1
10     10        12.3.2      3 -1  1 -1  1  1  1
11     11        21.3.3      3  1 -1  1 -1 -1 -1
12     12        11.3.1      3 -1  1 -1  1 -1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
13     13        23.4.3      4  1 -1  1  1 -1  1
14     14        24.4.4      4  1 -1  1  1  1 -1
15     15         9.4.1      4 -1  1 -1 -1 -1  1
16     16        10.4.2      4 -1  1 -1 -1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
17     17        25.5.3      5  1  1 -1 -1 -1 -1
18     18        26.5.4      5  1  1 -1 -1  1  1
19     19         7.5.1      5 -1 -1  1  1 -1 -1
20     20         8.5.2      5 -1 -1  1  1  1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
21     21         6.6.2      6 -1 -1  1 -1  1 -1
22     22         5.6.1      6 -1 -1  1 -1 -1  1
23     23        27.6.3      6  1  1 -1  1 -1  1
24     24        28.6.4      6  1  1 -1  1  1 -1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
25     25         4.7.2      7 -1 -1 -1  1  1 -1
26     26        30.7.4      7  1  1  1 -1  1 -1
27     27        29.7.3      7  1  1  1 -1 -1  1
28     28         3.7.1      7 -1 -1 -1  1 -1  1
   run.no run.no.std.rp Blocks  A  B  C  D  E  F
29     29        32.8.4      8  1  1  1  1  1  1
30     30         1.8.1      8 -1 -1 -1 -1 -1 -1
31     31        31.8.3      8  1  1  1  1 -1 -1
32     32         2.8.2      8 -1 -1 -1 -1  1  1
class=design, type= FrF2.blocked 
NOTE: columns run.no and run.no.std.rp are annotation, not part of the data frame
> 
> ## look at possibilities for blocking design 7-3.1 from Chen, Sun, Wu catalogue
> blockpick(4,design="7-3.1",k.block=2,alias.block.2fis=TRUE)
$gen
[1]  7 11 13

$basics
   nruns  nblocks   ntreat res.base 
      16        4        7        4 

$blockcols
     [,1] [,2]
[1,]    3    5
[2,]    3    9
[3,]    3   12
[4,]    5    9
[5,]    5   10
[6,]    6    9
[7,]    6   10

$alias.2fis.block
$alias.2fis.block[[1]]
[1] "AB" "AC" "AE" "BC" "BE" "CE" "DF" "DG" "FG"

$alias.2fis.block[[2]]
[1] "AB" "AD" "AF" "BD" "BF" "CE" "CG" "DF" "EG"

$alias.2fis.block[[3]]
[1] "AB" "AG" "BG" "CD" "CE" "CF" "DE" "DF" "EF"

$alias.2fis.block[[4]]
[1] "AC" "AD" "AG" "BE" "BF" "CD" "CG" "DG" "EF"

$alias.2fis.block[[5]]
[1] "AC" "AF" "BD" "BE" "BG" "CF" "DE" "DG" "EG"

$alias.2fis.block[[6]]
[1] "AD" "AE" "BC" "BF" "BG" "CF" "CG" "DE" "FG"

$alias.2fis.block[[7]]
[1] "AE" "AF" "AG" "BC" "BD" "CD" "EF" "EG" "FG"


$nblock.2fis
[1] 9 9 9 9 9 9 9

$nclear.2fis
[1] 0 0 0 0 0 0 0

$clear.2fis
character(0)

> 
> ## big design
> ## running this throws an error on many machines because of too little memory
> ## Not run: blockpick(6,design="7-1.2",k.block=5,alias.block.2fis=TRUE)
> ## for obtaining a design for this scenario with blockpick.big, 
> ## the number of factors must be increased to 7+k.block=12
> ## designs 12-6.1 and 12-6.2 dont do it, 12-6.3 does
> bpb <- blockpick.big(6,design="12-6.3",k.block=5,alias.block.2fis=TRUE)
> bpb
$orig
[1]  7 11 21 41 51 63

$basics
  nruns nblocks  ntreat 
     64      32       7 

$perms
      [,1] [,2] [,3] [,4] [,5] [,6]
 [1,]    2    3    4    5    6    1
 [2,]    3    2    4    5    6    1
 [3,]    3    4    2    5    6    1
 [4,]    2    4    3    5    6    1
 [5,]    4    2    3    5    6    1
 [6,]    4    3    2    5    6    1
 [7,]    3    4    5    2    6    1
 [8,]    2    4    5    3    6    1
 [9,]    4    2    5    3    6    1
[10,]    4    3    5    2    6    1

$blockcols
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31

$alias.2fis.block
$alias.2fis.block[[1]]
 [1] "A:B" "A:C" "B:C" "A:D" "B:D" "C:D" "A:E" "B:E" "C:E" "D:E" "A:F" "B:F"
[13] "C:F" "D:F" "E:F" "A:G" "B:G" "C:G" "D:G" "E:G" "F:G"

$alias.2fis.block[[2]]
 [1] "A:B" "A:C" "B:C" "A:D" "B:D" "C:D" "A:E" "B:E" "C:E" "D:E" "A:F" "B:F"
[13] "C:F" "D:F" "E:F" "A:G" "B:G" "C:G" "D:G" "E:G" "F:G"

$alias.2fis.block[[3]]
 [1] "A:B" "A:C" "B:C" "A:D" "B:D" "C:D" "A:E" "B:E" "C:E" "D:E" "A:F" "B:F"
[13] "C:F" "D:F" "E:F" "A:G" "B:G" "C:G" "D:G" "E:G" "F:G"

$alias.2fis.block[[4]]
 [1] "A:B" "A:C" "B:C" "A:D" "B:D" "C:D" "A:E" "B:E" "C:E" "D:E" "A:F" "B:F"
[13] "C:F" "D:F" "E:F" "A:G" "B:G" "C:G" "D:G" "E:G" "F:G"

$alias.2fis.block[[5]]
 [1] "A:B" "A:C" "B:C" "A:D" "B:D" "C:D" "A:E" "B:E" "C:E" "D:E" "A:F" "B:F"
[13] "C:F" "D:F" "E:F" "A:G" "B:G" "C:G" "D:G" "E:G" "F:G"

$alias.2fis.block[[6]]
 [1] "A:B" "A:C" "B:C" "A:D" "B:D" "C:D" "A:E" "B:E" "C:E" "D:E" "A:F" "B:F"
[13] "C:F" "D:F" "E:F" "A:G" "B:G" "C:G" "D:G" "E:G" "F:G"

$alias.2fis.block[[7]]
 [1] "A:B" "A:C" "B:C" "A:D" "B:D" "C:D" "A:E" "B:E" "C:E" "D:E" "A:F" "B:F"
[13] "C:F" "D:F" "E:F" "A:G" "B:G" "C:G" "D:G" "E:G" "F:G"

$alias.2fis.block[[8]]
 [1] "A:B" "A:C" "B:C" "A:D" "B:D" "C:D" "A:E" "B:E" "C:E" "D:E" "A:F" "B:F"
[13] "C:F" "D:F" "E:F" "A:G" "B:G" "C:G" "D:G" "E:G" "F:G"

$alias.2fis.block[[9]]
 [1] "A:B" "A:C" "B:C" "A:D" "B:D" "C:D" "A:E" "B:E" "C:E" "D:E" "A:F" "B:F"
[13] "C:F" "D:F" "E:F" "A:G" "B:G" "C:G" "D:G" "E:G" "F:G"

$alias.2fis.block[[10]]
 [1] "A:B" "A:C" "B:C" "A:D" "B:D" "C:D" "A:E" "B:E" "C:E" "D:E" "A:F" "B:F"
[13] "C:F" "D:F" "E:F" "A:G" "B:G" "C:G" "D:G" "E:G" "F:G"


$gen
      [,1] [,2] [,3] [,4] [,5] [,6]
 [1,]   35   37   42   52   57   63
 [2,]   35   38   41   52   58   63
 [3,]   37   38   41   50   60   63
 [4,]   37   35   44   50   57   63
 [5,]   38   35   44   49   58   63
 [6,]   38   37   42   49   60   63
 [7,]   41   42   37   50   60   63
 [8,]   41   35   44   50   53   63
 [9,]   42   35   44   49   54   63
[10,]   42   41   38   49   60   63

> ## based on the result of blockpick.big, a blocked design can be obtained as follows:
> ## (not run for saving check time on CRAN)
> ## Not run: 
> ##D des64.7fac.32blocks <- FrF2(64,gen=bpb$gen[1,], blocks = as.list(1:5), 
> ##D    alias.block.2fis=TRUE)
> ##D str(des64.7fac.32blocks)
> ##D ## if the seven factors are to be named A,...,G:
> ##D des64.7fac.32blocks <- FrF2(64,gen=bpb$gen[1,], blocks = as.list(1:5), 
> ##D    alias.block.2fis=TRUE, factor.names=c(paste("b",1:5,sep=""),Letters[1:7]))
> ##D str(des64.7fac.32blocks)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("blockpick", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("compromise")
> ### * compromise
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compromise
> ### Title: Function to support estimability requests for compromise designs
> ### Aliases: compromise
> ### Keywords: array design
> 
> ### ** Examples
> 
> ## seven factors two of which are in group G1
> C1 <- compromise(7, c(2,4), class=1)
a clear design requires at least 32 runs
> C1$perms.full  ## the same for all classes
      [,1] [,2] [,3] [,4] [,5] [,6] [,7]
 [1,]    1    2    3    4    5    6    7
 [2,]    1    2    3    5    4    6    7
 [3,]    1    2    3    6    4    5    7
 [4,]    1    2    3    7    4    5    6
 [5,]    1    2    4    3    5    6    7
 [6,]    1    3    2    4    5    6    7
 [7,]    1    3    2    5    4    6    7
 [8,]    1    3    2    6    4    5    7
 [9,]    1    3    2    7    4    5    6
[10,]    1    4    2    5    3    6    7
[11,]    1    4    2    6    3    5    7
[12,]    1    4    2    7    3    5    6
[13,]    1    5    2    6    3    4    7
[14,]    1    5    2    7    3    4    6
[15,]    1    6    2    7    3    4    5
[16,]    2    1    3    4    5    6    7
[17,]    2    1    3    5    4    6    7
[18,]    2    1    3    6    4    5    7
[19,]    2    1    3    7    4    5    6
[20,]    2    1    4    3    5    6    7
[21,]    3    1    4    2    5    6    7
> C1$requirement
[1] "BD"
> C2 <- compromise(7, c(2,4), class=2)
a clear design requires at least 64 runs (resolution V)
> C2$requirement
 [1] "BD" "AC" "AE" "AF" "AG" "CE" "CF" "CG" "EF" "EG" "FG"
> C3 <- compromise(7, c(2,4), class=3)
a clear design requires at least 32 runs
> C3$requirement
 [1] "BD" "AB" "AD" "BC" "CD" "BE" "DE" "BF" "DF" "BG" "DG"
> C4 <- compromise(7, c(2,4), class=4)
a clear design requires at least 32 runs
> C4$requirement
 [1] "AB" "AD" "BC" "CD" "BE" "DE" "BF" "DF" "BG" "DG"
> 
> ## Not run: 
> ##D ########## usage of estimable ###########################
> ##D   ## design with with BD clear in 16 runs
> ##D   FrF2(16,7,estimable = C1$requirement)
> ##D   ## design with BD estimable on a distinct column in 16 runs (any design will do,
> ##D   ##    if resolution IV!!!
> ##D   FrF2(16,7,estimable = C1$requirement, clear=FALSE, perms=C1$perms.full)
> ##D   ## all four classes, mostly clear, for 32 runs
> ##D   FrF2(32,7,estimable = C1$requirement)
> ##D   FrF2(32,7,estimable = C2$requirement)   ## requires resolution V
> ##D          ## as clear class 2 compromise designs do not exist due to Ke et al. 2005
> ##D   FrF2(32,7,estimable = C2$requirement, clear=FALSE, perms=C2$perms.full)
> ##D   FrF2(32,7,estimable = C3$requirement)
> ##D   FrF2(32,7,estimable = C4$requirement)
> ##D   ## two additional factors H and J that do not show up in the requirement set
> ##D   FrF2(32,9,estimable = C3$requirement)
> ##D   ## two additional factors H and J that do not show up in the requirement set
> ##D   FrF2(32,9,estimable = C3$requirement, clear=FALSE)
> ##D   ## note that this is not possible for distinct designs in case perms is needed,
> ##D   ## because perms must have nfactors columns
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compromise", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("estimable.2fis")
> ### * estimable.2fis
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: estimable.2fis
> ### Title: Statistical and algorithmic aspects of requesting 2-factor
> ###   interactions to be estimable in FrF2
> ### Aliases: estimable.2fis
> ### Keywords: array design
> 
> ### ** Examples
> 
> ########## usage of estimable ###########################
>   ## design with all 2fis of factor A estimable on distinct columns in 16 runs
>   FrF2(16, nfactors=6, estimable = rbind(rep(1,5),2:6), clear=FALSE)
    A  B  C  D  E  F
1  -1 -1  1 -1  1 -1
2   1 -1  1 -1 -1  1
3  -1 -1 -1  1 -1  1
4   1  1 -1  1 -1  1
5  -1  1 -1 -1  1  1
6   1 -1 -1  1  1 -1
7  -1  1 -1  1  1 -1
8  -1  1  1  1 -1 -1
9   1 -1  1  1 -1 -1
10 -1 -1 -1 -1 -1 -1
11  1 -1 -1 -1  1  1
12 -1  1  1 -1 -1  1
13 -1 -1  1  1  1  1
14  1  1  1 -1  1 -1
15  1  1 -1 -1 -1 -1
16  1  1  1  1  1  1
class=design, type= FrF2.estimable 
>   FrF2(16, nfactors=6, estimable = c("AB","AC","AD","AE","AF"), clear=FALSE)
    A  B  C  D  E  F
1   1  1 -1  1 -1  1
2  -1  1  1  1 -1 -1
3   1 -1  1 -1 -1  1
4  -1  1 -1  1  1 -1
5   1  1  1  1  1  1
6  -1  1 -1 -1  1  1
7  -1  1  1 -1 -1  1
8   1 -1 -1 -1  1  1
9  -1 -1  1  1  1  1
10  1  1  1 -1  1 -1
11 -1 -1 -1 -1 -1 -1
12 -1 -1 -1  1 -1  1
13  1  1 -1 -1 -1 -1
14 -1 -1  1 -1  1 -1
15  1 -1  1  1 -1 -1
16  1 -1 -1  1  1 -1
class=design, type= FrF2.estimable 
>   FrF2(16, nfactors=6, estimable = formula("~A+B+C+D+E+F+A:(B+C+D+E+F)"), 
+        clear=FALSE)
    A  B  C  D  E  F
1   1  1  1 -1  1 -1
2  -1  1 -1 -1  1  1
3   1  1 -1  1 -1  1
4  -1 -1 -1  1 -1  1
5   1 -1 -1  1  1 -1
6   1 -1 -1 -1  1  1
7   1  1  1  1  1  1
8   1  1 -1 -1 -1 -1
9  -1  1  1 -1 -1  1
10 -1 -1  1 -1  1 -1
11  1 -1  1  1 -1 -1
12 -1  1  1  1 -1 -1
13  1 -1  1 -1 -1  1
14 -1 -1  1  1  1  1
15 -1 -1 -1 -1 -1 -1
16 -1  1 -1  1  1 -1
class=design, type= FrF2.estimable 
>             ## formula would also accept self-defined factor names
>             ## from factor.names instead of letters A, B, C, ...
>             
>   ## estimable does not need any other input
>   FrF2(estimable=formula("~(A+B+C)^2+D+E"))
    A  B  C  D  E
1   1  1 -1  1 -1
2  -1  1 -1  1  1
3  -1  1  1 -1  1
4   1  1  1  1  1
5   1 -1  1 -1  1
6  -1  1 -1 -1 -1
7  -1 -1 -1 -1  1
8   1 -1 -1  1  1
9  -1  1  1  1 -1
10  1  1 -1 -1  1
11  1 -1  1  1 -1
12  1  1  1 -1 -1
13 -1 -1  1  1  1
14 -1 -1 -1  1 -1
15 -1 -1  1 -1 -1
16  1 -1 -1 -1 -1
class=design, type= FrF2.estimable 
> 
>   ## estimable with factor names 
>   ## resolution three must be permitted, as FrF2 first determines that 8 runs 
>   ##     would be sufficient degrees of freedom to estimate all effects 
>   ##     and then tries to accomodate the 2fis from the model clear of aliasing in 8 runs
>   FrF2(estimable=formula("~one+two+three+four+two:three+two:four"), 
+        factor.names=c("one","two","three","four"), res3=TRUE)
  one two three four
1   1   1    -1   -1
2   1  -1    -1   -1
3  -1  -1     1   -1
4   1  -1     1    1
5  -1  -1    -1    1
6   1   1     1    1
7  -1   1    -1    1
8  -1   1     1   -1
class=design, type= FrF2.estimable 
>   ## clear=FALSE allows to allocate all effects on distinct columns in the 
>   ##     8 run MA resolution IV design
>   FrF2(estimable=formula("~one+two+three+four+two:three+two:four"), 
+        factor.names=c("one","two","three","four"), clear=FALSE)
  one two three four
1  -1   1    -1    1
2   1   1     1    1
3  -1   1     1   -1
4  -1  -1     1    1
5   1   1    -1   -1
6   1  -1    -1    1
7   1  -1     1   -1
8  -1  -1    -1   -1
class=design, type= FrF2.estimable 
> 
>   ## 7 factors instead of 6, but no requirements for factor G
>   FrF2(16, nfactors=7, estimable = formula("~A+B+C+D+E+F+A:(B+C+D+E+F)"), 
+        clear=FALSE)
    A  B  C  D  E  F  G
1  -1  1  1 -1 -1  1  1
2  -1  1 -1  1  1 -1  1
3   1 -1  1 -1 -1  1 -1
4  -1 -1  1 -1  1 -1  1
5   1 -1 -1  1  1 -1 -1
6  -1  1 -1 -1  1  1 -1
7   1  1  1 -1  1 -1 -1
8   1 -1 -1 -1  1  1  1
9  -1 -1 -1  1 -1  1  1
10  1  1 -1  1 -1  1 -1
11  1  1  1  1  1  1  1
12 -1 -1 -1 -1 -1 -1 -1
13 -1  1  1  1 -1 -1 -1
14  1  1 -1 -1 -1 -1  1
15  1 -1  1  1 -1 -1  1
16 -1 -1  1  1  1  1 -1
class=design, type= FrF2.estimable 
>   ## larger design for handling this with all required effects clear
>   FrF2(32, nfactors=7, estimable = formula("~A+B+C+D+E+F+A:(B+C+D+E+F)"), 
+        clear=TRUE)
    A  B  C  D  E  F  G
1   1 -1  1  1 -1 -1  1
2   1 -1 -1  1 -1  1 -1
3   1 -1 -1 -1  1 -1  1
4  -1  1 -1 -1  1  1  1
5  -1 -1  1 -1  1  1  1
6   1  1 -1 -1 -1  1  1
7  -1  1  1  1 -1  1  1
8   1  1 -1  1  1 -1 -1
9   1  1  1  1 -1  1 -1
10 -1 -1 -1  1 -1  1  1
11 -1 -1  1 -1 -1  1 -1
12  1 -1  1 -1 -1  1  1
13  1  1  1 -1  1 -1  1
14  1  1  1 -1 -1 -1 -1
15  1 -1 -1  1  1  1  1
16  1 -1  1  1  1 -1 -1
17 -1  1 -1  1 -1 -1 -1
18 -1 -1  1  1 -1 -1 -1
19 -1  1 -1  1  1 -1  1
20 -1 -1 -1 -1 -1 -1  1
21  1 -1 -1 -1 -1 -1 -1
22 -1  1 -1 -1 -1  1 -1
23 -1 -1  1  1  1 -1  1
24 -1  1  1  1  1  1 -1
25  1  1 -1 -1  1  1 -1
26 -1  1  1 -1 -1 -1  1
27  1  1 -1  1 -1 -1  1
28 -1 -1 -1 -1  1 -1 -1
29  1  1  1  1  1  1  1
30 -1 -1 -1  1  1  1 -1
31 -1  1  1 -1  1 -1 -1
32  1 -1  1 -1  1  1 -1
class=design, type= FrF2.estimable 
>   ## 16 run design for handling this with required 2fis clear, but main effects aliased
>   ## (does not usually make sense)
>   FrF2(16, nfactors=7, estimable = formula("~A+B+C+D+E+F+A:(B+C+D+E+F)"), 
+        clear=TRUE, res3=TRUE)
    A  B  C  D  E  F  G
1  -1  1  1 -1  1 -1 -1
2   1 -1 -1 -1  1  1  1
3   1 -1  1  1 -1 -1  1
4  -1  1 -1 -1 -1 -1  1
5  -1 -1 -1 -1  1  1  1
6  -1  1  1  1  1  1  1
7   1  1 -1 -1 -1 -1  1
8  -1  1 -1  1 -1  1 -1
9  -1 -1 -1  1  1 -1 -1
10  1  1  1  1  1  1  1
11  1  1 -1  1 -1  1 -1
12 -1 -1  1 -1 -1  1 -1
13  1 -1  1 -1 -1  1 -1
14  1 -1 -1  1  1 -1 -1
15  1  1  1 -1  1 -1 -1
16 -1 -1  1  1 -1 -1  1
class=design, type= FrF2.estimable 
> 
> ## example for necessity of perms for the clear=FALSE case
> ## based on Wu and Chen Example 1
>   ## Not run: 
> ##D   ## runs per default about max.time=60 seconds, before throwing error with 
> ##D   ##        interim results
> ##D   ## results could be used in select.catlg and perm.start for restarting with 
> ##D   ##       calculation of further possibilities
> ##D   FrF2(32, nfactors=11, estimable = formula("~(A+B+C+D+E+F)^2"), clear=FALSE)
> ##D   ## would run for a long long time (I have not yet been patient enough)
> ##D   FrF2(32, nfactors=11, estimable = formula("~(A+B+C+D+E+F)^2"), clear=FALSE, 
> ##D        max.time=Inf)
> ##D   
> ## End(Not run)
>   ## can be easily done with perms, 
>   ## as only different subsets of six factors are non-isomorphic
>   perms.6 <- combn(11,6)
>   perms.full <- matrix(NA,ncol(perms.6),11)
>   for (i in 1:ncol(perms.6))
+      perms.full[i,] <- c(perms.6[,i],setdiff(1:11,perms.6[,i]))
>   ## function compromise will calculate the necessary perms entries automatically
>   compromise(11,1:6)$perms.full
a clear design requires at least 128 runs (resolution V)
       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]
  [1,]    1    2    3    4    5    6    7    8    9    10    11
  [2,]    1    2    3    4    5    7    6    8    9    10    11
  [3,]    1    2    3    4    5    8    6    7    9    10    11
  [4,]    1    2    3    4    5    9    6    7    8    10    11
  [5,]    1    2    3    4    5   10    6    7    8     9    11
  [6,]    1    2    3    4    5   11    6    7    8     9    10
  [7,]    1    2    3    4    6    7    5    8    9    10    11
  [8,]    1    2    3    4    6    8    5    7    9    10    11
  [9,]    1    2    3    4    6    9    5    7    8    10    11
 [10,]    1    2    3    4    6   10    5    7    8     9    11
 [11,]    1    2    3    4    6   11    5    7    8     9    10
 [12,]    1    2    3    4    7    8    5    6    9    10    11
 [13,]    1    2    3    4    7    9    5    6    8    10    11
 [14,]    1    2    3    4    7   10    5    6    8     9    11
 [15,]    1    2    3    4    7   11    5    6    8     9    10
 [16,]    1    2    3    4    8    9    5    6    7    10    11
 [17,]    1    2    3    4    8   10    5    6    7     9    11
 [18,]    1    2    3    4    8   11    5    6    7     9    10
 [19,]    1    2    3    4    9   10    5    6    7     8    11
 [20,]    1    2    3    4    9   11    5    6    7     8    10
 [21,]    1    2    3    4   10   11    5    6    7     8     9
 [22,]    1    2    3    5    6    7    4    8    9    10    11
 [23,]    1    2    3    5    6    8    4    7    9    10    11
 [24,]    1    2    3    5    6    9    4    7    8    10    11
 [25,]    1    2    3    5    6   10    4    7    8     9    11
 [26,]    1    2    3    5    6   11    4    7    8     9    10
 [27,]    1    2    3    5    7    8    4    6    9    10    11
 [28,]    1    2    3    5    7    9    4    6    8    10    11
 [29,]    1    2    3    5    7   10    4    6    8     9    11
 [30,]    1    2    3    5    7   11    4    6    8     9    10
 [31,]    1    2    3    5    8    9    4    6    7    10    11
 [32,]    1    2    3    5    8   10    4    6    7     9    11
 [33,]    1    2    3    5    8   11    4    6    7     9    10
 [34,]    1    2    3    5    9   10    4    6    7     8    11
 [35,]    1    2    3    5    9   11    4    6    7     8    10
 [36,]    1    2    3    5   10   11    4    6    7     8     9
 [37,]    1    2    3    6    7    8    4    5    9    10    11
 [38,]    1    2    3    6    7    9    4    5    8    10    11
 [39,]    1    2    3    6    7   10    4    5    8     9    11
 [40,]    1    2    3    6    7   11    4    5    8     9    10
 [41,]    1    2    3    6    8    9    4    5    7    10    11
 [42,]    1    2    3    6    8   10    4    5    7     9    11
 [43,]    1    2    3    6    8   11    4    5    7     9    10
 [44,]    1    2    3    6    9   10    4    5    7     8    11
 [45,]    1    2    3    6    9   11    4    5    7     8    10
 [46,]    1    2    3    6   10   11    4    5    7     8     9
 [47,]    1    2    3    7    8    9    4    5    6    10    11
 [48,]    1    2    3    7    8   10    4    5    6     9    11
 [49,]    1    2    3    7    8   11    4    5    6     9    10
 [50,]    1    2    3    7    9   10    4    5    6     8    11
 [51,]    1    2    3    7    9   11    4    5    6     8    10
 [52,]    1    2    3    7   10   11    4    5    6     8     9
 [53,]    1    2    3    8    9   10    4    5    6     7    11
 [54,]    1    2    3    8    9   11    4    5    6     7    10
 [55,]    1    2    3    8   10   11    4    5    6     7     9
 [56,]    1    2    3    9   10   11    4    5    6     7     8
 [57,]    1    2    4    5    6    7    3    8    9    10    11
 [58,]    1    2    4    5    6    8    3    7    9    10    11
 [59,]    1    2    4    5    6    9    3    7    8    10    11
 [60,]    1    2    4    5    6   10    3    7    8     9    11
 [61,]    1    2    4    5    6   11    3    7    8     9    10
 [62,]    1    2    4    5    7    8    3    6    9    10    11
 [63,]    1    2    4    5    7    9    3    6    8    10    11
 [64,]    1    2    4    5    7   10    3    6    8     9    11
 [65,]    1    2    4    5    7   11    3    6    8     9    10
 [66,]    1    2    4    5    8    9    3    6    7    10    11
 [67,]    1    2    4    5    8   10    3    6    7     9    11
 [68,]    1    2    4    5    8   11    3    6    7     9    10
 [69,]    1    2    4    5    9   10    3    6    7     8    11
 [70,]    1    2    4    5    9   11    3    6    7     8    10
 [71,]    1    2    4    5   10   11    3    6    7     8     9
 [72,]    1    2    4    6    7    8    3    5    9    10    11
 [73,]    1    2    4    6    7    9    3    5    8    10    11
 [74,]    1    2    4    6    7   10    3    5    8     9    11
 [75,]    1    2    4    6    7   11    3    5    8     9    10
 [76,]    1    2    4    6    8    9    3    5    7    10    11
 [77,]    1    2    4    6    8   10    3    5    7     9    11
 [78,]    1    2    4    6    8   11    3    5    7     9    10
 [79,]    1    2    4    6    9   10    3    5    7     8    11
 [80,]    1    2    4    6    9   11    3    5    7     8    10
 [81,]    1    2    4    6   10   11    3    5    7     8     9
 [82,]    1    2    4    7    8    9    3    5    6    10    11
 [83,]    1    2    4    7    8   10    3    5    6     9    11
 [84,]    1    2    4    7    8   11    3    5    6     9    10
 [85,]    1    2    4    7    9   10    3    5    6     8    11
 [86,]    1    2    4    7    9   11    3    5    6     8    10
 [87,]    1    2    4    7   10   11    3    5    6     8     9
 [88,]    1    2    4    8    9   10    3    5    6     7    11
 [89,]    1    2    4    8    9   11    3    5    6     7    10
 [90,]    1    2    4    8   10   11    3    5    6     7     9
 [91,]    1    2    4    9   10   11    3    5    6     7     8
 [92,]    1    2    5    6    7    8    3    4    9    10    11
 [93,]    1    2    5    6    7    9    3    4    8    10    11
 [94,]    1    2    5    6    7   10    3    4    8     9    11
 [95,]    1    2    5    6    7   11    3    4    8     9    10
 [96,]    1    2    5    6    8    9    3    4    7    10    11
 [97,]    1    2    5    6    8   10    3    4    7     9    11
 [98,]    1    2    5    6    8   11    3    4    7     9    10
 [99,]    1    2    5    6    9   10    3    4    7     8    11
[100,]    1    2    5    6    9   11    3    4    7     8    10
[101,]    1    2    5    6   10   11    3    4    7     8     9
[102,]    1    2    5    7    8    9    3    4    6    10    11
[103,]    1    2    5    7    8   10    3    4    6     9    11
[104,]    1    2    5    7    8   11    3    4    6     9    10
[105,]    1    2    5    7    9   10    3    4    6     8    11
[106,]    1    2    5    7    9   11    3    4    6     8    10
[107,]    1    2    5    7   10   11    3    4    6     8     9
[108,]    1    2    5    8    9   10    3    4    6     7    11
[109,]    1    2    5    8    9   11    3    4    6     7    10
[110,]    1    2    5    8   10   11    3    4    6     7     9
[111,]    1    2    5    9   10   11    3    4    6     7     8
[112,]    1    2    6    7    8    9    3    4    5    10    11
[113,]    1    2    6    7    8   10    3    4    5     9    11
[114,]    1    2    6    7    8   11    3    4    5     9    10
[115,]    1    2    6    7    9   10    3    4    5     8    11
[116,]    1    2    6    7    9   11    3    4    5     8    10
[117,]    1    2    6    7   10   11    3    4    5     8     9
[118,]    1    2    6    8    9   10    3    4    5     7    11
[119,]    1    2    6    8    9   11    3    4    5     7    10
[120,]    1    2    6    8   10   11    3    4    5     7     9
[121,]    1    2    6    9   10   11    3    4    5     7     8
[122,]    1    2    7    8    9   10    3    4    5     6    11
[123,]    1    2    7    8    9   11    3    4    5     6    10
[124,]    1    2    7    8   10   11    3    4    5     6     9
[125,]    1    2    7    9   10   11    3    4    5     6     8
[126,]    1    2    8    9   10   11    3    4    5     6     7
[127,]    1    3    4    5    6    7    2    8    9    10    11
[128,]    1    3    4    5    6    8    2    7    9    10    11
[129,]    1    3    4    5    6    9    2    7    8    10    11
[130,]    1    3    4    5    6   10    2    7    8     9    11
[131,]    1    3    4    5    6   11    2    7    8     9    10
[132,]    1    3    4    5    7    8    2    6    9    10    11
[133,]    1    3    4    5    7    9    2    6    8    10    11
[134,]    1    3    4    5    7   10    2    6    8     9    11
[135,]    1    3    4    5    7   11    2    6    8     9    10
[136,]    1    3    4    5    8    9    2    6    7    10    11
[137,]    1    3    4    5    8   10    2    6    7     9    11
[138,]    1    3    4    5    8   11    2    6    7     9    10
[139,]    1    3    4    5    9   10    2    6    7     8    11
[140,]    1    3    4    5    9   11    2    6    7     8    10
[141,]    1    3    4    5   10   11    2    6    7     8     9
[142,]    1    3    4    6    7    8    2    5    9    10    11
[143,]    1    3    4    6    7    9    2    5    8    10    11
[144,]    1    3    4    6    7   10    2    5    8     9    11
[145,]    1    3    4    6    7   11    2    5    8     9    10
[146,]    1    3    4    6    8    9    2    5    7    10    11
[147,]    1    3    4    6    8   10    2    5    7     9    11
[148,]    1    3    4    6    8   11    2    5    7     9    10
[149,]    1    3    4    6    9   10    2    5    7     8    11
[150,]    1    3    4    6    9   11    2    5    7     8    10
[151,]    1    3    4    6   10   11    2    5    7     8     9
[152,]    1    3    4    7    8    9    2    5    6    10    11
[153,]    1    3    4    7    8   10    2    5    6     9    11
[154,]    1    3    4    7    8   11    2    5    6     9    10
[155,]    1    3    4    7    9   10    2    5    6     8    11
[156,]    1    3    4    7    9   11    2    5    6     8    10
[157,]    1    3    4    7   10   11    2    5    6     8     9
[158,]    1    3    4    8    9   10    2    5    6     7    11
[159,]    1    3    4    8    9   11    2    5    6     7    10
[160,]    1    3    4    8   10   11    2    5    6     7     9
[161,]    1    3    4    9   10   11    2    5    6     7     8
[162,]    1    3    5    6    7    8    2    4    9    10    11
[163,]    1    3    5    6    7    9    2    4    8    10    11
[164,]    1    3    5    6    7   10    2    4    8     9    11
[165,]    1    3    5    6    7   11    2    4    8     9    10
[166,]    1    3    5    6    8    9    2    4    7    10    11
[167,]    1    3    5    6    8   10    2    4    7     9    11
[168,]    1    3    5    6    8   11    2    4    7     9    10
[169,]    1    3    5    6    9   10    2    4    7     8    11
[170,]    1    3    5    6    9   11    2    4    7     8    10
[171,]    1    3    5    6   10   11    2    4    7     8     9
[172,]    1    3    5    7    8    9    2    4    6    10    11
[173,]    1    3    5    7    8   10    2    4    6     9    11
[174,]    1    3    5    7    8   11    2    4    6     9    10
[175,]    1    3    5    7    9   10    2    4    6     8    11
[176,]    1    3    5    7    9   11    2    4    6     8    10
[177,]    1    3    5    7   10   11    2    4    6     8     9
[178,]    1    3    5    8    9   10    2    4    6     7    11
[179,]    1    3    5    8    9   11    2    4    6     7    10
[180,]    1    3    5    8   10   11    2    4    6     7     9
[181,]    1    3    5    9   10   11    2    4    6     7     8
[182,]    1    3    6    7    8    9    2    4    5    10    11
[183,]    1    3    6    7    8   10    2    4    5     9    11
[184,]    1    3    6    7    8   11    2    4    5     9    10
[185,]    1    3    6    7    9   10    2    4    5     8    11
[186,]    1    3    6    7    9   11    2    4    5     8    10
[187,]    1    3    6    7   10   11    2    4    5     8     9
[188,]    1    3    6    8    9   10    2    4    5     7    11
[189,]    1    3    6    8    9   11    2    4    5     7    10
[190,]    1    3    6    8   10   11    2    4    5     7     9
[191,]    1    3    6    9   10   11    2    4    5     7     8
[192,]    1    3    7    8    9   10    2    4    5     6    11
[193,]    1    3    7    8    9   11    2    4    5     6    10
[194,]    1    3    7    8   10   11    2    4    5     6     9
[195,]    1    3    7    9   10   11    2    4    5     6     8
[196,]    1    3    8    9   10   11    2    4    5     6     7
[197,]    1    4    5    6    7    8    2    3    9    10    11
[198,]    1    4    5    6    7    9    2    3    8    10    11
[199,]    1    4    5    6    7   10    2    3    8     9    11
[200,]    1    4    5    6    7   11    2    3    8     9    10
[201,]    1    4    5    6    8    9    2    3    7    10    11
[202,]    1    4    5    6    8   10    2    3    7     9    11
[203,]    1    4    5    6    8   11    2    3    7     9    10
[204,]    1    4    5    6    9   10    2    3    7     8    11
[205,]    1    4    5    6    9   11    2    3    7     8    10
[206,]    1    4    5    6   10   11    2    3    7     8     9
[207,]    1    4    5    7    8    9    2    3    6    10    11
[208,]    1    4    5    7    8   10    2    3    6     9    11
[209,]    1    4    5    7    8   11    2    3    6     9    10
[210,]    1    4    5    7    9   10    2    3    6     8    11
[211,]    1    4    5    7    9   11    2    3    6     8    10
[212,]    1    4    5    7   10   11    2    3    6     8     9
[213,]    1    4    5    8    9   10    2    3    6     7    11
[214,]    1    4    5    8    9   11    2    3    6     7    10
[215,]    1    4    5    8   10   11    2    3    6     7     9
[216,]    1    4    5    9   10   11    2    3    6     7     8
[217,]    1    4    6    7    8    9    2    3    5    10    11
[218,]    1    4    6    7    8   10    2    3    5     9    11
[219,]    1    4    6    7    8   11    2    3    5     9    10
[220,]    1    4    6    7    9   10    2    3    5     8    11
[221,]    1    4    6    7    9   11    2    3    5     8    10
[222,]    1    4    6    7   10   11    2    3    5     8     9
[223,]    1    4    6    8    9   10    2    3    5     7    11
[224,]    1    4    6    8    9   11    2    3    5     7    10
[225,]    1    4    6    8   10   11    2    3    5     7     9
[226,]    1    4    6    9   10   11    2    3    5     7     8
[227,]    1    4    7    8    9   10    2    3    5     6    11
[228,]    1    4    7    8    9   11    2    3    5     6    10
[229,]    1    4    7    8   10   11    2    3    5     6     9
[230,]    1    4    7    9   10   11    2    3    5     6     8
[231,]    1    4    8    9   10   11    2    3    5     6     7
[232,]    1    5    6    7    8    9    2    3    4    10    11
[233,]    1    5    6    7    8   10    2    3    4     9    11
[234,]    1    5    6    7    8   11    2    3    4     9    10
[235,]    1    5    6    7    9   10    2    3    4     8    11
[236,]    1    5    6    7    9   11    2    3    4     8    10
[237,]    1    5    6    7   10   11    2    3    4     8     9
[238,]    1    5    6    8    9   10    2    3    4     7    11
[239,]    1    5    6    8    9   11    2    3    4     7    10
[240,]    1    5    6    8   10   11    2    3    4     7     9
[241,]    1    5    6    9   10   11    2    3    4     7     8
[242,]    1    5    7    8    9   10    2    3    4     6    11
[243,]    1    5    7    8    9   11    2    3    4     6    10
[244,]    1    5    7    8   10   11    2    3    4     6     9
[245,]    1    5    7    9   10   11    2    3    4     6     8
[246,]    1    5    8    9   10   11    2    3    4     6     7
[247,]    1    6    7    8    9   10    2    3    4     5    11
[248,]    1    6    7    8    9   11    2    3    4     5    10
[249,]    1    6    7    8   10   11    2    3    4     5     9
[250,]    1    6    7    9   10   11    2    3    4     5     8
[251,]    1    6    8    9   10   11    2    3    4     5     7
[252,]    1    7    8    9   10   11    2    3    4     5     6
[253,]    2    3    4    5    6    7    1    8    9    10    11
[254,]    2    3    4    5    6    8    1    7    9    10    11
[255,]    2    3    4    5    6    9    1    7    8    10    11
[256,]    2    3    4    5    6   10    1    7    8     9    11
[257,]    2    3    4    5    6   11    1    7    8     9    10
[258,]    2    3    4    5    7    8    1    6    9    10    11
[259,]    2    3    4    5    7    9    1    6    8    10    11
[260,]    2    3    4    5    7   10    1    6    8     9    11
[261,]    2    3    4    5    7   11    1    6    8     9    10
[262,]    2    3    4    5    8    9    1    6    7    10    11
[263,]    2    3    4    5    8   10    1    6    7     9    11
[264,]    2    3    4    5    8   11    1    6    7     9    10
[265,]    2    3    4    5    9   10    1    6    7     8    11
[266,]    2    3    4    5    9   11    1    6    7     8    10
[267,]    2    3    4    5   10   11    1    6    7     8     9
[268,]    2    3    4    6    7    8    1    5    9    10    11
[269,]    2    3    4    6    7    9    1    5    8    10    11
[270,]    2    3    4    6    7   10    1    5    8     9    11
[271,]    2    3    4    6    7   11    1    5    8     9    10
[272,]    2    3    4    6    8    9    1    5    7    10    11
[273,]    2    3    4    6    8   10    1    5    7     9    11
[274,]    2    3    4    6    8   11    1    5    7     9    10
[275,]    2    3    4    6    9   10    1    5    7     8    11
[276,]    2    3    4    6    9   11    1    5    7     8    10
[277,]    2    3    4    6   10   11    1    5    7     8     9
[278,]    2    3    4    7    8    9    1    5    6    10    11
[279,]    2    3    4    7    8   10    1    5    6     9    11
[280,]    2    3    4    7    8   11    1    5    6     9    10
[281,]    2    3    4    7    9   10    1    5    6     8    11
[282,]    2    3    4    7    9   11    1    5    6     8    10
[283,]    2    3    4    7   10   11    1    5    6     8     9
[284,]    2    3    4    8    9   10    1    5    6     7    11
[285,]    2    3    4    8    9   11    1    5    6     7    10
[286,]    2    3    4    8   10   11    1    5    6     7     9
[287,]    2    3    4    9   10   11    1    5    6     7     8
[288,]    2    3    5    6    7    8    1    4    9    10    11
[289,]    2    3    5    6    7    9    1    4    8    10    11
[290,]    2    3    5    6    7   10    1    4    8     9    11
[291,]    2    3    5    6    7   11    1    4    8     9    10
[292,]    2    3    5    6    8    9    1    4    7    10    11
[293,]    2    3    5    6    8   10    1    4    7     9    11
[294,]    2    3    5    6    8   11    1    4    7     9    10
[295,]    2    3    5    6    9   10    1    4    7     8    11
[296,]    2    3    5    6    9   11    1    4    7     8    10
[297,]    2    3    5    6   10   11    1    4    7     8     9
[298,]    2    3    5    7    8    9    1    4    6    10    11
[299,]    2    3    5    7    8   10    1    4    6     9    11
[300,]    2    3    5    7    8   11    1    4    6     9    10
[301,]    2    3    5    7    9   10    1    4    6     8    11
[302,]    2    3    5    7    9   11    1    4    6     8    10
[303,]    2    3    5    7   10   11    1    4    6     8     9
[304,]    2    3    5    8    9   10    1    4    6     7    11
[305,]    2    3    5    8    9   11    1    4    6     7    10
[306,]    2    3    5    8   10   11    1    4    6     7     9
[307,]    2    3    5    9   10   11    1    4    6     7     8
[308,]    2    3    6    7    8    9    1    4    5    10    11
[309,]    2    3    6    7    8   10    1    4    5     9    11
[310,]    2    3    6    7    8   11    1    4    5     9    10
[311,]    2    3    6    7    9   10    1    4    5     8    11
[312,]    2    3    6    7    9   11    1    4    5     8    10
[313,]    2    3    6    7   10   11    1    4    5     8     9
[314,]    2    3    6    8    9   10    1    4    5     7    11
[315,]    2    3    6    8    9   11    1    4    5     7    10
[316,]    2    3    6    8   10   11    1    4    5     7     9
[317,]    2    3    6    9   10   11    1    4    5     7     8
[318,]    2    3    7    8    9   10    1    4    5     6    11
[319,]    2    3    7    8    9   11    1    4    5     6    10
[320,]    2    3    7    8   10   11    1    4    5     6     9
[321,]    2    3    7    9   10   11    1    4    5     6     8
[322,]    2    3    8    9   10   11    1    4    5     6     7
[323,]    2    4    5    6    7    8    1    3    9    10    11
[324,]    2    4    5    6    7    9    1    3    8    10    11
[325,]    2    4    5    6    7   10    1    3    8     9    11
[326,]    2    4    5    6    7   11    1    3    8     9    10
[327,]    2    4    5    6    8    9    1    3    7    10    11
[328,]    2    4    5    6    8   10    1    3    7     9    11
[329,]    2    4    5    6    8   11    1    3    7     9    10
[330,]    2    4    5    6    9   10    1    3    7     8    11
[331,]    2    4    5    6    9   11    1    3    7     8    10
[332,]    2    4    5    6   10   11    1    3    7     8     9
[333,]    2    4    5    7    8    9    1    3    6    10    11
[334,]    2    4    5    7    8   10    1    3    6     9    11
[335,]    2    4    5    7    8   11    1    3    6     9    10
[336,]    2    4    5    7    9   10    1    3    6     8    11
[337,]    2    4    5    7    9   11    1    3    6     8    10
[338,]    2    4    5    7   10   11    1    3    6     8     9
[339,]    2    4    5    8    9   10    1    3    6     7    11
[340,]    2    4    5    8    9   11    1    3    6     7    10
[341,]    2    4    5    8   10   11    1    3    6     7     9
[342,]    2    4    5    9   10   11    1    3    6     7     8
[343,]    2    4    6    7    8    9    1    3    5    10    11
[344,]    2    4    6    7    8   10    1    3    5     9    11
[345,]    2    4    6    7    8   11    1    3    5     9    10
[346,]    2    4    6    7    9   10    1    3    5     8    11
[347,]    2    4    6    7    9   11    1    3    5     8    10
[348,]    2    4    6    7   10   11    1    3    5     8     9
[349,]    2    4    6    8    9   10    1    3    5     7    11
[350,]    2    4    6    8    9   11    1    3    5     7    10
[351,]    2    4    6    8   10   11    1    3    5     7     9
[352,]    2    4    6    9   10   11    1    3    5     7     8
[353,]    2    4    7    8    9   10    1    3    5     6    11
[354,]    2    4    7    8    9   11    1    3    5     6    10
[355,]    2    4    7    8   10   11    1    3    5     6     9
[356,]    2    4    7    9   10   11    1    3    5     6     8
[357,]    2    4    8    9   10   11    1    3    5     6     7
[358,]    2    5    6    7    8    9    1    3    4    10    11
[359,]    2    5    6    7    8   10    1    3    4     9    11
[360,]    2    5    6    7    8   11    1    3    4     9    10
[361,]    2    5    6    7    9   10    1    3    4     8    11
[362,]    2    5    6    7    9   11    1    3    4     8    10
[363,]    2    5    6    7   10   11    1    3    4     8     9
[364,]    2    5    6    8    9   10    1    3    4     7    11
[365,]    2    5    6    8    9   11    1    3    4     7    10
[366,]    2    5    6    8   10   11    1    3    4     7     9
[367,]    2    5    6    9   10   11    1    3    4     7     8
[368,]    2    5    7    8    9   10    1    3    4     6    11
[369,]    2    5    7    8    9   11    1    3    4     6    10
[370,]    2    5    7    8   10   11    1    3    4     6     9
[371,]    2    5    7    9   10   11    1    3    4     6     8
[372,]    2    5    8    9   10   11    1    3    4     6     7
[373,]    2    6    7    8    9   10    1    3    4     5    11
[374,]    2    6    7    8    9   11    1    3    4     5    10
[375,]    2    6    7    8   10   11    1    3    4     5     9
[376,]    2    6    7    9   10   11    1    3    4     5     8
[377,]    2    6    8    9   10   11    1    3    4     5     7
[378,]    2    7    8    9   10   11    1    3    4     5     6
[379,]    3    4    5    6    7    8    1    2    9    10    11
[380,]    3    4    5    6    7    9    1    2    8    10    11
[381,]    3    4    5    6    7   10    1    2    8     9    11
[382,]    3    4    5    6    7   11    1    2    8     9    10
[383,]    3    4    5    6    8    9    1    2    7    10    11
[384,]    3    4    5    6    8   10    1    2    7     9    11
[385,]    3    4    5    6    8   11    1    2    7     9    10
[386,]    3    4    5    6    9   10    1    2    7     8    11
[387,]    3    4    5    6    9   11    1    2    7     8    10
[388,]    3    4    5    6   10   11    1    2    7     8     9
[389,]    3    4    5    7    8    9    1    2    6    10    11
[390,]    3    4    5    7    8   10    1    2    6     9    11
[391,]    3    4    5    7    8   11    1    2    6     9    10
[392,]    3    4    5    7    9   10    1    2    6     8    11
[393,]    3    4    5    7    9   11    1    2    6     8    10
[394,]    3    4    5    7   10   11    1    2    6     8     9
[395,]    3    4    5    8    9   10    1    2    6     7    11
[396,]    3    4    5    8    9   11    1    2    6     7    10
[397,]    3    4    5    8   10   11    1    2    6     7     9
[398,]    3    4    5    9   10   11    1    2    6     7     8
[399,]    3    4    6    7    8    9    1    2    5    10    11
[400,]    3    4    6    7    8   10    1    2    5     9    11
[401,]    3    4    6    7    8   11    1    2    5     9    10
[402,]    3    4    6    7    9   10    1    2    5     8    11
[403,]    3    4    6    7    9   11    1    2    5     8    10
[404,]    3    4    6    7   10   11    1    2    5     8     9
[405,]    3    4    6    8    9   10    1    2    5     7    11
[406,]    3    4    6    8    9   11    1    2    5     7    10
[407,]    3    4    6    8   10   11    1    2    5     7     9
[408,]    3    4    6    9   10   11    1    2    5     7     8
[409,]    3    4    7    8    9   10    1    2    5     6    11
[410,]    3    4    7    8    9   11    1    2    5     6    10
[411,]    3    4    7    8   10   11    1    2    5     6     9
[412,]    3    4    7    9   10   11    1    2    5     6     8
[413,]    3    4    8    9   10   11    1    2    5     6     7
[414,]    3    5    6    7    8    9    1    2    4    10    11
[415,]    3    5    6    7    8   10    1    2    4     9    11
[416,]    3    5    6    7    8   11    1    2    4     9    10
[417,]    3    5    6    7    9   10    1    2    4     8    11
[418,]    3    5    6    7    9   11    1    2    4     8    10
[419,]    3    5    6    7   10   11    1    2    4     8     9
[420,]    3    5    6    8    9   10    1    2    4     7    11
[421,]    3    5    6    8    9   11    1    2    4     7    10
[422,]    3    5    6    8   10   11    1    2    4     7     9
[423,]    3    5    6    9   10   11    1    2    4     7     8
[424,]    3    5    7    8    9   10    1    2    4     6    11
[425,]    3    5    7    8    9   11    1    2    4     6    10
[426,]    3    5    7    8   10   11    1    2    4     6     9
[427,]    3    5    7    9   10   11    1    2    4     6     8
[428,]    3    5    8    9   10   11    1    2    4     6     7
[429,]    3    6    7    8    9   10    1    2    4     5    11
[430,]    3    6    7    8    9   11    1    2    4     5    10
[431,]    3    6    7    8   10   11    1    2    4     5     9
[432,]    3    6    7    9   10   11    1    2    4     5     8
[433,]    3    6    8    9   10   11    1    2    4     5     7
[434,]    3    7    8    9   10   11    1    2    4     5     6
[435,]    4    5    6    7    8    9    1    2    3    10    11
[436,]    4    5    6    7    8   10    1    2    3     9    11
[437,]    4    5    6    7    8   11    1    2    3     9    10
[438,]    4    5    6    7    9   10    1    2    3     8    11
[439,]    4    5    6    7    9   11    1    2    3     8    10
[440,]    4    5    6    7   10   11    1    2    3     8     9
[441,]    4    5    6    8    9   10    1    2    3     7    11
[442,]    4    5    6    8    9   11    1    2    3     7    10
[443,]    4    5    6    8   10   11    1    2    3     7     9
[444,]    4    5    6    9   10   11    1    2    3     7     8
[445,]    4    5    7    8    9   10    1    2    3     6    11
[446,]    4    5    7    8    9   11    1    2    3     6    10
[447,]    4    5    7    8   10   11    1    2    3     6     9
[448,]    4    5    7    9   10   11    1    2    3     6     8
[449,]    4    5    8    9   10   11    1    2    3     6     7
[450,]    4    6    7    8    9   10    1    2    3     5    11
[451,]    4    6    7    8    9   11    1    2    3     5    10
[452,]    4    6    7    8   10   11    1    2    3     5     9
[453,]    4    6    7    9   10   11    1    2    3     5     8
[454,]    4    6    8    9   10   11    1    2    3     5     7
[455,]    4    7    8    9   10   11    1    2    3     5     6
[456,]    5    6    7    8    9   10    1    2    3     4    11
[457,]    5    6    7    8    9   11    1    2    3     4    10
[458,]    5    6    7    8   10   11    1    2    3     4     9
[459,]    5    6    7    9   10   11    1    2    3     4     8
[460,]    5    6    8    9   10   11    1    2    3     4     7
[461,]    5    7    8    9   10   11    1    2    3     4     6
[462,]    6    7    8    9   10   11    1    2    3     4     5
>   FrF2(32, nfactors=11, estimable = formula("~(A+B+C+D+E+F)^2"), clear=FALSE, 
+       perms = perms.full )
    A  B  C  D  E  F  G  H  J  K  L
1   1  1  1 -1  1 -1 -1  1  1 -1  1
2  -1  1  1 -1  1  1  1 -1 -1 -1  1
3   1 -1  1  1 -1  1 -1 -1 -1 -1  1
4   1 -1  1  1  1 -1 -1  1 -1 -1 -1
5  -1  1 -1  1 -1 -1 -1 -1  1 -1  1
6   1  1  1  1  1  1  1  1  1  1  1
7   1  1  1  1 -1 -1  1 -1  1  1 -1
8   1 -1  1 -1 -1 -1  1 -1 -1  1  1
9   1  1  1 -1 -1  1 -1 -1  1 -1 -1
10 -1  1 -1 -1 -1  1  1 -1  1  1  1
11  1  1 -1  1  1 -1  1 -1 -1 -1 -1
12  1  1 -1 -1  1  1 -1 -1 -1  1 -1
13 -1  1  1  1 -1  1 -1  1 -1  1 -1
14  1 -1 -1  1  1  1 -1 -1  1  1  1
15 -1 -1  1 -1  1 -1 -1 -1  1  1 -1
16 -1 -1  1 -1 -1  1 -1  1  1  1  1
17  1 -1 -1  1 -1 -1 -1  1  1  1 -1
18 -1 -1 -1  1  1 -1  1  1 -1  1  1
19 -1  1  1  1  1 -1 -1 -1 -1  1  1
20  1  1 -1 -1 -1 -1 -1  1 -1  1  1
21 -1 -1  1  1  1  1  1 -1  1 -1 -1
22  1 -1 -1 -1 -1  1  1  1  1 -1 -1
23 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
24 -1 -1 -1 -1  1  1 -1  1 -1 -1  1
25  1 -1  1 -1  1  1  1  1 -1  1 -1
26  1  1 -1  1 -1  1  1  1 -1 -1  1
27 -1 -1 -1  1 -1  1  1 -1 -1  1 -1
28 -1 -1  1  1 -1 -1  1  1  1 -1  1
29 -1  1 -1 -1  1 -1  1  1  1  1 -1
30 -1  1 -1  1  1  1 -1  1  1 -1 -1
31  1 -1 -1 -1  1 -1  1 -1  1 -1  1
32 -1  1  1 -1 -1 -1  1  1 -1 -1 -1
class=design, type= FrF2.estimable 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("estimable.2fis", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fold.design")
> ### * fold.design
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fold.design
> ### Title: Function to create a foldover for 2-level fractional factorials
> ### Aliases: fold.design
> ### Keywords: design array
> 
> ### ** Examples
> 
>   ## create resolution III design
>   plan <- FrF2(8,5, factor.names=c("one","two","three","four","five"))
>   ## add some resonse data
>   y <- c(2+desnum(plan)%*%c(2,3,0,0,0) +
+      1.5*apply(desnum(plan)[,c(1,2)],1,"prod") + rnorm(8))
>      ## the "c()" makes y into a vector rather than a 1-column matrix
>   plan <- add.response(plan, y)
>   DanielPlot(lm(y~(.)^2,plan), alpha=0.2, half=TRUE)
>   ## alias information
>   design.info(plan)
$type
[1] "FrF2"

$nruns
[1] 8

$nfactors
[1] 5

$factor.names
$factor.names$one
[1] -1  1

$factor.names$two
[1] -1  1

$factor.names$three
[1] -1  1

$factor.names$four
[1] -1  1

$factor.names$five
[1] -1  1


$catlg.name
[1] "catlg"

$catlg.entry
Design:  5-2.1 
   8  runs,  5  factors,  
   Resolution  III 
   Generating columns:  3 5 
   WLP (3plus):  2 1 0 0 0 ,  0  clear 2fis

$aliased
$aliased$legend
[1] "A=one"   "B=two"   "C=three" "D=four"  "E=five" 

$aliased$main
[1] "A=BD=CE" "B=AD"    "C=AE"    "D=AB"    "E=AC"   

$aliased$fi2
[1] "BC=DE" "BE=CD"


$FrF2.version
[1] "1.7-1"

$replications
[1] 1

$repeat.only
[1] FALSE

$randomize
[1] TRUE

$seed
NULL

$creator
FrF2(8, 5, factor.names = c("one", "two", "three", "four", "five"))

$response.names
[1] "y"

>   ## full foldover for dealiasing all main effects
>   plan <- fold.design(plan)
>   design.info(plan)
$type
[1] "FrF2.folded"

$nruns
[1] 16

$nfactors
[1] 6

$factor.names
$factor.names$one
[1] -1  1

$factor.names$two
[1] -1  1

$factor.names$three
[1] -1  1

$factor.names$fold
[1] "original" "mirror"  

$factor.names$four
[1] -1  1

$factor.names$five
[1] -1  1


$catlg.name
[1] "catlg"

$aliased
$aliased$legend
[1] "A=one"   "B=two"   "C=three" "D=fold"  "E=four"  "F=five" 

$aliased$main
character(0)

$aliased$fi2
[1] "AB=-DE"     "AC=-DF"     "AD=-BE=-CF" "AE=-BD"     "AF=-CD"    
[6] "BC=EF"      "BF=CE"     


$FrF2.version
[1] "1.7-1"

$replications
[1] 1

$repeat.only
[1] FALSE

$randomize
[1] TRUE

$seed
NULL

$creator
$creator[[1]]
FrF2(8, 5, factor.names = c("one", "two", "three", "four", "five"))

$creator$fold
[1] "full"


$response.names
[1] "y"

$base.design
[1] "5-2.1"

$nfac.WP
numeric(0)

$nWPs
numeric(0)

$res.WP
[1] "unknown"

$generators
[1] "E=-ABD" "F=-ACD"

>   ## further data, shifted by -2
>   y <- c(y, desnum(plan)[9:16,1:5]%*%c(2,3,0,0,0) +
+      1.5*apply(desnum(plan)[9:16,c(1,2)],1,"prod") + rnorm(8))
>   plan <- add.response(plan, y, replace=TRUE)
>   linmod <- lm(y~(.)^2,plan)
>   DanielPlot(linmod, alpha=0.2, half=TRUE)
>   MEPlot(linmod)
>   IAPlot(linmod)
>   
>   ## fold on factor a only (also removes main effect aliasing here)
>   plan <- FrF2(8,5, factor.names=c("one","two","three","four","five"))
>   aliasprint(plan)
$legend
[1] A=one   B=two   C=three D=four  E=five 

$main
[1] A=BD=CE B=AD    C=AE    D=AB    E=AC   

$fi2
[1] BC=DE BE=CD

>   plan <- fold.design(plan, columns=1)
>   aliasprint(plan)
$legend
[1] A=one   B=two   C=three D=fold  E=four  F=five 

$main
character(0)

$fi2
[1] AB=-DE     AC=-DF     AD=-BE=-CF AE=-BD     AF=-CD     BC=EF      BF=CE     

>   
>   ## fold a Plackett-Burman design with 11 factors
>   plan <- pb(12)
>   fold.design(plan)
    A  B  C  D  E  F  G  H  J  K  L     fold
1   1  1  1 -1 -1 -1  1 -1  1  1 -1 original
2   1  1 -1 -1 -1  1 -1  1  1 -1  1 original
3  -1 -1  1 -1  1  1 -1  1  1  1 -1 original
4   1 -1  1  1  1 -1 -1 -1  1 -1  1 original
5  -1  1 -1  1  1 -1  1  1  1 -1 -1 original
6  -1  1  1 -1  1  1  1 -1 -1 -1  1 original
7   1  1 -1  1  1  1 -1 -1 -1  1 -1 original
8  -1 -1 -1  1 -1  1  1 -1  1  1  1 original
9   1 -1 -1 -1  1 -1  1  1 -1  1  1 original
10 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 original
11  1 -1  1  1 -1  1  1  1 -1 -1 -1 original
12 -1  1  1  1 -1 -1 -1  1 -1  1  1 original
13 -1 -1 -1  1  1  1 -1  1 -1 -1  1   mirror
14 -1 -1  1  1  1 -1  1 -1 -1  1 -1   mirror
15  1  1 -1  1 -1 -1  1 -1 -1 -1  1   mirror
16 -1  1 -1 -1 -1  1  1  1 -1  1 -1   mirror
17  1 -1  1 -1 -1  1 -1 -1 -1  1  1   mirror
18  1 -1 -1  1 -1 -1 -1  1  1  1 -1   mirror
19 -1 -1  1 -1 -1 -1  1  1  1 -1  1   mirror
20  1  1  1 -1  1 -1 -1  1 -1 -1 -1   mirror
21 -1  1  1  1 -1  1 -1 -1  1 -1 -1   mirror
22  1  1  1  1  1  1  1  1  1  1  1   mirror
23 -1  1 -1 -1  1 -1 -1 -1  1  1  1   mirror
24  1 -1 -1 -1  1  1  1 -1  1 -1 -1   mirror
class=design, type= pb.folded 
>    
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fold.design", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pb")
> ### * pb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pb
> ### Title: Function to generate non-regular fractional factorial screening
> ###   designs
> ### Aliases: pb pb.list
> ### Keywords: array design
> 
> ### ** Examples
> 
>    pb(12,randomize=FALSE)
    A  B  C  D  E  F  G  H  J  K  L
1   1  1 -1  1  1  1 -1 -1 -1  1 -1
2  -1  1  1 -1  1  1  1 -1 -1 -1  1
3   1 -1  1  1 -1  1  1  1 -1 -1 -1
4  -1  1 -1  1  1 -1  1  1  1 -1 -1
5  -1 -1  1 -1  1  1 -1  1  1  1 -1
6  -1 -1 -1  1 -1  1  1 -1  1  1  1
7   1 -1 -1 -1  1 -1  1  1 -1  1  1
8   1  1 -1 -1 -1  1 -1  1  1 -1  1
9   1  1  1 -1 -1 -1  1 -1  1  1 -1
10 -1  1  1  1 -1 -1 -1  1 -1  1  1
11  1 -1  1  1  1 -1 -1 -1  1 -1  1
12 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
class=design, type= pb 
>    pb(12,randomize=FALSE,n12.taguchi=TRUE)
    A  B  C  D  E  F  G  H  J  K  L
1  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
2  -1 -1 -1 -1 -1  1  1  1  1  1  1
3  -1 -1  1  1  1 -1 -1 -1  1  1  1
4  -1  1 -1  1  1 -1  1  1 -1 -1  1
5  -1  1  1 -1  1  1 -1  1 -1  1 -1
6  -1  1  1  1 -1  1  1 -1  1 -1 -1
7   1 -1  1  1 -1 -1  1  1 -1  1 -1
8   1 -1  1 -1  1  1  1 -1 -1 -1  1
9   1 -1 -1  1  1  1 -1  1  1 -1 -1
10  1  1  1 -1 -1 -1 -1  1  1 -1  1
11  1  1 -1  1 -1  1 -1 -1 -1  1  1
12  1  1 -1 -1  1 -1  1 -1  1  1 -1
class=design, type= pb 
>    pb(20,seed=29869)
    A  B  C  D  E  F  G  H  J  K  L  M  N  O  P  Q  R  S  T
1   1 -1 -1 -1 -1  1  1 -1  1  1 -1 -1  1  1  1  1 -1  1 -1
2   1 -1 -1  1  1  1  1 -1  1 -1  1 -1 -1 -1 -1  1  1 -1  1
3   1 -1  1 -1  1 -1 -1 -1 -1  1  1 -1  1  1 -1 -1  1  1  1
4  -1  1  1 -1  1  1 -1 -1  1  1  1  1 -1  1 -1  1 -1 -1 -1
5  -1 -1  1  1 -1  1  1 -1 -1  1  1  1  1 -1  1 -1  1 -1 -1
6   1  1  1  1 -1  1 -1  1 -1 -1 -1 -1  1  1 -1  1  1 -1 -1
7  -1  1 -1 -1 -1 -1  1  1 -1  1  1 -1 -1  1  1  1  1 -1  1
8   1 -1  1 -1 -1 -1 -1  1  1 -1  1  1 -1 -1  1  1  1  1 -1
9   1  1 -1  1 -1  1 -1 -1 -1 -1  1  1 -1  1  1 -1 -1  1  1
10 -1 -1 -1 -1  1  1 -1  1  1 -1 -1  1  1  1  1 -1  1 -1  1
11 -1  1 -1  1 -1 -1 -1 -1  1  1 -1  1  1 -1 -1  1  1  1  1
12 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
13  1  1 -1 -1  1  1  1  1 -1  1 -1  1 -1 -1 -1 -1  1  1 -1
14 -1 -1  1  1  1  1 -1  1 -1  1 -1 -1 -1 -1  1  1 -1  1  1
15 -1 -1 -1  1  1 -1  1  1 -1 -1  1  1  1  1 -1  1 -1  1 -1
16 -1  1  1  1  1 -1  1 -1  1 -1 -1 -1 -1  1  1 -1  1  1 -1
17  1  1  1 -1  1 -1  1 -1 -1 -1 -1  1  1 -1  1  1 -1 -1  1
18  1 -1  1  1 -1 -1  1  1  1  1 -1  1 -1  1 -1 -1 -1 -1  1
19 -1  1  1 -1 -1  1  1  1  1 -1  1 -1  1 -1 -1 -1 -1  1  1
20  1  1 -1  1  1 -1 -1  1  1  1  1 -1  1 -1  1 -1 -1 -1 -1
class=design, type= pb 
>    pb(16,factor.names=list(A="",B="",C="",D=c("min","max"),
+           E="",F="",G="",H="",J=c("new","old")))
Screening 15 factors in 16 runs involves perfect aliasing of 
 pairwise interactions of the first six factors with the last factor.
    A  B  C   D  E  F  G  H   J e1 e2 e3 e4 e5 e6
1   1 -1 -1 max  1 -1  1 -1 new  1 -1  1 -1  1 -1
2   1  1  1 min  1 -1 -1 -1 old  1 -1 -1 -1 -1  1
3   1 -1 -1 min  1  1  1 -1 old -1  1 -1  1 -1 -1
4  -1 -1 -1 min -1 -1  1  1 old  1  1  1 -1 -1  1
5   1  1 -1 max -1  1  1  1 new -1 -1 -1 -1 -1  1
6  -1 -1  1 max  1  1 -1 -1 new -1  1  1 -1 -1  1
7   1  1 -1 min -1 -1 -1 -1 new -1  1  1  1  1  1
8   1 -1  1 min -1  1 -1  1 new  1 -1  1  1 -1 -1
9  -1 -1 -1 max -1  1 -1 -1 old  1 -1 -1  1  1  1
10  1 -1  1 max -1 -1 -1  1 old -1  1 -1 -1  1 -1
11 -1  1 -1 min  1  1 -1  1 old -1 -1  1 -1  1 -1
12 -1  1  1 max -1 -1  1 -1 old -1 -1  1  1 -1 -1
13  1  1  1 max  1  1  1  1 old  1  1  1  1  1  1
14 -1  1  1 min -1  1  1 -1 new  1  1 -1 -1  1 -1
15 -1  1 -1 max  1 -1 -1  1 new  1  1 -1  1 -1 -1
16 -1 -1  1 min  1 -1  1  1 new -1 -1 -1  1  1  1
class=design, type= pb 
>    pb(8,default.levels=c("current","new"))
Warning in pb(8, default.levels = c("current", "new")) :
  Plackett-Burman designs in 8 runs coincide with regular fractional factorials. 
          For screening more than four factors, you may want to consider increasing the number of runs to 12. 
          Make sure to take the alias structure into account for interpretation!
        A       B       C       D       E       F       G
1     new current     new current current     new     new
2 current     new     new     new current     new current
3 current current current current current current current
4     new     new current     new current current     new
5     new     new     new current     new current current
6     new current current     new     new     new current
7 current current     new     new     new current     new
8 current     new current current     new     new     new
class=design, type= pb 
>    test <- pb(40) ## design created by doubling the 20 run design
Warning in pb(40) :
  Factor o is completely aliased with 19 interactions.
>    pb(12, ncenter=6) ## 6 center points with default placement
    A  B  C  D  E  F  G  H  J  K  L
1   0  0  0  0  0  0  0  0  0  0  0
2   0  0  0  0  0  0  0  0  0  0  0
3   1 -1 -1 -1  1 -1  1  1 -1  1  1
4  -1  1  1  1 -1 -1 -1  1 -1  1  1
5  -1  1 -1  1  1 -1  1  1  1 -1 -1
6   1 -1  1  1  1 -1 -1 -1  1 -1  1
7  -1 -1 -1  1 -1  1  1 -1  1  1  1
8   1 -1  1  1 -1  1  1  1 -1 -1 -1
9   0  0  0  0  0  0  0  0  0  0  0
10  0  0  0  0  0  0  0  0  0  0  0
11 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
12 -1  1  1 -1  1  1  1 -1 -1 -1  1
13  1  1 -1  1  1  1 -1 -1 -1  1 -1
14 -1 -1  1 -1  1  1 -1  1  1  1 -1
15  1  1 -1 -1 -1  1 -1  1  1 -1  1
16  1  1  1 -1 -1 -1  1 -1  1  1 -1
17  0  0  0  0  0  0  0  0  0  0  0
18  0  0  0  0  0  0  0  0  0  0  0
class=design, type= pb.center 
>    
>    ## Not run: 
> ##D    ## note: designs in 40, 56, 64, 88, and 96 runs are resolution IV,
> ##D    ## if the number of factors is up to nruns/2 - 1, e.g.:
> ##D    plan1 <- pb(40, 19)
> ##D    length3(plan1)  ## 0 generalized words of length 3
> ##D    length4(plan1)  ## 228 generalized words of length 4
> ##D    ## they can be made resolution IV by oldver=TRUE for 
> ##D    ## nfactors=nruns/2, e.g.:
> ##D    plan2 <- pb(40, 20)
> ##D    plan3 <- pb(40, 20, oldver=TRUE)
> ##D    length3(plan2)  ## 9 generalized words of length 3
> ##D    length3(plan3)  ## 0 generalized words of length 3
> ##D    length4(plan3)  ## 285 generalized words of length 4
> ##D    
> ##D    ## note: designs in 52, 76, and 100 runs are almost resolution IV,
> ##D    ## if the number of factors is up to nruns/2 - 1, e.g.:
> ##D    plan4 <- pb(52, 25)
> ##D    GR(plan4)       ## generalized resolution 3.92
> ##D    
> ##D    ## note: versions >1.3 avoid complete and heavy aliasing of triples of factors 
> ##D    ## for up to nruns-2 factors for 40, 52, 56, 64, 76, 88, 92 and 96 runs
> ##D    ## (the same for 100 runs, which were not implemented before version 1.3)
> ##D    plan5 <- pb(40, 38)
> ##D    plan6 <- pb(40, 38, oldver=TRUE)
> ##D    GR(plan5)       ## generalized resolution 3.4
> ##D    GR(plan6)       ## generalized resolution 3
> ##D    plan7 <- pb(52, 50)
> ##D    plan8 <- pb(52, 50, oldver=TRUE)
> ##D    GR(plan7)       ## generalized resolution 3.62
> ##D    GR(plan8)       ## generalized resolution 3.15
> ##D    
> ## End(Not run)
>    
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("splitplot")
> ### * splitplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: splitplot
> ### Title: Statistical and algorithmic aspects of split-plot designs in
> ###   FrF2
> ### Aliases: splitplot
> ### Keywords: array design
> 
> ### ** Examples
> 
> ########## hard to change factors ####################
> ## example from Bingham and Sitter Technometrics 19999
> ## MotorSpeed, FeedMode,FeedSizing,MaterialType are hard to change
> BS.ex <- FrF2(16,7,hard=4,
+      factor.names=c("MotorSpeed", "FeedMode","FeedSizing","MaterialType",
+                   "Gain","ScreenAngle","ScreenVibLevel"), 
+      default.levels=c("-","+"))
> design.info(BS.ex)
$type
[1] "FrF2.splitplot"

$nruns
[1] 16

$nfactors
[1] 7

$nfac.WP
[1] 4

$nfac.SP
[1] 3

$factor.names
$factor.names$MotorSpeed
[1] "-" "+"

$factor.names$FeedMode
[1] "-" "+"

$factor.names$FeedSizing
[1] "-" "+"

$factor.names$MaterialType
[1] "-" "+"

$factor.names$Gain
[1] "-" "+"

$factor.names$ScreenAngle
[1] "-" "+"

$factor.names$ScreenVibLevel
[1] "-" "+"


$nWPs
[1] 8

$plotsize
[1] 2

$res.WP
[1] 4

$aliased
$aliased$legend
[1] "A=MotorSpeed"     "B=FeedMode"       "C=FeedSizing"     "D=MaterialType"  
[5] "E=Gain"           "F=ScreenAngle"    "G=ScreenVibLevel"

$aliased$main
character(0)

$aliased$fi2
[1] "AB=CD=EF" "AC=BD=EG" "AD=BC=FG" "AE=BF=CG" "AF=BE=DG" "AG=CE=DF" "BG=CF=DE"


$FrF2.version
[1] "1.7-1"

$catlg.name
[1] "catlg"

$base.design
[1] "7-3.1"

$map
[1] 1 2 3 4

$orig.fac.order
[1] 1 2 3 5 4 6 7

$replications
[1] 1

$repeat.only
[1] FALSE

$randomize
[1] TRUE

$seed
NULL

$creator
FrF2(16, 7, hard = 4, factor.names = c("MotorSpeed", "FeedMode", 
    "FeedSizing", "MaterialType", "Gain", "ScreenAngle", "ScreenVibLevel"), 
    default.levels = c("-", "+"))

> BS.ex
  run.no run.no.std.rp MotorSpeed FeedMode FeedSizing MaterialType Gain
1      1         1.1.1          -        +          +            -    +
2      2         2.1.2          -        +          +            -    -
  ScreenAngle ScreenVibLevel
1           -              -
2           +              +
  run.no run.no.std.rp MotorSpeed FeedMode FeedSizing MaterialType Gain
3      3         4.2.2          -        +          -            +    +
4      4         3.2.1          -        +          -            +    -
  ScreenAngle ScreenVibLevel
3           -              +
4           +              -
  run.no run.no.std.rp MotorSpeed FeedMode FeedSizing MaterialType Gain
5      5         5.3.1          -        -          -            -    +
6      6         6.3.2          -        -          -            -    -
  ScreenAngle ScreenVibLevel
5           +              +
6           -              -
  run.no run.no.std.rp MotorSpeed FeedMode FeedSizing MaterialType Gain
7      7         8.4.2          -        -          +            +    +
8      8         7.4.1          -        -          +            +    -
  ScreenAngle ScreenVibLevel
7           +              -
8           -              +
   run.no run.no.std.rp MotorSpeed FeedMode FeedSizing MaterialType Gain
9       9        10.5.2          +        -          +            -    -
10     10         9.5.1          +        -          +            -    +
   ScreenAngle ScreenVibLevel
9            +              -
10           -              +
   run.no run.no.std.rp MotorSpeed FeedMode FeedSizing MaterialType Gain
11     11        11.6.1          +        -          -            +    -
12     12        12.6.2          +        -          -            +    +
   ScreenAngle ScreenVibLevel
11           +              +
12           -              -
   run.no run.no.std.rp MotorSpeed FeedMode FeedSizing MaterialType Gain
13     13        14.7.2          +        +          -            -    -
14     14        13.7.1          +        +          -            -    +
   ScreenAngle ScreenVibLevel
13           -              +
14           +              -
   run.no run.no.std.rp MotorSpeed FeedMode FeedSizing MaterialType Gain
15     15        16.8.2          +        +          +            +    +
16     16        15.8.1          +        +          +            +    -
   ScreenAngle ScreenVibLevel
15           +              +
16           -              -
class=design, type= FrF2.splitplot 
NOTE: columns run.no and run.no.std.rp are annotation, not part of the data frame
> ## NOTE: the design has 8 whole plots.
> ## The first hard-to-change factors have very few changes only 
> ## between whole plots. 
> ## A conscious and honest decision is required whether it is 
> ##    acceptable for the situation at hand not to reset them!
> ## A proper split-plot design with resetting all whole plot factors 
> ## for each whole plot would be strongly preferred from a 
> ## statistical point of view. 
> 
> ########## automatic generation for split plot ##########
> ## 3 control factors, 5 noise factors, control factors are whole plot factors
> ## 8 plots desired in a total of 32 runs
> ## Bingham Sitter 2003
> BS.ex2a <- FrF2(32, 8, WPs=8, nfac.WP=3, 
+       factor.names=c(paste("C",1:3,sep=""), paste("N",1:5,sep="")),randomize=TRUE)
> 
> ## manual generation of this same design
> BS.ex2m <- FrF2(32, 8, generators=c("ABD","ACD","BCDE"),WPs=8, WPfacs=c("C1","C2","C3"), nfac.WP=3, 
+       factor.names=c(paste("C",1:3,sep=""),paste("N",1:5,sep="")),randomize=TRUE)
> 
> ## design with few whole plot factors
> ## 2 whole plot factors, 7 split plot factors
> ## 8 whole plots, i.e. one extra WP factor needed
> BSS.cheese.exa <- FrF2(32, 9, WPs=8, nfac.WP=2, 
+       factor.names=c("A","B","p","q","r","s","t","u","v"))
Warning in FrF2(32, 9, WPs = 8, nfac.WP = 2, factor.names = c("A", "B",  :
  There are fewer factors than needed for a full factorial whole plot design. 1 dummy splitting factor(s) have been introduced.
> design.info(BSS.cheese.exa)
$type
[1] "FrF2.splitplot"

$nruns
[1] 32

$nfactors
[1] 10

$nfac.WP
[1] 3

$nfac.SP
[1] 7

$factor.names
$factor.names$A
[1] -1  1

$factor.names$B
[1] -1  1

$factor.names$WP3
[1] -1  1

$factor.names$p
[1] -1  1

$factor.names$q
[1] -1  1

$factor.names$r
[1] -1  1

$factor.names$s
[1] -1  1

$factor.names$t
[1] -1  1

$factor.names$u
[1] -1  1

$factor.names$v
[1] -1  1


$nWPs
[1] 8

$plotsize
[1] 4

$res.WP
[1] Inf

$aliased
$aliased$legend
 [1] "A=A"   "B=B"   "C=WP3" "D=p"   "E=q"   "F=r"   "G=s"   "H=t"   "J=u"  
[10] "K=v"  

$aliased$main
character(0)

$aliased$fi2
 [1] "AB=DF"          "AC=DG"          "AD=HK=BF=CG=EJ" "AE=DJ"         
 [5] "AF=BD"          "AG=CD"          "AH=DK"          "AJ=DE"         
 [9] "AK=DH"          "BC=FG"          "BE=FJ"          "BG=CF"         
[13] "BH=FK"          "BJ=EF"          "BK=FH"          "CE=GJ"         
[17] "CH=GK"          "CJ=EG"          "CK=GH"          "EH=JK"         
[21] "EK=HJ"         


$FrF2.version
[1] "1.7-1"

$catlg.name
[1] "catlg"

$base.design
[1] "10-5.1"

$map
[1] 2 3 4 1 5

$orig.fac.order
 [1]  1  2  3  4  5  6  7  8  9 10

$replications
[1] 1

$repeat.only
[1] FALSE

$randomize
[1] TRUE

$seed
NULL

$creator
FrF2(32, 9, WPs = 8, nfac.WP = 2, factor.names = c("A", "B", 
    "p", "q", "r", "s", "t", "u", "v"))

> ## manual generation of the design used by Bingham, Schoen and Sitter
> ## note that the generators include a generator for the 10th spplitting factor
>     ## s= ABq, t = Apq, u = ABpr and v = Aqr, splitting factor rho=Apqr
> BSS.cheese.exm <- FrF2(32, gen=list(c(1,2,4),c(1,3,4),c(1,2,3,5),c(1,4,5),c(1,3,4,5)), 
+       WPs=8, nfac.WP=3, WPfacs=c(1,2,10),
+       factor.names=c("A","B","p","q","r","s","t","u","v","rho"))
> design.info(BSS.cheese.exm)
$type
[1] "FrF2.splitplot"

$nruns
[1] 32

$nfactors
[1] 10

$nfac.WP
[1] 3

$nfac.SP
[1] 7

$factor.names
$factor.names$A
[1] -1  1

$factor.names$B
[1] -1  1

$factor.names$rho
[1] -1  1

$factor.names$p
[1] -1  1

$factor.names$q
[1] -1  1

$factor.names$r
[1] -1  1

$factor.names$s
[1] -1  1

$factor.names$t
[1] -1  1

$factor.names$u
[1] -1  1

$factor.names$v
[1] -1  1


$nWPs
[1] 8

$plotsize
[1] 4

$res.WP
[1] NaN

$aliased
$aliased$legend
 [1] "A=A"   "B=B"   "C=rho" "D=p"   "E=q"   "F=r"   "G=s"   "H=t"   "J=u"  
[10] "K=v"  

$aliased$main
[1] "C=DK=FH" "D=CK"    "F=CH"    "H=CF"    "K=CD"   

$aliased$fi2
 [1] "AB=EG"       "AC=GJ"       "AD=EH"       "AE=BG=DH=FK" "AF=EK"      
 [6] "AG=BE=CJ"    "AH=DE"       "AJ=CG"       "AK=EF"       "BC=EJ"      
[11] "BD=GH"       "BF=GK"       "BH=DG"       "BJ=CE"       "BK=FG"      
[16] "DF=HK"      


$FrF2.version
[1] "1.7-1"

$base.design
[1] "generator columns: "

$map
[1] 1 2 3 4 5

$orig.fac.order
 [1]  1  2 10  3  4  5  6  7  8  9

$replications
[1] 1

$repeat.only
[1] FALSE

$randomize
[1] TRUE

$seed
NULL

$creator
FrF2(32, gen = list(c(1, 2, 4), c(1, 3, 4), c(1, 2, 3, 5), c(1, 
    4, 5), c(1, 3, 4, 5)), WPs = 8, nfac.WP = 3, WPfacs = c(1, 
    2, 10), factor.names = c("A", "B", "p", "q", "r", "s", "t", 
    "u", "v", "rho"))

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("splitplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  8.825 0.189 9.469 0.227 0.197 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
