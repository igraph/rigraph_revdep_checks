
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RWBP"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "RWBP-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('RWBP')
Loading required package: RANN
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: lsa
Loading required package: SnowballC
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("RWBP-package")
> ### * RWBP-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RWBP-package
> ### Title: Random Walk on Bipartite Graph
> ### Aliases: RWBP-package
> ### Keywords: spatial cluster graphs classif package
> 
> ### ** Examples
> 
> #an example dataset:
> trainSet <- cbind(
+ c(7.092073,7.092631,7.09263,7.093052,7.092876,7.092689,7.092515,7.092321,
+ 7.092138,7.11455,7.11441,7.11408,7.11376,7.11338,7.11305,7.11277,7.1124,
+ 7.11202,7.11161,7.11115,7.11068,7.11014,7.10963,7.1095,7.1089,7.10818,
+ 7.10747,7.10674,7.116691,7.116142,7.115559,7.115007,7.114423,7.113838,
+ 7.113272,7.112684,7.112067,7.111458,7.110869,7.110274,7.109696,7.109131,
+ 7.109231,7.108546,7.10797,5.599215,5.597609,5.596588,5.595359,5.594478,5.593652),
+ c(50.77849,50.77859,50.7786,50.77878,50.77914,50.77952,50.77992,50.78035,
+ 50.78081,53.8,53.7,53.6,53.5,54.2,55.3,55.2,56.6,57.6,57.7,58.8,59.4,59.7,
+ 59,59.03,59.3,60.7,60.8,61.4,50.73922,50.73914,50.73905,50.73899,50.73889,
+ 50.73881,50.73873,50.73865,50.73856,50.73847,50.73838,50.73831,50.73822,
+ 50.73814,50.73937,50.73805,50.73798,43.2034,43.20338,43.20352,43.2037,43.20391,43.20409),
+ c(106.5,107.6,25,108.5,109.1,109.7,111.6,113.3,113.3,62.3,333.7,331.5,327.2,
+ 325.5,324.8,323.5,322.3,320.3,319,317.8,316,315.1,315.3,12,312.4,311.3,310.8,
+ 309.4,99.2,99.2,101.1,99.5,101.3,105.3,104.3,104.4,106.3,108.8,110.3,111.7,113.3,
+ 112.1,5000,111.6,109.8,125.6,130,132.3,133.4,138,143.4),
+ c(0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
+ 0,0,0,0,0,1,0,0,0,0,0,0,0,0)
+ )
> 
> colnames(trainSet)<- c("lng","lat","alt","isOutlier")
> 
> #first to columns of the input data are assumed to be spatial coordinates, 
> #and the rest are non-spatial attributes according to which outliers will be extracted
> myRW <- RWBP(as.data.frame(trainSet[,1:3]), clusters.iterations=6)
> 
> #predict classification:
> testPrediction<-predict(myRW,3 )
> #calculate accuracy:
> sum(testPrediction$class==trainSet[,"isOutlier"])/nrow(trainSet)
[1] 0.9215686
> #confusion table
> table(testPrediction$class, trainSet[,"isOutlier"])
   
     0  1
  0 46  2
  1  2  1
> 
> #other options:
> myRW1 <- RWBP(isOutlier~lng+lat+alt, data=as.data.frame(trainSet))
> #print model summary
> print(myRW1)
 A Random Walk on Bipartite Graph spatial outlier detection model was built: 
 ---------------------------------------------------------------------------- 

 neighberhood size =  10 
 initial clusters amount =  8 
 each process increases clusters amount by  2  more clusters
 clusters iterations amount =  6 
 alfa =  0.5 
 dumping factor =  0.9 
 valid rows =  51  out of  51  input rows (records with empty values were removed) 

 a bipartite graph was built: 
IGRAPH UNWB 129 306 -- 
+ attr: name (v/c), type (v/l), RW.Y (e/n), avgDist (e/n), weight (e/n)
+ edges (vertex names):
 [1] 1 ---6    2 ---6    3 ---5    4 ---6    5 ---6    6 ---6    7 ---6   
 [8] 8 ---6    9 ---6    10---5    11---7    12---7    13---7    14---7   
[15] 15---7    16---7    17---2    18---2    19---2    20---2    21---2   
[22] 22---2    23---2    24---5    25---8    26---8    27---8    28---8   
[29] 29---4    30---4    31---4    32---4    33---4    34---4    35---4   
[36] 36---4    37---6    38---6    39---6    40---6    41---6    42---6   
[43] 43---1    44---6    45---6    46---3    47---3    48---3    49---3   
[50] 50---3    51---3    1 ---1009 2 ---1009 3 ---1003 4 ---1009 5 ---1009
+ ... omitted several edges

 outlier scores:  
      row_num outlierScore
 [1,]      43    0.5972345
 [2,]      10    0.6100319
 [3,]      46    0.7690731
 [4,]      51    0.7709209
 [5,]      50    0.7712470
 [6,]      28    0.8023662
 [7,]       3    0.9172343
 [8,]      47    0.9293297
 [9,]      49    0.9330749
[10,]      48    0.9334874
[11,]      12    0.9445044
[12,]      11    0.9445533
[13,]       1    0.9447423
[14,]       4    0.9448106
[15,]       8    0.9452740
[16,]       9    0.9452740
[17,]       5    0.9453132
[18,]       6    0.9453318
[19,]       7    0.9454313
[20,]       2    0.9456334
[21,]      15    0.9471040
[22,]      13    0.9474851
[23,]      37    0.9478664
[24,]      45    0.9480616
[25,]      38    0.9482632
[26,]      41    0.9483400
[27,]      42    0.9484988
[28,]      40    0.9485809
[29,]      39    0.9486014
[30,]      14    0.9486577
[31,]      44    0.9487679
[32,]      16    0.9487907
[33,]      24    0.9640143
[34,]      27    0.9723087
[35,]      26    0.9724211
[36,]      21    0.9733141
[37,]      22    0.9739746
[38,]      25    0.9746470
[39,]      19    0.9902469
[40,]      18    0.9940690
[41,]      23    0.9944418
[42,]      20    0.9951579
[43,]      33    0.9958628
[44,]      31    0.9961788
[45,]      34    0.9963529
[46,]      17    0.9964614
[47,]      36    0.9976304
[48,]      32    0.9976309
[49,]      29    0.9976472
[50,]      30    0.9976472
[51,]      35    0.9978029
> #plot model graph
> plot(myRW1)
> #predict probabilities of each record to be an outlier:
> predict(myRW1 , top_k=4,type="prob")
        lng      lat    alt         prob
1  7.092073 50.77849  106.5 0.1324634138
2  7.092631 50.77859  107.6 0.1302387534
3  7.092630 50.77860   25.0 0.2011356260
4  7.093052 50.77878  108.5 0.1322929091
5  7.092876 50.77914  109.1 0.1310380459
6  7.092689 50.77952  109.7 0.1309916552
7  7.092515 50.77992  111.6 0.1307433530
8  7.092321 50.78035  113.3 0.1311360045
9  7.092138 50.78081  113.3 0.1311360045
10 7.114550 53.80000   62.3 0.9680517652
11 7.114410 53.70000  333.7 0.1329350468
12 7.114080 53.60000  331.5 0.1330571912
13 7.113760 53.50000  327.2 0.1256160266
14 7.113380 54.20000  325.5 0.1226887483
15 7.113050 55.30000  324.8 0.1265674597
16 7.112770 55.20000  323.5 0.1223567062
17 7.112400 56.60000  322.3 0.0033491137
18 7.112020 57.60000  320.3 0.0093215185
19 7.111610 57.70000  319.0 0.0188631822
20 7.111150 58.80000  317.8 0.0066031826
21 7.110680 59.40000  316.0 0.0611351213
22 7.110140 59.70000  315.1 0.0594862964
23 7.109630 59.00000  315.3 0.0083908456
24 7.109500 59.03000   12.0 0.0843516417
25 7.108900 59.30000  312.4 0.0578077074
26 7.108180 60.70000  311.3 0.0633645960
27 7.107470 60.80000  310.8 0.0636450873
28 7.106740 61.40000  309.4 0.4878985595
29 7.116691 50.73922   99.2 0.0003888750
30 7.116142 50.73914   99.2 0.0003888750
31 7.115559 50.73905  101.1 0.0040544677
32 7.115007 50.73899   99.5 0.0004293606
33 7.114423 50.73889  101.3 0.0048435500
34 7.113838 50.73881  105.3 0.0036199386
35 7.113272 50.73873  104.3 0.0000000000
36 7.112684 50.73865  104.4 0.0004307129
37 7.112067 50.73856  106.3 0.1246642812
38 7.111458 50.73847  108.8 0.1236735850
39 7.110869 50.73838  110.3 0.1228293756
40 7.110274 50.73831  111.7 0.1228805389
41 7.109696 50.73822  113.3 0.1234819634
42 7.109131 50.73814  112.1 0.1230852894
43 7.109231 50.73937 5000.0 1.0000000000
44 7.108546 50.73805  111.6 0.1224135479
45 7.107970 50.73798  109.8 0.1241768010
46 5.599215 43.20340  125.6 0.5710131225
47 5.597609 43.20338  130.0 0.1709401372
48 5.596588 43.20352  132.3 0.1605607509
49 5.595359 43.20370  133.4 0.1615903182
50 5.594478 43.20391  138.0 0.5655859824
51 5.593652 43.20409  143.4 0.5664001740
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RWBP-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RWBP")
> ### * RWBP
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RWBP
> ### Title: Random Walk on Bipartite Graph
> ### Aliases: RWBP RWBP.default RWBP.formula print.RWBP plot.RWBP
> ### Keywords: spatial cluster graphs classif
> 
> ### ** Examples
> 
> #an example dataset:
> trainSet <- cbind(
+ c(7.092073,7.092631,7.09263,7.093052,7.092876,7.092689,7.092515,7.092321,
+ 7.092138,7.11455,7.11441,7.11408,7.11376,7.11338,7.11305,7.11277,7.1124,
+ 7.11202,7.11161,7.11115,7.11068,7.11014,7.10963,7.1095,7.1089,7.10818,
+ 7.10747,7.10674,7.116691,7.116142,7.115559,7.115007,7.114423,7.113838,
+ 7.113272,7.112684,7.112067,7.111458,7.110869,7.110274,7.109696,7.109131,
+ 7.109231,7.108546,7.10797,5.599215,5.597609,5.596588,5.595359,5.594478,5.593652),
+ c(50.77849,50.77859,50.7786,50.77878,50.77914,50.77952,50.77992,50.78035,
+ 50.78081,53.8,53.7,53.6,53.5,54.2,55.3,55.2,56.6,57.6,57.7,58.8,59.4,59.7,
+ 59,59.03,59.3,60.7,60.8,61.4,50.73922,50.73914,50.73905,50.73899,50.73889,
+ 50.73881,50.73873,50.73865,50.73856,50.73847,50.73838,50.73831,50.73822,
+ 50.73814,50.73937,50.73805,50.73798,43.2034,43.20338,43.20352,43.2037,43.20391,43.20409),
+ c(106.5,107.6,25,108.5,109.1,109.7,111.6,113.3,113.3,62.3,333.7,331.5,327.2,
+ 325.5,324.8,323.5,322.3,320.3,319,317.8,316,315.1,315.3,12,312.4,311.3,310.8,
+ 309.4,99.2,99.2,101.1,99.5,101.3,105.3,104.3,104.4,106.3,108.8,110.3,111.7,113.3,
+ 112.1,5000,111.6,109.8,125.6,130,132.3,133.4,138,143.4),
+ c(0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
+ 0,0,0,0,0,1,0,0,0,0,0,0,0,0)
+ )
> 
> colnames(trainSet)<- c("lng","lat","alt","isOutlier")
> 
> #first to columns of the input data are assumed to be spatial coordinates, 
> #and the rest are non-spatial attributes according to which outliers will be extracted
> myRW <- RWBP(as.data.frame(trainSet[,1:3]), clusters.iterations=6)
> 
> #predict classification:
> testPrediction<-predict(myRW,3 )
> #calculate accuracy:
> sum(testPrediction$class==trainSet[,"isOutlier"])/nrow(trainSet)
[1] 0.9215686
> #confusion table
> table(testPrediction$class, trainSet[,"isOutlier"])
   
     0  1
  0 46  2
  1  2  1
> 
> #other options:
> myRW1 <- RWBP(isOutlier~lng+lat+alt, data=as.data.frame(trainSet))
> #print model summary
> print(myRW1)
 A Random Walk on Bipartite Graph spatial outlier detection model was built: 
 ---------------------------------------------------------------------------- 

 neighberhood size =  10 
 initial clusters amount =  8 
 each process increases clusters amount by  2  more clusters
 clusters iterations amount =  6 
 alfa =  0.5 
 dumping factor =  0.9 
 valid rows =  51  out of  51  input rows (records with empty values were removed) 

 a bipartite graph was built: 
IGRAPH UNWB 129 306 -- 
+ attr: name (v/c), type (v/l), RW.Y (e/n), avgDist (e/n), weight (e/n)
+ edges (vertex names):
 [1] 1 ---6    2 ---6    3 ---5    4 ---6    5 ---6    6 ---6    7 ---6   
 [8] 8 ---6    9 ---6    10---5    11---7    12---7    13---7    14---7   
[15] 15---7    16---7    17---2    18---2    19---2    20---2    21---2   
[22] 22---2    23---2    24---5    25---8    26---8    27---8    28---8   
[29] 29---4    30---4    31---4    32---4    33---4    34---4    35---4   
[36] 36---4    37---6    38---6    39---6    40---6    41---6    42---6   
[43] 43---1    44---6    45---6    46---3    47---3    48---3    49---3   
[50] 50---3    51---3    1 ---1009 2 ---1009 3 ---1003 4 ---1009 5 ---1009
+ ... omitted several edges

 outlier scores:  
      row_num outlierScore
 [1,]      43    0.5972345
 [2,]      10    0.6100319
 [3,]      46    0.7690731
 [4,]      51    0.7709209
 [5,]      50    0.7712470
 [6,]      28    0.8023662
 [7,]       3    0.9172343
 [8,]      47    0.9293297
 [9,]      49    0.9330749
[10,]      48    0.9334874
[11,]      12    0.9445044
[12,]      11    0.9445533
[13,]       1    0.9447423
[14,]       4    0.9448106
[15,]       8    0.9452740
[16,]       9    0.9452740
[17,]       5    0.9453132
[18,]       6    0.9453318
[19,]       7    0.9454313
[20,]       2    0.9456334
[21,]      15    0.9471040
[22,]      13    0.9474851
[23,]      37    0.9478664
[24,]      45    0.9480616
[25,]      38    0.9482632
[26,]      41    0.9483400
[27,]      42    0.9484988
[28,]      40    0.9485809
[29,]      39    0.9486014
[30,]      14    0.9486577
[31,]      44    0.9487679
[32,]      16    0.9487907
[33,]      24    0.9640143
[34,]      27    0.9723087
[35,]      26    0.9724211
[36,]      21    0.9733141
[37,]      22    0.9739746
[38,]      25    0.9746470
[39,]      19    0.9902469
[40,]      18    0.9940690
[41,]      23    0.9944418
[42,]      20    0.9951579
[43,]      33    0.9958628
[44,]      31    0.9961788
[45,]      34    0.9963529
[46,]      17    0.9964614
[47,]      36    0.9976304
[48,]      32    0.9976309
[49,]      29    0.9976472
[50,]      30    0.9976472
[51,]      35    0.9978029
> #plot model graph
> plot(myRW1)
> #predict probabilities of each record to be an outlier:
> predict(myRW1 , top_k=4,type="prob")
        lng      lat    alt         prob
1  7.092073 50.77849  106.5 0.1324634138
2  7.092631 50.77859  107.6 0.1302387534
3  7.092630 50.77860   25.0 0.2011356260
4  7.093052 50.77878  108.5 0.1322929091
5  7.092876 50.77914  109.1 0.1310380459
6  7.092689 50.77952  109.7 0.1309916552
7  7.092515 50.77992  111.6 0.1307433530
8  7.092321 50.78035  113.3 0.1311360045
9  7.092138 50.78081  113.3 0.1311360045
10 7.114550 53.80000   62.3 0.9680517652
11 7.114410 53.70000  333.7 0.1329350468
12 7.114080 53.60000  331.5 0.1330571912
13 7.113760 53.50000  327.2 0.1256160266
14 7.113380 54.20000  325.5 0.1226887483
15 7.113050 55.30000  324.8 0.1265674597
16 7.112770 55.20000  323.5 0.1223567062
17 7.112400 56.60000  322.3 0.0033491137
18 7.112020 57.60000  320.3 0.0093215185
19 7.111610 57.70000  319.0 0.0188631822
20 7.111150 58.80000  317.8 0.0066031826
21 7.110680 59.40000  316.0 0.0611351213
22 7.110140 59.70000  315.1 0.0594862964
23 7.109630 59.00000  315.3 0.0083908456
24 7.109500 59.03000   12.0 0.0843516417
25 7.108900 59.30000  312.4 0.0578077074
26 7.108180 60.70000  311.3 0.0633645960
27 7.107470 60.80000  310.8 0.0636450873
28 7.106740 61.40000  309.4 0.4878985595
29 7.116691 50.73922   99.2 0.0003888750
30 7.116142 50.73914   99.2 0.0003888750
31 7.115559 50.73905  101.1 0.0040544677
32 7.115007 50.73899   99.5 0.0004293606
33 7.114423 50.73889  101.3 0.0048435500
34 7.113838 50.73881  105.3 0.0036199386
35 7.113272 50.73873  104.3 0.0000000000
36 7.112684 50.73865  104.4 0.0004307129
37 7.112067 50.73856  106.3 0.1246642812
38 7.111458 50.73847  108.8 0.1236735850
39 7.110869 50.73838  110.3 0.1228293756
40 7.110274 50.73831  111.7 0.1228805389
41 7.109696 50.73822  113.3 0.1234819634
42 7.109131 50.73814  112.1 0.1230852894
43 7.109231 50.73937 5000.0 1.0000000000
44 7.108546 50.73805  111.6 0.1224135479
45 7.107970 50.73798  109.8 0.1241768010
46 5.599215 43.20340  125.6 0.5710131225
47 5.597609 43.20338  130.0 0.1709401372
48 5.596588 43.20352  132.3 0.1605607509
49 5.595359 43.20370  133.4 0.1615903182
50 5.594478 43.20391  138.0 0.5655859824
51 5.593652 43.20409  143.4 0.5664001740
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RWBP", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict.RWBP")
> ### * predict.RWBP
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict.RWBP
> ### Title: predict.RWBP
> ### Aliases: predict.RWBP
> ### Keywords: spatial cluster graphs classif
> 
> ### ** Examples
> 
> #an example dataset:
> trainSet <- cbind(
+ c(7.092073,7.092631,7.09263,7.093052,7.092876,7.092689,7.092515,7.092321,
+ 7.092138,7.11455,7.11441,7.11408,7.11376,7.11338,7.11305,7.11277,7.1124,
+ 7.11202,7.11161,7.11115,7.11068,7.11014,7.10963,7.1095,7.1089,7.10818,
+ 7.10747,7.10674,7.116691,7.116142,7.115559,7.115007,7.114423,7.113838,
+ 7.113272,7.112684,7.112067,7.111458,7.110869,7.110274,7.109696,7.109131,
+ 7.109231,7.108546,7.10797,5.599215,5.597609,5.596588,5.595359,5.594478,5.593652),
+ c(50.77849,50.77859,50.7786,50.77878,50.77914,50.77952,50.77992,50.78035,
+ 50.78081,53.8,53.7,53.6,53.5,54.2,55.3,55.2,56.6,57.6,57.7,58.8,59.4,59.7,
+ 59,59.03,59.3,60.7,60.8,61.4,50.73922,50.73914,50.73905,50.73899,50.73889,
+ 50.73881,50.73873,50.73865,50.73856,50.73847,50.73838,50.73831,50.73822,
+ 50.73814,50.73937,50.73805,50.73798,43.2034,43.20338,43.20352,43.2037,43.20391,43.20409),
+ c(106.5,107.6,25,108.5,109.1,109.7,111.6,113.3,113.3,62.3,333.7,331.5,327.2,
+ 325.5,324.8,323.5,322.3,320.3,319,317.8,316,315.1,315.3,12,312.4,311.3,310.8,
+ 309.4,99.2,99.2,101.1,99.5,101.3,105.3,104.3,104.4,106.3,108.8,110.3,111.7,113.3,
+ 112.1,5000,111.6,109.8,125.6,130,132.3,133.4,138,143.4),
+ c(0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
+ 0,0,0,0,0,1,0,0,0,0,0,0,0,0)
+ )
> 
> colnames(trainSet)<- c("lng","lat","alt","isOutlier")
> 
> #first to columns of the input data are assumed to be spatial coordinates, 
> #and the rest are non-spatial attributes according to which outliers will be extracted
> myRW <- RWBP(as.data.frame(trainSet[,1:3]), clusters.iterations=6)
> 
> #predict classification:
> testPrediction<-predict(myRW,3 )
> #calculate accuracy:
> sum(testPrediction$class==trainSet[,"isOutlier"])/nrow(trainSet)
[1] 0.9215686
> #confusion table
> table(testPrediction$class, trainSet[,"isOutlier"])
   
     0  1
  0 46  2
  1  2  1
> 
> #other options:
> myRW1 <- RWBP(isOutlier~lng+lat+alt, data=as.data.frame(trainSet))
> #print model summary
> print(myRW1)
 A Random Walk on Bipartite Graph spatial outlier detection model was built: 
 ---------------------------------------------------------------------------- 

 neighberhood size =  10 
 initial clusters amount =  8 
 each process increases clusters amount by  2  more clusters
 clusters iterations amount =  6 
 alfa =  0.5 
 dumping factor =  0.9 
 valid rows =  51  out of  51  input rows (records with empty values were removed) 

 a bipartite graph was built: 
IGRAPH UNWB 129 306 -- 
+ attr: name (v/c), type (v/l), RW.Y (e/n), avgDist (e/n), weight (e/n)
+ edges (vertex names):
 [1] 1 ---6    2 ---6    3 ---5    4 ---6    5 ---6    6 ---6    7 ---6   
 [8] 8 ---6    9 ---6    10---5    11---7    12---7    13---7    14---7   
[15] 15---7    16---7    17---2    18---2    19---2    20---2    21---2   
[22] 22---2    23---2    24---5    25---8    26---8    27---8    28---8   
[29] 29---4    30---4    31---4    32---4    33---4    34---4    35---4   
[36] 36---4    37---6    38---6    39---6    40---6    41---6    42---6   
[43] 43---1    44---6    45---6    46---3    47---3    48---3    49---3   
[50] 50---3    51---3    1 ---1009 2 ---1009 3 ---1003 4 ---1009 5 ---1009
+ ... omitted several edges

 outlier scores:  
      row_num outlierScore
 [1,]      43    0.5972345
 [2,]      10    0.6100319
 [3,]      46    0.7690731
 [4,]      51    0.7709209
 [5,]      50    0.7712470
 [6,]      28    0.8023662
 [7,]       3    0.9172343
 [8,]      47    0.9293297
 [9,]      49    0.9330749
[10,]      48    0.9334874
[11,]      12    0.9445044
[12,]      11    0.9445533
[13,]       1    0.9447423
[14,]       4    0.9448106
[15,]       8    0.9452740
[16,]       9    0.9452740
[17,]       5    0.9453132
[18,]       6    0.9453318
[19,]       7    0.9454313
[20,]       2    0.9456334
[21,]      15    0.9471040
[22,]      13    0.9474851
[23,]      37    0.9478664
[24,]      45    0.9480616
[25,]      38    0.9482632
[26,]      41    0.9483400
[27,]      42    0.9484988
[28,]      40    0.9485809
[29,]      39    0.9486014
[30,]      14    0.9486577
[31,]      44    0.9487679
[32,]      16    0.9487907
[33,]      24    0.9640143
[34,]      27    0.9723087
[35,]      26    0.9724211
[36,]      21    0.9733141
[37,]      22    0.9739746
[38,]      25    0.9746470
[39,]      19    0.9902469
[40,]      18    0.9940690
[41,]      23    0.9944418
[42,]      20    0.9951579
[43,]      33    0.9958628
[44,]      31    0.9961788
[45,]      34    0.9963529
[46,]      17    0.9964614
[47,]      36    0.9976304
[48,]      32    0.9976309
[49,]      29    0.9976472
[50,]      30    0.9976472
[51,]      35    0.9978029
> #plot model graph
> plot(myRW1)
> #predict probabilities of each record to be an outlier:
> predict(myRW1 , top_k=4,type="prob")
        lng      lat    alt         prob
1  7.092073 50.77849  106.5 0.1324634138
2  7.092631 50.77859  107.6 0.1302387534
3  7.092630 50.77860   25.0 0.2011356260
4  7.093052 50.77878  108.5 0.1322929091
5  7.092876 50.77914  109.1 0.1310380459
6  7.092689 50.77952  109.7 0.1309916552
7  7.092515 50.77992  111.6 0.1307433530
8  7.092321 50.78035  113.3 0.1311360045
9  7.092138 50.78081  113.3 0.1311360045
10 7.114550 53.80000   62.3 0.9680517652
11 7.114410 53.70000  333.7 0.1329350468
12 7.114080 53.60000  331.5 0.1330571912
13 7.113760 53.50000  327.2 0.1256160266
14 7.113380 54.20000  325.5 0.1226887483
15 7.113050 55.30000  324.8 0.1265674597
16 7.112770 55.20000  323.5 0.1223567062
17 7.112400 56.60000  322.3 0.0033491137
18 7.112020 57.60000  320.3 0.0093215185
19 7.111610 57.70000  319.0 0.0188631822
20 7.111150 58.80000  317.8 0.0066031826
21 7.110680 59.40000  316.0 0.0611351213
22 7.110140 59.70000  315.1 0.0594862964
23 7.109630 59.00000  315.3 0.0083908456
24 7.109500 59.03000   12.0 0.0843516417
25 7.108900 59.30000  312.4 0.0578077074
26 7.108180 60.70000  311.3 0.0633645960
27 7.107470 60.80000  310.8 0.0636450873
28 7.106740 61.40000  309.4 0.4878985595
29 7.116691 50.73922   99.2 0.0003888750
30 7.116142 50.73914   99.2 0.0003888750
31 7.115559 50.73905  101.1 0.0040544677
32 7.115007 50.73899   99.5 0.0004293606
33 7.114423 50.73889  101.3 0.0048435500
34 7.113838 50.73881  105.3 0.0036199386
35 7.113272 50.73873  104.3 0.0000000000
36 7.112684 50.73865  104.4 0.0004307129
37 7.112067 50.73856  106.3 0.1246642812
38 7.111458 50.73847  108.8 0.1236735850
39 7.110869 50.73838  110.3 0.1228293756
40 7.110274 50.73831  111.7 0.1228805389
41 7.109696 50.73822  113.3 0.1234819634
42 7.109131 50.73814  112.1 0.1230852894
43 7.109231 50.73937 5000.0 1.0000000000
44 7.108546 50.73805  111.6 0.1224135479
45 7.107970 50.73798  109.8 0.1241768010
46 5.599215 43.20340  125.6 0.5710131225
47 5.597609 43.20338  130.0 0.1709401372
48 5.596588 43.20352  132.3 0.1605607509
49 5.595359 43.20370  133.4 0.1615903182
50 5.594478 43.20391  138.0 0.5655859824
51 5.593652 43.20409  143.4 0.5664001740
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict.RWBP", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.981 0.055 2.042 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
